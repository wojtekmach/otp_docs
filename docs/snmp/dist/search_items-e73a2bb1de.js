searchNodes=[{"doc":"The module snmp contains interface functions to the SNMP toolkit. Common Data Types The following data-types are used in the functions below: datetime() = {date(), time()} See calendar for more info. See Also calendar(3)","ref":"snmp.html","title":"snmp","type":"module"},{"doc":"Val = octet_string() Utility function for converting a value of type BITS to OCTET-STRING .","ref":"snmp.html#bits_to_octet_string/1","title":"snmp.bits_to_octet_string/1","type":"function"},{"doc":"LogName = string() NewSize = {MaxBytes, MaxFiles} MaxBytes = integer() MaxFiles = integer() Reason = term() Changes the log size of the Audit Trail Log. The application must be configured to use the audit trail log function. Please refer to disk_log(3) in Kernel Reference Manual for a description of how to change the log size. The change is permanent, as long as the log is not deleted. That means, the log size is remembered across reboots.","ref":"snmp.html#change_log_size/2","title":"snmp.change_log_size/2","type":"function"},{"doc":"A simple interactive configuration tool. Simple configuration files can be generated, but more complex configurations still have to be edited manually. The tool is a textual based tool that asks some questions and generates sys.config and *.conf files. Note that if the application shall support version 3, then the crypto app must be started before running this function (password generation). Note also that some of the configuration files for the agent and manager share the same names. This means that they have to be stored in different directories!","ref":"snmp.html#config/0","title":"snmp.config/0","type":"function"},{"doc":"DateAndTime = [int()] Returns current date and time as the data type DateAndTime, as specified in RFC1903. This is an OCTET STRING.","ref":"snmp.html#date_and_time/0","title":"snmp.date_and_time/0","type":"function"},{"doc":"DateAndTime = [int()] Validate = fun(Kind, Data) -&gt; boolean() Converts a DateAndTime list to a printable string, according to the DISPLAY-HINT definition in RFC2579. The validation fun, Validate , allows for a more &quot;flexible&quot; validation of the DateAndTime argument. Whenever the data is found to not follow RFC2579, the fun is called to allow a more &quot;lax&quot; validation. See the validate_date_and_time/2 function for more info on the Validate fun.","ref":"snmp.html#date_and_time_to_string/1","title":"snmp.date_and_time_to_string/1","type":"function"},{"doc":"","ref":"snmp.html#date_and_time_to_string/2","title":"snmp.date_and_time_to_string/2","type":"function"},{"doc":"DateAndTime = [int()] Converts a DateAndTime list to a printable string, according to the DISPLAY-HINT definition in RFC2579, with the extension that it also allows the values &quot;hours from UTC&quot; = 14 together with &quot;minutes from UTC&quot; = 0.","ref":"snmp.html#date_and_time_to_string2/1","title":"snmp.date_and_time_to_string2/1","type":"function"},{"doc":"DateAndTime = [int()] utc() = {{Y,Mo,D},{H,M,S}} Converts a DateAndTime list to a list of possible universal time(s). The universal time value on the same format as defined in calendar(3).","ref":"snmp.html#date_and_time_to_universal_time_dst/1","title":"snmp.date_and_time_to_universal_time_dst/1","type":"function"},{"doc":"Stop the tracer.","ref":"snmp.html#disable_trace/0","title":"snmp.disable_trace/0","type":"function"},{"doc":"Starts a dbg tracer that prints trace events to stdout (using plain io:format after a minor formatting).","ref":"snmp.html#enable_trace/0","title":"snmp.enable_trace/0","type":"function"},{"doc":"Local = {{Y,Mo,D},{H,M,S}} DateAndTime = [int()] Converts a local time value to a list of possible DateAndTime list(s). The local time value on the same format as defined in calendar(3).","ref":"snmp.html#local_time_to_date_and_time_dst/1","title":"snmp.local_time_to_date_and_time_dst/1","type":"function"},{"doc":"LogDir = string() Mibs = [MibName] MibName = string() LogName = string() LogFile = string() Start = Stop = null | datetime() | {local_time,datetime()} | {universal_time,datetime()} Cnt = {NumOK, NumERR} NumOK = non_neg_integer() NumERR = pos_integer() Reason = term() Converts an Audit Trail Log to a readable format and prints it on stdio. See log_to_txt above for more info.","ref":"snmp.html#log_to_io/4","title":"snmp.log_to_io/4","type":"function"},{"doc":"","ref":"snmp.html#log_to_io/5","title":"snmp.log_to_io/5","type":"function"},{"doc":"","ref":"snmp.html#log_to_io/6","title":"snmp.log_to_io/6","type":"function"},{"doc":"","ref":"snmp.html#log_to_io/7","title":"snmp.log_to_io/7","type":"function"},{"doc":"LogDir = string() Mibs = [MibName] OutFile = string() MibName = string() LogName = string() LogFile = string() Start = Stop = null | datetime() | {local_time,datetime()} | {universal_time,datetime()} Block = boolean() Cnt = {NumOK, NumERR} NumOK = non_neg_integer() NumERR = pos_integer() Reason = term() Converts an Audit Trail Log to a readable text file, where each item has a trailing TAB character, and any TAB character in the body of an item has been replaced by ESC TAB. The function can be used on a running system, or by copying the entire log directory and calling this function. SNMP must be running in order to provide MIB information. LogDir is the name of the directory where the audit trail log is stored. Mibs is a list of Mibs to be used. The function uses the information in the Mibs to convert for example object identifiers to their symbolic name. OutFile is the name of the generated text-file. LogName is the name of the log, LogFile is the name of the log file. Start is the start (first) date and time from which log events will be converted and Stop is the stop (last) date and time to which log events will be converted. The Block argument indicates if the log should be blocked during conversion. This could be usefull when converting large logs (when otherwise the log could wrap during conversion). Defaults to true . The format of an audit trail log text item is as follows: Tag Addr - Community [TimeStamp] Vsn PDU where Tag is request , response , report , trap or inform ; Addr is IP:Port (or comma space separated list of such); Community is the community parameter (SNMP version v1 and v2), or SecLevel:&quot;AuthEngineID&quot;:&quot;UserName&quot; (SNMP v3); TimeStamp is a date and time stamp, and Vsn is the SNMP version. PDU is a textual version of the protocol data unit. There is a new line between Vsn and PDU . If the entire log is successfully converted, the function will return ok . If one of more entries fail to convert, the function will instead return {ok, {NumOK, NumERR}} , where the counters indicate how many valid and erroneous entries where found. If instead {error, Reason} is returned, the conversion encountered a fatal error and where either never done of aborted midway.","ref":"snmp.html#log_to_txt/5","title":"snmp.log_to_txt/5","type":"function"},{"doc":"","ref":"snmp.html#log_to_txt/6","title":"snmp.log_to_txt/6","type":"function"},{"doc":"","ref":"snmp.html#log_to_txt/7","title":"snmp.log_to_txt/7","type":"function"},{"doc":"","ref":"snmp.html#log_to_txt/8","title":"snmp.log_to_txt/8","type":"function"},{"doc":"Val = bits() Utility function for converting a value of type OCTET-STRING to BITS .","ref":"snmp.html#octet_string_to_bits/1","title":"snmp.octet_string_to_bits/1","type":"function"},{"doc":"Alg = algorithm() algorithm() = md5 | sha Passwd = string() EngineID = string() Key = list() Generates a key that can be used as an authentication or privacy key using MD5 och SHA. The key is localized for EngineID.","ref":"snmp.html#passwd2localized_key/3","title":"snmp.passwd2localized_key/3","type":"function"},{"doc":"Prefix = string() | integer() Utility function(s) to produce a formatted printout of the versions info generated by the versions1 function This is the same as doing, e.g.: { ok , V } = snmp : versions1 ( ) , snmp : print_versions ( V ) .","ref":"snmp.html#print_version_info/0","title":"snmp.print_version_info/0","type":"function"},{"doc":"","ref":"snmp.html#print_version_info/1","title":"snmp.print_version_info/1","type":"function"},{"doc":"VersionInfo = [version_info()] version_info() = term() Prefix = string() | integer() Utility function to produce a formatted printout of the versions info generated by the versions1 and versions2 functions Example: { ok , V } = snmp : versions1 ( ) , snmp : print_versions ( V ) .","ref":"snmp.html#print_versions/1","title":"snmp.print_versions/1","type":"function"},{"doc":"","ref":"snmp.html#print_versions/2","title":"snmp.print_versions/2","type":"function"},{"doc":"FileName = string() mib() = #mib{} Reason = term() Read a compiled mib.","ref":"snmp.html#read_mib/1","title":"snmp.read_mib/1","type":"function"},{"doc":"Targets = module() | modules() modules() = [module()] module() = atom() This function is used to reset (disable) trace for the given module(s).","ref":"snmp.html#reset_trace/1","title":"snmp.reset_trace/1","type":"function"},{"doc":"Targets = target() | targets() target() = module() module() = atom() targets() = [target() | {target(), target_options()}] target_options() = [target_option()] target_option() = {return_trace, boolean()} | {scope, scope()} scope() = all_functions | exported_functions | function_name() | {function_name(), function_arity()} function_name() = atom() function_arity() = integer() &gt;= 0 This function is used to set up default trace on function(s) for the given module or modules. The scope of the trace will be all exported functions (both the call info and the return value). Timestamp info will also be included.","ref":"snmp.html#set_trace/1","title":"snmp.set_trace/1","type":"function"},{"doc":"Targets = target() | targets() target() = module() module() = atom() targets() = [target() | {target(), target_options()}] target_options() = [target_option()] target_option() = {return_trace, boolean()} | {scope, scope()} scope() = all_functions | exported_functions | function_name() | {function_name(), function_arity()} function_name() = atom() function_arity() = integer() &gt;= 0 Opts = disable | trace_options() trace_options() = [trace_option()] trace_option() = {timestamp, boolean()} | target_option() This function is used to set up trace on function(s) for the given module or modules. The example below sets up trace on the exported functions (default) of module snmp_generic and all functions of module snmp_generic_mnesia . With return values (which is default) and timestamps in both cases (which is also default): snmp : enable_trace ( ) , snmp : set_trace ( [ snmp_generic , { snmp_generic_mnesia , [ { scope , all_functions } ] } ] ) , . . . snmp : set_trace ( snmp_generic , disable ) , . . . snmp : disable_trace ( ) ,","ref":"snmp.html#set_trace/2","title":"snmp.set_trace/2","type":"function"},{"doc":"Type = start_type() Starts the SNMP application. See application for more info.","ref":"snmp.html#start/0","title":"snmp.start/0","type":"function"},{"doc":"","ref":"snmp.html#start/1","title":"snmp.start/1","type":"function"},{"doc":"Type = start_type() The SNMP application consists of several entities, of which the agent is one. This function starts the agent entity of the application. Note that the only way to actually start the agent in this way is to add the agent related config after starting the application (e.g it cannot be part of the normal application config; sys.config). This is done by calling: application:set_env(snmp, agent, Conf) . The default value for Type is normal .","ref":"snmp.html#start_agent/0","title":"snmp.start_agent/0","type":"function"},{"doc":"","ref":"snmp.html#start_agent/1","title":"snmp.start_agent/1","type":"function"},{"doc":"Type = start_type() The SNMP application consists of several entities, of which the manager is one. This function starts the manager entity of the application. Note that the only way to actually start the manager in this way is to add the manager related config after starting the application (e.g it cannot be part of the normal application config; sys.config). This is done by calling: application:set_env(snmp, manager, Conf) . The default value for Type is normal .","ref":"snmp.html#start_manager/0","title":"snmp.start_manager/0","type":"function"},{"doc":"","ref":"snmp.html#start_manager/1","title":"snmp.start_manager/1","type":"function"},{"doc":"UTC = {{Y,Mo,D},{H,M,S}} DateAndTime = [int()] Converts a universal time value to a DateAndTime list. The universal time value on the same format as defined in calendar(3).","ref":"snmp.html#universal_time_to_date_and_time/1","title":"snmp.universal_time_to_date_and_time/1","type":"function"},{"doc":"DateAndTime = term() Validate = fun(Kind, Data) -&gt; boolean() Checks if DateAndTime is a correct DateAndTime value, as specified in RFC2579. This function can be used in instrumentation functions to validate a DateAndTime value. The validation fun, Validate , allows for a more &quot;flexible&quot; validation of the DateAndTime argument. Whenever the data is found to not follow RFC2579, the fun is called to allow a more &quot;lax&quot; validation. The input to the validation fun looks like this: Kind Data -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- year { Year1 , Year2 } month Month day Day hour Hour minute Minute seconds Seconds deci_seconds DeciSeconds diff [ Sign , Hour , Minute ] valid_date { Year , Month , Day }","ref":"snmp.html#validate_date_and_time/1","title":"snmp.validate_date_and_time/1","type":"function"},{"doc":"","ref":"snmp.html#validate_date_and_time/2","title":"snmp.validate_date_and_time/2","type":"function"},{"doc":"Info = [info()] info() = term() Reason = term() Utility functions used to retrieve some system and application info. The difference between the two functions is in how they get the modules to check. versions1 uses the app-file and versions2 uses the function application:get_key .","ref":"snmp.html#versions1/0","title":"snmp.versions1/0","type":"function"},{"doc":"","ref":"snmp.html#versions2/0","title":"snmp.versions2/0","type":"function"},{"doc":"The module snmp_community_mib implements the instrumentation functions for the SNMP-COMMUNITY-MIB, and functions for configuring the database. The configuration files are described in the SNMP User's Manual.","ref":"snmp_community_mib.html","title":"snmp_community_mib","type":"module"},{"doc":"Idx = string() CommName = string() SecName = string() EngineId = string() CtxName = string() TransportTag = string() Ret = {ok, Key} | {error, Reason} Key = term() Reason = term() Adds a community to the agent config. Equivalent to one line in the community.conf file. With the EngineId argument it is possible to override the configured engine-id (SNMP-FRAMEWORK-MIB).","ref":"snmp_community_mib.html#add_community/5","title":"snmp_community_mib.add_community/5","type":"function"},{"doc":"","ref":"snmp_community_mib.html#add_community/6","title":"snmp_community_mib.add_community/6","type":"function"},{"doc":"ConfDir = string() This function is called from the supervisor at system start-up. Inserts all data in the configuration files into the database and destroys all old rows with StorageType volatile . The rows created from the configuration file will have StorageType nonVolatile . All snmp counters are set to zero. If an error is found in the configuration file, it is reported using the function config_err/2 of the error, report module and the function fails with reason configuration_error . ConfDir is a string which points to the directory where the configuration files are found. The configuration file read is: community.conf .","ref":"snmp_community_mib.html#configure/1","title":"snmp_community_mib.configure/1","type":"function"},{"doc":"Key = term() Ret = ok | {error, Reason} Reason = term() Delete a community from the agent config.","ref":"snmp_community_mib.html#delete_community/1","title":"snmp_community_mib.delete_community/1","type":"function"},{"doc":"ConfDir = string() Inserts all data in the configuration files into the database and destroys all old data, including the rows with StorageType nonVolatile . The rows created from the configuration file will have StorageType nonVolatile . Thus, the data in the SNMP-COMMUNITY-MIB, after this function has been called, is from the configuration files. All snmp counters are set to zero. If an error is found in the configuration file, it is reported using the function config_err/2 of the error report module, and the function fails with reason configuration_error . ConfDir is a string which points to the directory where the configuration files are found. The configuration file read is: community.conf .","ref":"snmp_community_mib.html#reconfigure/1","title":"snmp_community_mib.reconfigure/1","type":"function"},{"doc":"The module snmp_framework_mib implements instrumentation functions for the SNMP-FRAMEWORK-MIB, and functions for initializing and configuring the database. The configuration files are described in the SNMP User's Manual.","ref":"snmp_framework_mib.html","title":"snmp_framework_mib","type":"module"},{"doc":"Ctx = string() Ret = {ok, Key} | {error, Reason} Key = term() Reason = term() Adds a context to the agent config. Equivalent to one line in the context.conf file.","ref":"snmp_framework_mib.html#add_context/1","title":"snmp_framework_mib.add_context/1","type":"function"},{"doc":"ConfDir = string() This function is called from the supervisor at system start-up. Inserts all data in the configuration files into the database and destroys all old data. Thus, the data in the SNMP-FRAMEWORK-MIB, after this function has been called, is from the configuration files. All snmp counters are set to zero. If an error is found in the configuration file, it is reported using the function config_err/2 of the error report module, and the function fails with reason configuration_error . ConfDir is a string which points to the directory where the configuration files are found. The configuration file read is: context.conf .","ref":"snmp_framework_mib.html#configure/1","title":"snmp_framework_mib.configure/1","type":"function"},{"doc":"Key = term() Ret = ok | {error, Reason} Reason = term() Delete a context from the agent config.","ref":"snmp_framework_mib.html#delete_context/1","title":"snmp_framework_mib.delete_context/1","type":"function"},{"doc":"This function is called from the supervisor at system start-up. Creates the necessary objects in the database if they do not exist. It does not destroy any old values.","ref":"snmp_framework_mib.html#init/0","title":"snmp_framework_mib.init/0","type":"function"},{"doc":"The module snmp_generic contains generic functions for implementing tables (and variables) using the SNMP built-in database or Mnesia. These default functions are used if no instrumentation function is provided for a managed object in a MIB. Sometimes, it might be necessary to customize the behaviour of the default functions. For example, in some situations a trap should be sent if a row is deleted or modified, or some hardware is to be informed, when information is changed. The overall structure is shown in the following figure: + -- -- -- -- -- -- -- - + | SNMP Agent | + - - - - - - - - + | MIB | + -- -- -- -- -- -- -- - + | Association file ( associates a MIB object with | snmp_generic : table_funct | snmp_generic : variable_func ) + -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- + | snmp_generic | Support for get - next , | | RowStatus operations + -- -- -- -- -- -- -- -- -- -- -- + -- -- -- -- -- -- -- - + | snmpa_local_db | Mnesia | Database + -- -- -- -- -- -- -- + -- -- -- - + -- -- -- -- -- -- -- - + | dets | ets | | ( persistent ) | | + -- -- -- -- -- -- -- + -- -- -- - + Each function takes the argument NameDb , which is a tuple {Name, Db} , to identify which database the functions should use. Name is the symbolic name of the managed object as defined in the MIB, and Db is either volatile , persistent , or mnesia . If it is mnesia , all variables are stored in the Mnesia table snmp_variables which must be a table with two attributes (not a Mnesia SNMP table). The SNMP tables are stored in Mnesia tables with the same names as the SNMP tables. All functions assume that a Mnesia table exists with the correct name and attributes. It is the programmer's responsibility to ensure this. Specifically, if variables are stored in Mnesia, the table snmp_variables must be created by the programmer. The record definition for this table is defined in the file snmp/include/snmp_types.hrl . If an instrumentation function in the association file for a variable myVar does not have a name when compiling an MIB, the compiler generates an entry. { myVar , { snmp_generic , variable_func , [ { myVar , Db ] } } . And for a table: { myTable , { snmp_generic , table_func , [ { myTable , Db ] } } . DATA TYPES In the functions defined below, the following types are used: name_db() = {name(), db()} name() = atom() db() = volatile | persistent | mnesia row_index() = [int()] columns() = [column()] | [{column(), value()}] column() = int() value() = term() row_index() Denotes the last part of the OID which specifies the index of the row in the table (see RFC1212, 4.1.6 for more information about INDEX). columns() Is a list of column numbers in the case of a get operation, and a list of column numbers and values in the case of a set operation. Example The following example shows an implementation of a table which is stored in Mnesia, but with some checks performed at set-request operations. myTable_func ( new , NameDb ) -&gt; % pass unchanged snmp_generic : table_func ( new , NameDb ) . myTable_func ( delete , NameDb ) -&gt; % pass unchanged snmp_generic : table_func ( delete , NameDb ) . %% change row myTable_func ( is_set_ok , RowIndex , Cols , NameDb ) -&gt; case snmp_generic : table_func ( is_set_ok , RowIndex , Cols , NameDb ) of { noError , 0 } -&gt; myApplication : is_set_ok ( RowIndex , Cols ) ; Err -&gt; Err end ; myTable_func ( set , RowIndex , Cols , NameDb ) -&gt; case snmp_generic : table_func ( set , RowIndex , Cols , NameDb ) , { noError , 0 } -&gt; % Now the row is updated, tell the application myApplication : update ( RowIndex , Cols ) ; Err -&gt; Err end ; myTable_func ( Op , RowIndex , Cols , NameDb ) -&gt; % pass unchanged snmp_generic : table_func ( Op , RowIndex , Cols , NameDb ) . The .funcs file would look like: { myTable , { myModule , myTable_func , [ { myTable , mnesia } ] } } .","ref":"snmp_generic.html","title":"snmp_generic","type":"module"},{"doc":"Name = name() Gets the index types of Name This function can be used in instrumentation functions to retrieve the index types part of the table info.","ref":"snmp_generic.html#get_index_types/1","title":"snmp_generic.get_index_types/1","type":"function"},{"doc":"Name = name() NameDb = name_db() Cols = columns() StatusVal = term() Gets the value of the status column from Cols . This function can be used in instrumentation functions for is_set_ok , undo or set to check if the status column of a table is modified.","ref":"snmp_generic.html#get_status_col/2","title":"snmp_generic.get_status_col/2","type":"function"},{"doc":"Name = name() Item = table_item() | all table_item() = nbr_of_cols | defvals | status_col | not_accessible | index_types | first_accessible | first_own_index table_info_result() = Value | [{table_item(), Value}] Value = term() Get a specific table info item or, if Item has the value all , a two tuple list (property list) is instead returned with all the items and their respctive values of the given table. This function can be used in instrumentation functions to retrieve a given part of the table info.","ref":"snmp_generic.html#get_table_info/2","title":"snmp_generic.get_table_info/2","type":"function"},{"doc":"Op1 = new | delete Op2 = get | next | is_set_ok | set | undo NameDb = name_db() RowIndex = row_index() Cols = columns() Ret = term() This is the default instrumentation function for tables. The new function creates the table if it does not exist, but only if the database is the SNMP internal db. The delete function does not delete the table from the database since unloading an MIB does not necessarily mean that the table should be destroyed. The is_set_ok function checks that a row which is to be modified or deleted exists, and that a row which is to be created does not exist. The undo function does nothing. The set function checks if it has enough information to make the row change its status from notReady to notInService (when a row has been been set to createAndWait ). If a row is set to createAndWait , columns without a value are set to noinit . If Mnesia is used, the set functionality is handled within a transaction. If it is possible for a manager to create or delete rows in the table, there must be a RowStatus column for is_set_ok , set and undo to work properly. The function returns according to the specification of an instrumentation function.","ref":"snmp_generic.html#table_func/2","title":"snmp_generic.table_func/2","type":"function"},{"doc":"","ref":"snmp_generic.html#table_func/4","title":"snmp_generic.table_func/4","type":"function"},{"doc":"NameDb = name_db() RowIndex = row_index() Cols = columns() Values = [value() | noinit] Returns a list with values for all columns in Cols . If a column is undefined, its value is noinit .","ref":"snmp_generic.html#table_get_elements/3","title":"snmp_generic.table_get_elements/3","type":"function"},{"doc":"NameDb = name_db() RestOid = [int()] RowIndex = row_index() Finds the indices of the next row in the table. RestOid does not have to specify an existing row.","ref":"snmp_generic.html#table_next/2","title":"snmp_generic.table_next/2","type":"function"},{"doc":"NameDb = name_db() RowIndex = row_index() Checks if a row in a table exists.","ref":"snmp_generic.html#table_row_exists/2","title":"snmp_generic.table_row_exists/2","type":"function"},{"doc":"NameDb = name_db() RowIndex = row_index() Cols = columns() Sets the elements in Cols to the row specified by RowIndex . No checks are performed on the new values. If the Mnesia database is used, this function calls mnesia:write to store the values. This means that this function must be called from within a transaction ( mnesia:transaction/1 or mnesia:dirty/1 ).","ref":"snmp_generic.html#table_set_elements/3","title":"snmp_generic.table_set_elements/3","type":"function"},{"doc":"Op1 = new | delete | get Op2 = is_set_ok | set | undo NameDb = name_db() Val = value() Ret = term() This is the default instrumentation function for variables. The new function creates a new variable in the database with a default value as defined in the MIB, or a zero value (depending on the type). The delete function does not delete the variable from the database. The function returns according to the specification of an instrumentation function.","ref":"snmp_generic.html#variable_func/2","title":"snmp_generic.variable_func/2","type":"function"},{"doc":"","ref":"snmp_generic.html#variable_func/3","title":"snmp_generic.variable_func/3","type":"function"},{"doc":"NameDb = name_db() Value = value() Gets the value of a variable.","ref":"snmp_generic.html#variable_get/1","title":"snmp_generic.variable_get/1","type":"function"},{"doc":"NameDb = name_db() NewVal = value() Sets a new value to a variable. The variable is created if it does not exist. No checks are made on the type of the new value. Returns false if the NameDb argument is incorrectly specified, otherwise true .","ref":"snmp_generic.html#variable_set/2","title":"snmp_generic.variable_set/2","type":"function"},{"doc":"The module snmp_index implements an Abstract Data Type (ADT) for an SNMP index structure for SNMP tables. It is implemented as an ets table of the ordered_set data-type, which means that all operations are O(log n). In the table, the key is an ASN.1 OBJECT IDENTIFIER. This index is used to separate the implementation of the SNMP ordering from the actual implementation of the table. The SNMP ordering, that is implementation of GET NEXT, is implemented in this module. For example, suppose there is an SNMP table, which is best implemented in Erlang as one process per SNMP table row. Suppose further that the INDEX in the SNMP table is an OCTET STRING. The index structure would be created as follows: snmp_index:new(string) For each new process we create, we insert an item in an snmp_index structure: new_process(Name, SnmpIndex) -&gt; Pid = start_process(), NewSnmpIndex = snmp_index:insert(SnmpIndex, Name, Pid), &lt;...&gt; With this structure, we can now map an OBJECT IDENTIFIER in e.g. a GET NEXT request, to the correct process: get_next_pid(Oid, SnmpIndex) -&gt; {ok, {_, Pid}} = snmp_index:get_next(SnmpIndex, Oid), Pid. Common data types The following data types are used in the functions below: index() oid() = [byte()] key_types = type_spec() | {type_spec(), type_spec(), ...} type_spec() = fix_string | string | integer key() = key_spec() | {key_spec(), key_spec(), ...} key_spec() = string() | integer() The index() type denotes an snmp index structure. The oid() type is used to represent an ASN.1 OBJECT IDENTIFIER. The key_types() type is used when creating the index structure, and the key() type is used when inserting and deleting items from the structure. The key_types() type defines the types of the SNMP INDEX columns for the table. If the table has one single INDEX column, this type should be a single atom, but if the table has multiple INDEX columns, it should be a tuple with atoms. If the INDEX column is of type INTEGER, or derived from INTEGER, the corresponding type should be integer . If it is a variable length type (e.g. OBJECT IDENTIFIER, OCTET STRING), the corresponding type should be string . Finally, if the type is of variable length, but with a fixed size restriction (e.g. IpAddress), the corresponding type should be fix_string . For example, if the SNMP table has two INDEX columns, the first one an OCTET STRING with size 2, and the second one an OBJECT IDENTIFER, the corresponding key_types parameter would be {fix_string, string} . The key() type correlates to the key_types() type. If the key_types() is a single atom, the corresponding key() is a single type as well, but if the key_types() is a tuple, key must be a tuple of the same size. In the example above, valid keys could be {&quot;hi&quot;, &quot;mom&quot;} and {&quot;no&quot;, &quot;thanks&quot;} , whereas &quot;hi&quot; , {&quot;hi&quot;, 42} and {&quot;hello&quot;, &quot;there&quot;} would be invalid. All API functions that update the index return a NewIndex term. This is for backward compatibility with a previous implementation that used a B+ tree written purely in Erlang for the index. The NewIndex return value can now be ignored. The return value is now the unchanged table identifier for the ets table. The implementation using ets tables introduces a semantic incompatibility with older implementations. In those older implementations, using pure Erlang terms, the index was garbage collected like any other Erlang term and did not have to be deleted when discarded. An ets table is deleted only when the process creating it explicitly deletes it or when the creating process terminates. A new interface delete/1 is now added to handle the case when a process wants to discard an index table (i.e. to build a completely new). Any application using transient snmp indexes has to be modified to handle this. As an snmp adaption usually keeps the index for the whole of the systems lifetime, this is rarely a problem.","ref":"snmp_index.html","title":"snmp_index","type":"module"},{"doc":"Index = NewIndex = index() Key = key() Deletes a complete index structure (i.e. the ets table holding the index). The index can no longer be referenced after this call. See the warning note above.","ref":"snmp_index.html#delete/1","title":"snmp_index.delete/1","type":"function"},{"doc":"Index = NewIndex = index() Key = key() Deletes a key and its value from the index structure. Returns a new structure.","ref":"snmp_index.html#delete/2","title":"snmp_index.delete/2","type":"function"},{"doc":"Index = index() KeyOid = oid() Value = term() Gets the item with key KeyOid . Could be used from within an SNMP instrumentation function.","ref":"snmp_index.html#get/2","title":"snmp_index.get/2","type":"function"},{"doc":"Index = index() KeyOid = oid() Value = term() Gets the last item in the index structure.","ref":"snmp_index.html#get_last/1","title":"snmp_index.get_last/1","type":"function"},{"doc":"Index = index() KeyOid = NextKeyOid = oid() Value = term() Gets the next item in the SNMP lexicographic ordering, after KeyOid in the index structure. KeyOid does not have to refer to an existing item in the index.","ref":"snmp_index.html#get_next/2","title":"snmp_index.get_next/2","type":"function"},{"doc":"Index = NewIndex = index() Key = key() Value = term() Inserts a new key value tuple into the index structure. If an item with the same key already exists, the new Value overwrites the old value.","ref":"snmp_index.html#insert/3","title":"snmp_index.insert/3","type":"function"},{"doc":"Index = index() Key = key() KeyOid = NextKeyOid = oid() Converts Key to an OBJECT IDENTIFIER.","ref":"snmp_index.html#key_to_oid/2","title":"snmp_index.key_to_oid/2","type":"function"},{"doc":"KeyTypes = key_types() Index = index() Creates a new snmp index structure. The key_types() type is described above.","ref":"snmp_index.html#new/1","title":"snmp_index.new/1","type":"function"},{"doc":"The module snmp_notification_mib implements the instrumentation functions for the SNMP-NOTIFICATION-MIB, and functions for configuring the database. The configuration files are described in the SNMP User's Manual.","ref":"snmp_notification_mib.html","title":"snmp_notification_mib","type":"module"},{"doc":"Name = string() Tag = string() Type = trap | inform Ret = {ok, Key} | {error, Reason} Key = term() Reason = term() Adds a notify definition to the agent config. Equivalent to one line in the notify.conf file.","ref":"snmp_notification_mib.html#add_notify/3","title":"snmp_notification_mib.add_notify/3","type":"function"},{"doc":"ConfDir = string() This function is called from the supervisor at system start-up. Inserts all data in the configuration files into the database and destroys all old rows with StorageType volatile . The rows created from the configuration file will have StorageType nonVolatile . If an error is found in the configuration file, it is reported using the function config_err/2 of the error report module, and the function fails with reason configuration_error . ConfDir is a string which points to the directory where the configuration files are found. The configuration file read is: notify.conf .","ref":"snmp_notification_mib.html#configure/1","title":"snmp_notification_mib.configure/1","type":"function"},{"doc":"Key = term() Ret = ok | {error, Reason} Reason = term() Delete a notify definition from the agent config.","ref":"snmp_notification_mib.html#delete_notify/1","title":"snmp_notification_mib.delete_notify/1","type":"function"},{"doc":"ConfDir = string() Inserts all data in the configuration files into the database and destroys all old data, including the rows with StorageType nonVolatile . The rows created from the configuration file will have StorageType nonVolatile . Thus, the data in the SNMP-NOTIFICATION-MIB, after this function has been called, is from the configuration files. If an error is found in the configuration file, it is reported using the function config_err/2 of the error report module, and the function fails with reason configuration_error . ConfDir is a string which points to the directory where the configuration files are found. The configuration file read is: notify.conf .","ref":"snmp_notification_mib.html#reconfigure/1","title":"snmp_notification_mib.reconfigure/1","type":"function"},{"doc":"RFC1157, RFC1905 and/or RFC2272 should be studied carefully before using this module, snmp_pdus . The module snmp_pdus contains functions for encoding and decoding of SNMP protocol data units (PDUs). In short, this module converts a list of bytes to Erlang record representations and vice versa. The record definitions can be found in the file snmp/include/snmp_types.hrl . If snmpv3 is used, the module that includes snmp_types.hrl must define the constant SNMP_USE_V3 before the header file is included. Example: - define ( SNMP_USE_V3 , true ) . - include_lib ( &quot;snmp/include/snmp_types.hrl&quot; ) . Encoding and decoding must be done explicitly when writing your own Net if process.","ref":"snmp_pdus.html","title":"snmp_pdus","type":"module"},{"doc":"Message = #message Decodes a list of bytes into an SNMP Message. Note, if there is a v3 message, the msgSecurityParameters are not decoded. They must be explicitly decoded by a call to a security model specific decoding function, e.g. dec_usm_security_parameters/1 . Also note, if the scopedPDU is encrypted, the OCTET STRING encoded encryptedPDU will be present in the data field.","ref":"snmp_pdus.html#dec_message/1","title":"snmp_pdus.dec_message/1","type":"function"},{"doc":"Message = #message Decodes a list of bytes into an SNMP Message, but does not decode the data part of the Message. That means, data is still a list of bytes, normally an encoded PDU (v1 and V2) or an encoded and possibly encrypted scopedPDU (v3).","ref":"snmp_pdus.html#dec_message_only/1","title":"snmp_pdus.dec_message_only/1","type":"function"},{"doc":"Pdu = #pdu Decodes a list of bytes into an SNMP Pdu.","ref":"snmp_pdus.html#dec_pdu/1","title":"snmp_pdus.dec_pdu/1","type":"function"},{"doc":"ScopedPdu = #scoped_pdu Decodes a list of bytes into an SNMP ScopedPdu.","ref":"snmp_pdus.html#dec_scoped_pdu/1","title":"snmp_pdus.dec_scoped_pdu/1","type":"function"},{"doc":"ScopedPduData = #scoped_pdu | EncryptedPDU EncryptedPDU = [byte()] Decodes a list of bytes into either a scoped pdu record, or - if the scoped pdu was encrypted - to a list of bytes.","ref":"snmp_pdus.html#dec_scoped_pdu_data/1","title":"snmp_pdus.dec_scoped_pdu_data/1","type":"function"},{"doc":"UsmSecParams = #usmSecurityParameters Decodes a list of bytes into an SNMP UsmSecurityParameters","ref":"snmp_pdus.html#dec_usm_security_parameters/1","title":"snmp_pdus.dec_usm_security_parameters/1","type":"function"},{"doc":"Message = #message Encodes a message record to a list of bytes.","ref":"snmp_pdus.html#enc_message/1","title":"snmp_pdus.enc_message/1","type":"function"},{"doc":"Message = #message Message is a record where the data field is assumed to be encoded (a list of bytes). If there is a v1 or v2 message, the data field is an encoded PDU , and if there is a v3 message, data is an encoded and possibly encrypted scopedPDU .","ref":"snmp_pdus.html#enc_message_only/1","title":"snmp_pdus.enc_message_only/1","type":"function"},{"doc":"Pdu = #pdu Encodes an SNMP Pdu into a list of bytes.","ref":"snmp_pdus.html#enc_pdu/1","title":"snmp_pdus.enc_pdu/1","type":"function"},{"doc":"ScopedPdu = #scoped_pdu Encodes an SNMP ScopedPdu into a list of bytes, which can be encrypted, and after encryption, encoded with a call to enc_encrypted_scoped_pdu/1 ; or it can be used as the data field in a message record, which then can be encoded with enc_message_only/1 .","ref":"snmp_pdus.html#enc_scoped_pdu/1","title":"snmp_pdus.enc_scoped_pdu/1","type":"function"},{"doc":"UsmSecParams = #usmSecurityParameters Encodes SNMP UsmSecurityParameters into a list of bytes.","ref":"snmp_pdus.html#enc_usm_security_parameters/1","title":"snmp_pdus.enc_usm_security_parameters/1","type":"function"},{"doc":"The module snmp_standard_mib implements the instrumentation functions for the STANDARD-MIB and SNMPv2-MIB, and functions for configuring the database. The configuration files are described in the SNMP User's Manual.","ref":"snmp_standard_mib.html","title":"snmp_standard_mib","type":"module"},{"doc":"ConfDir = string() This function is called from the supervisor at system start-up. Inserts all data in the configuration files into the database and destroys all old rows with StorageType volatile . The rows created from the configuration file will have StorageType nonVolatile . All snmp counters are set to zero. If an error is found in the configuration file, it is reported using the function config_err/2 of the error report module, and the function fails with the reason configuration_error . ConfDir is a string which points to the directory where the configuration files are found. The configuration file read is: standard.conf .","ref":"snmp_standard_mib.html#configure/1","title":"snmp_standard_mib.configure/1","type":"function"},{"doc":"Name = atom() N = integer() Increments a variable in the MIB with N , or one if N is not specified.","ref":"snmp_standard_mib.html#inc/1","title":"snmp_standard_mib.inc/1","type":"function"},{"doc":"","ref":"snmp_standard_mib.html#inc/2","title":"snmp_standard_mib.inc/2","type":"function"},{"doc":"ConfDir = string() Inserts all data in the configuration files into the database and destroys all old data, including the rows with StorageType nonVolatile . The rows created from the configuration file will have StorageType nonVolatile . Thus, the data in the SNMP-STANDARD-MIB and SNMPv2-MIB, after this function has been called, is from the configuration files. All snmp counters are set to zero. If an error is found in the configuration file, it is reported using the function config_err/2 of the error report module, and the function fails with the reason configuration_error . ConfDir is a string which points to the directory where the configuration files are found. The configuration file read is: standard.conf .","ref":"snmp_standard_mib.html#reconfigure/1","title":"snmp_standard_mib.reconfigure/1","type":"function"},{"doc":"Resets all snmp counters to 0.","ref":"snmp_standard_mib.html#reset/0","title":"snmp_standard_mib.reset/0","type":"function"},{"doc":"Time = int() Gets the system up time in hundredth of a second.","ref":"snmp_standard_mib.html#sys_up_time/0","title":"snmp_standard_mib.sys_up_time/0","type":"function"},{"doc":"The module snmp_target_mib implements the instrumentation functions for the SNMP-TARGET-MIB, and functions for configuring the database. The configuration files are described in the SNMP User's Manual. Legacy API functions add_addr/10 that does not specify transport domain, and add_addr/11 that has got separate IpAddr and PortNumber arguments still work as before for backwards compatibility reasons. DATA TYPES See the data types in snmpa_conf .","ref":"snmp_target_mib.html","title":"snmp_target_mib","type":"module"},{"doc":"Name = string() Domain = transportDomain() Addr = transportAddress() % Default port is 162 Timeout = integer() Retry = integer() TagList = string() ParamsName = string() EngineId = string() TMask = transportAddressMask() % Depends on Domain MMS = integer() Ret = {ok, Key} | {error, Reason} Key = term() Reason = term() Adds a target address definition to the agent config. Equivalent to one line in the target_addr.conf file.","ref":"snmp_target_mib.html#add_addr/10","title":"snmp_target_mib.add_addr/10","type":"function"},{"doc":"Name = string() MPModel = v1 | v2c | v3 SecModel = v1 | v2c | usm SecName = string() SecLevel = noAuthNoPriv | authNoPriv | authPriv Ret = {ok, Key} | {error, Reason} Key = term() Reason = term() Adds a target parameter definition to the agent config. Equivalent to one line in the target_params.conf file.","ref":"snmp_target_mib.html#add_params/5","title":"snmp_target_mib.add_params/5","type":"function"},{"doc":"ConfDir = string() This function is called from the supervisor at system start-up. Inserts all data in the configuration files into the database and destroys all old rows with StorageType volatile . The rows created from the configuration file will have StorageType nonVolatile . All snmp counters are set to zero. If an error is found in the configuration file, it is reported using the function config_err/2 of the error report module, and the function fails with the reason configuration_error . ConfDir is a string which points to the directory where the configuration files are found. The configuration files read are: target_addr.conf and target_params.conf .","ref":"snmp_target_mib.html#configure/1","title":"snmp_target_mib.configure/1","type":"function"},{"doc":"Key = term() Ret = ok | {error, Reason} Reason = term() Delete a target address definition from the agent config.","ref":"snmp_target_mib.html#delete_addr/1","title":"snmp_target_mib.delete_addr/1","type":"function"},{"doc":"Key = term() Ret = ok | {error, Reason} Reason = term() Delete a target parameter definition from the agent config.","ref":"snmp_target_mib.html#delete_params/1","title":"snmp_target_mib.delete_params/1","type":"function"},{"doc":"ConfDir = string() Inserts all data in the configuration files into the database and destroys all old data, including the rows with StorageType nonVolatile . The rows created from the configuration file will have StorageType nonVolatile . Thus, the data in the SNMP-TARGET-MIB, after this function has been called, is the data from the configuration files. All snmp counters are set to zero. If an error is found in the configuration file, it is reported using the function config_err/2 of the , and the function fails with the reason configuration_error . ConfDir is a string which points to the directory where the configuration files are found. The configuration files read are: target_addr.conf and target_params.conf .","ref":"snmp_target_mib.html#reconfigure/1","title":"snmp_target_mib.reconfigure/1","type":"function"},{"doc":"TargetAddrName = string() EngineId = string() Changes the engine id for a target in the snmpTargetAddrTable . If notifications are sent as Inform requests to a target, its engine id must be set.","ref":"snmp_target_mib.html#set_target_engine_id/2","title":"snmp_target_mib.set_target_engine_id/2","type":"function"},{"doc":"The module snmp_user_based_sm_mib implements the instrumentation functions for the SNMP-USER-BASED-SM-MIB, and functions for configuring the database. The configuration files are described in the SNMP User's Manual.","ref":"snmp_user_based_sm_mib.html","title":"snmp_user_based_sm_mib","type":"module"},{"doc":"EngineID = string() Name = string() SecName = string() Clone = zeroDotZero | [integer()] AuthP = usmNoAuthProtocol | usmHMACMD5AuthProtocol | usmHMACSHAAuthProtocol AuthKeyC = string() OwnAuthKeyC = string() PrivP = usmNoPrivProtocol | usmDESPrivProtocol PrivKeyC = string() OwnPrivKeyC = string() Public = string() AuthKey = string() PrivKey = string() Ret = {ok, Key} | {error, Reason} Key = term() Reason = term() Adds a USM security data (user) to the agent config. Equivalent to one line in the usm.conf file.","ref":"snmp_user_based_sm_mib.html#add_user/13","title":"snmp_user_based_sm_mib.add_user/13","type":"function"},{"doc":"ConfDir = string() This function is called from the supervisor at system start-up. Inserts all data in the configuration files into the database and destroys all old rows with StorageType volatile . The rows created from the configuration file will have StorageType nonVolatile . All snmp counters are set to zero. If an error is found in the configuration file, it is reported using the function config_err/2 of the error report module, and the function fails with the reason configuration_error . ConfDir is a string which points to the directory where the configuration files are found. The configuration file read is: usm.conf .","ref":"snmp_user_based_sm_mib.html#configure/1","title":"snmp_user_based_sm_mib.configure/1","type":"function"},{"doc":"Key = term() Ret = ok | {error, Reason} Reason = term() Delete a USM security data (user) from the agent config.","ref":"snmp_user_based_sm_mib.html#delete_user/1","title":"snmp_user_based_sm_mib.delete_user/1","type":"function"},{"doc":"ConfDir = string() Inserts all data in the configuration files into the database and destroys all old data, including the rows with StorageType nonVolatile . The rows created from the configuration file will have StorageType nonVolatile . Thus, the data in the SNMP-USER-BASED-SM-MIB, after this function has been called, is the data from the configuration files. All snmp counters are set to zero. If an error is found in the configuration file, it is reported using the function config_err/2 of the error report module, and the function fails with the reason configuration_error . ConfDir is a string which points to the directory where the configuration files are found. The configuration file read is: usm.conf .","ref":"snmp_user_based_sm_mib.html#reconfigure/1","title":"snmp_user_based_sm_mib.reconfigure/1","type":"function"},{"doc":"The module snmp_view_based_acm_mib implements the instrumentation functions for the SNMP-VIEW-BASED-ACM-MIB, and functions for configuring the database. The configuration files are described in the SNMP User's Manual.","ref":"snmp_view_based_acm_mib.html","title":"snmp_view_based_acm_mib","type":"module"},{"doc":"GroupName = string() Prefix = string() SecModel = v1 | v2c | usm SecLevel = string() Match = prefix | exact RV = string() WV = string() NV = string() Ret = {ok, Key} | {error, Reason} Key = term() Reason = term() Adds a access definition to the agent config. Equivalent to one vacmAccess-line in the vacm.conf file.","ref":"snmp_view_based_acm_mib.html#add_access/8","title":"snmp_view_based_acm_mib.add_access/8","type":"function"},{"doc":"SecModel = v1 | v2c | usm SecName = string() GroupName = string() Ret = {ok, Key} | {error, Reason} Key = term() Reason = term() Adds a security to group definition to the agent config. Equivalent to one vacmSecurityToGroup-line in the vacm.conf file.","ref":"snmp_view_based_acm_mib.html#add_sec2group/3","title":"snmp_view_based_acm_mib.add_sec2group/3","type":"function"},{"doc":"ViewIndex = integer() SubTree = oid() Status = included | excluded Mask = null | [integer()], where all values are either 0 or 1 Ret = {ok, Key} | {error, Reason} Key = term() Reason = term() Adds a view tree family definition to the agent config. Equivalent to one vacmViewTreeFamily-line in the vacm.conf file.","ref":"snmp_view_based_acm_mib.html#add_view_tree_fam/4","title":"snmp_view_based_acm_mib.add_view_tree_fam/4","type":"function"},{"doc":"ConfDir = string() This function is called from the supervisor at system start-up. Inserts all data in the configuration files into the database and destroys all old rows with StorageType volatile . The rows created from the configuration file will have StorageType nonVolatile . All snmp counters are set to zero. If an error is found in the configuration file, it is reported using the function config_err/2 of the error report module, and the function fails with the reason configuration_error . ConfDir is a string which points to the directory where the configuration files are found. The configuration file read is: vacm.conf .","ref":"snmp_view_based_acm_mib.html#configure/1","title":"snmp_view_based_acm_mib.configure/1","type":"function"},{"doc":"Key = term() Ret = ok | {error, Reason} Reason = term() Delete a access definition from the agent config.","ref":"snmp_view_based_acm_mib.html#delete_access/1","title":"snmp_view_based_acm_mib.delete_access/1","type":"function"},{"doc":"Key = term() Ret = ok | {error, Reason} Reason = term() Delete a security to group definition from the agent config.","ref":"snmp_view_based_acm_mib.html#delete_sec2group/1","title":"snmp_view_based_acm_mib.delete_sec2group/1","type":"function"},{"doc":"Key = term() Ret = ok | {error, Reason} Reason = term() Delete a view tree family definition from the agent config.","ref":"snmp_view_based_acm_mib.html#delete_view_tree_fam/1","title":"snmp_view_based_acm_mib.delete_view_tree_fam/1","type":"function"},{"doc":"ConfDir = string() Inserts all data in the configuration files into the database and destroys all old data, including the rows with StorageType nonVolatile . The rows created from the configuration file will have StorageType nonVolatile . Thus, the data in the SNMP-VIEW-BASED-ACM-MIB, after this function has been called, is the data from the configuration files. All snmp counters are set to zero. If an error is found in the configuration file, it is reported using the function config_err/2 of the error report module, and the function fails with the reason configuration_error . ConfDir is a string which points to the directory where the configuration files are found. The configuration file read is: vacm.conf .","ref":"snmp_view_based_acm_mib.html#reconfigure/1","title":"snmp_view_based_acm_mib.reconfigure/1","type":"function"},{"doc":"The module snmpa contains interface functions to the SNMP agent. DATA TYPES oid() = [byte()] atl_type() = read | write | read_write notification_delivery_info() = #snmpa_notification_delivery_info{} The oid() type is used to represent an ASN.1 OBJECT IDENTIFIER. The record snmpa_notification_delivery_info contains the following fields: tag = term() A user defined identity representing this notification send operation. mod = module() A module implementing the snmpa_notification_delivery_info_receiver behaviour. The info functions of this module will be called at various stages of delivery. extra = term() This is any extra info the user wants to have supplied when the functions in the callback module is called. See Also calendar(3), erlc(1)","ref":"snmpa.html","title":"snmpa","type":"module"},{"doc":"SysORID = oid() SysORDescr = string() SysORIndex = integer() This function can be used to add an AGENT-CAPABILITY statement to the sysORTable in the agent. The table is defined in the SNMPv2-MIB.","ref":"snmpa.html#add_agent_caps/2","title":"snmpa.add_agent_caps/2","type":"function"},{"doc":"BackupDir = string() Agent = pid() | atom() Reason = backup_in_progress | term() Backup persistent/permanent data handled by the agent (such as local-db, mib-data and vacm). Data stored by mnesia is not handled. BackupDir cannot be identical to DbDir. Simultaneous backup calls are not allowed. That is, two different processes cannot simultaneously successfully call this function. One of them will be first, and succeed. The second will fail with the error reason backup_in_progress .","ref":"snmpa.html#backup/1","title":"snmpa.backup/1","type":"function"},{"doc":"","ref":"snmpa.html#backup/2","title":"snmpa.backup/2","type":"function"},{"doc":"NewSize = {MaxBytes, MaxFiles} MaxBytes = integer() MaxFiles = integer() Reason = term() Changes the log size of the Audit Trail Log. The application must be configured to use the audit trail log function. Please refer to disk_log(3) in Kernel Reference Manual for a description of how to change the log size. The change is permanent, as long as the log is not deleted. That means, the log size is remembered across reboots.","ref":"snmpa.html#change_log_size/1","title":"snmpa.change_log_size/1","type":"function"},{"doc":"OldConfig = list() AgentConfig = list() This off-line utility function can be used to convert the old snmp application config (pre snmp-4.0) to the new snmp agent config (as of snmp-4.0). For information about the old config ( OldConfig ) see the OTP R9C documentation. For information about the current agent config ( AgentConfig ), see the Configuring the application chapter of the SNMP user's guide.","ref":"snmpa.html#convert_config/1","title":"snmpa.convert_config/1","type":"function"},{"doc":"RequestId = integer() Context = string() Community = string() Address = term() Get the request-id, context, community and address of the request currently being processed by the agent. Note that these functions is intended to be called by the instrumentation functions and only if they are executed in the context of the agent process (e.g. it does not work if called from a spawned process).","ref":"snmpa.html#current_address/0","title":"snmpa.current_address/0","type":"function"},{"doc":"","ref":"snmpa.html#current_community/0","title":"snmpa.current_community/0","type":"function"},{"doc":"","ref":"snmpa.html#current_context/0","title":"snmpa.current_context/0","type":"function"},{"doc":"","ref":"snmpa.html#current_request_id/0","title":"snmpa.current_request_id/0","type":"function"},{"doc":"SysORIndex = integer() This function can be used to delete an AGENT-CAPABILITY statement to the sysORTable in the agent. This table is defined in the SNMPv2-MIB.","ref":"snmpa.html#del_agent_caps/1","title":"snmpa.del_agent_caps/1","type":"function"},{"doc":"Agent = pid() | atom() Disable the mib server cache.","ref":"snmpa.html#disable_mibs_cache/0","title":"snmpa.disable_mibs_cache/0","type":"function"},{"doc":"","ref":"snmpa.html#disable_mibs_cache/1","title":"snmpa.disable_mibs_cache/1","type":"function"},{"doc":"Agent = pid() | atom() Disable automatic gc of the mib server cache.","ref":"snmpa.html#disable_mibs_cache_autogc/0","title":"snmpa.disable_mibs_cache_autogc/0","type":"function"},{"doc":"","ref":"snmpa.html#disable_mibs_cache_autogc/1","title":"snmpa.disable_mibs_cache_autogc/1","type":"function"},{"doc":"TargetName = string() Notification = atom() ContextName = string() (defaults to &quot;&quot;) Varbinds = varbinds() varbinds() = [varbind()] DiscoHandler = snmpa_discovery_handler() ExtraInfo = term() snmpa_discovery_handler() = Module implementing the snmpa_discovery_handler behaviour ManagerEngineID = string() varbind() = {Variable, Value} | {Column, RowIndex, Value} | {OID, Value} Variable = atom() Column = atom() OID = oid() Value = term() RowIndex = [int()] Reason = term() Initiate the discovery process with the manager identified by TargetName using the notification Notification . This function is synchronous, which means that it will return when the discovery process has been completed or failed. The DiscoHandler module is used during the discovery process. See discovery handler for more info. The ExtraInfo argument is passed on to the callback functions of the DiscoHandler . If we are not at security-level noAuthNoPriv , this could be complicated, since the agent will then continue with stage 2, before which the usm-related updates must be done. The default discovery handler will require additional actions by the caller and the discovery will not work if the security-level is higher then noAuthNoPriv .","ref":"snmpa.html#discovery/2","title":"snmpa.discovery/2","type":"function"},{"doc":"","ref":"snmpa.html#discovery/3","title":"snmpa.discovery/3","type":"function"},{"doc":"","ref":"snmpa.html#discovery/4","title":"snmpa.discovery/4","type":"function"},{"doc":"","ref":"snmpa.html#discovery/5","title":"snmpa.discovery/5","type":"function"},{"doc":"","ref":"snmpa.html#discovery/6","title":"snmpa.discovery/6","type":"function"},{"doc":"Agent = pid() | atom() Enable the mib server cache.","ref":"snmpa.html#enable_mibs_cache/0","title":"snmpa.enable_mibs_cache/0","type":"function"},{"doc":"","ref":"snmpa.html#enable_mibs_cache/1","title":"snmpa.enable_mibs_cache/1","type":"function"},{"doc":"Agent = pid() | atom() Enable automatic gc of the mib server cache.","ref":"snmpa.html#enable_mibs_cache_autogc/0","title":"snmpa.enable_mibs_cache_autogc/0","type":"function"},{"doc":"","ref":"snmpa.html#enable_mibs_cache_autogc/1","title":"snmpa.enable_mibs_cache_autogc/1","type":"function"},{"doc":"Db = term() Name = atom() Enum = atom() Int = int() Converts the symbolic value Enum to the corresponding integer of the enumerated object or type Name in a MIB. The MIB must be loaded. false is returned if the object or type is not defined in any loaded MIB, or if it does not define the symbolic value as enumerated. Db is a reference to the symbolic store database (retrieved by a call to get_symbolic_store_db/0 ).","ref":"snmpa.html#enum_to_int/2","title":"snmpa.enum_to_int/2","type":"function"},{"doc":"","ref":"snmpa.html#enum_to_int/3","title":"snmpa.enum_to_int/3","type":"function"},{"doc":"Agent = pid() | atom() Age = integer() &gt; 0 GcLimit = integer() &gt; 0 | infinity NumElementsGCed = integer() &gt;= 0 Reason = term() Perform mib server cache gc. Manually performs a mib server cache gc. This can be done regardless of the value of the autogc option. The NumElementsGCed value indicates how many elements where actually removed from the cache.","ref":"snmpa.html#gc_mibs_cache/0","title":"snmpa.gc_mibs_cache/0","type":"function"},{"doc":"","ref":"snmpa.html#gc_mibs_cache/1","title":"snmpa.gc_mibs_cache/1","type":"function"},{"doc":"","ref":"snmpa.html#gc_mibs_cache/2","title":"snmpa.gc_mibs_cache/2","type":"function"},{"doc":"","ref":"snmpa.html#gc_mibs_cache/3","title":"snmpa.gc_mibs_cache/3","type":"function"},{"doc":"Agent = pid() | atom() Vars = [oid()] Context = string() Values = [term()] Reason = {atom(), oid()} Performs a GET operation on the agent. All loaded MIB objects are visible in this operation. The agent calls the corresponding instrumentation functions just as if it was a GET request coming from a manager. Note that the request specific parameters (such as current_request_id ) are not accessible for the instrumentation functions if this function is used.","ref":"snmpa.html#get/2","title":"snmpa.get/2","type":"function"},{"doc":"","ref":"snmpa.html#get/3","title":"snmpa.get/3","type":"function"},{"doc":"SysORIndex = integer() SysORId = oid() SysORDescr = string() SysORUpTime = integer() Returns all AGENT-CAPABILITY statements in the sysORTable in the agent. This table is defined in the SNMPv2-MIB.","ref":"snmpa.html#get_agent_caps/0","title":"snmpa.get_agent_caps/0","type":"function"},{"doc":"Agent = pid() | atom() Vars = [oid()] Context = string() Values = [{oid(), term()}] Reason = {atom(), oid()} Performs a GET-NEXT operation on the agent. All loaded MIB objects are visible in this operation. The agent calls the corresponding instrumentation functions just as if it was a GET request coming from a manager. Note that the request specific parameters (such as snmpa:current_request_id/0 are not accessible for the instrumentation functions if this function is used.","ref":"snmpa.html#get_next/2","title":"snmpa.get_next/2","type":"function"},{"doc":"","ref":"snmpa.html#get_next/3","title":"snmpa.get_next/3","type":"function"},{"doc":"Agent = pid() | atom() Returns a list (a dictionary) containing information about the agent. Information includes loaded MIBs, registered sub-agents, some information about the memory allocation.","ref":"snmpa.html#info/0","title":"snmpa.info/0","type":"function"},{"doc":"","ref":"snmpa.html#info/1","title":"snmpa.info/1","type":"function"},{"doc":"Db = term() Name = atom() Int = int() Enum = atom() Converts the integer Int to the corresponding symbolic value of the enumerated object or type Name in a MIB. The MIB must be loaded. false is returned if the object or type is not defined in any loaded MIB, or if it does not define the symbolic value as enumerated. Db is a reference to the symbolic store database (retrieved by a call to get_symbolic_store_db/0 ).","ref":"snmpa.html#int_to_enum/2","title":"snmpa.int_to_enum/2","type":"function"},{"doc":"","ref":"snmpa.html#int_to_enum/3","title":"snmpa.int_to_enum/3","type":"function"},{"doc":"Agent = pid() | atom() Invalidate the mib server cache. The entire contents of the cache will be deleted.","ref":"snmpa.html#invalidate_mibs_cache/0","title":"snmpa.invalidate_mibs_cache/0","type":"function"},{"doc":"","ref":"snmpa.html#invalidate_mibs_cache/1","title":"snmpa.invalidate_mibs_cache/1","type":"function"},{"doc":"Agent = pid() | atom() MibName = string() Reason = already_loaded | term() Load a single Mib into an agent. The MibName is the name of the Mib, including the path to where the compiled mib is found. For example: Dir = code:priv_dir(my_app) ++ &quot;/mibs/&quot;, snmpa:load_mib(snmp_master_agent, Dir ++ &quot;MY-MIB&quot;).","ref":"snmpa.html#load_mib/1","title":"snmpa.load_mib/1","type":"function"},{"doc":"","ref":"snmpa.html#load_mib/2","title":"snmpa.load_mib/2","type":"function"},{"doc":"Agent = pid() | atom() Mibs = [MibName] Force = boolean() MibName = string() Reason = {'load aborted at', MibName, InternalReason} InternalReason = already_loaded | term() Load Mibs into an agent. If the agent cannot load all MIBs (the default value of the Force argument is false ), it will indicate where loading was aborted. The MibName is the name of the Mib, including the path to where the compiled mib is found. For example, Dir = code:priv_dir(my_app) ++ &quot;/mibs/&quot;, snmpa:load_mibs(snmp_master_agent, [Dir ++ &quot;MY-MIB&quot;]). If Force = true then the agent will continue attempting to load each mib even after failing to load a previous mib. Use with care.","ref":"snmpa.html#load_mibs/1","title":"snmpa.load_mibs/1","type":"function"},{"doc":"","ref":"snmpa.html#load_mibs/2","title":"snmpa.load_mibs/2","type":"function"},{"doc":"","ref":"snmpa.html#load_mibs/3","title":"snmpa.load_mibs/3","type":"function"},{"doc":"LogDir = string() Mibs = [MibName] MibName = string() Block = boolean() LogName = string() LogFile = string() Start = Stop = null | calendar:datetime() | {local_time, calendar:datetime()} | {universal_time, calendar:datetime()} Cnt = {NumOK, NumERR} NumOK = non_neg_integer() NumERR = pos_integer() Reason = disk_log_open_error() | file_open_error() | term() disk_log_open_error() = {LogName, term()} file_open_error() = {OutFile, term()} Converts an Audit Trail Log to a readable format and prints it on stdio. LogName defaults to &quot;snmpa_log&quot;. LogFile defaults to &quot;snmpa.log&quot;. The Block option indicates if the log should be blocked during conversion. This could be usefull when converting large logs (when otherwise the log could wrap during conversion). Defaults to true . See snmp:log_to_io for more info.","ref":"snmpa.html#log_to_io/1","title":"snmpa.log_to_io/1","type":"function"},{"doc":"","ref":"snmpa.html#log_to_io/2","title":"snmpa.log_to_io/2","type":"function"},{"doc":"","ref":"snmpa.html#log_to_io/3","title":"snmpa.log_to_io/3","type":"function"},{"doc":"","ref":"snmpa.html#log_to_io/4","title":"snmpa.log_to_io/4","type":"function"},{"doc":"","ref":"snmpa.html#log_to_io/5","title":"snmpa.log_to_io/5","type":"function"},{"doc":"","ref":"snmpa.html#log_to_io/6","title":"snmpa.log_to_io/6","type":"function"},{"doc":"","ref":"snmpa.html#log_to_io/7","title":"snmpa.log_to_io/7","type":"function"},{"doc":"LogDir = string() Mibs = [MibName] MibName = string() Block = boolean() OutFile = string() LogName = string() LogFile = string() Start = Stop = null | calendar:datetime() | {local_time, calendar:datetime()} | {universal_time, calendar:datetime()} Cnt = {NumOK, NumERR} NumOK = non_neg_integer() NumERR = pos_integer() Reason = disk_log_open_error() | file_open_error() | term() disk_log_open_error() = {LogName, term()} file_open_error() = {OutFile, term()} Converts an Audit Trail Log to a readable text file. OutFile defaults to &quot;./snmpa_log.txt&quot;. LogName defaults to &quot;snmpa_log&quot;. LogFile defaults to &quot;snmpa.log&quot;. The Block option indicates if the log should be blocked during conversion. This could be usefull when converting large logs (when otherwise the log could wrap during conversion). Defaults to true . See snmp:log_to_txt for more info.","ref":"snmpa.html#log_to_txt/1","title":"snmpa.log_to_txt/1","type":"function"},{"doc":"","ref":"snmpa.html#log_to_txt/2","title":"snmpa.log_to_txt/2","type":"function"},{"doc":"","ref":"snmpa.html#log_to_txt/3","title":"snmpa.log_to_txt/3","type":"function"},{"doc":"","ref":"snmpa.html#log_to_txt/4","title":"snmpa.log_to_txt/4","type":"function"},{"doc":"","ref":"snmpa.html#log_to_txt/5","title":"snmpa.log_to_txt/5","type":"function"},{"doc":"","ref":"snmpa.html#log_to_txt/6","title":"snmpa.log_to_txt/6","type":"function"},{"doc":"","ref":"snmpa.html#log_to_txt/7","title":"snmpa.log_to_txt/7","type":"function"},{"doc":"","ref":"snmpa.html#log_to_txt/8","title":"snmpa.log_to_txt/8","type":"function"},{"doc":"Agent = pid() | atom() Oid = oid() Me = #me{} Reason = term() Finds the mib entry corresponding to the Oid . If it is a variable, the Oid must be &lt;Oid for var&gt;.0 and if it is a table, Oid must be &lt;table&gt;.&lt;entry&gt;.&lt;col&gt;.&lt;any&gt;","ref":"snmpa.html#me_of/1","title":"snmpa.me_of/1","type":"function"},{"doc":"","ref":"snmpa.html#me_of/2","title":"snmpa.me_of/2","type":"function"},{"doc":"Agent = pid() | atom() Oid = oid() MibName = atom() Reason = term() Finds the mib corresponding to the Oid . If it is a variable, the Oid must be &lt;Oid for var&gt;.0 and if it is a table, Oid must be &lt;table&gt;.&lt;entry&gt;.&lt;col&gt;.&lt;any&gt;","ref":"snmpa.html#mib_of/1","title":"snmpa.mib_of/1","type":"function"},{"doc":"","ref":"snmpa.html#mib_of/2","title":"snmpa.mib_of/2","type":"function"},{"doc":"Db = term() Name = atom() Looks up the OBJECT IDENTIFIER of a MIB object, given the symbolic name. Note, the OBJECT IDENTIFIER is given for the object, not for an instance. false is returned if the object is not defined in any loaded MIB. Db is a reference to the symbolic store database (retrieved by a call to get_symbolic_store_db/0 ).","ref":"snmpa.html#name_to_oid/1","title":"snmpa.name_to_oid/1","type":"function"},{"doc":"","ref":"snmpa.html#name_to_oid/2","title":"snmpa.name_to_oid/2","type":"function"},{"doc":"Db = term() OID = oid() Name = atom() Looks up the symbolic name of a MIB object, given OBJECT IDENTIFIER. false is returned if the object is not defined in any loaded MIB. Db is a reference to the symbolic store database (retrieved by a call to get_symbolic_store_db/0 ).","ref":"snmpa.html#oid_to_name/1","title":"snmpa.oid_to_name/1","type":"function"},{"doc":"","ref":"snmpa.html#oid_to_name/2","title":"snmpa.oid_to_name/2","type":"function"},{"doc":"Prints the content of all the (snmp) tables and variables for all mibs handled by the snmp agent.","ref":"snmpa.html#print_mib_info/0","title":"snmpa.print_mib_info/0","type":"function"},{"doc":"Prints the content of all the (snmp) tables for all mibs handled by the snmp agent.","ref":"snmpa.html#print_mib_tables/0","title":"snmpa.print_mib_tables/0","type":"function"},{"doc":"Prints the content of all the (snmp) variables for all mibs handled by the snmp agent.","ref":"snmpa.html#print_mib_variables/0","title":"snmpa.print_mib_variables/0","type":"function"},{"doc":"Agent = pid() | atom() Id = filter_id() filter_id() = term() Mod = atom() Data = term() Where = filter_position() Reason = term() filter_position() = first | last | {insert_before, filter_id()} | {insert_after, filter_id()} Registers a notification filter. Mod is a module implementing the snmpa_notification_filter behaviour. Data will be passed on to the filter when calling the functions of the behaviour.","ref":"snmpa.html#register_notification_filter/3","title":"snmpa.register_notification_filter/3","type":"function"},{"doc":"","ref":"snmpa.html#register_notification_filter/4","title":"snmpa.register_notification_filter/4","type":"function"},{"doc":"","ref":"snmpa.html#register_notification_filter/5","title":"snmpa.register_notification_filter/5","type":"function"},{"doc":"Agent = pid() | atom() SubTreeOid = oid() SubAgent = pid() Registers a sub-agent under a sub-tree of another agent. It is easy to make mistakes when registering sub-agents and this activity should be done carefully. For example, a strange behaviour would result from the following configuration: snmp_agent : register_subagent ( MAPid , [ 1 , 2 , 3 , 4 ] , SA1 ) , snmp_agent : register_subagent ( SA1 , [ 1 , 2 , 3 ] , SA2 ) . SA2 will not get requests starting with object identifier [1,2,3] since SA1 does not.","ref":"snmpa.html#register_subagent/3","title":"snmpa.register_subagent/3","type":"function"},{"doc":"Agent = pid() | atom() Restart the set worker process of a multi-threaded agent. This is a utility function, that can be useful when e.g. debugging instrumentation functions.","ref":"snmpa.html#restart_set_worker/0","title":"snmpa.restart_set_worker/0","type":"function"},{"doc":"","ref":"snmpa.html#restart_set_worker/1","title":"snmpa.restart_set_worker/1","type":"function"},{"doc":"Agent = pid() | atom() Restart the worker process of a multi-threaded agent. This is a utility function, that can be useful when e.g. debugging instrumentation functions.","ref":"snmpa.html#restart_worker/0","title":"snmpa.restart_worker/0","type":"function"},{"doc":"","ref":"snmpa.html#restart_worker/1","title":"snmpa.restart_worker/1","type":"function"},{"doc":"Agent = pid() | atom() Notification = atom() Receiver = no_receiver | {Tag, Recv} | notification_delivery_info() Tag = term() Recv = receiver() receiver() = pid() | atom() | {Mod, Func, Args} Mod = atom() Func = atom() Args = list() NotifyName = string() ContextName = string() Varbinds = varbinds() varbinds() = [varbind()] varbind() = {Variable, Value} | {Column, RowIndex, Value} | {OID, Value} Variable = atom() Column = atom() OID = oid() Value = term() RowIndex = [int()] LocalEngineID = string() Sends the notification Notification to the management targets defined for NotifyName in the snmpNotifyTable in SNMP-NOTIFICATION-MIB from the specified context. If no NotifyName is specified (or if it is &quot;&quot; ), the notification is sent to all management targets ( Addresses below). If no ContextName is specified, the default &quot;&quot; context is used. The parameter Receiver specifies where information about delivery of Inform-Requests should be sent. The agent sends Inform-Requests and waits for acknowledgments from the managers. Receiver can have three values: no_receiver - No information is delivered. notification_delivery_info() - The information is delivered via a function call according to this data. See the DATA TYPES section above for details. {Tag, Recv} - The information is delivered either via messages or via a function call according to the value of Recv . If Receiver has the value {Tag, Recv} , the delivery is done according to Recv : pid() | atom() - The info will be delivered in the following messages: {snmp_targets, Tag, Addresses} This inform the user which target addresses the notification was sent to. {snmp_notification, Tag, {got_response, Address}} This informs the user that this target address acknowledged the notification. {snmp_notification, Tag, {no_response, Address}} This informs the user that this target address did not acknowledge notification. The notification is sent as an Inform-Request to each target address in Addresses and if there are no targets for which an Inform-Request is sent, Addresses is the empty list [] . The receiver will first be sent the snmp_targets message, and then for each address in Addresses list, one of the two snmp_notification messages. {Mod, Func, Args} - The info will be delivered via the function call: Mod:Func([Msg | Args]) where Msg has the same content and purpose as the messages descrived above. Address is a management target address and Addresses is a list of management target addresses. They are defined as followes: Addresses = [ address ( ) ] Address = address ( ) address ( ) = v1_address ( ) | v3_address ( ) v1_address ( ) = { TDomain , TAddress } v3_address ( ) = { { TDomain , TAddress } , V3MsgData } TDomain = tdoamin ( ) TAddress = taddress ( ) tdomain ( ) = The oid of snmpUDPDomain This is the only supported transport domain . taddress ( ) = [ A1 , A2 , A3 , A4 , P1 , P3 ] The 4 first bytes makes up the IP - address and the last 2 , the UDP - port number . V3MsgData = v3_msg_data ( ) v3_msg_data ( ) = term ( ) If Receiver is a notification_delivery_info() record, then the information about the notification delivery will be delivered to the receiver via the callback functions defined by the snmpa_notification_delivery_info_receiver behaviour according to the content of the notification_delivery_info() record. The optional argument Varbinds defines values for the objects in the notification. If no value is given for an object, the Agent performs a get-operation to retrieve the value. Varbinds is a list of Varbind , where each Varbind is one of: {Variable, Value} , where Variable is the symbolic name of a scalar variable referred to in the notification specification. {Column, RowIndex, Value} , where Column is the symbolic name of a column variable. RowIndex is a list of indices for the specified element. If this is the case, the OBJECT IDENTIFIER sent in the notification is the RowIndex appended to the OBJECT IDENTIFIER for the table column. This is the OBJECT IDENTIFIER which specifies the element. {OID, Value} , where OID is the OBJECT IDENTIFIER for an instance of an object, scalar variable, or column variable. For example, to specify that sysLocation should have the value &quot;upstairs&quot; in the notification, we could use one of: {sysLocation, &quot;upstairs&quot;} or {[1,3,6,1,2,1,1,6,0], &quot;upstairs&quot;} or {?sysLocation_instance, &quot;upstairs&quot;} (provided that the generated .hrl file is included) If a variable in the notification is a table element, the RowIndex for the element must be given in the Varbinds list. In this case, the OBJECT IDENTIFIER sent in the notification is the OBJECT IDENTIFIER that identifies this element. This OBJECT IDENTIFIER could be used in a get operation later. This function is asynchronous, and does not return any information. If an error occurs, user_err/2 of the error report module is called and the notification is discarded. Note that the use of the LocalEngineID argument is only intended for special cases, if the agent is to &quot;emulate&quot; multiple EngineIDs! By default, the agent uses the value of SnmpEngineID (see SNMP-FRAMEWORK-MIB). ExtraInfo is not normally used in any way by the agent. It is intended to be passed along to the net-if process, which is a component that a user can implement themself. The users own net-if may then make use of ExtraInfo. The net-if provided with this application does not process ExtraInfo. There is one exception. Any tuple containing the atom snmpa_default_notification_extra_info will, in this context, be considered belonging to this application, and may be processed by the agent.","ref":"snmpa.html#send_notification/3","title":"snmpa.send_notification/3","type":"function"},{"doc":"","ref":"snmpa.html#send_notification/4","title":"snmpa.send_notification/4","type":"function"},{"doc":"","ref":"snmpa.html#send_notification/5","title":"snmpa.send_notification/5","type":"function"},{"doc":"","ref":"snmpa.html#send_notification/6","title":"snmpa.send_notification/6","type":"function"},{"doc":"","ref":"snmpa.html#send_notification/7","title":"snmpa.send_notification/7","type":"function"},{"doc":"Agent = pid() | atom() Notification = atom() SendOpts = [send_option()] send_option() = {receiver, receiver()} | {name, notify_name()} | {context, context_name()} | {varbinds, varbinds()} | {local_engine_id, string()} | {extra, extra_info()} receiver() = no_receiver | {tag(), tag_receiver()} | notification_delivery_info() tag() = term(() tag_receiver() = pid() | registered_name() | {Mod, Func, Args} registered_name() = atom() Mod = atom() Func = atom() Args = list() notify_name() = string() context_name() = string() varbinds() = [varbind()] varbind() = {variable(), value()} | {{process_oid(), variable()}, value()} | {column(), row_index(), value()} | variable() = aliasname() | oid() aliasname() = atom() process_oid() = keep (default) | truncate value() = term() column() = atom() row_index() = [int()] extra_info() = term() Send the notification Notification to the management targets defined for notify-name ( name ) in the snmpNotifyTable in SNMP-NOTIFICATION-MIB from the specified context . If no name is specified (or if it is &quot;&quot; ), the notification is sent to all management targets. If no context is specified, the default context, &quot;&quot; , is used. The send option receiver specifies where information about delivery of Inform-Requests should be sent. The agent sends Inform-Requests and waits for acknowledgments from the management targets. The receiver can have three values: no_receiver - No information is delivered. notification_delivery_info() - The information is delivered via a function call according to this data. See the DATA TYPES section above for details. {tag(), tag_receiver()} - The information is delivered either via messages or via a function call according to the value of tag_receiver() . Delivery is done differently depending on the value of tag_receiver() : pid() | registered_name() - The info will be delivered in the following messages: {snmp_targets, tag(), Addresses} This informs the user which target addresses the notification was sent to. {snmp_notification, tag(), {got_response, Address}} This informs the user that this target address acknowledged the notification. {snmp_notification, tag(), {no_response, Address}} This informs the user that this target address did not acknowledge the notification. The notification is sent as an Inform-Request to each target address in Addresses and if there are no targets for which an Inform-Request is sent, Addresses is the empty list [] . The tag_receiver() will first be sent the snmp_targets message, and then for each address in Addresses list, one of the two snmp_notification messages. {Mod, Func, Args} - The info will be delivered via the function call: Mod:Func([Msg | Args]) where Msg has the same content and purpose as the messages descrived above. The 'process oid' &quot;tag&quot; that can be provided with the variable name / oids is indended to be used for oid post processing. The value ' keep ', which is the default, leaves the oid as is. The value ' truncate ', will cause the oid to be &quot;truncated&quot;. That is, any trailing &quot;.0&quot; will be removed. There is a way to exclude a varbind from the notification. In the normal varbinds list, providing the special value '$ignore-oid' (instead of a normal value) will exclude this varbind from the notification. A define for this has been added to the snmp_types.hrl include file, NOTIFICATION_IGNORE_VB_VALUE . The extra info is not normally interpreted by the agent, instead it is passed through to the net-if process. It is up to the implementor of that process to make use of this data. The version of net-if provided by this application makes no use of this data, with one exception: Any tuple containing the atom snmpa_default_notification_extra_info may be used by the agent and is therefor reserved . See the net-if incomming messages for sending a trap and notification for more info.","ref":"snmpa.html#send_notification2/3","title":"snmpa.send_notification2/3","type":"function"},{"doc":"NewType = OldType = atl_type() Agent = pid() | atom() Reason = term() Changes the run-time Audit Trail log type. Note that this has no effect on the application configuration as defined by configuration files, so a node restart will revert the config to whatever is in those files. This function is primarily useful in testing/debugging scenarios.","ref":"snmpa.html#set_log_type/1","title":"snmpa.set_log_type/1","type":"function"},{"doc":"","ref":"snmpa.html#set_log_type/2","title":"snmpa.set_log_type/2","type":"function"},{"doc":"NewLimit = OldLimit = infinity | integer() &gt;= 0 Agent = pid() | atom() Reason = term() Changes the request limit. Note that this has no effect on the application configuration as defined by configuration files, so a node restart will revert the config to whatever is in those files. This function is primarily useful in load regulation scenarios.","ref":"snmpa.html#set_request_limit/1","title":"snmpa.set_request_limit/1","type":"function"},{"doc":"","ref":"snmpa.html#set_request_limit/2","title":"snmpa.set_request_limit/2","type":"function"},{"doc":"Agent = pid() | atom() MibName = string() Reason = not_loaded | term() Unload a single Mib from an agent.","ref":"snmpa.html#unload_mib/1","title":"snmpa.unload_mib/1","type":"function"},{"doc":"","ref":"snmpa.html#unload_mib/2","title":"snmpa.unload_mib/2","type":"function"},{"doc":"Agent = pid() | atom() Mibs = [MibName] Force = boolean() MibName = string() Reason = {'unload aborted at', MibName, InternalReason} InternalReason = not_loaded | term() Unload Mibs from an agent. If it cannot unload all MIBs (the default value of the Force argument is false ), it will indicate where unloading was aborted. If Force = true then the agent will continue attempting to unload each mib even after failing to unload a previous mib. Use with care.","ref":"snmpa.html#unload_mibs/1","title":"snmpa.unload_mibs/1","type":"function"},{"doc":"","ref":"snmpa.html#unload_mibs/2","title":"snmpa.unload_mibs/2","type":"function"},{"doc":"","ref":"snmpa.html#unload_mibs/3","title":"snmpa.unload_mibs/3","type":"function"},{"doc":"Agent = pid() | atom() Id = filter_id() filter_id() = term() Unregister a notification filter.","ref":"snmpa.html#unregister_notification_filter/1","title":"snmpa.unregister_notification_filter/1","type":"function"},{"doc":"","ref":"snmpa.html#unregister_notification_filter/2","title":"snmpa.unregister_notification_filter/2","type":"function"},{"doc":"Agent = pid() | atom() SubTreeOidorPid = oid() | pid() Unregister a sub-agent. If the second argument is a pid, then that sub-agent will be unregistered from all trees in Agent .","ref":"snmpa.html#unregister_subagent/2","title":"snmpa.unregister_subagent/2","type":"function"},{"doc":"Agent = pid() | atom() NewAge = integer() &gt; 0 Reason = term() Change the mib server cache age property.","ref":"snmpa.html#update_mibs_cache_age/1","title":"snmpa.update_mibs_cache_age/1","type":"function"},{"doc":"","ref":"snmpa.html#update_mibs_cache_age/2","title":"snmpa.update_mibs_cache_age/2","type":"function"},{"doc":"Agent = pid() | atom() NewGcLimit = integer() &gt; 0 | infinity Reason = term() Change the mib server cache gclimit property.","ref":"snmpa.html#update_mibs_cache_gclimit/1","title":"snmpa.update_mibs_cache_gclimit/1","type":"function"},{"doc":"","ref":"snmpa.html#update_mibs_cache_gclimit/2","title":"snmpa.update_mibs_cache_gclimit/2","type":"function"},{"doc":"Ref = pid() | sub_agents | master_agent | net_if | mib_server | symbolic_store | note_store | local_db Verbosity = verbosity() | {subagents, verbosity()} verbosity() = silence | info | log | debug | trace Sets verbosity for the designated process. For the lowest verbosity silence , nothing is printed. The higher the verbosity, the more is printed.","ref":"snmpa.html#verbosity/2","title":"snmpa.verbosity/2","type":"function"},{"doc":"Agent = pid() | atom() MibName = atom() MibFile = string() Reason = term() Get the full path to the (compiled) mib-file.","ref":"snmpa.html#whereis_mib/1","title":"snmpa.whereis_mib/1","type":"function"},{"doc":"","ref":"snmpa.html#whereis_mib/2","title":"snmpa.whereis_mib/2","type":"function"},{"doc":"Result = [atom()] Retrieve all alias-names known to the agent.","ref":"snmpa.html#which_aliasnames/0","title":"snmpa.which_aliasnames/0","type":"function"},{"doc":"Agent = pid() | atom() Mibs = [{MibName, MibFile}] MibName = atom() MibFile = string() Retrieve the list of all the mibs loaded into this agent. Default is the master agent.","ref":"snmpa.html#which_mibs/0","title":"snmpa.which_mibs/0","type":"function"},{"doc":"","ref":"snmpa.html#which_mibs/1","title":"snmpa.which_mibs/1","type":"function"},{"doc":"Agent = pid() | atom() Retreive the size of the mib server cache.","ref":"snmpa.html#which_mibs_cache_size/0","title":"snmpa.which_mibs_cache_size/0","type":"function"},{"doc":"","ref":"snmpa.html#which_mibs_cache_size/1","title":"snmpa.which_mibs_cache_size/1","type":"function"},{"doc":"Agent = pid() | atom() Filters = [filter_id()] filter_id() = term() List all notification filters in an agent.","ref":"snmpa.html#which_notification_filter/0","title":"snmpa.which_notification_filter/0","type":"function"},{"doc":"","ref":"snmpa.html#which_notification_filter/1","title":"snmpa.which_notification_filter/1","type":"function"},{"doc":"Result = [{Name, MibName, Info}] Name = atom() MibName = atom() Info = term() Retrieve all notifications (and traps) known to the agent.","ref":"snmpa.html#which_notifications/0","title":"snmpa.which_notifications/0","type":"function"},{"doc":"Result = [atom()] Retrieve all tables known to the agent.","ref":"snmpa.html#which_tables/0","title":"snmpa.which_tables/0","type":"function"},{"doc":"Result = [{TDomain, TAddress} | {TDomain, TAddress, Kind}] TDomain = transportDomainUdpIpv4 | transportDomainUdpIpv6 TAddress = {IpAddr, IpPort} IpAddr = inet:ip_address() IpPort = pos_integer() Kind = req_responder | trap_sender Retrieve all configured transports.","ref":"snmpa.html#which_transports/0","title":"snmpa.which_transports/0","type":"function"},{"doc":"Result = [atom()] Retrieve all variables known to the agent.","ref":"snmpa.html#which_variables/0","title":"snmpa.which_variables/0","type":"function"},{"doc":"The module snmpa_conf contains various utility functions to used for manipulating (write/append/read) the config files of the SNMP agent. DATA TYPES transportDomain() = transportDomainUdpIpv4 | transportDomainUdpIpv6 transportAddress() = transportAddressIPv4() | transportAddressIPv6() transportAddressWithPort() = transportAddressIPv4WithPort() | transportAddressIPv6WithPort() transportAddressWithoutPort() = transportAddressIPv4WithoutPort() | transportAddressIPv6WithoutPort() transportAddressIPv4() = transportAddressIPv4WithPort() | transportAddressIPv4WithoutPort() transportAddressIPv4WithPort = {transportAddressIPv4WithoutPort(), inet:port_number()} | [byte() x 4, byte() x 2] transportAddressIPv4WithoutPort = inet:ip4_address() | [byte() x 4] transportAddressIPv6() = transportAddressIPv6WithPort() | transportAddressIPv6WithoutPort() transportAddressIPv6WithPort = {transportAddressIPv6WithoutPort(), inet:port_number()} | [word() x 8, inet:port_number()] | [word() x 8, byte() x 2] | {byte() x 16, byte() x 2] transportAddressIPv6WithoutPort = inet:ip6_address() | [word() x 8] | [byte() x 16] transportAddressMask() = [] | transportAddressWithPort() byte() = 0..255 word() = 0..65535 For inet:ip4_address() , inet:ip6_address() and inet:port_number() , see also inet:ip_address()","ref":"snmpa_conf.html","title":"snmpa_conf","type":"module"},{"doc":"Tag = intAgentTransports | intAgentUDPPort | intAgentMaxPacketSize | snmpEngineMaxMessageSize | snmpEngineID Val = term() agent_entry() = term() Create an entry for the agent config file, agent.conf . The type of Val depends on the value of Tag , see Agent Information for more info.","ref":"snmpa_conf.html#agent_entry/2","title":"snmpa_conf.agent_entry/2","type":"function"},{"doc":"Dir = string() Conf = [agent_entry()] Append the config to the current agent config file. Dir is the path to the directory where to store the config file. See Agent Information for more info.","ref":"snmpa_conf.html#append_agent_config/2","title":"snmpa_conf.append_agent_config/2","type":"function"},{"doc":"Dir = string() Conf = [community_entry()] Append the community config to the current agent community config file. Dir is the path to the directory where to store the config file. See Community for more info.","ref":"snmpa_conf.html#append_community_config/2","title":"snmpa_conf.append_community_config/2","type":"function"},{"doc":"Dir = string() Conf = [context_entry()] Append the context config to the current agent context config file. Dir is the path to the directory where to store the config file. See Contexts for more info.","ref":"snmpa_conf.html#append_context_config/2","title":"snmpa_conf.append_context_config/2","type":"function"},{"doc":"Dir = string() Conf = [notify_entry()] Append the notify config to the current agent notify config file. Dir is the path to the directory where to store the config file. See Notify Definitions for more info.","ref":"snmpa_conf.html#append_notify_config/2","title":"snmpa_conf.append_notify_config/2","type":"function"},{"doc":"Dir = string() Conf = [standard_entry()] Append the standard config to the current agent standard config file. Dir is the path to the directory where to store the config file. See System Information for more info.","ref":"snmpa_conf.html#append_standard_config/2","title":"snmpa_conf.append_standard_config/2","type":"function"},{"doc":"Dir = string() Conf = [target_addr_entry()] Append the target_addr config to the current agent target_addr config file. Dir is the path to the directory where to store the config file. See Target Address Definitions for more info.","ref":"snmpa_conf.html#append_target_addr_config/2","title":"snmpa_conf.append_target_addr_config/2","type":"function"},{"doc":"Dir = string() Conf = [target_params_entry()] Append the target_params config to the current agent target_params config file. Dir is the path to the directory where to store the config file. See Target Parameters Definitions for more info.","ref":"snmpa_conf.html#append_target_params_config/2","title":"snmpa_conf.append_target_params_config/2","type":"function"},{"doc":"Dir = string() Conf = [usm_entry()] Append the usm config to the current agent vacm config file. Dir is the path to the directory where to store the config file. See Security data for USM for more info.","ref":"snmpa_conf.html#append_usm_config/2","title":"snmpa_conf.append_usm_config/2","type":"function"},{"doc":"Dir = string() Conf = [vacm_entry()] Append the vacm config to the current agent vacm config file. Dir is the path to the directory where to store the config file. See MIB Views for VACM for more info.","ref":"snmpa_conf.html#append_vacm_config/2","title":"snmpa_conf.append_vacm_config/2","type":"function"},{"doc":"CommunityIndex = string() CommunityName = string() SecName = string() CtxName = string() TransportTag = string() community_entry() = term() Create an entry for the agent community config file, community.conf . CommunityIndex must be a non-empty string. community_entry(&quot;public&quot;) translates to the following call: community_entry(CommunityIndex, CommunityIndex, &quot;initial&quot;, &quot;&quot;, &quot;&quot;) . community_entry(&quot;all-rights&quot;) translates to the following call: community_entry(CommunityIndex, CommunityIndex, CommunityIndex, &quot;&quot;, &quot;&quot;) . See Community for more info.","ref":"snmpa_conf.html#community_entry/1","title":"snmpa_conf.community_entry/1","type":"function"},{"doc":"","ref":"snmpa_conf.html#community_entry/5","title":"snmpa_conf.community_entry/5","type":"function"},{"doc":"Context = string() context_entry() = term() Create an entry for the agent context config file, context.conf . See Contexts for more info.","ref":"snmpa_conf.html#context_entry/1","title":"snmpa_conf.context_entry/1","type":"function"},{"doc":"Name = string() Tag = string() Type = trap | inform community_entry() = term() Create an entry for the agent notify config file, notify.conf . Name must be a non-empty string. See Notify Definitions for more info.","ref":"snmpa_conf.html#notify_entry/3","title":"snmpa_conf.notify_entry/3","type":"function"},{"doc":"Dir = string() Conf = [agent_entry()] Read the current agent config file. Dir is the path to the directory where to store the config file. See Agent Information for more info.","ref":"snmpa_conf.html#read_agent_config/1","title":"snmpa_conf.read_agent_config/1","type":"function"},{"doc":"Dir = string() Conf = [community_entry()] Read the current agent community config file. Dir is the path to the directory where to store the config file. See Communities for more info.","ref":"snmpa_conf.html#read_community_config/1","title":"snmpa_conf.read_community_config/1","type":"function"},{"doc":"Dir = string() Conf = [context_entry()] Read the current agent context config file. Dir is the path to the directory where to store the config file. See Contexts for more info.","ref":"snmpa_conf.html#read_context_config/1","title":"snmpa_conf.read_context_config/1","type":"function"},{"doc":"Dir = string() Conf = [community_entry()] Read the current agent notify config file. Dir is the path to the directory where to store the config file. See Notify Definitions for more info.","ref":"snmpa_conf.html#read_notify_config/1","title":"snmpa_conf.read_notify_config/1","type":"function"},{"doc":"Dir = string() Conf = [standard_entry()] Read the current agent standard config file. Dir is the path to the directory where to store the config file. See System Information for more info.","ref":"snmpa_conf.html#read_standard_config/1","title":"snmpa_conf.read_standard_config/1","type":"function"},{"doc":"Dir = string() Conf = [target_addr_entry()] Read the current agent target_addr config file. Dir is the path to the directory where to store the config file. See Target Address Definitions for more info.","ref":"snmpa_conf.html#read_target_addr_config/1","title":"snmpa_conf.read_target_addr_config/1","type":"function"},{"doc":"Dir = string() Conf = [target_params_entry()] Read the current agent target_params config file. Dir is the path to the directory where to store the config file. See Target Parameters Definitions for more info.","ref":"snmpa_conf.html#read_target_params_config/1","title":"snmpa_conf.read_target_params_config/1","type":"function"},{"doc":"Dir = string() Conf = [usm_entry()] Read the current agent usm config file. Dir is the path to the directory where to store the config file. See Security data for USM for more info.","ref":"snmpa_conf.html#read_usm_config/1","title":"snmpa_conf.read_usm_config/1","type":"function"},{"doc":"Dir = string() Conf = [vacm_entry()] Read the current agent vacm config file. Dir is the path to the directory where to store the config file. See MIB Views for VACM for more info.","ref":"snmpa_conf.html#read_vacm_config/1","title":"snmpa_conf.read_vacm_config/1","type":"function"},{"doc":"Tag = sysDescr | sysObjectID | sysContact | sysName | sysLocation | sysServices | snmpEnableAuthenTraps Val = term() standard_entry() = term() Create an entry for the agent standard config file, standard.conf . The type of Val depends on the value of Tag , see System Information for more info.","ref":"snmpa_conf.html#standard_entry/2","title":"snmpa_conf.standard_entry/2","type":"function"},{"doc":"Name = string() Domain = transportDomain() Ip = transportAddress() (depends on Domain) Timeout = integer() RetryCount = integer() TagList = string() ParamsName = string() EngineId = string() TMask = transportAddressMask() (depends on Domain) MaxMessageSize = integer() target_addr_entry() = term() Create an entry for the agent target_addr config file, target_addr.conf . Name must be a non-empty string. target_addr_entry/6 translates to the following call: target_addr_entry(Name, Domain, Addr, TagList, ParamsName, EngineId, []) . target_addr_entry/7 translates to the following call: target_addr_entry(Name, Domain, Addr, TagList, ParamsName, EngineId, TMask, 2048) . target_addr_entry/8 translates to the following call: target_addr_entry(Name, Domain, Addr, 1500, 3, TagList, ParamsName, EngineId, TMask, MaxMessageSize) . See Target Address Definitions for more info.","ref":"snmpa_conf.html#target_addr_entry/6","title":"snmpa_conf.target_addr_entry/6","type":"function"},{"doc":"","ref":"snmpa_conf.html#target_addr_entry/7","title":"snmpa_conf.target_addr_entry/7","type":"function"},{"doc":"","ref":"snmpa_conf.html#target_addr_entry/8","title":"snmpa_conf.target_addr_entry/8","type":"function"},{"doc":"","ref":"snmpa_conf.html#target_addr_entry/10","title":"snmpa_conf.target_addr_entry/10","type":"function"},{"doc":"Name = string() Vsn = v1 | v2 | v3 MPModel = v1 | v2c | v3 SecModel = v1 | v2c | usm SecName = string() SecLevel = noAuthNoPriv | authNoPriv | authPriv target_params_entry() = term() Create an entry for the agent target_params config file, target_params.conf . Name must be a non-empty string. Vsn translates into MPModel and SecModel as follows: \\ 011 Vsn = v1 =&gt; MPModel = v1 , SecModel = v1 \\ 011 Vsn = v2 =&gt; MPModel = v2c , SecModel = v2c \\ 011 Vsn = v3 =&gt; MPModel = v3 , SecModel = usm target_params_entry/2 translates to the following call: target_params_entry(Name, Vsn, &quot;initial&quot;, noAuthNoPriv) . target_params_entry/4 translates to the following call: target_params_entry(Name, MPModel, SecModel, SecName, SecLevel) where MPModel and SecModel is mapped from Vsn , see above. See Target Parameters Definitions for more info.","ref":"snmpa_conf.html#target_params_entry/2","title":"snmpa_conf.target_params_entry/2","type":"function"},{"doc":"","ref":"snmpa_conf.html#target_params_entry/4","title":"snmpa_conf.target_params_entry/4","type":"function"},{"doc":"","ref":"snmpa_conf.html#target_params_entry/5","title":"snmpa_conf.target_params_entry/5","type":"function"},{"doc":"EngineId = string() UserName = string() SecName = string() Clone = zeroDotZero | [integer()] AuthP = usmNoAuthProtocol | usmHMACMD5AuthProtocol, | usmHMACSHAAuthProtocol AuthKeyC = string() OwnAuthKeyC = string() PrivP = usmNoPrivProtocol | usmDESPrivProtocol | usmAesCfb128Protocol PrivKeyC = string() OwnPrivKeyC = string() Public = string() AuthKey = [integer()] PrivKey = [integer()] usm_entry() = term() Create an entry for the agent vacm config file, vacm.conf . usm_entry/1 translates to the following call: usm_entry(&quot;initial&quot;, &quot;initial&quot;, zeroDotZero, usmNoAuthProtocol, &quot;&quot;, &quot;&quot;, usmNoPrivProtocol, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;) . See Security data for USM for more info.","ref":"snmpa_conf.html#usm_entry/1","title":"snmpa_conf.usm_entry/1","type":"function"},{"doc":"","ref":"snmpa_conf.html#usm_entry/13","title":"snmpa_conf.usm_entry/13","type":"function"},{"doc":"SecModel = v1 | v2c | usm SecName = string() GroupName = string() Prefix = string() SecLevel = noAuthNoPriv | authNoPriv | authPriv Match = prefix | exact ReadView = string() WriteView = string() NotifyView = string() ViewIndex = integer() ViewSubtree = [integer()] ViewStatus = included | excluded ViewMask = null | [zero_or_one()] zero_or_one() = 0 | 1 vacm_s2g_entry() = term() vacm_acc_entry() = term() vacm_vtf_entry() = term() Create an entry for the agent vacm config file, vacm.conf . vacm_vtf_entry/2 translates to the following call: vacm_vtf_entry(ViewIndex, ViewSubtree, included, null) . See MIB Views for VACM for more info.","ref":"snmpa_conf.html#vacm_acc_entry/8","title":"snmpa_conf.vacm_acc_entry/8","type":"function"},{"doc":"","ref":"snmpa_conf.html#vacm_s2g_entry/3","title":"snmpa_conf.vacm_s2g_entry/3","type":"function"},{"doc":"","ref":"snmpa_conf.html#vacm_vtf_entry/2","title":"snmpa_conf.vacm_vtf_entry/2","type":"function"},{"doc":"","ref":"snmpa_conf.html#vacm_vtf_entry/4","title":"snmpa_conf.vacm_vtf_entry/4","type":"function"},{"doc":"Dir = string() Hdr = string() Conf = [agent_entry()] Write the agent config to the agent config file. Dir is the path to the directory where to store the config file. Hdr is an optional file header (note that this text is written to the file as is). See Agent Information for more info.","ref":"snmpa_conf.html#write_agent_config/2","title":"snmpa_conf.write_agent_config/2","type":"function"},{"doc":"","ref":"snmpa_conf.html#write_agent_config/3","title":"snmpa_conf.write_agent_config/3","type":"function"},{"doc":"Dir = string() Hdr = string() Conf = [community_entry()] Write the agent community config to the agent community config file. Dir is the path to the directory where to store the config file. Hdr is an optional file header (note that this text is written to the file as is). See Community for more info.","ref":"snmpa_conf.html#write_community_config/2","title":"snmpa_conf.write_community_config/2","type":"function"},{"doc":"","ref":"snmpa_conf.html#write_community_config/3","title":"snmpa_conf.write_community_config/3","type":"function"},{"doc":"Dir = string() Hdr = string() Conf = [context_entry()] Write the agent context config to the agent context config file. Dir is the path to the directory where to store the config file. Hdr is an optional file header (note that this text is written to the file as is). See Contexts for more info.","ref":"snmpa_conf.html#write_context_config/2","title":"snmpa_conf.write_context_config/2","type":"function"},{"doc":"","ref":"snmpa_conf.html#write_context_config/3","title":"snmpa_conf.write_context_config/3","type":"function"},{"doc":"Dir = string() Hdr = string() Conf = [notify_entry()] Write the agent notify config to the agent notify config file. Dir is the path to the directory where to store the config file. Hdr is an optional file header (note that this text is written to the file as is). See Notify Definitions for more info.","ref":"snmpa_conf.html#write_notify_config/2","title":"snmpa_conf.write_notify_config/2","type":"function"},{"doc":"","ref":"snmpa_conf.html#write_notify_config/3","title":"snmpa_conf.write_notify_config/3","type":"function"},{"doc":"Dir = string() Hdr = string() Conf = [standard_entry()] Write the agent standard config to the agent standard config file. Dir is the path to the directory where to store the config file. Hdr is an optional file header (note that this text is written to the file as is). See System Information for more info.","ref":"snmpa_conf.html#write_standard_config/2","title":"snmpa_conf.write_standard_config/2","type":"function"},{"doc":"","ref":"snmpa_conf.html#write_standard_config/3","title":"snmpa_conf.write_standard_config/3","type":"function"},{"doc":"Dir = string() Hdr = string() Conf = [target_addr_entry()] Write the agent target_addr config to the agent target_addr config file. Dir is the path to the directory where to store the config file. Hdr is an optional file header (note that this text is written to the file as is). See Target Address Definitions for more info.","ref":"snmpa_conf.html#write_target_addr_config/2","title":"snmpa_conf.write_target_addr_config/2","type":"function"},{"doc":"","ref":"snmpa_conf.html#write_target_addr_config/3","title":"snmpa_conf.write_target_addr_config/3","type":"function"},{"doc":"Dir = string() Hdr = string() Conf = [target_params_entry()] Write the agent target_params config to the agent target_params config file. Dir is the path to the directory where to store the config file. Hdr is an optional file header (note that this text is written to the file as is). See Target Parameters Definitions for more info.","ref":"snmpa_conf.html#write_target_params_config/2","title":"snmpa_conf.write_target_params_config/2","type":"function"},{"doc":"","ref":"snmpa_conf.html#write_target_params_config/3","title":"snmpa_conf.write_target_params_config/3","type":"function"},{"doc":"Dir = string() Hdr = string() Conf = [usm_entry()] Write the agent usm config to the agent usm config file. Dir is the path to the directory where to store the config file. Hdr is an optional file header (note that this text is written to the file as is). See Security data for USM for more info.","ref":"snmpa_conf.html#write_usm_config/2","title":"snmpa_conf.write_usm_config/2","type":"function"},{"doc":"","ref":"snmpa_conf.html#write_usm_config/3","title":"snmpa_conf.write_usm_config/3","type":"function"},{"doc":"Dir = string() Hdr = string() Conf = [vacm_entry()] vacm_entry() = vacm_sg2_entry() | vacm_acc_entry() | vacm_vtf_entry() Write the agent vacm config to the agent vacm config file. Dir is the path to the directory where to store the config file. Hdr is an optional file header (note that this text is written to the file as is). See MIB Views for VACM for more info.","ref":"snmpa_conf.html#write_vacm_config/2","title":"snmpa_conf.write_vacm_config/2","type":"function"},{"doc":"","ref":"snmpa_conf.html#write_vacm_config/3","title":"snmpa_conf.write_vacm_config/3","type":"function"},{"doc":"The module snmpa_error contains two callback functions which are called if an error occurs at different times during agent operation. These functions in turn calls the corresponding function in the configured error report module, which implements the actual report functionality. Two simple implementation(s) is provided with the toolkit; the modules snmpa_error_logger which is the default and snmpa_error_io . The error report module is configured using the directive error_report_mod , see configuration parameters.","ref":"snmpa_error.html","title":"snmpa_error","type":"module"},{"doc":"Format = string() Args = list() The function is called if an error occurs during the configuration phase, for example if a syntax error is found in a configuration file. Format and Args are as in io:format(Format, Args) .","ref":"snmpa_error.html#config_err/2","title":"snmpa_error.config_err/2","type":"function"},{"doc":"Format = string() Args = list() The function is called if a user related error occurs at run-time, for example if a user defined instrumentation function returns erroneous. Format and Args are as in io:format(Format, Args) .","ref":"snmpa_error.html#user_err/2","title":"snmpa_error.user_err/2","type":"function"},{"doc":"The module snmpa_error_io implements the snmp_error_report behaviour (see snmpa_error_report ) containing two callback functions which are called in order to report SNMP errors. This module provides a simple mechanism for reporting SNMP errors. Errors are written to stdout using the io module. It is provided as an simple example. This module needs to be explicitly configured, see snmpa_error and configuration parameters.","ref":"snmpa_error_io.html","title":"snmpa_error_io","type":"module"},{"doc":"Format = string() Args = list() The function is called if an error occurs during the configuration phase, for example if a syntax error is found in a configuration file. Format and Args are as in io:format(Format, Args) .","ref":"snmpa_error_io.html#config_err/2","title":"snmpa_error_io.config_err/2","type":"function"},{"doc":"Format = string() Args = list() The function is called if a user related error occurs at run-time, for example if a user defined instrumentation function returns erroneous. Format and Args are as in io:format(Format, Args) .","ref":"snmpa_error_io.html#user_err/2","title":"snmpa_error_io.user_err/2","type":"function"},{"doc":"The module snmpa_error_logger implements the snmpa_error_report behaviour (see snmpa_error_report ) containing two callback functions which are called in order to report SNMP errors. This module provides a simple mechanism for reporting SNMP errors. Errors are sent to the error_logger after a size check. Messages are truncated after 1024 chars. It is provided as an example. This module is the default error report module, but can be explicitly configured, see snmpa_error and configuration parameters. See Also error_logger(3)","ref":"snmpa_error_logger.html","title":"snmpa_error_logger","type":"module"},{"doc":"Format = string() Args = list() The function is called if an error occurs during the configuration phase, for example if a syntax error is found in a configuration file. Format and Args are as in io:format(Format, Args) .","ref":"snmpa_error_logger.html#config_err/2","title":"snmpa_error_logger.config_err/2","type":"function"},{"doc":"Format = string() Args = list() The function is called if a user related error occurs at run-time, for example if a user defined instrumentation function returns erroneous. Format and Args are as in io:format(Format, Args) .","ref":"snmpa_error_logger.html#user_err/2","title":"snmpa_error_logger.user_err/2","type":"function"},{"doc":"The module snmpa_local_db contains functions for implementing tables (and variables) using the SNMP built-in database. The database exists in two instances, one volatile and one persistent. The volatile database is implemented with ets. The persistent database is implemented with dets. There is a scaling problem with this database. Insertions and deletions are inefficient for large tables. This problem is best solved by using Mnesia instead. The following functions describe the interface to snmpa_local_db . Each function has a Mnesia equivalent. The argument NameDb is a tuple {Name, Db} where Name is the symbolic name of the managed object (as defined in the MIB), and Db is either volatile or persistent . mnesia is not possible since all these functions are snmpa_local_db specific. Common Data Types In the functions defined below, the following types are used: NameDb = {Name, Db} Name = atom(), Db = volatile | persistent RowIndex = [int()] Cols = [Col] | [{Col, Value}], Col = int(), Value = term() where RowIndex denotes the last part of the OID, that specifies the index of the row in the table. Cols is a list of column numbers in case of a get operation, and a list of column numbers and values in case of a set operation. See Also ets(3), dets(3), snmp_generic(3)","ref":"snmpa_local_db.html","title":"snmpa_local_db","type":"module"},{"doc":"Reason = term() This function can be used to manually dump the database to file.","ref":"snmpa_local_db.html#dump/0","title":"snmpa_local_db.dump/0","type":"function"},{"doc":"Performs an ets/dets matching on the table. See Stdlib documentation, module ets, for a description of Pattern and the return values.","ref":"snmpa_local_db.html#match/2","title":"snmpa_local_db.match/2","type":"function"},{"doc":"TableName = atom() Prints the contents of the database on screen. This is useful for debugging since the STANDARD-MIB and OTP-SNMPEA-MIB (and maybe your own MIBs) are stored in snmpa_local_db . TableName is an atom for a table in the database. When no name is supplied, the whole database is shown.","ref":"snmpa_local_db.html#print/0","title":"snmpa_local_db.print/0","type":"function"},{"doc":"","ref":"snmpa_local_db.html#print/1","title":"snmpa_local_db.print/1","type":"function"},{"doc":"","ref":"snmpa_local_db.html#print/2","title":"snmpa_local_db.print/2","type":"function"},{"doc":"Creates a table. If the table already exist, the old copy is destroyed. Returns false if the NameDb argument is incorrectly specified, true otherwise.","ref":"snmpa_local_db.html#table_create/1","title":"snmpa_local_db.table_create/1","type":"function"},{"doc":"Row = {Val1, Val2, ..., ValN} Val1 = Val2 = ... = ValN = term() Creates a row in a table. Row is a tuple with values for all columns, including the index columns.","ref":"snmpa_local_db.html#table_create_row/3","title":"snmpa_local_db.table_create_row/3","type":"function"},{"doc":"Deletes a table.","ref":"snmpa_local_db.html#table_delete/1","title":"snmpa_local_db.table_delete/1","type":"function"},{"doc":"Deletes the row in the table.","ref":"snmpa_local_db.html#table_delete_row/2","title":"snmpa_local_db.table_delete_row/2","type":"function"},{"doc":"Checks if a table exists.","ref":"snmpa_local_db.html#table_exists/1","title":"snmpa_local_db.table_exists/1","type":"function"},{"doc":"Row = {Val1, Val2, ..., ValN} Val1 = Val2 = ... = ValN = term() Row is a tuple with values for all columns, including the index columns.","ref":"snmpa_local_db.html#table_get_row/2","title":"snmpa_local_db.table_get_row/2","type":"function"},{"doc":"The module snmpa_mpd implements the version independent Message Processing and Dispatch functionality in SNMP for the agent. It is supposed to be used from a Network Interface process (Definition of Agent Net if). DATA TYPES See the data types in snmpa_conf .","ref":"snmpa_mpd.html","title":"snmpa_mpd","type":"module"},{"doc":"Variable = atom() Increments the variable associated with a discarded pdu. This function can be used when the net_if process receives a discarded_pdu message from the agent.","ref":"snmpa_mpd.html#discarded_pdu/1","title":"snmpa_mpd.discarded_pdu/1","type":"function"},{"doc":"Vsn = 'version-1' | 'version-2' | 'version-3' NoteStore = pid() Pdu = #pdu MsgData = msg_data() LocalEngineID = string() To = [dest_addrs()] PacketsAndAddresses = [{TDomain, TAddress, Packet}] TDomain = snmpUDPDomain TAddress = {Ip, Udp} Ip = {integer(), integer(), integer(), integer()} Udp = integer() Packet = binary() Generates a possibly encrypted request packet to be sent to the network. MsgData is the message specific data used in the SNMP message. This value is received in a send_pdu or send_pdu_req message from the agent. In SNMPv1 and SNMPv2c, this message data is the community string. In SNMPv3, it is the context information. To is a list of destination addresses and their corresponding security parameters. This value is received in the same message from the agent and then transformed trough process_taddrs before passed to this function. Note that the use of the LocalEngineID argument is only intended for special cases, if the agent is to &quot;emulate&quot; multiple EngineIDs! By default, the agent uses the value of SnmpEngineID (see SNMP-FRAMEWORK-MIB).","ref":"snmpa_mpd.html#generate_msg/5","title":"snmpa_mpd.generate_msg/5","type":"function"},{"doc":"","ref":"snmpa_mpd.html#generate_msg/6","title":"snmpa_mpd.generate_msg/6","type":"function"},{"doc":"Vsn = 'version-1' | 'version-2' | 'version-3' RePdu = #pdu Type = atom() ACMData = acm_data() LocalEngineID = string() Packet = binary() Generates a possibly encrypted response packet to be sent to the network. Type is the #pdu.type of the original request. Note that the use of the LocalEngineID argument is only intended for special cases, if the agent is to &quot;emulate&quot; multiple EngineIDs! By default, the agent uses the value of SnmpEngineID (see SNMP-FRAMEWORK-MIB).","ref":"snmpa_mpd.html#generate_response_msg/5","title":"snmpa_mpd.generate_response_msg/5","type":"function"},{"doc":"","ref":"snmpa_mpd.html#generate_response_msg/6","title":"snmpa_mpd.generate_response_msg/6","type":"function"},{"doc":"Vsns = [Vsn] Vsn = v1 | v2 | v3 This function can be called from the net_if process at start-up. The options list defines which versions to use. It also initializes some SNMP counters.","ref":"snmpa_mpd.html#init/1","title":"snmpa_mpd.init/1","type":"function"},{"doc":"Packet = binary() From = {TDomain, TAddr} TDomain = transportDomainUdpIpv4 | transportDomainUdpIpv6 TAddr = {IpAddr, IpPort} LocalEngineID = string() IpAddr = inet:ip_address() IpPort = inet:port_number() State = mpd_state() NoteStore = pid() Log = snmp_log() Vsn = 'version-1' | 'version-2' | 'version-3' Pdu = #pdu PduMs = integer() ACMData = acm_data() Reason = term() DiscoPacket = binary() Processes an incoming packet. Performs authentication and decryption as necessary. The return values should be passed to the agent. Note that the use of the LocalEngineID argument is only intended for special cases, if the agent is to &quot;emulate&quot; multiple EngineIDs! By default, the agent uses the value of SnmpEngineID (see SNMP-FRAMEWORK-MIB).","ref":"snmpa_mpd.html#process_packet/5","title":"snmpa_mpd.process_packet/5","type":"function"},{"doc":"","ref":"snmpa_mpd.html#process_packet/6","title":"snmpa_mpd.process_packet/6","type":"function"},{"doc":"TDests = [TDest] TDest = {{TDomain, TAddr}, SecData} | {TDomain, TAddr} TDomain = term() % Not at tuple TAddr = term() SecData = term() Dests = [Dest] Dest = {{Domain, Addr}, SecData} | {Domain, Addr} Domain = transportDomain() Addr = transportAddress() % Depends on Domain Transforms addresses from internal MIB format to one more useful to Agent Net if. See also generate_msg .","ref":"snmpa_mpd.html#process_taddrs/1","title":"snmpa_mpd.process_taddrs/1","type":"function"},{"doc":"This is the top supervisor for the agent part of the SNMP application. There is always one supervisor at each node with an SNMP agent (master agent or sub-agent).","ref":"snmpa_supervisor.html","title":"snmpa_supervisor","type":"module"},{"doc":"Opts = [opt()] opt() = {db_dir, string()} | {config, ConfOpts()} | ... ConfOpts = [conf_opts()] conf_opts() = {dir, string()} | ... Reason = term() Starts a supervisor for the SNMP agent system. The supervisor starts all involved SNMP processes, including the master agent. Sub-agents should be started by calling start_subagent/3 . db_dir is mandatory. dir in config is mandatory. See snmp config for a description of the options.","ref":"snmpa_supervisor.html#start_master_sup/1","title":"snmpa_supervisor.start_master_sup/1","type":"function"},{"doc":"ParentAgent = pid() SubTree = oid() Mibs = [MibName] MibName = [string()] Starts a sub-agent on the node where the function is called. The snmpa_supervisor must be running. If the supervisor is not running, the function fails with the reason badarg .","ref":"snmpa_supervisor.html#start_sub_agent/3","title":"snmpa_supervisor.start_sub_agent/3","type":"function"},{"doc":"Opts = [opt()] opt() = {db_dir, string()} | ... Starts a supervisor for the SNMP agent system without a master agent. The supervisor starts all involved SNMP processes, but no agent processes. Sub-agents should be started by calling start_sub_agent/3 . db_dir is mandatory. See configuration parameters for a description of the options.","ref":"snmpa_supervisor.html#start_sub_sup/1","title":"snmpa_supervisor.start_sub_sup/1","type":"function"},{"doc":"SubAgent = pid() Stops the sub-agent on the node where the function is called. The snmpa_supervisor must be running. If the supervisor is not running, the function fails with the reason badarg .","ref":"snmpa_supervisor.html#stop_sub_agent/1","title":"snmpa_supervisor.stop_sub_agent/1","type":"function"},{"doc":"The module snmpc contains interface functions to the SNMP toolkit MIB compiler. See Also erlc(1)","ref":"snmpc.html","title":"snmpc","type":"module"},{"doc":"File = string() Options = [opt()] opt() = db() | relaxed_row_name_assign_check() | deprecated() | description() | reference() | group_check() | i() | il() | imports() | module() | module_identity() | module_compliance() | agent_capabilities() | outdir() | no_defs() | verbosity() | warnings() | warnings_as_errors() db() = {db, volatile|persistent|mnesia} deprecated() = {deprecated, bool()} relaxed_row_name_assign_check() = relaxed_row_name_assign_check description() = description reference() = reference group_check() = {group_check, bool()} i() = {i, [dir()]} il() = {il, [dir()]} imports() = imports module() = {module, atom()} module_identity() = module_identity module_compliance() = module_compliance agent_capabilities() = agent_capabilities no_defs() = no_defs outdir() = {outdir, dir()} verbosity() = {verbosity, silence|warning|info|log|debug|trace} warnings() = {warnings, bool()} warnings_as_errors() = warnings_as_errors dir() = string() BinFileName = string() Compiles the specified MIB file &lt;File&gt;.mib . The compiled file BinFileName is called &lt;File&gt;.bin . The option db specifies which database should be used for the default instrumentation. Default is volatile . The option deprecated specifies if a deprecated definition should be kept or not. If the option is false the MIB compiler will ignore all deprecated definitions. Default is true . The option relaxed_row_name_assign_check , if present, specifies that the row name assign check shall not be done strictly according to the SMI (which allows only the value 1). With this option, all values greater than zero is allowed (&gt;= 1). This means that the error will be converted to a warning. By default it is not included, but if this option is present it will be. The option description specifies if the text of the DESCRIPTION field will be included or not. By default it is not included, but if this option is present it will be. The option reference specifies if the text of the REFERENCE field, when found in a table definition, will be included or not. By default it is not included, but if this option is present it will be. The reference text will be placed in the allocList field of the mib-entry record (#me{}) for the table. The option group_check specifies whether the mib compiler should check the OBJECT-GROUP macro and the NOTIFICATION-GROUP macro for correctness or not. Default is true . The option i specifies the path to search for imported (compiled) MIB files. The directories should be strings with a trailing directory delimiter. Default is [&quot;./&quot;] . The option il (include_lib) also specifies a list of directories to search for imported MIBs. It assumes that the first element in the directory name corresponds to an OTP application. The compiler will find the current installed version. For example, the value [&quot;snmp/mibs/&quot;] will be replaced by [&quot;snmp-3.1.1/mibs/&quot;] (or what the current version may be in the system). The current directory and the &lt;snmp-home&gt;/priv/mibs/ are always listed last in the include path. The option imports , if present, specifies that the IMPORT statement of the MIB shall be included in the compiled mib. The option module , if present, specifies the name of a module which implements all instrumentation functions for the MIB. The name of all instrumentation functions must be the same as the corresponding managed object it implements. The option module_identity , if present, specifies that the info part of the MODULE-IDENTITY statement of the MIB shall be included in the compiled mib. The option module_compliance , if present, specifies that the MODULE-COMPLIANCE statement of the MIB shall be included (with a mib-entry record) in the compiled mib. The mib-entry record of the module-compliance will contain reference and module part(s) this info in the assocList field). The option agent_capabilities , if present, specifies that the AGENT-CAPABILITIES statement of the MIB shall be included (with a mib-entry record) in the compiled mib. The mib-entry record of the agent-capabilitie will contain reference and modules part(s) this info in the assocList field). The option no_defs , if present, specifies that if a managed object does not have an instrumentation function, the default instrumentation function should NOT be used, instead this is reported as an error, and the compilation aborts. The option verbosity specifies the verbosity of the SNMP mib compiler. I.e. if warning, info, log, debug and trace messages shall be shown. Default is silence . Note that if the option warnings is true and the option verbosity is silence , warning messages will still be shown. The option warnings specifies whether warning messages should be shown. Default is true . The option warnings_as_errors , if present, specifies whether warnings should be treated as errors. The MIB compiler understands both SMIv1 and SMIv2 MIBs. It uses the MODULE-IDENTITY statement to determine if the MIB is version 1 or 2. The MIB compiler can be invoked from the OS command line by using the command erlc . erlc recognizes the extension .mib , and invokes the SNMP MIB compiler for files with that extension. The options db , group_check , deprecated , description , verbosity , imports and module_identity have to be specified to erlc using the syntax +term . See erlc(1) for details.","ref":"snmpc.html#compile/1","title":"snmpc.compile/1","type":"function"},{"doc":"","ref":"snmpc.html#compile/2","title":"snmpc.compile/2","type":"function"},{"doc":"Mibs = [MibName] MibName = string() Checks for multiple usage of object identifiers and traps between MIBs.","ref":"snmpc.html#is_consistent/1","title":"snmpc.is_consistent/1","type":"function"},{"doc":"MibName = string() Generates a .hrl file with definitions of Erlang constants for the objects in the MIB. The .hrl file is called &lt;MibName&gt;.hrl . The MIB must be compiled, and present in the current directory. The mib_to_hrl generator can be invoked from the OS command line by using the command erlc . erlc recognizes the extension .bin , and invokes this function for files with that extension.","ref":"snmpc.html#mib_to_hrl/1","title":"snmpc.mib_to_hrl/1","type":"function"},{"doc":"The module snmpm contains interface functions to the SNMP manager. Common Data Types The following data types are used in the functions below: oid() = [byte()] - The oid() type is used to represent an ASN.1 OBJECT IDENTIFIER snmp_reply() = {error_status(), error_index(), varbinds()} error_status() = noError | atom() error_index() = integer() varbinds() = [varbind()] atl_type() = read | write | read_write target_name() = string() - Is a unique *non-empty* string vars_and_vals() = [var_and_val()] var_and_val() = {oid(), value_type(), value()} | {oid(), value()} value_type() = o ('OBJECT IDENTIFIER') | i ('INTEGER') | u ('Unsigned32') | g ('Unsigned32') | s ('OCTET SRING') | b ('BITS') | ip ('IpAddress') | op ('Opaque') | c32 ('Counter32') | c64 ('Counter64') | tt ('TimeTicks') value() = term() community() = string() sec_model() = any | v1 | v2c | usm sec_name() = string() sec_level() = noAuthNoPriv | authNoPriv | authPriv See also the data types in snmpa_conf .","ref":"snmpm.html","title":"snmpm","type":"module"},{"doc":"TargetName = target_name() Item = atom() Reason = term() Retrieve agent config.","ref":"snmpm.html#agent_info/2","title":"snmpm.agent_info/2","type":"function"},{"doc":"UserId = term() TargetName = target_name() Oids = [oid()] SendOpts = send_opts() send_opts() = [send_opt()] send_opt() = {context, string()} | {timeout, pos_integer()} | {extra, term()} | {community, community()} | {sec_model, sec_model()} | {sec_name, string()} | {sec_level, sec_level()} | {max_message_size, pos_integer()} ReqId = term() Reason = term() Asynchronous get-request . The reply, if it arrives, will be delivered to the user through a call to the snmpm_user callback function handle_pdu . The send option timeout specifies for how long the request is valid (after which the manager is free to delete it). The send option extra specifies an opaque data structure passed on to the net-if process. The net-if process included in this application makes, with one exception, no use of this info, so the only use for it in such a option (when using the built in net-if) would be tracing. The one usage exception is: Any tuple with snmpm_extra_info_tag as its first element is reserved for internal use. Some of the send options ( community , sec_model , sec_name , sec_level and max_message_size ) are override options . That is, for this request, they override any configuration done when the agent was registered.","ref":"snmpm.html#async_get2/3","title":"snmpm.async_get2/3","type":"function"},{"doc":"","ref":"snmpm.html#async_get2/4","title":"snmpm.async_get2/4","type":"function"},{"doc":"UserId = term() TargetName = target_name() NonRep = integer() MaxRep = integer() Oids = [oid()] SendOpts = send_opts() send_opts() = [send_opt()] send_opt() = {context, string()} | {timeout, pos_integer()} | {extra, term()} | {community, community()} | {sec_model, sec_model()} | {sec_name, string()} | {sec_level, sec_level()} | {max_message_size, pos_integer()} ReqId = integer() Reason = term() Asynchronous get-bulk-request (See RFC1905). The reply will be delivered to the user through a call to the snmpm_user callback function handle_pdu . The send option timeout specifies for how long the request is valid (after which the manager is free to delete it). The send option extra specifies an opaque data structure passed on to the net-if process. The net-if process included in this application makes no use of this info, so the only use for it in such a configuration (when using the built in net-if) would be tracing. Some of the send options ( community , sec_model , sec_name , sec_level and max_message_size ) are override options . That is, for this request, they override any configuration done when the agent was registered.","ref":"snmpm.html#async_get_bulk2/5","title":"snmpm.async_get_bulk2/5","type":"function"},{"doc":"","ref":"snmpm.html#async_get_bulk2/6","title":"snmpm.async_get_bulk2/6","type":"function"},{"doc":"UserId = term() TargetName = target_name() Oids = [oid()] send_opt() = {context, string()} | {timeout, pos_integer()} | {extra, term()} | {community, community()} | {sec_model, sec_model()} | {sec_name, string()} | {sec_level, sec_level()} | {max_message_size, pos_integer()} ReqId = integer() Reason = term() Asynchronous get-next-request . The reply will be delivered to the user through a call to the snmpm_user callback function handle_pdu . The send option timeout specifies for how long the request is valid (after which the manager is free to delete it). The send option extra specifies an opaque data structure passed on to the net-if process. The net-if process included in this application makes, with one exception, no use of this info, so the only use for it in such a option (when using the built in net-if) would be tracing. The one usage exception is: Any tuple with snmpm_extra_info_tag as its first element is reserved for internal use. Some of the send options ( community , sec_model , sec_name , sec_level and max_message_size ) are override options . That is, for this request, they override any configuration done when the agent was registered.","ref":"snmpm.html#async_get_next2/3","title":"snmpm.async_get_next2/3","type":"function"},{"doc":"","ref":"snmpm.html#async_get_next2/4","title":"snmpm.async_get_next2/4","type":"function"},{"doc":"UserId = term() TargetName = target_name() VarsAndVals = vars_and_vals() SendOpts = send_opts() send_opts() = [send_opt()] send_opt() = {context, string()} | {timeout, pos_integer()} | {extra, term()} | {community, community()} | {sec_model, sec_model()} | {sec_name, string()} | {sec_level, sec_level()} | {max_message_size, pos_integer()} ReqId = term() Reason = term() Asynchronous set-request . The reply will be delivered to the user through a call to the snmpm_user callback function handle_pdu . The send option timeout specifies for how long the request is valid (after which the manager is free to delete it). When var_and_val() is {oid(), value()} , the manager makes an educated guess based on the loaded mibs. The send option extra specifies an opaque data structure passed on to the net-if process. The net-if process included in this application makes, with one exception, no use of this info, so the only use for it in such a option (when using the built in net-if) would be tracing. The one usage exception is: Any tuple with snmpm_extra_info_tag as its first element is reserved for internal use. Some of the send options ( community , sec_model , sec_name , sec_level and max_message_size ) are override options . That is, for this request, they override any configuration done when the agent was registered.","ref":"snmpm.html#async_set2/3","title":"snmpm.async_set2/3","type":"function"},{"doc":"","ref":"snmpm.html#async_set2/4","title":"snmpm.async_set2/4","type":"function"},{"doc":"BackupDir = string() Backup persistent data handled by the manager. BackupDir cannot be identical to DbDir.","ref":"snmpm.html#backup/1","title":"snmpm.backup/1","type":"function"},{"doc":"UserId = term() ReqId = term() Reason = term() Cancel a previous asynchronous request.","ref":"snmpm.html#cancel_async_request/2","title":"snmpm.cancel_async_request/2","type":"function"},{"doc":"Pid = pid() Cancel a previous request to be notified of SNMP manager start.","ref":"snmpm.html#cancel_notify_started/1","title":"snmpm.cancel_notify_started/1","type":"function"},{"doc":"NewSize = {MaxBytes, MaxFiles} MaxBytes = integer() MaxFiles = integer() Reason = term() Changes the log size of the Audit Trail Log. The application must be configured to use the audit trail log function. Please refer to disk_log(3) in Kernel Reference Manual for a description of how to change the log size. The change is permanent, as long as the log is not deleted. That means, the log size is remembered across reboots.","ref":"snmpm.html#change_log_size/1","title":"snmpm.change_log_size/1","type":"function"},{"doc":"Ref = reference() Turn off monitoring of the SNMP manager.","ref":"snmpm.html#demonitor/1","title":"snmpm.demonitor/1","type":"function"},{"doc":"Reason = term() Prefix = integer() | string() This utility function is used to create a formatted (pretty printable) string of the error reason received from either: The Reason returned value if any of the sync/async get/get-next/set/get-bulk functions returns {error, Reason} The Reason parameter in the handle_error user callback function. Prefix should either be an indention string (e.g. a list of spaces) or a positive integer (which will be used to create the indention string of that length).","ref":"snmpm.html#format_reason/1","title":"snmpm.format_reason/1","type":"function"},{"doc":"","ref":"snmpm.html#format_reason/2","title":"snmpm.format_reason/2","type":"function"},{"doc":"Key = atom() Value = term() Returns a list (a dictionary) containing information about the manager. Information includes statistics counters, miscellaneous info about each process (e.g. memory allocation), and so on.","ref":"snmpm.html#info/0","title":"snmpm.info/0","type":"function"},{"doc":"Mib = MibName MibName = string() Reason = term() Load a Mib into the manager. The MibName is the name of the Mib, including the path to where the compiled mib is found. For example, Dir = code:priv_dir(my_app) ++ &quot;/mibs/&quot;, snmpm:load_mib(Dir ++ &quot;MY-MIB&quot;).","ref":"snmpm.html#load_mib/1","title":"snmpm.load_mib/1","type":"function"},{"doc":"LogDir = string() Mibs = [MibName] MibName = string() Block = boolean() LogName = string() LogFile = string() Start = Stop = null | calendar:datetime() | {local_time, calendar:datetime()} | {universal_time, calendar:datetime()} Cnt = {NumOK, NumERR} NumOK = non_neg_integer() NumERR = pos_integer() Reason = disk_log_open_error() | file_open_error() | term() disk_log_open_error() = {LogName, term()} file_open_error() = {OutFile, term()} Converts an Audit Trail Log to a readable format and prints it on stdio. LogName defaults to &quot;snmpm_log&quot;. LogFile defaults to &quot;snmpm.log&quot;. The Block argument indicates if the log should be blocked during conversion. This could be usefull when converting large logs (when otherwise the log could wrap during conversion). Defaults to true . See snmp:log_to_io for more info.","ref":"snmpm.html#log_to_io/1","title":"snmpm.log_to_io/1","type":"function"},{"doc":"","ref":"snmpm.html#log_to_io/2","title":"snmpm.log_to_io/2","type":"function"},{"doc":"","ref":"snmpm.html#log_to_io/3","title":"snmpm.log_to_io/3","type":"function"},{"doc":"","ref":"snmpm.html#log_to_io/4","title":"snmpm.log_to_io/4","type":"function"},{"doc":"","ref":"snmpm.html#log_to_io/5","title":"snmpm.log_to_io/5","type":"function"},{"doc":"","ref":"snmpm.html#log_to_io/6","title":"snmpm.log_to_io/6","type":"function"},{"doc":"","ref":"snmpm.html#log_to_io/7","title":"snmpm.log_to_io/7","type":"function"},{"doc":"LogDir = string() Mibs = [MibName] MibName = string() Block = boolean() OutFile = string() LogName = string() LogFile = string() Start = Stop = null | calendar:datetime() | {local_time, calendar:datetime()} | {universal_time, calendar:datetime()} Cnt = {NumOK, NumERR} NumOK = non_neg_integer() NumERR = pos_integer() Reason = disk_log_open_error() | file_open_error() | term() disk_log_open_error() = {LogName, term()} file_open_error() = {OutFile, term()} Converts an Audit Trail Log to a readable text file. OutFile defaults to &quot;./snmpm_log.txt&quot;. LogName defaults to &quot;snmpm_log&quot;. LogFile defaults to &quot;snmpm.log&quot;. The Block argument indicates if the log should be blocked during conversion. This could be usefull when converting large logs (when otherwise the log could wrap during conversion). Defaults to true . See snmp:log_to_txt for more info.","ref":"snmpm.html#log_to_txt/1","title":"snmpm.log_to_txt/1","type":"function"},{"doc":"","ref":"snmpm.html#log_to_txt/2","title":"snmpm.log_to_txt/2","type":"function"},{"doc":"","ref":"snmpm.html#log_to_txt/3","title":"snmpm.log_to_txt/3","type":"function"},{"doc":"","ref":"snmpm.html#log_to_txt/4","title":"snmpm.log_to_txt/4","type":"function"},{"doc":"","ref":"snmpm.html#log_to_txt/5","title":"snmpm.log_to_txt/5","type":"function"},{"doc":"","ref":"snmpm.html#log_to_txt/6","title":"snmpm.log_to_txt/6","type":"function"},{"doc":"","ref":"snmpm.html#log_to_txt/7","title":"snmpm.log_to_txt/7","type":"function"},{"doc":"","ref":"snmpm.html#log_to_txt/8","title":"snmpm.log_to_txt/8","type":"function"},{"doc":"Ref = reference() Monitor the SNMP manager. In case of a crash, the calling (monitoring) process will get a 'DOWN' message (see the erlang module for more info).","ref":"snmpm.html#monitor/0","title":"snmpm.monitor/0","type":"function"},{"doc":"Name = atom() Oids = [oid()] Transform a alias-name to its oid. Note that an alias-name is only unique within the mib, so when loading several mib's into a manager, there might be several instances of the same aliasname.","ref":"snmpm.html#name_to_oid/1","title":"snmpm.name_to_oid/1","type":"function"},{"doc":"Timeout = integer() Pid = pid() Request a notification (message) when the SNMP manager has started. The Timeout is the time the request is valid. The value has to be greater then zero. The Pid is the process handling the supervision of the SNMP manager start. When the manager has started a completion message will be sent to the client from this process: {snmpm_started, Pid} . If the SNMP manager was not started in time, a timeout message will be sent to the client: {snmpm_start_timeout, Pid} . A client application that is dependent on the SNMP manager will use this function in order to be notified of when the manager has started. There are two situations when this is useful: During the start of a system, when a client application could start prior to the SNMP manager but is dependent upon it, and therefor has to wait for it to start. When the SNMP manager has crashed, the dependent client application has to wait for the SNMP manager to be restarted before it can reconnect . The function returns the pid() of a handler process, that does the supervision on behalf of the client application. Note that the client application is linked to this handler. This function is used in conjunction with the monitor function.","ref":"snmpm.html#notify_started/1","title":"snmpm.notify_started/1","type":"function"},{"doc":"Oid = oid() Name = atom() Reason = term() Transform a oid to its aliasname.","ref":"snmpm.html#oid_to_name/1","title":"snmpm.oid_to_name/1","type":"function"},{"doc":"Oid = oid() Type = atom() Reason = term() Retreive the type (asn1 bertype) of an oid.","ref":"snmpm.html#oid_to_type/1","title":"snmpm.oid_to_type/1","type":"function"},{"doc":"UserId = term() TargetName = target_name() Config = [agent_config()] agent_config() = {Item, Val} Item = engine_id | address | port | community | timeout | max_message_size | version | sec_model | sec_name | sec_level | tdomain Val = term() Reason = term() Explicitly instruct the manager to handle this agent, with UserId as the responsible user. Called to instruct the manager that this agent shall be handled. This function is used when the user knows in advance which agents the manager shall handle. Note that there is an alternate way to do the same thing: Add the agent to the manager config files (see agents.conf). TargetName is a non-empty string, uniquely identifying the agent. The type of Val depends on Item : [mandatory] engine_id = string() [mandatory] tadress = transportAddress() % Depends on tdomain [optional] port = inet:port_number() [optional] tdomain = transportDomain() [optional] community = string() [optional] timeout = integer() | snmp_timer() [optional] max_message_size = integer() [optional] version = v1 | v2 | v3 [optional] sec_model = any | v1 | v2c | usm [optional] sec_name = string() [optional] sec_level = noAuthNoPriv | authNoPriv | authPriv Note that if no tdomain is given, the default value, transportDomainUdpIpv4 , is used. Note that if no port is given and if taddress does not contain a port number, the default value is used.","ref":"snmpm.html#register_agent/3","title":"snmpm.register_agent/3","type":"function"},{"doc":"Id = term() Module = snmpm_user() Data = term() DefaultAgentConfig = [default_agent_config()] default_agent_config() = {Item, Val} Item = community | timeout | max_message_size | version | sec_model | sec_name | sec_level Val = term() Reason = term() snmpm_user() = Module implementing the snmpm_user behaviour Register the manager entity (=user) responsible for specific agent(s). Module is the callback module (snmpm_user behaviour) which will be called whenever something happens (detected agent, incoming reply or incoming trap/notification). Note that this could have already been done as a consequence of the node config. (see users.conf). The argument DefaultAgentConfig is used as default values when this user register agents. The type of Val depends on Item : community = string() timeout = integer() | snmp_timer() max_message_size = integer() version = v1 | v2 | v3 sec_model = any | v1 | v2c | usm sec_name = string() sec_level = noAuthNoPriv | authNoPriv | authPriv","ref":"snmpm.html#register_user/3","title":"snmpm.register_user/3","type":"function"},{"doc":"","ref":"snmpm.html#register_user/4","title":"snmpm.register_user/4","type":"function"},{"doc":"Id = term() Module = snmpm_user() DefaultAgentConfig = [default_agent_config()] default_agent_config() = {Item, Val} Item = community | timeout | max_message_size | version | sec_model | sec_name | sec_level Val = term() Data = term() Reason = term() snmpm_user() = Module implementing the snmpm_user behaviour Register the monitored manager entity (=user) responsible for specific agent(s). The process performing the registration will be monitored. Which means that if that process should die, all agents registered by that user process will be unregistered. All outstanding requests will be canceled. Module is the callback module (snmpm_user behaviour) which will be called whenever something happens (detected agent, incoming reply or incoming trap/notification). Note that this could have already been done as a consequence of the node config. (see users.conf). The argument DefaultAgentConfig is used as default values when this user register agents. The type of Val depends on Item : community = string() timeout = integer() | snmp_timer() max_message_size = integer() version = v1 | v2 | v3 sec_model = any | v1 | v2c | usm sec_name = string() sec_level = noAuthNoPriv | authNoPriv | authPriv","ref":"snmpm.html#register_user_monitor/3","title":"snmpm.register_user_monitor/3","type":"function"},{"doc":"","ref":"snmpm.html#register_user_monitor/4","title":"snmpm.register_user_monitor/4","type":"function"},{"doc":"EngineID = string() UserName = string() Conf = [usm_config()] usm_config() = {Item, Val} Item = sec_name | auth | auth_key | priv | priv_key Val = term() Reason = term() Explicitly instruct the manager to handle this USM user. Note that there is an alternate way to do the same thing: Add the usm user to the manager config files (see usm.conf). The type of Val depends on Item : sec_name = string() auth = usmNoAuthProtocol | usmHMACMD5AuthProtocol | usmHMACSHAAuthProtocoltimeout auth_key = [integer()] (length 16 if auth = usmHMACMD5AuthProtocol, length 20 if auth = usmHMACSHAAuthProtocol) priv = usmNoPrivProtocol | usmDESPrivProtocol | usmAesCfb128Protocol priv_key = [integer()] (length is 16 if priv = usmDESPrivProtocol | usmAesCfb128Protocol).","ref":"snmpm.html#register_usm_user/3","title":"snmpm.register_usm_user/3","type":"function"},{"doc":"Ref = net_if Restart the indicated process ( Ref ). Note that its not without risk to restart a process, and should therefor be used with care.","ref":"snmpm.html#restart/1","title":"snmpm.restart/1","type":"function"},{"doc":"NewType = OldType = atl_type() Reason = term() Changes the run-time Audit Trail log type. Note that this has no effect on the application configuration as defined by configuration files, so a node restart will revert the config to whatever is in those files. This function is primarily useful in testing/debugging scenarios.","ref":"snmpm.html#set_log_type/1","title":"snmpm.set_log_type/1","type":"function"},{"doc":"UserId = term() TargetName = target_name() Oids = [oid()] SendOpts = send_opts() send_opts() = [send_opt()] send_opt() = {context, string()} | {timeout, pos_integer()} | {extra, term()} | {community, community()} | {sec_model, sec_model()} | {sec_name, string()} | {sec_level, sec_level()} | {max_message_size, pos_integer()} SnmpReply = snmp_reply() Remaining = integer() Reason = {send_failed, ReqId, ActualReason} | {invalid_sec_info, SecInfo, SnmpInfo} | term() ReqId = term() ActualReason = term() SecInfo = [sec_info()] sec_info() = {sec_tag(), ExpectedValue, ReceivedValue} sec_tag() = atom() ExpectedValue = ReceivedValue = term() SnmpInfo = term() Synchronous get-request . Remaining is the remaining time of the given (or default) timeout time. When Reason is {send_failed, ...} it means that the net_if process failed to send the message. This could happen because of any number of reasons, i.e. encoding error. ActualReason is the actual reason in this case. The send option extra specifies an opaque data structure passed on to the net-if process. The net-if process included in this application makes, with one exception, no use of this info, so the only use for it in such a option (when using the built in net-if) would be tracing. The one usage exception is: Any tuple with snmpm_extra_info_tag as its first element is reserved for internal use. Some of the send options ( community , sec_model , sec_name , sec_level and max_message_size ) are override options . That is, for this request, they override any configuration done when the agent was registered. For SnmpInfo , see the user callback function handle_report .","ref":"snmpm.html#sync_get2/3","title":"snmpm.sync_get2/3","type":"function"},{"doc":"","ref":"snmpm.html#sync_get2/4","title":"snmpm.sync_get2/4","type":"function"},{"doc":"UserId = term() TargetName = target_name() NonRep = integer() MaxRep = integer() Oids = [oid()] SendOpts = send_opts() send_opts() = [send_opt()] send_opt() = {context, string()} | {timeout, pos_integer()} | {extra, term()} | {community, community()} | {sec_model, sec_model()} | {sec_name, string()} | {sec_level, sec_level()} | {max_message_size, pos_integer()} SnmpReply = snmp_reply() Remaining = integer() Reason = {send_failed, ReqId, ActualReason} | {invalid_sec_info, SecInfo, SnmpInfo} | term() ReqId = term() ActualReason = term() SecInfo = [sec_info()] sec_info() = {sec_tag(), ExpectedValue, ReceivedValue} sec_tag() = atom() ExpectedValue = ReceivedValue = term() SnmpInfo = term() Synchronous get-bulk-request (See RFC1905). Remaining is the remaining time of the given (or default) timeout time. When Reason is {send_failed, ...} it means that the net_if process failed to send the message. This could happen because of any number of reasons, i.e. encoding error. ActualReason is the actual reason in this case. The send option extra specifies an opaque data structure passed on to the net-if process. The net-if process included in this application makes, with one exception, no use of this info, so the only use for it in such a option (when using the built in net-if) would be tracing. The one usage exception is: Any tuple with snmpm_extra_info_tag as its first element is reserved for internal use. Some of the send options ( community , sec_model , sec_name , sec_level and max_message_size ) are override options . That is, for this request, they override any configuration done when the agent was registered. For SnmpInfo , see the user callback function handle_report .","ref":"snmpm.html#sync_get_bulk2/5","title":"snmpm.sync_get_bulk2/5","type":"function"},{"doc":"","ref":"snmpm.html#sync_get_bulk2/6","title":"snmpm.sync_get_bulk2/6","type":"function"},{"doc":"UserId = term() TargetName = target_name() Oids = [oid()] SendOpts = send_opts() send_opts() = [send_opt()] send_opt() = {context, string()} | {timeout, pos_integer()} | {extra, term()} | {community, community()} | {sec_model, sec_model()} | {sec_name, string()} | {sec_level, sec_level()} | {max_message_size, pos_integer()} SnmpReply = snmp_reply() Remaining = integer() Reason = {send_failed, ReqId, ActualReason} | {invalid_sec_info, SecInfo, SnmpInfo} | term() ReqId = term() ActualReason = term() SecInfo = [sec_info()] sec_info() = {sec_tag(), ExpectedValue, ReceivedValue} sec_tag() = atom() ExpectedValue = ReceivedValue = term() SnmpInfo = term() Synchronous get-next-request . Remaining is the remaining time of the given (or default) timeout time. When Reason is {send_failed, ...} it means that the net_if process failed to send the message. This could happen because of any number of reasons, i.e. encoding error. ActualReason is the actual reason in this case. The send option extra specifies an opaque data structure passed on to the net-if process. The net-if process included in this application makes, with one exception, no use of this info, so the only use for it in such a option (when using the built in net-if) would be tracing. The one usage exception is: Any tuple with snmpm_extra_info_tag as its first element is reserved for internal use. Some of the send options ( community , sec_model , sec_name , sec_level and max_message_size ) are override options . That is, for this request, they override any configuration done when the agent was registered. For SnmpInfo , see the user callback function handle_report .","ref":"snmpm.html#sync_get_next2/3","title":"snmpm.sync_get_next2/3","type":"function"},{"doc":"","ref":"snmpm.html#sync_get_next2/4","title":"snmpm.sync_get_next2/4","type":"function"},{"doc":"UserId = term() TargetName = target_name() VarsAndVals = vars_and_vals() SendOpts = send_opts() send_opts() = [send_opt()] send_opt() = {context, string()} | {timeout, pos_integer()} | {extra, term()} | {community, community()} | {sec_model, sec_model()} | {sec_name, string()} | {sec_level, sec_level()} | {max_message_size, pos_integer()} SnmpReply = snmp_reply() Remaining = integer() Reason = {send_failed, ReqId, ActualReason} | {invalid_sec_info, SecInfo, SnmpInfo} | term() ReqId = term() ActualReason = term() SecInfo = [sec_info()] sec_info() = {sec_tag(), ExpectedValue, ReceivedValue} sec_tag() = atom() ExpectedValue = ReceivedValue = term() SnmpInfo = term() Synchronous set-request . Remaining is the remaining time of the given (or default) timeout time. When Reason is {send_failed, ...} it means that the net_if process failed to send the message. This could happen because of any number of reasons, i.e. encoding error. ActualReason is the actual reason in this case. When var_and_val() is {oid(), value()} , the manager makes an educated guess based on the loaded mibs. The send option extra specifies an opaque data structure passed on to the net-if process. The net-if process included in this application makes, with one exception, no use of this info, so the only use for it in such a option (when using the built in net-if) would be tracing. The one usage exception is: Any tuple with snmpm_extra_info_tag as its first element is reserved for internal use. Some of the send options ( community , sec_model , sec_name , sec_level and max_message_size ) are override options . That is, for this request, they override any configuration done when the agent was registered. For SnmpInfo , see the user callback function handle_report .","ref":"snmpm.html#sync_set2/3","title":"snmpm.sync_set2/3","type":"function"},{"doc":"","ref":"snmpm.html#sync_set2/4","title":"snmpm.sync_set2/4","type":"function"},{"doc":"Mib = MibName MibName = string() Reason = term() Unload a Mib from the manager. The MibName is the name of the Mib, including the path to where the compiled mib is found. For example, Dir = code:priv_dir(my_app) ++ &quot;/mibs/&quot;, snmpm:unload_mib(Dir ++ &quot;MY-MIB&quot;).","ref":"snmpm.html#unload_mib/1","title":"snmpm.unload_mib/1","type":"function"},{"doc":"UserId = term() TargetName = target_name() Unregister the agent.","ref":"snmpm.html#unregister_agent/2","title":"snmpm.unregister_agent/2","type":"function"},{"doc":"Id = term() Unregister the user.","ref":"snmpm.html#unregister_user/1","title":"snmpm.unregister_user/1","type":"function"},{"doc":"EngineID = string() UserName = string() Reason = term() Unregister this USM user.","ref":"snmpm.html#unregister_usm_user/2","title":"snmpm.unregister_usm_user/2","type":"function"},{"doc":"UserId = term() TargetName = target_name() Info = [{item(), item_value()}] Item = item() item() = atom() Val = item_value() item_value() = term() Reason = term() Update agent config. The function update_agent_info/3 should be used when several values needs to be updated atomically. See function register_agent for more info about what kind of items are allowed.","ref":"snmpm.html#update_agent_info/3","title":"snmpm.update_agent_info/3","type":"function"},{"doc":"","ref":"snmpm.html#update_agent_info/4","title":"snmpm.update_agent_info/4","type":"function"},{"doc":"EngineID = string() UsmName = string() Item = sec_name | auth | auth_key | priv | priv_key Val = term() Reason = term() Update usm user config.","ref":"snmpm.html#update_usm_user_info/4","title":"snmpm.update_usm_user_info/4","type":"function"},{"doc":"EngineID = string() UsmName = string() Item = sec_name | auth | auth_key | priv | priv_key Reason = term() Retrieve usm user config.","ref":"snmpm.html#usm_user_info/3","title":"snmpm.usm_user_info/3","type":"function"},{"doc":"Ref = server | config | net_if | note_store | all Verbosity = verbosity() verbosity() = silence | info | log | debug | trace Sets verbosity for the designated process. For the lowest verbosity silence , nothing is printed. The higher the verbosity, the more is printed.","ref":"snmpm.html#verbosity/2","title":"snmpm.verbosity/2","type":"function"},{"doc":"UserId = term() Agents = [TargetName] TargetName = target_name() Get a list of all registered agents or all agents registered by a specific user.","ref":"snmpm.html#which_agents/0","title":"snmpm.which_agents/0","type":"function"},{"doc":"","ref":"snmpm.html#which_agents/1","title":"snmpm.which_agents/1","type":"function"},{"doc":"Mibs = [{MibName, MibFile}] MibName = atom() MibFile = string() Get a list of all the mib's loaded into the manager.","ref":"snmpm.html#which_mibs/0","title":"snmpm.which_mibs/0","type":"function"},{"doc":"Users = [UserId] UserId = term() Get a list of the identities of all registered users.","ref":"snmpm.html#which_users/0","title":"snmpm.which_users/0","type":"function"},{"doc":"UsmUsers = [{EngineID,UserName}] EngineID = string() UsmName = string() Get a list of all registered usm users.","ref":"snmpm.html#which_usm_users/0","title":"snmpm.which_usm_users/0","type":"function"},{"doc":"UsmUsers = [UserName] UserName = string() Get a list of all registered usm users with engine-id EngineID .","ref":"snmpm.html#which_usm_users/1","title":"snmpm.which_usm_users/1","type":"function"},{"doc":"The module snmpm_conf contains various utility functions to used for manipulating (write/append/read) the config files of the SNMP manager.","ref":"snmpm_conf.html","title":"snmpm_conf","type":"module"},{"doc":"UserId = term() TargetName = string() Comm = string() Domain = transportDomain() Addr = transportAddress() EngineID = string() Timeout = integer() MaxMessageSize = integer() Version = v1 | v2 | v3 SecModel = v1 | v2c | usm SecName = string() SecLevel = noAuthNoPriv | authNoPriv | authPriv agents_entry() = term() Create an entry for the manager agents config file, agents.conf . See Agents for more info.","ref":"snmpm_conf.html#agents_entry/12","title":"snmpm_conf.agents_entry/12","type":"function"},{"doc":"Dir = string() Conf = [agents_entry()] Append the agents config to the current manager agents config file. Dir is the path to the directory where to store the config file. See Agents for more info.","ref":"snmpm_conf.html#append_agents_config/2","title":"snmpm_conf.append_agents_config/2","type":"function"},{"doc":"Dir = string() Conf = [manager_entry()] Append the config to the current manager config file. Dir is the path to the directory where to store the config file. See Manager Information for more info.","ref":"snmpm_conf.html#append_manager_config/2","title":"snmpm_conf.append_manager_config/2","type":"function"},{"doc":"Dir = string() Conf = [users_entry()] Append the users config to the current manager users config file. Dir is the path to the directory where to store the config file. See Users for more info.","ref":"snmpm_conf.html#append_users_config/2","title":"snmpm_conf.append_users_config/2","type":"function"},{"doc":"Dir = string() Conf = [usm_entry()] Append the usm config to the current manager usm config file. Dir is the path to the directory where to store the config file. See Security data for USM for more info.","ref":"snmpm_conf.html#append_usm_config/2","title":"snmpm_conf.append_usm_config/2","type":"function"},{"doc":"Tag = address | port | engine_id | max_message_size Val = term() manager_entry() = term() Create an entry for the manager config file, manager.conf . The type of Val depends on the value of Tag , see Manager Information for more info.","ref":"snmpm_conf.html#manager_entry/2","title":"snmpm_conf.manager_entry/2","type":"function"},{"doc":"Dir = string() Conf = [agents_entry()] Read the current manager agents config file. Dir is the path to the directory where to store the config file. See Agents for more info.","ref":"snmpm_conf.html#read_agents_config/1","title":"snmpm_conf.read_agents_config/1","type":"function"},{"doc":"Dir = string() Conf = [manager_entry()] Read the current manager config file. Dir is the path to the directory where to store the config file. See Manager Information for more info.","ref":"snmpm_conf.html#read_manager_config/1","title":"snmpm_conf.read_manager_config/1","type":"function"},{"doc":"Dir = string() Conf = [users_entry()] Read the current manager users config file. Dir is the path to the directory where to store the config file. See Users for more info.","ref":"snmpm_conf.html#read_users_config/1","title":"snmpm_conf.read_users_config/1","type":"function"},{"doc":"Dir = string() Conf = [usm_entry()] Read the current manager usm config file. Dir is the path to the directory where to store the config file. See Security data for USM for more info.","ref":"snmpm_conf.html#read_usm_config/1","title":"snmpm_conf.read_usm_config/1","type":"function"},{"doc":"UserId = term() UserMod = atom() UserData = term() standard_entry() = term() Create an entry for the manager users config file, users.conf . users_entry(UserId) translates to the following call: users_entry(UserId, snmpm_user_default) . users_entry(UserId, UserMod) translates to the following call: users_entry(UserId, UserMod, undefined) . See Users for more info.","ref":"snmpm_conf.html#users_entry/1","title":"snmpm_conf.users_entry/1","type":"function"},{"doc":"","ref":"snmpm_conf.html#users_entry/2","title":"snmpm_conf.users_entry/2","type":"function"},{"doc":"","ref":"snmpm_conf.html#users_entry/3","title":"snmpm_conf.users_entry/3","type":"function"},{"doc":"EngineID = string() UserName = string() SecName = string() AuthP = usmNoAuthProtocol | usmHMACMD5AuthProtocol | usmHMACSHAAuthProtocol AuthKey = [integer()] PrivP = usmNoPrivProtocol | usmDESPrivProtocol | usmAesCfb128Protocol PrivKey = [integer()] usm_entry() = term() Create an entry for the agent community config file, community.conf . See Security data for USM for more info.","ref":"snmpm_conf.html#usm_entry/6","title":"snmpm_conf.usm_entry/6","type":"function"},{"doc":"","ref":"snmpm_conf.html#usm_entry/7","title":"snmpm_conf.usm_entry/7","type":"function"},{"doc":"Dir = string() Hdr = string() Conf = [_entry()] Write the manager agents config to the manager agents config file. Dir is the path to the directory where to store the config file. Hdr is an optional file header (note that this text is written to the file as is). See Agents for more info.","ref":"snmpm_conf.html#write_agents_config/2","title":"snmpm_conf.write_agents_config/2","type":"function"},{"doc":"","ref":"snmpm_conf.html#write_agents_config/3","title":"snmpm_conf.write_agents_config/3","type":"function"},{"doc":"Dir = string() Hdr = string() Conf = [manager_entry()] Write the manager config to the manager config file. Dir is the path to the directory where to store the config file. Hdr is an optional file header (note that this text is written to the file as is). See Manager Information for more info.","ref":"snmpm_conf.html#write_manager_config/2","title":"snmpm_conf.write_manager_config/2","type":"function"},{"doc":"","ref":"snmpm_conf.html#write_manager_config/3","title":"snmpm_conf.write_manager_config/3","type":"function"},{"doc":"Dir = string() Hdr = string() Conf = [users_entry()] Write the manager users config to the manager users config file. Dir is the path to the directory where to store the config file. Hdr is an optional file header (note that this text is written to the file as is). See Users for more info.","ref":"snmpm_conf.html#write_users_config/2","title":"snmpm_conf.write_users_config/2","type":"function"},{"doc":"","ref":"snmpm_conf.html#write_users_config/3","title":"snmpm_conf.write_users_config/3","type":"function"},{"doc":"Dir = string() Hdr = string() Conf = [usm_entry()] Write the manager usm config to the manager usm config file. Dir is the path to the directory where to store the config file. Hdr is an optional file header (note that this text is written to the file as is). See Security data for USM for more info.","ref":"snmpm_conf.html#write_usm_config/2","title":"snmpm_conf.write_usm_config/2","type":"function"},{"doc":"","ref":"snmpm_conf.html#write_usm_config/3","title":"snmpm_conf.write_usm_config/3","type":"function"},{"doc":"The module snmpm_mpd implements the version independent Message Processing and Dispatch functionality in SNMP for the manager. It is supposed to be used from a Network Interface process (Definition of Manager Net if). Legacy API function process_msg/7 that has got separate IpAddr and PortNumber arguments still works as before for backwards compatibility reasons.","ref":"snmpm_mpd.html","title":"snmpm_mpd","type":"module"},{"doc":"Vsn = 'version-1' | 'version-2' | 'version-3' NoteStore = pid() Pdu = #pdu MsgData = term() Logger = function() Packet = binary() Reason = term() Generates a possibly encrypted packet to be sent to the network. NoteStore is the pid() of the note-store process. MsgData is the message specific data used in the SNMP message. In SNMPv1 and SNMPv2c, this message data is the community string. In SNMPv3, it is the context information. Logger is the function used for audit trail logging.","ref":"snmpm_mpd.html#generate_msg/5","title":"snmpm_mpd.generate_msg/5","type":"function"},{"doc":"Vsn = 'version-1' | 'version-2' | 'version-3' Pdu = #pdu MsgData = term() Logger = function() Packet = binary() Reason = term() Generates a possibly encrypted response packet to be sent to the network. MsgData is the message specific data used in the SNMP message. This value is received from the process_msg function.","ref":"snmpm_mpd.html#generate_response_msg/4","title":"snmpm_mpd.generate_response_msg/4","type":"function"},{"doc":"Vsns = [Vsn] Vsn = v1 | v2 | v3 This function can be called from the net_if process at start-up. The options list defines which versions to use. It also initializes some SNMP counters.","ref":"snmpm_mpd.html#init/1","title":"snmpm_mpd.init/1","type":"function"},{"doc":"Msg = binary() Domain = transportDomainUdpIpv4 | transportDomainUdpIpv6 Addr = { inet:ip_address(), inet:port_number() } State = mpd_state() NoteStore = pid() Logger = function() Vsn = 'version-1' | 'version-2' | 'version-3' Pdu = #pdu PduMs = integer() MsgData = term() Processes an incoming message. Performs authentication and decryption as necessary. The return values should be passed the manager server. NoteStore is the pid() of the note-store process. Logger is the function used for audit trail logging. In the case when the pdu type is report , MsgData is either ok or {error, ReqId, Reason} .","ref":"snmpm_mpd.html#process_msg/6","title":"snmpm_mpd.process_msg/6","type":"function"}]