searchNodes=[{"doc":"This module contains interface functions for the TLS/DTLS protocol. For detailed information about the supported standards see ssl(6). SEE ALSO inet(3) and gen_tcp(3) gen_udp(3)","ref":"ssl.html","title":"ssl","type":"module"},{"doc":"Make Deferred suites become the least preferred suites, that is put them at the end of the cipher suite list Suites after removing them from Suites if present. Deferred may be a list of cipher suites or a list of filters in which case the filters are use on Suites to extract the Deferred cipher list.","ref":"ssl.html#append_cipher_suites/2","title":"ssl.append_cipher_suites/2","type":"function"},{"doc":"Lists all possible cipher suites corresponding to Description that are available. The exclusive option will exclusively list cipher suites introduced in Version whereas the other options are inclusive from the lowest possible version to Version . The all options includes all suites except the anonymous. TLS-1.3 has no overlapping cipher suites with previous TLS versions, that is the result of cipher_suites(all, 'tlsv1.3'). contains a separate set of suites that can be used with TLS-1.3 an other set that can be used if a lower version is negotiated. No anonymous suites are supported by TLS-1.3. Also note that the cipher suites returned by this function are the cipher suites that the OTP ssl application can support provided that they are supported by the cryptolib linked with the OTP crypto application. Use ssl:filter_cipher_suites(Suites, []). to filter the list for the current cryptolib. Note that cipher suites may be filtered out because they are too old or too new depending on the cryptolib","ref":"ssl.html#cipher_suites/2","title":"ssl.cipher_suites/2","type":"function"},{"doc":"Same as cipher_suites/2 but lists RFC or OpenSSL string names instead of erl_cipher_suite()","ref":"ssl.html#cipher_suites/3","title":"ssl.cipher_suites/3","type":"function"},{"doc":"PEM files, used by ssl API-functions, are cached. The cache is regularly checked to see if any cache entries should be invalidated, however this function provides a way to unconditionally clear the whole cache.","ref":"ssl.html#clear_pem_cache/0","title":"ssl.clear_pem_cache/0","type":"function"},{"doc":"Closes a TLS/DTLS connection.","ref":"ssl.html#close/1","title":"ssl.close/1","type":"function"},{"doc":"Closes or downgrades a TLS connection. In the latter case the transport connection will be handed over to the NewController process after receiving the TLS close alert from the peer. The returned transport socket will have the following options set: [{active, false}, {packet, 0}, {mode, binary}]","ref":"ssl.html#close/2","title":"ssl.close/2","type":"function"},{"doc":"Upgrades a gen_tcp , or equivalent, connected socket to a TLS socket, that is, performs the client-side TLS handshake. If the option verify is set to verify_peer the option server_name_indication shall also be specified, if it is not no Server Name Indication extension will be sent, and public_key:pkix_verify_hostname/2 will be called with the IP-address of the connection as ReferenceID , which is probably not what you want. If the option {handshake, hello} is used the handshake is paused after receiving the server hello message and the success response is {ok, SslSocket, Ext} instead of {ok, SslSocket} . Thereafter the handshake is continued or canceled by calling handshake_continue/3 or handshake_cancel/1 . If the option active is set to once , true or an integer value, the process owning the sslsocket will receive messages of type active_msgs()","ref":"ssl.html#connect/2","title":"ssl.connect/2","type":"function"},{"doc":"","ref":"ssl.html#connect/3","title":"ssl.connect/3","type":"function"},{"doc":"Opens a TLS/DTLS connection to Host , Port . When the option verify is set to verify_peer the check public_key:pkix_verify_hostname/2 will be performed in addition to the usual x509-path validation checks. If the check fails the error {bad_cert, hostname_check_failed} will be propagated to the path validation fun verify_fun , where it is possible to do customized checks by using the full possibilities of the public_key:pkix_verify_hostname/3 API. When the option server_name_indication is provided, its value (the DNS name) will be used as ReferenceID to public_key:pkix_verify_hostname/2 . When no server_name_indication option is given, the Host argument will be used as Server Name Indication extension. The Host argument will also be used for the public_key:pkix_verify_hostname/2 check and if the Host argument is an inet:ip_address() the ReferenceID used for the check will be {ip, Host} otherwise dns_id will be assumed with a fallback to ip if that fails. According to good practices certificates should not use IP-addresses as &quot;server names&quot;. It would be very surprising if this happen outside a closed network. If the option {handshake, hello} is used the handshake is paused after receiving the server hello message and the success response is {ok, SslSocket, Ext} instead of {ok, SslSocket} . Thereafter the handshake is continued or canceled by calling handshake_continue/3 or handshake_cancel/1 . If the option active is set to once , true or an integer value, the process owning the sslsocket will receive messages of type active_msgs()","ref":"ssl.html#connect/3","title":"ssl.connect/3","type":"function"},{"doc":"","ref":"ssl.html#connect/4","title":"ssl.connect/4","type":"function"},{"doc":"Returns the most relevant information about the connection, ssl options that are undefined will be filtered out. Note that values that affect the security of the connection will only be returned if explicitly requested by connection_information/2. The legacy Item = cipher_suite was removed in OTP-23. Previously it returned the cipher suite on its (undocumented) legacy format. It is replaced by selected_cipher_suite .","ref":"ssl.html#connection_information/1","title":"ssl.connection_information/1","type":"function"},{"doc":"Returns the requested information items about the connection, if they are defined. Note that client_random, server_random, master_secret and keylog are values that affect the security of connection. Meaningful atoms, not specified above, are the ssl option names. In order to retrieve keylog and other secret information from a TLS 1.3 connection, keep_secrets must be configured in advance and set to true . If only undefined options are requested the resulting list can be empty.","ref":"ssl.html#connection_information/2","title":"ssl.connection_information/2","type":"function"},{"doc":"Assigns a new controlling process to the SSL socket. A controlling process is the owner of an SSL socket, and receives all messages from the socket.","ref":"ssl.html#controlling_process/2","title":"ssl.controlling_process/2","type":"function"},{"doc":"Returns a list of supported ECCs. eccs() is equivalent to calling eccs(Protocol) with all supported protocols and then deduplicating the output.","ref":"ssl.html#eccs/0","title":"ssl.eccs/0","type":"function"},{"doc":"","ref":"ssl.html#eccs/1","title":"ssl.eccs/1","type":"function"},{"doc":"Removes cipher suites if any of the filter functions returns false for any part of the cipher suite. If no filter function is supplied for some part the default behaviour regards it as if there was a filter function that returned true. For examples see Customizing cipher suites Additionaly this function also filters the cipher suites to exclude cipher suites not supported by the cryptolib used by the OTP crypto application. That is calling ssl:filter_cipher_suites(Suites, []) will be equivalent to only applying the filters for cryptolib support.","ref":"ssl.html#filter_cipher_suites/2","title":"ssl.filter_cipher_suites/2","type":"function"},{"doc":"Presents the error returned by an SSL function as a printable string.","ref":"ssl.html#format_error/1","title":"ssl.format_error/1","type":"function"},{"doc":"Gets the values of the specified socket options.","ref":"ssl.html#getopts/2","title":"ssl.getopts/2","type":"function"},{"doc":"Gets one or more statistic options for the underlying TCP socket. See inet:getstat/2 for statistic options description.","ref":"ssl.html#getstat/1","title":"ssl.getstat/1","type":"function"},{"doc":"","ref":"ssl.html#getstat/2","title":"ssl.getstat/2","type":"function"},{"doc":"Performs the TLS/DTLS server-side handshake. Returns a new TLS/DTLS socket if the handshake is successful. If the option active is set to once , true or an integer value, the process owning the sslsocket will receive messages of type active_msgs()","ref":"ssl.html#handshake/1","title":"ssl.handshake/1","type":"function"},{"doc":"","ref":"ssl.html#handshake/2","title":"ssl.handshake/2","type":"function"},{"doc":"If Socket is a ordinary socket() : upgrades a gen_tcp , or equivalent, socket to an SSL socket, that is, performs the TLS server-side handshake and returns a TLS socket. The Socket shall be in passive mode ({active, false}) before calling this function or else the behavior of this function is undefined. If Socket is an sslsocket() : provides extra TLS/DTLS options to those specified in listen/2 and then performs the TLS/DTLS handshake. Returns a new TLS/DTLS socket if the handshake is successful. If option {handshake, hello} is specified the handshake is paused after receiving the client hello message and the success response is {ok, SslSocket, Ext} instead of {ok, SslSocket} . Thereafter the handshake is continued or canceled by calling handshake_continue/3 or handshake_cancel/1 . If the option active is set to once , true or an integer value, the process owning the sslsocket will receive messages of type active_msgs()","ref":"ssl.html#handshake/2","title":"ssl.handshake/2","type":"function"},{"doc":"","ref":"ssl.html#handshake/3","title":"ssl.handshake/3","type":"function"},{"doc":"Cancel the handshake with a fatal USER_CANCELED alert.","ref":"ssl.html#handshake_cancel/1","title":"ssl.handshake_cancel/1","type":"function"},{"doc":"Continue the TLS handshake possiby with new, additional or changed options.","ref":"ssl.html#handshake_continue/2","title":"ssl.handshake_continue/2","type":"function"},{"doc":"","ref":"ssl.html#handshake_continue/3","title":"ssl.handshake_continue/3","type":"function"},{"doc":"Creates an SSL listen socket.","ref":"ssl.html#listen/2","title":"ssl.listen/2","type":"function"},{"doc":"Returns the protocol negotiated through ALPN or NPN extensions.","ref":"ssl.html#negotiated_protocol/1","title":"ssl.negotiated_protocol/1","type":"function"},{"doc":"The peer certificate is returned as a DER-encoded binary. The certificate can be decoded with public_key:pkix_decode_cert/2 Suggested further reading about certificates is public_key User's Guide and ssl User's Guide","ref":"ssl.html#peercert/1","title":"ssl.peercert/1","type":"function"},{"doc":"Returns the address and port number of the peer.","ref":"ssl.html#peername/1","title":"ssl.peername/1","type":"function"},{"doc":"Make Preferred suites become the most preferred suites that is put them at the head of the cipher suite list Suites after removing them from Suites if present. Preferred may be a list of cipher suites or a list of filters in which case the filters are use on Suites to extract the preferred cipher list.","ref":"ssl.html#prepend_cipher_suites/2","title":"ssl.prepend_cipher_suites/2","type":"function"},{"doc":"Uses the Pseudo-Random Function (PRF) of a TLS session to generate extra key material. It either takes user-generated values for Secret and Seed or atoms directing it to use a specific value from the session security parameters.","ref":"ssl.html#prf/5","title":"ssl.prf/5","type":"function"},{"doc":"Receives a packet from a socket in passive mode. A closed socket is indicated by return value {error, closed} . Argument Length is meaningful only when the socket is in mode raw and denotes the number of bytes to read. If Length = 0, all available bytes are returned. If Length &gt; 0, exactly Length bytes are returned, or an error; possibly discarding less than Length bytes of data when the socket gets closed from the other side. Optional argument Timeout specifies a time-out in milliseconds. The default value is infinity .","ref":"ssl.html#recv/2","title":"ssl.recv/2","type":"function"},{"doc":"","ref":"ssl.html#recv/3","title":"ssl.recv/3","type":"function"},{"doc":"Initiates a new handshake. A notable return value is {error, renegotiation_rejected} indicating that the peer refused to go through with the renegotiation, but the connection is still active using the previously negotiated session.","ref":"ssl.html#renegotiate/1","title":"ssl.renegotiate/1","type":"function"},{"doc":"Writes Data to SslSocket . A notable return value is {error, closed} indicating that the socket is closed.","ref":"ssl.html#send/2","title":"ssl.send/2","type":"function"},{"doc":"Sets options according to Options for socket SslSocket .","ref":"ssl.html#setopts/2","title":"ssl.setopts/2","type":"function"},{"doc":"Immediately closes a socket in one or two directions. How == write means closing the socket for writing, reading from it is still possible. To be able to handle that the peer has done a shutdown on the write side, option {exit_on_close, false} is useful.","ref":"ssl.html#shutdown/2","title":"ssl.shutdown/2","type":"function"},{"doc":"Returns the local address and port number of socket SslSocket .","ref":"ssl.html#sockname/1","title":"ssl.sockname/1","type":"function"},{"doc":"Starts the SSL application. Default type is temporary .","ref":"ssl.html#start/0","title":"ssl.start/0","type":"function"},{"doc":"","ref":"ssl.html#start/1","title":"ssl.start/1","type":"function"},{"doc":"Stops the SSL application.","ref":"ssl.html#stop/0","title":"ssl.stop/0","type":"function"},{"doc":"Converts an RFC or OpenSSL name string to an erl_cipher_suite() Returns an error if the cipher suite is not supported or the name is not a valid cipher suite name.","ref":"ssl.html#str_to_suite/1","title":"ssl.str_to_suite/1","type":"function"},{"doc":"Converts erl_cipher_suite() to OpenSSL name string. PRE TLS-1.3 these names differ for RFC names","ref":"ssl.html#suite_to_openssl_str/1","title":"ssl.suite_to_openssl_str/1","type":"function"},{"doc":"Converts erl_cipher_suite() to RFC name string.","ref":"ssl.html#suite_to_str/1","title":"ssl.suite_to_str/1","type":"function"},{"doc":"Accepts an incoming connection request on a listen socket. ListenSocket must be a socket returned from listen/2 . The socket returned is to be passed to handshake/[2,3] to complete handshaking, that is, establishing the TLS/DTLS connection. Most API functions require that the TLS/DTLS connection is established to work as expected. The accepted socket inherits the options set for ListenSocket in listen/2 . The default value for Timeout is infinity . If Timeout is specified and no connection is accepted within the given time, {error, timeout} is returned.","ref":"ssl.html#transport_accept/1","title":"ssl.transport_accept/1","type":"function"},{"doc":"","ref":"ssl.html#transport_accept/2","title":"ssl.transport_accept/2","type":"function"},{"doc":"There are cryptographic limits on the amount of plaintext which can be safely encrypted under a given set of keys. If the amount of data surpasses those limits, a key update is triggered and a new set of keys are installed. See also the option key_update_at . This function can be used to explicitly start a key update on a TLS 1.3 connection. There are two types of the key update: if Type is set to write , only the writing key is updated; if Type is set to read_write , both the reading and writing keys are updated.","ref":"ssl.html#update_keys/2","title":"ssl.update_keys/2","type":"function"},{"doc":"Lists information, mainly concerning TLS/DTLS versions, in runtime for debugging and testing purposes. app_vsn The application version of the SSL application. supported TLS versions supported with current application environment and crypto library configuration. Overridden by a version option on connect/[2,3,4] , listen/2 , and handshake/[2,3] . For the negotiated TLS version, see connection_information/1 . supported_dtls DTLS versions supported with current application environment and crypto library configuration. Overridden by a version option on connect/[2,3,4] , listen/2 , and handshake/[2,3] . For the negotiated DTLS version, see connection_information/1 . available All TLS versions supported with the linked crypto library. available_dtls All DTLS versions supported with the linked crypto library. implemented All TLS versions supported by the SSL application if linked with a crypto library with the necessary support. implemented_dtls All DTLS versions supported by the SSL application if linked with a crypto library with the necessary support.","ref":"ssl.html#versions/0","title":"ssl.versions/0","type":"function"},{"doc":"When a TLS/DTLS socket is in active mode (the default), data from the socket is delivered to the owner of the socket in the form of messages as described above. The ssl_passive message is sent only when the socket is in {active, N} mode and the counter dropped to 0. It indicates that the socket has transitioned to passive ( {active, false} ) mode.","ref":"ssl.html#t:active_msgs/0","title":"ssl.active_msgs/0","type":"type"},{"doc":"","ref":"ssl.html#t:algo_filter/0","title":"ssl.algo_filter/0","type":"type"},{"doc":"Maximum number of non-self-issued intermediate certificates that can follow the peer certificate in a valid certification path. So, if depth is 0 the PEER must be signed by the trusted ROOT-CA directly; if 1 the path can be PEER, CA, ROOT-CA; if 2 the path can be PEER, CA, CA, ROOT-CA, and so on. The default value is 10.","ref":"ssl.html#t:allowed_cert_chain_length/0","title":"ssl.allowed_cert_chain_length/0","type":"type"},{"doc":"Configures the server's built-in anti replay feature based on Bloom filters. Allowed values are the pre-defined '10k' , '100k' or a custom 3-tuple that defines the properties of the bloom filters: {WindowSize, HashFunctions, Bits} . WindowSize is the number of seconds after the current Bloom filter is rotated and also the window size used for freshness checks. HashFunctions is the number hash functions and Bits is the number of bits in the bit vector. '10k' and '100k' are simple defaults with the following properties: '10k' : Bloom filters can hold 10000 elements with 3% probability of false positives. WindowSize : 10, HashFunctions : 5, Bits: 72985 (8.91 KiB). '100k' : Bloom filters can hold 100000 elements with 3% probability of false positives. WindowSize : 10, HashFunctions : 5, Bits : 729845 (89.09 KiB). This option is supported by TLS 1.3 and above and only with stateless session tickets. Ticket lifetime, the number of tickets sent by the server and the maximum number of tickets stored by the server in stateful mode are configured by application variables. See also SSL's Users Guide, Anti-Replay Protection in TLS 1.3","ref":"ssl.html#t:anti_replay/0","title":"ssl.anti_replay/0","type":"type"},{"doc":"","ref":"ssl.html#t:app_level_protocol/0","title":"ssl.app_level_protocol/0","type":"type"},{"doc":"Affects TLS-1.0 connections only. Used to change the BEAST mitigation strategy to interoperate with legacy software. Defaults to one_n_minus_one . one_n_minus_one - Perform 1/n-1 BEAST mitigation. zero_n - Perform 0/n BEAST mitigation. disabled - Disable BEAST mitigation. Using {beast_mitigation, disabled} makes TLS-1.0 vulnerable to the BEAST attack.","ref":"ssl.html#t:beast_mitigation/0","title":"ssl.beast_mitigation/0","type":"type"},{"doc":"","ref":"ssl.html#t:bloom_filter_bits/0","title":"ssl.bloom_filter_bits/0","type":"type"},{"doc":"","ref":"ssl.html#t:bloom_filter_hash_functions/0","title":"ssl.bloom_filter_hash_functions/0","type":"type"},{"doc":"","ref":"ssl.html#t:bloom_filter_window_size/0","title":"ssl.bloom_filter_window_size/0","type":"type"},{"doc":"The DER-encoded users certificate. Note that the cert option may also be a list of DER-encoded certificates where the first one is the users certificate and the rest of the certificates constitutes the certificate chain. For maximum interoperability the certificates in the chain should be in the correct order, the chain will be sent as is to the peer. If chain certificates are not provided, certificates from client_cacerts() , server_cacerts() , or client_cafile() , server_cafile() are used to construct the chain. If this option is supplied, it overrides option certfile .","ref":"ssl.html#t:cert/0","title":"ssl.cert/0","type":"type"},{"doc":"Path to a file containing the user certificate on PEM format or possible several certificates where the first one is the users certificate and the rest of the certificates constitutes the certificate chain. For more details see cert() ,","ref":"ssl.html#t:cert_pem/0","title":"ssl.cert_pem/0","type":"type"},{"doc":"","ref":"ssl.html#t:cipher/0","title":"ssl.cipher/0","type":"type"},{"doc":"","ref":"ssl.html#t:cipher_filters/0","title":"ssl.cipher_filters/0","type":"type"},{"doc":"A list of cipher suites that should be supported The function ssl:cipher_suites/2 can be used to find all cipher suites that are supported by default and all cipher suites that may be configured. If you compose your own cipher_suites() make sure they are filtered for cryptolib support ssl:filter_cipher_suites/2 Additionaly the functions ssl:append_cipher_suites/2 , ssl:prepend_cipher_suites/2 , ssl:suite_to_str/1 , ssl:str_to_suite/1 , and ssl:suite_to_openssl_str/1 also exist to help creating customized cipher suite lists. Note that TLS-1.3 and TLS-1.2 cipher suites are not overlapping sets of cipher suites so to support both these versions cipher suites from both versions need to be included. If supporting TLS-1.3 versions prior to TLS-1.2 can not be supported. Non-default cipher suites including anonymous cipher suites (PRE TLS-1.3) are supported for interop/testing purposes and may be used by adding them to your cipher suite list. Note that they must also be supported/enabled by the peer to actually be used.","ref":"ssl.html#t:cipher_suites/0","title":"ssl.cipher_suites/0","type":"type"},{"doc":"","ref":"ssl.html#t:ciphers/0","title":"ssl.ciphers/0","type":"type"},{"doc":"The list of protocols supported by the client to be sent to the server to be used for an Application-Layer Protocol Negotiation (ALPN). If the server supports ALPN then it will choose a protocol from this list; otherwise it will fail the connection with a &quot;no_application_protocol&quot; alert. A server that does not support ALPN will ignore this value. The list of protocols must not contain an empty binary. The negotiated protocol can be retrieved using the negotiated_protocol/1 function.","ref":"ssl.html#t:client_alpn/0","title":"ssl.client_alpn/0","type":"type"},{"doc":"The DER-encoded trusted certificates. If this option is supplied it overrides option cacertfile .","ref":"ssl.html#t:client_cacerts/0","title":"ssl.client_cacerts/0","type":"type"},{"doc":"Path to a file containing PEM-encoded CA certificates. The CA certificates are used during server authentication and when building the client certificate chain.","ref":"ssl.html#t:client_cafile/0","title":"ssl.client_cafile/0","type":"type"},{"doc":"Configures the early data to be sent by the client. In order to be able to verify that the server has the intention to process the early data, the following 3-tuple is sent to the user process: {ssl, SslSocket, {early_data, Result}} where Result is either accepted or rejected . It is the responsibility of the user to handle a rejected Early Data and to resend when it is appropriate.","ref":"ssl.html#t:client_early_data/0","title":"ssl.client_early_data/0","type":"type"},{"doc":"","ref":"ssl.html#t:client_option/0","title":"ssl.client_option/0","type":"type"},{"doc":"Indicates that the client is to try to perform Next Protocol Negotiation. If precedence is server, the negotiated protocol is the first protocol to be shown on the server advertised list, which is also on the client preference list. If precedence is client, the negotiated protocol is the first protocol to be shown on the client preference list, which is also on the server advertised list. If the client does not support any of the server advertised protocols or the server does not advertise any protocols, the client falls back to the first protocol in its list or to the default protocol (if a default is supplied). If the server does not support Next Protocol Negotiation, the connection terminates if no default protocol is supplied.","ref":"ssl.html#t:client_preferred_next_protocols/0","title":"ssl.client_preferred_next_protocols/0","type":"type"},{"doc":"Specifies the identity the client presents to the server. The matching secret is found by calling user_lookup_fun","ref":"ssl.html#t:client_psk_identity/0","title":"ssl.client_psk_identity/0","type":"type"},{"doc":"In protocols that support client-initiated renegotiation, the cost of resources of such an operation is higher for the server than the client. This can act as a vector for denial of service attacks. The SSL application already takes measures to counter-act such attempts, but client-initiated renegotiation can be strictly disabled by setting this option to false . The default value is true . Note that disabling renegotiation can result in long-lived connections becoming unusable due to limits on the number of messages the underlying cipher suite can encipher.","ref":"ssl.html#t:client_renegotiation/0","title":"ssl.client_renegotiation/0","type":"type"},{"doc":"Reuses a specific session. The session should be refered by its session id if it is earlier saved with the option {reuse_sessions, save} since OTP-21.3 or explicitly specified by its session id and associated data since OTP-22.3. See also SSL's Users Guide, Session Reuse pre TLS 1.3","ref":"ssl.html#t:client_reuse_session/0","title":"ssl.client_reuse_session/0","type":"type"},{"doc":"When save is specified a new connection will be negotiated and saved for later reuse. The session ID can be fetched with connection_information/2 and used with the client option reuse_session The boolean value true specifies that if possible, automatized session reuse will be performed. If a new session is created, and is unique in regard to previous stored sessions, it will be saved for possible later reuse. Since OTP-21.3","ref":"ssl.html#t:client_reuse_sessions/0","title":"ssl.client_reuse_sessions/0","type":"type"},{"doc":"","ref":"ssl.html#t:client_session_tickets/0","title":"ssl.client_session_tickets/0","type":"type"},{"doc":"Configures the session ticket functionality. Allowed values are disabled , manual and auto . If it is set to manual the client will send the ticket information to user process in a 3-tuple: {ssl, session_ticket, {SNI, TicketData}} where SNI is the ServerNameIndication and TicketData is the extended ticket data that can be used in subsequent session resumptions. If it is set to auto , the client automatically handles received tickets and tries to use them when making new TLS connections (session resumption with pre-shared keys). This option is supported by TLS 1.3 and above. See also SSL's Users Guide, Session Tickets and Session Resumption in TLS 1.3","ref":"ssl.html#t:client_session_tickets/0","title":"ssl.client_session_tickets/0","type":"type"},{"doc":"Specifies the username and password to use to authenticate to the server.","ref":"ssl.html#t:client_srp_identity/0","title":"ssl.client_srp_identity/0","type":"type"},{"doc":"In mode verify_none the default behavior is to allow all x509-path validation errors. See also option verify_fun .","ref":"ssl.html#t:client_verify_type/0","title":"ssl.client_verify_type/0","type":"type"},{"doc":"","ref":"ssl.html#t:common_info/0","title":"ssl.common_info/0","type":"type"},{"doc":"","ref":"ssl.html#t:common_option/0","title":"ssl.common_option/0","type":"type"},{"doc":"","ref":"ssl.html#t:connection_info/0","title":"ssl.connection_info/0","type":"type"},{"doc":"","ref":"ssl.html#t:connection_info_item/0","title":"ssl.connection_info_item/0","type":"type"},{"doc":"","ref":"ssl.html#t:connection_info_items/0","title":"ssl.connection_info_items/0","type":"type"},{"doc":"If true (default), the server sends a cookie extension in its HelloRetryRequest messages. The cookie extension has two main purposes. It allows the server to force the client to demonstrate reachability at their apparent network address (thus providing a measure of DoS protection). This is primarily useful for non-connection-oriented transports. It also allows to offload the server's state to the client. The cookie extension is enabled by default as it is a mandatory extension in RFC8446.","ref":"ssl.html#t:cookie/0","title":"ssl.cookie/0","type":"type"},{"doc":"Specify how to perform lookup and caching of certificate revocation lists. Module defaults to ssl_crl_cache with DbHandle being internal and an empty argument list. There are two implementations available: ssl_crl_cache This module maintains a cache of CRLs. CRLs can be added to the cache using the function ssl_crl_cache:insert/1 , and optionally automatically fetched through HTTP if the following argument is specified: {http, timeout()} Enables fetching of CRLs specified as http URIs inX509 certificate extensions. Requires the OTP inets application. ssl_crl_hash_dir This module makes use of a directory where CRLs are stored in files named by the hash of the issuer name. The file names consist of eight hexadecimal digits followed by .rN , where N is an integer, e.g. 1a2b3c4d.r0 . For the first version of the CRL, N starts at zero, and for each new version, N is incremented by one. The OpenSSL utility c_rehash creates symlinks according to this pattern. For a given hash value, this module finds all consecutive .r* files starting from zero, and those files taken together make up the revocation list. CRL files whose nextUpdate fields are in the past, or that are issued by a different CA that happens to have the same name hash, are excluded. The following argument is required: {dir, string()} Specifies the directory in which the CRLs can be found.","ref":"ssl.html#t:crl_cache_opts/0","title":"ssl.crl_cache_opts/0","type":"type"},{"doc":"Perform CRL (Certificate Revocation List) verification (public_key:pkix_crls_validate/3) on all the certificates during the path validation (public_key:pkix_path_validation/3) of the certificate chain. Defaults to false . peer check is only performed on the peer certificate. best_effort if certificate revocation status cannot be determined it will be accepted as valid. The CA certificates specified for the connection will be used to construct the certificate chain validating the CRLs. The CRLs will be fetched from a local or external cache. See ssl_crl_cache_api(3) .","ref":"ssl.html#t:crl_check/0","title":"ssl.crl_check/0","type":"type"},{"doc":"","ref":"ssl.html#t:curve_info/0","title":"ssl.curve_info/0","type":"type"},{"doc":"The lookup fun is to defined as follows: fun ( psk , PSKIdentity : : binary ( ) , UserState : : term ( ) ) -&gt; { ok , SharedSecret : : binary ( ) } | error ; fun ( srp , Username : : binary ( ) , UserState : : term ( ) ) -&gt; { ok , { SRPParams : : srp_param_type ( ) , Salt : : binary ( ) , DerivedKey : : binary ( ) } } | error . For Pre-Shared Key (PSK) cipher suites, the lookup fun is called by the client and server to determine the shared secret. When called by the client, PSKIdentity is set to the hint presented by the server or to undefined. When called by the server, PSKIdentity is the identity presented by the client. For Secure Remote Password (SRP), the fun is only used by the server to obtain parameters that it uses to generate its session keys. DerivedKey is to be derived according to RFC 2945 and RFC 5054 : crypto:sha([Salt, crypto:sha([Username, &lt;&lt;$:&gt;&gt;, Password])])","ref":"ssl.html#t:custom_user_lookup/0","title":"ssl.custom_user_lookup/0","type":"type"},{"doc":"The verification fun is to be defined as follows: fun ( OtpCert : : # &#39;OTPCertificate&#39; { } , Event : : { bad_cert , Reason : : atom ( ) | { revoked , atom ( ) } } | { extension , # &#39;Extension&#39; { } } | valid | valid_peer , InitialUserState : : term ( ) ) -&gt; { valid , UserState : : term ( ) } | { fail , Reason : : term ( ) } | { unknown , UserState : : term ( ) } . The verification fun is called during the X509-path validation when an error or an extension unknown to the SSL application is encountered. It is also called when a certificate is considered valid by the path validation to allow access to each certificate in the path to the user application. It differentiates between the peer certificate and the CA certificates by using valid_peer or valid as second argument to the verification fun. See the public_key User's Guide for definition of #'OTPCertificate'{} and #'Extension'{} . If the verify callback fun returns {fail, Reason} , the verification process is immediately stopped, an alert is sent to the peer, and the TLS/DTLS handshake terminates. If the verify callback fun returns {valid, UserState} , the verification process continues. If the verify callback fun always returns {valid, UserState} , the TLS/DTLS handshake does not terminate regarding verification failures and the connection is established. If called with an extension unknown to the user application, return value {unknown, UserState} is to be used. Note that if the fun returns unknown for an extension marked as critical, validation will fail. Default option verify_fun in verify_peer mode : { fun ( _ , { bad_cert , _ } = Reason , _ ) -&gt; { fail , Reason } ; ( _ , { extension , _ } , UserState ) -&gt; { unknown , UserState } ; ( _ , valid , UserState ) -&gt; { valid , UserState } ; ( _ , valid_peer , UserState ) -&gt; { valid , UserState } end , [ ] } Default option verify_fun in mode verify_none : { fun ( _ , { bad_cert , _ } , UserState ) -&gt; { valid , UserState } ; ( _ , { extension , # &#39;Extension&#39; { critical = true } } , UserState ) -&gt; { valid , UserState } ; ( _ , { extension , _ } , UserState ) -&gt; { unknown , UserState } ; ( _ , valid , UserState ) -&gt; { valid , UserState } ; ( _ , valid_peer , UserState ) -&gt; { valid , UserState } end , [ ] } The possible path validation errors are given on form {bad_cert, Reason} where Reason is: unknown_ca No trusted CA was found in the trusted store. The trusted CA is normally a so called ROOT CA, which is a self-signed certificate. Trust can be claimed for an intermediate CA (trusted anchor does not have to be self-signed according to X-509) by using option partial_chain . selfsigned_peer The chain consisted only of one self-signed certificate. PKIX X-509-path validation error For possible reasons, see public_key:pkix_path_validation/3","ref":"ssl.html#t:custom_verify/0","title":"ssl.custom_verify/0","type":"type"},{"doc":"Customizes the hostname verification of the peer certificate, as different protocols that use TLS such as HTTP or LDAP may want to do it differently, for possible options see public_key:pkix_verify_hostname/3","ref":"ssl.html#t:customize_hostname_check/0","title":"ssl.customize_hostname_check/0","type":"type"},{"doc":"The DER-encoded Diffie-Hellman parameters. If specified, it overrides option dhfile . The dh_der option is not supported by TLS 1.3. Use the supported_groups option instead.","ref":"ssl.html#t:dh_der/0","title":"ssl.dh_der/0","type":"type"},{"doc":"Path to a file containing PEM-encoded Diffie Hellman parameters to be used by the server if a cipher suite using Diffie Hellman key exchange is negotiated. If not specified, default parameters are used. The dh_file option is not supported by TLS 1.3. Use the supported_groups option instead.","ref":"ssl.html#t:dh_file/0","title":"ssl.dh_file/0","type":"type"},{"doc":"","ref":"ssl.html#t:dtls_legacy_version/0","title":"ssl.dtls_legacy_version/0","type":"type"},{"doc":"","ref":"ssl.html#t:dtls_version/0","title":"ssl.dtls_version/0","type":"type"},{"doc":"","ref":"ssl.html#t:erl_cipher_suite/0","title":"ssl.erl_cipher_suite/0","type":"type"},{"doc":"","ref":"ssl.html#t:error_alert/0","title":"ssl.error_alert/0","type":"type"},{"doc":"Used together with {verify, verify_peer} by an TLS/DTLS server. If set to true , the server fails if the client does not have a certificate to send, that is, sends an empty certificate. If set to false , it fails only if the client sends an invalid certificate (an empty certificate is considered valid). Defaults to false.","ref":"ssl.html#t:fail_if_no_peer_cert/0","title":"ssl.fail_if_no_peer_cert/0","type":"type"},{"doc":"Send special cipher suite TLS_FALLBACK_SCSV to avoid undesired TLS version downgrade. Defaults to false Note this option is not needed in normal TLS usage and should not be used to implement new clients. But legacy clients that retries connections in the following manner ssl:connect(Host, Port, [...{versions, ['tlsv2', 'tlsv1.1', 'tlsv1']}]) ssl:connect(Host, Port, [...{versions, [tlsv1.1', 'tlsv1']}, {fallback, true}]) ssl:connect(Host, Port, [...{versions, ['tlsv1']}, {fallback, true}]) may use it to avoid undesired TLS version downgrade. Note that TLS_FALLBACK_SCSV must also be supported by the server for the prevention to work.","ref":"ssl.html#t:fallback/0","title":"ssl.fallback/0","type":"type"},{"doc":"","ref":"ssl.html#t:group/0","title":"ssl.group/0","type":"type"},{"doc":"Defaults to full . If hello is specified the handshake will pause after the hello message and give the user a possibility make decisions based on hello extensions before continuing or aborting the handshake by calling handshake_continue/3 or handshake_cancel/1","ref":"ssl.html#t:handshake_completion/0","title":"ssl.handshake_completion/0","type":"type"},{"doc":"Integer (24 bits unsigned). Used to limit the size of valid TLS handshake packets to avoid DoS attacks. Defaults to 256*1024.","ref":"ssl.html#t:handshake_size/0","title":"ssl.handshake_size/0","type":"type"},{"doc":"","ref":"ssl.html#t:hash/0","title":"ssl.hash/0","type":"type"},{"doc":"When an integer-value is specified, TLS/DTLS-connection goes into hibernation after the specified number of milliseconds of inactivity, thus reducing its memory footprint. When undefined is specified (this is the default), the process never goes into hibernation.","ref":"ssl.html#t:hibernate_after/0","title":"ssl.hibernate_after/0","type":"type"},{"doc":"If set to true , use the server preference for cipher selection. If set to false (the default), use the client preference.","ref":"ssl.html#t:honor_cipher_order/0","title":"ssl.honor_cipher_order/0","type":"type"},{"doc":"If true, use the server's preference for cipher selection. If false (the default), use the client's preference.","ref":"ssl.html#t:honor_cipher_order/0","title":"ssl.honor_cipher_order/0","type":"type"},{"doc":"If true, use the server's preference for ECC curve selection. If false (the default), use the client's preference.","ref":"ssl.html#t:honor_ecc_order/0","title":"ssl.honor_ecc_order/0","type":"type"},{"doc":"","ref":"ssl.html#t:host/0","title":"ssl.host/0","type":"type"},{"doc":"","ref":"ssl.html#t:hostname/0","title":"ssl.hostname/0","type":"type"},{"doc":"","ref":"ssl.html#t:ip_address/0","title":"ssl.ip_address/0","type":"type"},{"doc":"Configures a TLS 1.3 connection for keylogging In order to retrieve keylog information on a TLS 1.3 connection, it must be configured in advance to keep the client_random and various handshake secrets. The keep_secrets functionality is disabled ( false ) by default. Added in OTP 23.2","ref":"ssl.html#t:keep_secrets/0","title":"ssl.keep_secrets/0","type":"type"},{"doc":"","ref":"ssl.html#t:kex_algo/0","title":"ssl.kex_algo/0","type":"type"},{"doc":"The DER-encoded user's private key or a map refering to a crypto engine and its key reference that optionally can be password protected, seealso crypto:engine_load/4 and Crypto's Users Guide. If this option is supplied, it overrides option keyfile .","ref":"ssl.html#t:key/0","title":"ssl.key/0","type":"type"},{"doc":"String containing the user's password. Only used if the private keyfile is password-protected.","ref":"ssl.html#t:key_password/0","title":"ssl.key_password/0","type":"type"},{"doc":"Path to the file containing the user's private PEM-encoded key. As PEM-files can contain several entries, this option defaults to the same file as given by option certfile .","ref":"ssl.html#t:key_pem/0","title":"ssl.key_pem/0","type":"type"},{"doc":"Configures the maximum amount of bytes that can be sent on a TLS 1.3 connection before an automatic key update is performed. There are cryptographic limits on the amount of plaintext which can be safely encrypted under a given set of keys. The current default ensures that data integrity will not be breached with probability greater than 1/2^57. For more information see Limits on Authenticated Encryption Use in TLS . The default value of this option shall provide the above mentioned security guarantees and it shall be reasonable for most applications (~353 TB).","ref":"ssl.html#t:key_update_at/0","title":"ssl.key_update_at/0","type":"type"},{"doc":"","ref":"ssl.html#t:legacy_cipher/0","title":"ssl.legacy_cipher/0","type":"type"},{"doc":"","ref":"ssl.html#t:legacy_hash/0","title":"ssl.legacy_hash/0","type":"type"},{"doc":"If set to false , TLS/DTLS Alert reports are not displayed. Deprecated in OTP 22, use {log_level, logging_level() } instead.","ref":"ssl.html#t:log_alert/0","title":"ssl.log_alert/0","type":"type"},{"doc":"Specifies the log level for a TLS/DTLS connection. Alerts are logged on notice level, which is the default level. The level debug triggers verbose logging of TLS/DTLS protocol messages. See also ssl(6)","ref":"ssl.html#t:logging_level/0","title":"ssl.logging_level/0","type":"type"},{"doc":"Specifies the maximum fragment length the client is prepared to accept from the server. See RFC 6066","ref":"ssl.html#t:max_fragment_length/0","title":"ssl.max_fragment_length/0","type":"type"},{"doc":"Configures the middlebox compatibility mode on a TLS 1.3 connection. A significant number of middleboxes misbehave when a TLS 1.3 connection is negotiated. Implementations can increase the chance of making connections through those middleboxes by making the TLS 1.3 handshake more like a TLS 1.2 handshake. The middlebox compatibility mode is enabled ( true ) by default.","ref":"ssl.html#t:middlebox_comp_mode/0","title":"ssl.middlebox_comp_mode/0","type":"type"},{"doc":"","ref":"ssl.html#t:named_curve/0","title":"ssl.named_curve/0","type":"type"},{"doc":"","ref":"ssl.html#t:old_cipher_suite/0","title":"ssl.old_cipher_suite/0","type":"type"},{"doc":"Affects TLS-1.0 connections only. If set to false , it disables the block cipher padding check to be able to interoperate with legacy software. Using {padding_check, boolean()} makes TLS vulnerable to the Poodle attack.","ref":"ssl.html#t:padding_check/0","title":"ssl.padding_check/0","type":"type"},{"doc":"","ref":"ssl.html#t:prf_random/0","title":"ssl.prf_random/0","type":"type"},{"doc":"Choose TLS or DTLS protocol for the transport layer security. Defaults to tls . For DTLS other transports than UDP are not yet supported.","ref":"ssl.html#t:protocol/0","title":"ssl.protocol/0","type":"type"},{"doc":"","ref":"ssl.html#t:protocol_extensions/0","title":"ssl.protocol_extensions/0","type":"type"},{"doc":"","ref":"ssl.html#t:protocol_version/0","title":"ssl.protocol_version/0","type":"type"},{"doc":"TLS protocol versions supported by started clients and servers. This option overrides the application environment option protocol_version and dtls_protocol_version . If the environment option is not set, it defaults to all versions, supported by the SSL application. See also ssl(6).","ref":"ssl.html#t:protocol_versions/0","title":"ssl.protocol_versions/0","type":"type"},{"doc":"","ref":"ssl.html#t:psk_identity/0","title":"ssl.psk_identity/0","type":"type"},{"doc":"","ref":"ssl.html#t:reason/0","title":"ssl.reason/0","type":"type"},{"doc":"fun ( Chain : : [ public_key : der_encoded ( ) ] ) -&gt; { trusted_ca , DerCert : : public_key : der_encoded ( ) } | unknown_ca } Claim an intermediate CA in the chain as trusted. TLS then performs public_key:pkix_path_validation/3 with the selected CA as trusted anchor and the rest of the chain.","ref":"ssl.html#t:root_fun/0","title":"ssl.root_fun/0","type":"type"},{"doc":"","ref":"ssl.html#t:rsassa_pss_scheme/0","title":"ssl.rsassa_pss_scheme/0","type":"type"},{"doc":"Specifies if to reject renegotiation attempt that does not live up to RFC 5746 . By default secure_renegotiate is set to true , that is, secure renegotiation is enforced. If set to false secure renegotiation will still be used if possible, but it falls back to insecure renegotiation if the peer does not support RFC 5746 .","ref":"ssl.html#t:secure_renegotiation/0","title":"ssl.secure_renegotiation/0","type":"type"},{"doc":"","ref":"ssl.html#t:security_info/0","title":"ssl.security_info/0","type":"type"},{"doc":"Indicates the server will try to perform Application-Layer Protocol Negotiation (ALPN). The list of protocols is in order of preference. The protocol negotiated will be the first in the list that matches one of the protocols advertised by the client. If no protocol matches, the server will fail the connection with a &quot;no_application_protocol&quot; alert. The negotiated protocol can be retrieved using the negotiated_protocol/1 function.","ref":"ssl.html#t:server_alpn/0","title":"ssl.server_alpn/0","type":"type"},{"doc":"The DER-encoded trusted certificates. If this option is supplied it overrides option cacertfile .","ref":"ssl.html#t:server_cacerts/0","title":"ssl.server_cacerts/0","type":"type"},{"doc":"Path to a file containing PEM-encoded CA certificates. The CA certificates are used to build the server certificate chain and for client authentication. The CAs are also used in the list of acceptable client CAs passed to the client when a certificate is requested. Can be omitted if there is no need to verify the client and if there are no intermediate CAs for the server certificate.","ref":"ssl.html#t:server_cafile/0","title":"ssl.server_cafile/0","type":"type"},{"doc":"Configures if the server accepts ( enabled ) or rejects ( rejects ) early data sent by a client. The default value is disabled . This option is a placeholder, early data is not yet implemented on the server side.","ref":"ssl.html#t:server_early_data/0","title":"ssl.server_early_data/0","type":"type"},{"doc":"List of protocols to send to the client if the client indicates that it supports the Next Protocol extension. The client can select a protocol that is not on this list. The list of protocols must not contain an empty binary. If the server negotiates a Next Protocol, it can be accessed using the negotiated_next_protocol/1 method.","ref":"ssl.html#t:server_next_protocol/0","title":"ssl.server_next_protocol/0","type":"type"},{"doc":"","ref":"ssl.html#t:server_option/0","title":"ssl.server_option/0","type":"type"},{"doc":"Specifies the server identity hint, which the server presents to the client.","ref":"ssl.html#t:server_psk_identity/0","title":"ssl.server_psk_identity/0","type":"type"},{"doc":"Enables the TLS/DTLS server to have a local policy for deciding if a session is to be reused or not. Meaningful only if reuse_sessions is set to true . SuggestedSessionId is a binary() , PeerCert is a DER-encoded certificate, Compression is an enumeration integer, and CipherSuite is of type ciphersuite() .","ref":"ssl.html#t:server_reuse_session/0","title":"ssl.server_reuse_session/0","type":"type"},{"doc":"The boolean value true specifies that the server will agree to reuse sessions. Setting it to false will result in an empty session table, that is no sessions will be reused. See also option reuse_session","ref":"ssl.html#t:server_reuse_sessions/0","title":"ssl.server_reuse_sessions/0","type":"type"},{"doc":"","ref":"ssl.html#t:server_session_tickets/0","title":"ssl.server_session_tickets/0","type":"type"},{"doc":"Configures the session ticket functionality. Allowed values are disabled , stateful and stateless . If it is set to stateful or stateless , session resumption with pre-shared keys is enabled and the server will send stateful or stateless session tickets to the client after successful connections. A stateful session ticket is a database reference to internal state information. A stateless session ticket is a self-encrypted binary that contains both cryptographic keying material and state data. This option is supported by TLS 1.3 and above. See also SSL's Users Guide, Session Tickets and Session Resumption in TLS 1.3","ref":"ssl.html#t:server_session_tickets/0","title":"ssl.server_session_tickets/0","type":"type"},{"doc":"A server only does x509-path validation in mode verify_peer , as it then sends a certificate request to the client (this message is not sent if the verify option is verify_none ). You can then also want to specify option fail_if_no_peer_cert .","ref":"ssl.html#t:server_verify_type/0","title":"ssl.server_verify_type/0","type":"type"},{"doc":"Identifies a TLS session.","ref":"ssl.html#t:session_id/0","title":"ssl.session_id/0","type":"type"},{"doc":"Configures the session ticket functionalty in TLS 1.3 client and server.","ref":"ssl.html#t:session_tickets/0","title":"ssl.session_tickets/0","type":"type"},{"doc":"","ref":"ssl.html#t:sha2/0","title":"ssl.sha2/0","type":"type"},{"doc":"","ref":"ssl.html#t:sign_algo/0","title":"ssl.sign_algo/0","type":"type"},{"doc":"","ref":"ssl.html#t:sign_scheme/0","title":"ssl.sign_scheme/0","type":"type"},{"doc":"","ref":"ssl.html#t:sign_scheme_legacy/0","title":"ssl.sign_scheme_legacy/0","type":"type"},{"doc":"Explicitly list acceptable signature schemes (algorithms), in prefered ordered, for certificates, overrides the algorithms supplied in signature_algs option for certificates. In addition to the signature_algorithms extension from TLS 1.2, TLS 1.3 (RFC 5246 Section 4.2.3) adds the signature_algorithms_cert extension which enables having special requirements on the signatures used in the certificates that differs from the requirements on digital signatures as a whole. If this is not required this extension is not need. The client will send a signature_algorithms_cert extension (in the client hello message), if TLS version 1.2 (back-ported to TLS 1.2 in @OTP-16590@) or later is used, and the signature_algs_cert option is explicitly specified. By default, only the signature_algs extension is sent. Note that supported signature schemes for TLS-1.2 are sign_scheme_legacy() and rsassa_pss_scheme()","ref":"ssl.html#t:sign_schemes/0","title":"ssl.sign_schemes/0","type":"type"},{"doc":"Explicitly list acceptable signature algorithms for certificates and handshake messages in the preferred order. The client will send its list as the client hello signature_algorithm extension introduced in TLS-1.2, see Section 7.4.1.4.1 in RFC 5246 . Previously these algorithms where implicitly chosen and partly derived from the cipher suite. In TLS-1.2 a somewhat more explicit negotiation is made possible using a list of { hash() , sign_algo() } pairs. In TLS-1.3 these algorithm pairs are replaced by so called signature schemes sign_scheme() and completely decoupled from the cipher suite. Signature algorithms used for certificates may be overridden by the signature schemes (algorithms) supplied by the signature_algs_cert option. TLS-1.2 default is Default_TLS_12_Alg_Pairs = [ %% SHA2 { sha512 , ecdsa } , { sha512 , rsa } , { sha384 , ecdsa } , { sha384 , rsa } , { sha256 , ecdsa } , { sha256 , rsa } , { sha224 , ecdsa } , { sha224 , rsa } , %% SHA { sha , ecdsa } , { sha , rsa } , { sha , dsa } ] Support for {md5, rsa} was removed from the the TLS-1.2 default in ssl-8.0 (OTP-22) TLS_13 _Legacy_Schemes = [ %% Legacy algorithms only applicable to certificate signatures rsa_pkcs1_sha512 , %% Corresponds to {sha512, rsa} rsa_pkcs1_sha384 , %% Corresponds to {sha384, rsa} rsa_pkcs1_sha256 , %% Corresponds to {sha256, rsa} ecdsa_sha1 , %% Corresponds to {sha, ecdsa} rsa_pkcs1_sha1 %% Corresponds to {sha, rsa} ] Default_TLS_13_Schemes = [ %% ECDSA ecdsa_secp521r1_sha512 , ecdsa_secp384r1_sha384 , ecdsa_secp256r1_sha256 , %% RSASSA-PSS rsa_pss_pss_sha512 , rsa_pss_pss_sha384 , rsa_pss_pss_sha256 , rsa_pss_rsae_sha512 , rsa_pss_rsae_sha384 , rsa_pss_rsae_sha256 , %% EDDSA eddsa_ed25519 , eddsa_ed448 ] TLS-1.3 default is Default_TLS_13_Schemes ++ Legacy_TLS_13_Schemes If both TLS-1.3 and TLS-1.2 are supported the default will be Default_TLS_13_Schemes ++ Default_TLS_12_Alg_Pairs so appropriate algorithms can be chosen for the negotiated version. TLS-1.2 algorithms will not be negotiated for TLS-1.3, but TLS-1.3 RSASSA-PSS rsassa_pss_scheme() signature schemes may be negotiated also for TLS-1.2 from @OTP-16590@ However if TLS-1.3 is negotiated when both TLS-1.3 and TLS-1.2 is supported using defaults, the corresponding TLS-1.2 algorithms to the TLS-1.3 legacy signature schemes will be considered as the legacy schemes and applied only to certificate signatures.","ref":"ssl.html#t:signature_algs/0","title":"ssl.signature_algs/0","type":"type"},{"doc":"Specify the hostname to be used in TLS Server Name Indication extension. If not specified it will default to the Host argument of connect/[3,4] unless it is of type inet:ipaddress(). The HostName will also be used in the hostname verification of the peer certificate using public_key:pkix_verify_hostname/2 . The special value disable prevents the Server Name Indication extension from being sent and disables the hostname verification check public_key:pkix_verify_hostname/2","ref":"ssl.html#t:sni/0","title":"ssl.sni/0","type":"type"},{"doc":"If the server receives a SNI (Server Name Indication) from the client, the given function will be called to retrieve [server_option()] for the indicated server. These options will be merged into predefined [server_option()] list. The function should be defined as: fun(ServerName :: string()) -&gt; [server_option()] and can be specified as a fun or as named fun module:function/1 The option sni_fun , and sni_hosts are mutually exclusive.","ref":"ssl.html#t:sni_fun/0","title":"ssl.sni_fun/0","type":"type"},{"doc":"If the server receives a SNI (Server Name Indication) from the client matching a host listed in the sni_hosts option, the specific options for that host will override previously specified options. The option sni_fun , and sni_hosts are mutually exclusive.","ref":"ssl.html#t:sni_hosts/0","title":"ssl.sni_hosts/0","type":"type"},{"doc":"","ref":"ssl.html#t:socket/0","title":"ssl.socket/0","type":"type"},{"doc":"The default socket options are [{mode,list},{packet, 0},{header, 0},{active, true}] . For valid options, see the inet(3) , gen_tcp(3) and gen_udp(3) manual pages in Kernel. Note that stream oriented options such as packet are only relevant for TLS and not DTLS","ref":"ssl.html#t:socket_option/0","title":"ssl.socket_option/0","type":"type"},{"doc":"","ref":"ssl.html#t:srp_identity/0","title":"ssl.srp_identity/0","type":"type"},{"doc":"","ref":"ssl.html#t:srp_param_type/0","title":"ssl.srp_param_type/0","type":"type"},{"doc":"Deprecated since OTP-17, has no affect.","ref":"ssl.html#t:ssl_imp/0","title":"ssl.ssl_imp/0","type":"type"},{"doc":"","ref":"ssl.html#t:ssl_options_info/0","title":"ssl.ssl_options_info/0","type":"type"},{"doc":"An opaque reference to the TLS/DTLS connection, may be used for equality matching.","ref":"ssl.html#t:sslsocket/0","title":"ssl.sslsocket/0","type":"type"},{"doc":"TLS 1.3 introduces the &quot;supported_groups&quot; extension that is used for negotiating the Diffie-Hellman parameters in a TLS 1.3 handshake. Both client and server can specify a list of parameters that they are willing to use. If it is not specified it will use a default list ([x25519, x448, secp256r1, secp384r1]) that is filtered based on the installed crypto library version.","ref":"ssl.html#t:supported_groups/0","title":"ssl.supported_groups/0","type":"type"},{"doc":"","ref":"ssl.html#t:tls_alert/0","title":"ssl.tls_alert/0","type":"type"},{"doc":"","ref":"ssl.html#t:tls_client_option/0","title":"ssl.tls_client_option/0","type":"type"},{"doc":"","ref":"ssl.html#t:tls_legacy_version/0","title":"ssl.tls_legacy_version/0","type":"type"},{"doc":"","ref":"ssl.html#t:tls_option/0","title":"ssl.tls_option/0","type":"type"},{"doc":"","ref":"ssl.html#t:tls_options_name/0","title":"ssl.tls_options_name/0","type":"type"},{"doc":"","ref":"ssl.html#t:tls_server_option/0","title":"ssl.tls_server_option/0","type":"type"},{"doc":"","ref":"ssl.html#t:tls_version/0","title":"ssl.tls_version/0","type":"type"},{"doc":"Defaults to {gen_tcp, tcp, tcp_closed, tcp_error, tcp_passive} for TLS (for backward compatibility a four tuple will be converted to a five tuple with the last element &quot;second_element&quot;_passive) and {gen_udp, udp, udp_closed, udp_error} for DTLS (might also be changed to five tuple in the future). Can be used to customize the transport layer. The tag values should be the values used by the underlying transport in its active mode messages. For TLS the callback module must implement a reliable transport protocol, behave as gen_tcp , and have functions corresponding to inet:setopts/2 , inet:getopts/2 , inet:peername/1 , inet:sockname/1 , and inet:port/1 . The callback gen_tcp is treated specially and calls inet directly. For DTLS this feature must be considered exprimental.","ref":"ssl.html#t:transport_option/0","title":"ssl.transport_option/0","type":"type"},{"doc":"Configures the session tickets to be used for session resumption. It is a mandatory option in manual mode ( session_tickets = manual ). Session tickets are only sent to user if option session_tickets is set to manual This option is supported by TLS 1.3 and above. See also SSL's Users Guide, Session Tickets and Session Resumption in TLS 1.3","ref":"ssl.html#t:use_ticket/0","title":"ssl.use_ticket/0","type":"type"},{"doc":"","ref":"ssl.html#t:verify_type/0","title":"ssl.verify_type/0","type":"type"},{"doc":"Implements an internal CRL (Certificate Revocation List) cache. In addition to implementing the ssl_crl_cache_api behaviour the following functions are available.","ref":"ssl_crl_cache.html","title":"ssl_crl_cache","type":"module"},{"doc":"Entries = crl_src() ]} Reason = crl_reason() Delete CRLs from the ssl applications local cache.","ref":"ssl_crl_cache.html#delete/1","title":"ssl_crl_cache.delete/1","type":"function"},{"doc":"CRLSrc = crl_src() ]} URI = uri() Reason = term() Insert CRLs, available to fetch on DER format from URI , into the ssl applications local cache.","ref":"ssl_crl_cache.html#insert/1","title":"ssl_crl_cache.insert/1","type":"function"},{"doc":"","ref":"ssl_crl_cache.html#insert/2","title":"ssl_crl_cache.insert/2","type":"function"},{"doc":"","ref":"ssl_crl_cache.html#t:crl_src/0","title":"ssl_crl_cache.crl_src/0","type":"type"},{"doc":"","ref":"ssl_crl_cache.html#t:uri/0","title":"ssl_crl_cache.uri/0","type":"type"}]