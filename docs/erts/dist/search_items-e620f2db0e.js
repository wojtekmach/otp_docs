searchNodes=[{"doc":"This module provides a set of functions to do atomic operations towards mutable atomic variables. The implementation utilizes only atomic hardware instructions without any software level locking, which makes it very efficient for concurrent access. The atomics are organized into arrays with the following semantics: Atomics are 64 bit integers. Atomics can be represented as either signed or unsigned. Atomics wrap around at overflow and underflow operations. All operations guarantee atomicity. No intermediate results can be seen. The result of one mutation can only be the input to one following mutation. All atomic operations are mutually ordered. If atomic B is updated after atomic A, then that is how it will appear to any concurrent readers. No one can read the new value of B and then read the old value of A. Indexes into atomic arrays are one-based. An atomic array of arity N contains N atomics with index from 1 to N.","ref":"atomics.html","title":"atomics","type":"module"},{"doc":"Add Incr to atomic.","ref":"atomics.html#add/3","title":"atomics.add/3","type":"function"},{"doc":"Atomic addition and return of the result.","ref":"atomics.html#add_get/3","title":"atomics.add_get/3","type":"function"},{"doc":"Atomically compares the atomic with Expected , and if those are equal, set atomic to Desired . Returns ok if Desired was written. Returns the actual atomic value if not equal to Expected .","ref":"atomics.html#compare_exchange/4","title":"atomics.compare_exchange/4","type":"function"},{"doc":"Atomically replaces the value of the atomic with Desired and returns the value it held previously.","ref":"atomics.html#exchange/3","title":"atomics.exchange/3","type":"function"},{"doc":"Read atomic value.","ref":"atomics.html#get/2","title":"atomics.get/2","type":"function"},{"doc":"Return information about an atomic array in a map. The map has the following keys: size The number of atomics in the array. max The highest possible value an atomic in this array can hold. min The lowest possible value an atomic in this array can hold. memory Approximate memory consumption for the array in bytes.","ref":"atomics.html#info/1","title":"atomics.info/1","type":"function"},{"doc":"Create a new array of Arity number of atomics. All atomics in the array are initially set to zero. Argument Opts is a list of the following possible options: {signed, boolean()} Indicate if the elements of the array will be treated as signed or unsigned integers. Default is true (signed). The integer interval for signed atomics are from -(1 bsl 63) to (1 bsl 63)-1 and for unsigned atomics from 0 to (1 bsl 64)-1 . Atomics are not tied to the current process and are automatically garbage collected when they are no longer referenced.","ref":"atomics.html#new/2","title":"atomics.new/2","type":"function"},{"doc":"Set atomic to Value .","ref":"atomics.html#put/3","title":"atomics.put/3","type":"function"},{"doc":"Subtract Decr from atomic.","ref":"atomics.html#sub/3","title":"atomics.sub/3","type":"function"},{"doc":"Atomic subtraction and return of the result.","ref":"atomics.html#sub_get/3","title":"atomics.sub_get/3","type":"function"},{"doc":"Identifies an atomic array returned from new/2 .","ref":"atomics.html#t:atomics_ref/0","title":"atomics.atomics_ref/0","type":"opaque"},{"doc":"This module provides a set of functions to do operations towards shared mutable counter variables. The implementation does not utilize any software level locking, which makes it very efficient for concurrent access. The counters are organized into arrays with the following semantics: Counters are 64 bit signed integers. Counters wrap around at overflow and underflow operations. Counters are initialized to zero. Write operations guarantee atomicity. No intermediate results can be seen from a single write operation. Two types of counter arrays can be created with options atomics or write_concurrency . The atomics counters have good allround performance with nice consistent semantics while write_concurrency counters offers even better concurrent write performance at the expense of some potential read inconsistencies. See new/2 . Indexes into counter arrays are one-based. A counter array of size N contains N counters with index from 1 to N.","ref":"counters.html","title":"counters","type":"module"},{"doc":"Add Incr to counter at index Ix .","ref":"counters.html#add/3","title":"counters.add/3","type":"function"},{"doc":"Read counter value.","ref":"counters.html#get/2","title":"counters.get/2","type":"function"},{"doc":"Return information about a counter array in a map. The map has the following keys (at least): size The number of counters in the array. memory Approximate memory consumption for the array in bytes.","ref":"counters.html#info/1","title":"counters.info/1","type":"function"},{"doc":"Create a new counter array of Size counters. All counters in the array are initially set to zero. Argument Opts is a list of the following possible options: atomics (Default) Counters will be sequentially consistent. If write operation A is done sequentially before write operation B, then a concurrent reader may see the result of none of them, only A, or both A and B. It cannot see the result of only B. write_concurrency This is an optimization to achieve very efficient concurrent add and sub operations at the expense of potential read inconsistency and memory consumption per counter. Read operations may see sequentially inconsistent results with regard to concurrent write operations. Even if write operation A is done sequentially before write operation B, a concurrent reader may see any combination of A and B, including only B. A read operation is only guaranteed to see all writes done sequentially before the read. No writes are ever lost, but will eventually all be seen. The typical use case for write_concurrency is when concurrent calls to add and sub toward the same counters are very frequent, while calls to get and put are much less frequent. The lack of absolute read consistency must also be acceptable. Counters are not tied to the current process and are automatically garbage collected when they are no longer referenced.","ref":"counters.html#new/2","title":"counters.new/2","type":"function"},{"doc":"Write Value to counter at index Ix . Despite its name, the write_concurrency optimization does not improve put . A call to put is a relatively heavy operation compared to the very lightweight and scalable add and sub . The cost for a put with write_concurrency is like a get plus a put without write_concurrency .","ref":"counters.html#put/3","title":"counters.put/3","type":"function"},{"doc":"Subtract Decr from counter at index Ix .","ref":"counters.html#sub/3","title":"counters.sub/3","type":"function"},{"doc":"Identifies a counter array returned from new/2 .","ref":"counters.html#t:counters_ref/0","title":"counters.counters_ref/0","type":"opaque"},{"doc":"This module is used to load all Erlang modules into the system. The start script is also fetched with this low-level loader. erl_prim_loader knows about the environment and how to fetch modules. Command-line flag -loader Loader can be used to choose the method used by erl_prim_loader . Two Loader methods are supported by the Erlang runtime system: efile and inet . Command-Line Flags The erl_prim_loader module interprets the following command-line flags: -loader Loader Specifies the name of the loader used by erl_prim_loader . Loader can be efile (use the local file system) or inet (load using the boot_server on another Erlang node). If flag -loader is omitted, it defaults to efile . -loader_debug Makes the efile loader write some debug information, such as the reason for failures, while it handles files. -hosts Hosts Specifies which other Erlang nodes the inet loader can use. This flag is mandatory if flag -loader inet is present. On each host, there must be on Erlang node with the erl_boot_server(3) , which handles the load requests. Hosts is a list of IP addresses (hostnames are not acceptable). -setcookie Cookie Specifies the cookie of the Erlang runtime system. This flag is mandatory if flag -loader inet is present. See Also init(3) , erl_boot_server(3)","ref":"erl_prim_loader.html","title":"erl_prim_loader","type":"module"},{"doc":"Fetches a file using the low-level loader. Filename is either an absolute filename or only the name of the file, for example, &quot;lists.beam&quot; . If an internal path is set to the loader, this path is used to find the file. FullName is the complete name of the fetched file. Bin is the contents of the file as a binary. Filename can also be a file in an archive, for example, $OTPROOT/lib/ mnesia-4.4.7.ez/mnesia-4.4.7/ebin/ mnesia.beam . For information about archive files, see code(3) .","ref":"erl_prim_loader.html#get_file/1","title":"erl_prim_loader.get_file/1","type":"function"},{"doc":"Gets the path set in the loader. The path is set by the init(3) process according to information found in the start script.","ref":"erl_prim_loader.html#get_path/0","title":"erl_prim_loader.get_path/0","type":"function"},{"doc":"Lists all the files in a directory. Returns {ok, Filenames} if successful, otherwise error . Filenames is a list of the names of all the files in the directory. The names are not sorted. Dir can also be a directory in an archive, for example, $OTPROOT/lib/ mnesia-4.4.7.ez/mnesia-4.4.7/ebin . For information about archive files, see code(3) .","ref":"erl_prim_loader.html#list_dir/1","title":"erl_prim_loader.list_dir/1","type":"function"},{"doc":"Retrieves information about a file. Returns {ok, FileInfo} if successful, otherwise error . FileInfo is a record file_info , defined in the Kernel include file file.hrl . Include the following directive in the module from which the function is called: -include_lib(&quot;kernel/include/file.hrl&quot;). For more information about the record file_info , see file(3) . Filename can also be a file in an archive, for example, $OTPROOT/lib/ mnesia-4.4.7.ez/mnesia-4.4.7/ebin/ mnesia . For information about archive files, see code(3) .","ref":"erl_prim_loader.html#read_file_info/1","title":"erl_prim_loader.read_file_info/1","type":"function"},{"doc":"Works like read_file_info/1 except that if Filename is a symbolic link, information about the link is returned in the file_info record and the type field of the record is set to symlink . If Filename is not a symbolic link, this function returns exactly the same result as read_file_info/1 . On platforms that do not support symbolic links, this function is always equivalent to read_file_info/1 .","ref":"erl_prim_loader.html#read_link_info/1","title":"erl_prim_loader.read_link_info/1","type":"function"},{"doc":"Sets the path of the loader if init(3) interprets a path command in the start script.","ref":"erl_prim_loader.html#set_path/1","title":"erl_prim_loader.set_path/1","type":"function"},{"doc":"By convention, most Built-In Functions (BIFs) are included in this module. Some of the BIFs are viewed more or less as part of the Erlang programming language and are auto-imported . Thus, it is not necessary to specify the module name. For example, the calls atom_to_list(erlang) and erlang:atom_to_list(erlang) are identical. Auto-imported BIFs are listed without module prefix. BIFs listed with module prefix are not auto-imported. BIFs can fail for various reasons. All BIFs fail with reason badarg if they are called with arguments of an incorrect type. The other reasons are described in the description of each individual BIF. Some BIFs can be used in guard tests and are marked with &quot;Allowed in guard tests&quot;.","ref":"erlang.html","title":"erlang","type":"module"},{"doc":"Returns an integer or float that is the arithmetical absolute value of Float or Int , for example: &gt; abs ( - 3.33 ) . 3.33 &gt; abs ( - 3 ) . 3 Allowed in guard tests.","ref":"erlang.html#abs/1","title":"erlang.abs/1","type":"function"},{"doc":"Computes and returns the adler32 checksum for Data .","ref":"erlang.html#adler32/1","title":"erlang.adler32/1","type":"function"},{"doc":"Continues computing the adler32 checksum by combining the previous checksum, OldAdler , with the checksum of Data . The following code: X = erlang : adler32 ( Data1 ) , Y = erlang : adler32 ( X , Data2 ) . assigns the same value to Y as this: Y = erlang : adler32 ( [ Data1 , Data2 ] ) .","ref":"erlang.html#adler32/2","title":"erlang.adler32/2","type":"function"},{"doc":"Combines two previously computed adler32 checksums. This computation requires the size of the data object for the second checksum to be known. The following code: Y = erlang : adler32 ( Data1 ) , Z = erlang : adler32 ( Y , Data2 ) . assigns the same value to Z as this: X = erlang : adler32 ( Data1 ) , Y = erlang : adler32 ( Data2 ) , Z = erlang : adler32_combine ( X , Y , iolist_size ( Data2 ) ) .","ref":"erlang.html#adler32_combine/3","title":"erlang.adler32_combine/3","type":"function"},{"doc":"Create an alias which can be used when sending messages to the process that created the alias. When the alias has been deactivated, messages sent using the alias will be dropped. An alias can be deactivated using unalias/1 . Currently available options for alias/1 : explicit_unalias The alias can only be deactivated via a call to unalias/1 . This is also the default behaviour if no options are passed or if alias/0 is called. reply The alias will be automatically deactivated when a reply message sent via the alias is received. The alias can also still be deactivated via a call to unalias/1 . Example: server ( ) -&gt; receive { request , AliasReqId , Request } -&gt; Result = perform_request ( Request ) , AliasReqId ! { reply , AliasReqId , Result } end , server ( ) . client ( ServerPid , Request ) -&gt; AliasReqId = alias ( [ reply ] ) , ServerPid ! { request , AliasReqId , Request } , %% Alias will be automatically deactivated if we receive a reply %% since we used the &#39;reply&#39; option... receive { reply , AliasReqId , Result } -&gt; Result after 5000 -&gt; unalias ( AliasReqId ) , %% Flush message queue in case the reply arrived %% just before the alias was deactivated... receive { reply , AliasReqId , Result } -&gt; Result after 0 -&gt; exit ( timeout ) end end . Note that both the server and the client in this example must be executing on at least OTP 24 systems in order for this to work. For more information on process aliases see the Process Aliases section of the Erlang Reference Manual .","ref":"erlang.html#alias/0","title":"erlang.alias/0","type":"function"},{"doc":"","ref":"erlang.html#alias/1","title":"erlang.alias/1","type":"function"},{"doc":"Returns a new tuple that has one element more than Tuple1 , and contains the elements in Tuple1 followed by Term as the last element. Semantically equivalent to list_to_tuple(tuple_to_list(Tuple1) ++ [Term]) , but much faster. Example: &gt; erlang : append_element ( { one , two } , three ) . { one , two , three }","ref":"erlang.html#append_element/2","title":"erlang.append_element/2","type":"function"},{"doc":"Calls a fun, passing the elements in Args as arguments. If the number of elements in the arguments are known at compile time, the call is better written as Fun(Arg1, Arg2, ... ArgN) . Earlier, Fun could also be specified as {Module, Function} , equivalent to apply(Module, Function, Args) . This use is deprecated and will stop working in a future release.","ref":"erlang.html#apply/2","title":"erlang.apply/2","type":"function"},{"doc":"Returns the result of applying Function in Module to Args . The applied function must be exported from Module . The arity of the function is the length of Args . Example: &gt; apply ( lists , reverse , [ [ a , b , c ] ] ) . [ c , b , a ] &gt; apply ( erlang , atom_to_list , [ &#39;Erlang&#39; ] ) . &quot;Erlang&quot; If the number of arguments are known at compile time, the call is better written as Module:Function(Arg1, Arg2, ..., ArgN) . Failure: error_handler:undefined_function/3 is called if the applied function is not exported. The error handler can be redefined (see process_flag/2 ). If error_handler is undefined, or if the user has redefined the default error_handler so the replacement module is undefined, an error with reason undef is generated.","ref":"erlang.html#apply/3","title":"erlang.apply/3","type":"function"},{"doc":"The same as atom_to_binary (Atom, utf8) .","ref":"erlang.html#atom_to_binary/1","title":"erlang.atom_to_binary/1","type":"function"},{"doc":"Returns a binary corresponding to the text representation of Atom . If Encoding is latin1 , one byte exists for each character in the text representation. If Encoding is utf8 or unicode , the characters are encoded using UTF-8 where characters may require multiple bytes. As from Erlang/OTP 20, atoms can contain any Unicode character and atom_to_binary(Atom, latin1) may fail if the text representation for Atom contains a Unicode character &gt; 255. Example: &gt; atom_to_binary ( &#39;Erlang&#39; , latin1 ) . &lt;&lt; &quot;Erlang&quot; &gt;&gt;","ref":"erlang.html#atom_to_binary/2","title":"erlang.atom_to_binary/2","type":"function"},{"doc":"Returns a list of unicode code points corresponding to the text representation of Atom , for example: &gt; atom_to_list ( &#39;Erlang&#39; ) . &quot;Erlang&quot; &gt; atom_to_list ( &#39;你好&#39; ) . [ 20320 , 22909 ] See unicode(3) for how to convert the resulting list to different formats.","ref":"erlang.html#atom_to_list/1","title":"erlang.atom_to_list/1","type":"function"},{"doc":"Extracts the part of the binary described by PosLen . Negative length can be used to extract bytes at the end of a binary, for example: 1 &gt; Bin = &lt;&lt; 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 &gt;&gt; . 2 &gt; binary_part ( Bin , { byte_size ( Bin ) , - 5 } ) . &lt;&lt; 6 , 7 , 8 , 9 , 10 &gt;&gt; Failure: badarg if PosLen in any way references outside the binary. Start is zero-based, that is: 1 &gt; Bin = &lt;&lt; 1 , 2 , 3 &gt;&gt; 2 &gt; binary_part ( Bin , { 0 , 2 } ) . &lt;&lt; 1 , 2 &gt;&gt; For details about the PosLen semantics, see binary(3) . Allowed in guard tests.","ref":"erlang.html#binary_part/2","title":"erlang.binary_part/2","type":"function"},{"doc":"The same as binary_part(Subject, {Start, Length}) . Allowed in guard tests.","ref":"erlang.html#binary_part/3","title":"erlang.binary_part/3","type":"function"},{"doc":"The same as binary_to_atom (Binary, utf8) .","ref":"erlang.html#binary_to_atom/1","title":"erlang.binary_to_atom/1","type":"function"},{"doc":"Returns the atom whose text representation is Binary . If Encoding is utf8 or unicode , the binary must contain valid UTF-8 sequences. As from Erlang/OTP 20, binary_to_atom(Binary, utf8) is capable of encoding any Unicode character. Earlier versions would fail if the binary contained Unicode characters &gt; 255. For more information about Unicode support in atoms, see the note on UTF-8 encoded atoms in section &quot;External Term Format&quot; in the User's Guide. The number of characters that are permitted in an atom name is limited. The default limits can be found in the efficiency guide (section Advanced). There is configurable limit on how many atoms that can exist and atoms are not garbage collected. Therefore, it is recommended to consider whether binary_to_existing_atom/2 is a better option than binary_to_atom/2 . The default limits can be found in efficiency guide (section Advanced). Examples: &gt; binary_to_atom ( &lt;&lt; &quot;Erlang&quot; &gt;&gt; , latin1 ) . &#39;Erlang&#39; &gt; binary_to_atom ( &lt;&lt; 1024 / utf8 &gt;&gt; , utf8 ) . &#39;Ѐ&#39;","ref":"erlang.html#binary_to_atom/2","title":"erlang.binary_to_atom/2","type":"function"},{"doc":"The same as binary_to_existing_atom (Binary, utf8) .","ref":"erlang.html#binary_to_existing_atom/1","title":"erlang.binary_to_existing_atom/1","type":"function"},{"doc":"As binary_to_atom/2 , but the atom must exist. The Erlang system has a configurable limit for the total number of atoms that can exist, and atoms are not garbage collected. Therefore, it is not safe to create many atoms from binaries that come from an untrusted source (for example, a file fetched from the Internet), for example, using binary_to_atom/2 . This function is thus the appropriate option when the input binary comes from an untrusted source. An atom exists in an Erlang system when included in a loaded Erlang module or when created programmatically (for example, by binary_to_atom/2 ). See the next note for an example of when an atom exists in the source code for an Erlang module but not in the compiled version of the same module. Failure: badarg if the atom does not exist. Note that the compiler may optimize away atoms. For example, the compiler will rewrite atom_to_list(some_atom) to &quot;some_atom&quot; . If that expression is the only mention of the atom some_atom in the containing module, the atom will not be created when the module is loaded, and a subsequent call to binary_to_existing_atom(&lt;&lt;&quot;some_atom&quot;&gt;&gt;, utf8) will fail. The number of characters that are permitted in an atom name is limited. The default limits can be found in the efficiency guide (section Advanced).","ref":"erlang.html#binary_to_existing_atom/2","title":"erlang.binary_to_existing_atom/2","type":"function"},{"doc":"Returns the float whose text representation is Binary , for example: &gt; binary_to_float ( &lt;&lt; &quot;2.2017764e+0&quot; &gt;&gt; ) . 2.2017764 The float string format is the same as the format for Erlang float literals except for that underscores are not permitted. Failure: badarg if Binary contains a bad representation of a float.","ref":"erlang.html#binary_to_float/1","title":"erlang.binary_to_float/1","type":"function"},{"doc":"Returns an integer whose text representation is Binary , for example: &gt; binary_to_integer ( &lt;&lt; &quot;123&quot; &gt;&gt; ) . 123 binary_to_integer/1 accepts the same string formats as list_to_integer/1 . Failure: badarg if Binary contains a bad representation of an integer.","ref":"erlang.html#binary_to_integer/1","title":"erlang.binary_to_integer/1","type":"function"},{"doc":"Returns an integer whose text representation in base Base is Binary , for example: &gt; binary_to_integer ( &lt;&lt; &quot;3FF&quot; &gt;&gt; , 16 ) . 1023 binary_to_integer/2 accepts the same string formats as list_to_integer/2 . Failure: badarg if Binary contains a bad representation of an integer.","ref":"erlang.html#binary_to_integer/2","title":"erlang.binary_to_integer/2","type":"function"},{"doc":"Returns a list of integers corresponding to the bytes of Binary .","ref":"erlang.html#binary_to_list/1","title":"erlang.binary_to_list/1","type":"function"},{"doc":"As binary_to_list/1 , but returns a list of integers corresponding to the bytes from position Start to position Stop in Binary . The positions in the binary are numbered starting from 1. The one-based indexing for binaries used by this function is deprecated. New code is to use binary:bin_to_list/3 in STDLIB instead. All functions in module binary consistently use zero-based indexing.","ref":"erlang.html#binary_to_list/3","title":"erlang.binary_to_list/3","type":"function"},{"doc":"Returns an Erlang term that is the result of decoding binary object Binary , which must be encoded according to the Erlang external term format. &gt; Bin = term_to_binary ( hello ) . &lt;&lt; 131 , 100 , 0 , 5 , 104 , 101 , 108 , 108 , 111 &gt;&gt; &gt; hello = binary_to_term ( Bin ) . hello When decoding binaries from untrusted sources, the untrusted source may submit data in a way to create resources, such as atoms and remote references, that cannot be garbage collected and lead to Denial of Service attack. In such cases, consider using binary_to_term/2 with the safe option. See also term_to_binary/1 and binary_to_term/2 .","ref":"erlang.html#binary_to_term/1","title":"erlang.binary_to_term/1","type":"function"},{"doc":"As binary_to_term/1 , but takes these options: safe Use this option when receiving binaries from an untrusted source. When enabled, it prevents decoding data that can be used to attack the Erlang runtime. In the event of receiving unsafe data, decoding fails with a badarg error. This prevents creation of new atoms directly, creation of new atoms indirectly (as they are embedded in certain structures, such as process identifiers, refs, and funs), and creation of new external function references. None of those resources are garbage collected, so unchecked creation of them can exhaust available memory. &gt; binary_to_term ( &lt;&lt; 131 , 100 , 0 , 5 , &quot;hello&quot; &gt;&gt; , [ safe ] ) . * * exception error : bad argument &gt; hello . hello &gt; binary_to_term ( &lt;&lt; 131 , 100 , 0 , 5 , &quot;hello&quot; &gt;&gt; , [ safe ] ) . hello The safe option ensures the data is safely processed by the Erlang runtime but it does not guarantee the data is safe to your application. You must always validate data from untrusted sources. If the binary is stored or transits through untrusted sources, you should also consider cryptographically signing it. used Changes the return value to {Term, Used} where Used is the number of bytes actually read from Binary . &gt; Input = &lt;&lt; 131 , 100 , 0 , 5 , &quot;hello&quot; , &quot;world&quot; &gt;&gt; . &lt;&lt; 131 , 100 , 0 , 5 , 104 , 101 , 108 , 108 , 111 , 119 , 111 , 114 , 108 , 100 &gt;&gt; &gt; { Term , Used } = binary_to_term ( Input , [ used ] ) . { hello , 9 } &gt; split_binary ( Input , Used ) . { &lt;&lt; 131 , 100 , 0 , 5 , 104 , 101 , 108 , 108 , 111 &gt;&gt; , &lt;&lt; &quot;world&quot; &gt;&gt; } Failure: badarg if safe is specified and unsafe data is decoded. See also term_to_binary/1 , binary_to_term/1 , and list_to_existing_atom/1 .","ref":"erlang.html#binary_to_term/2","title":"erlang.binary_to_term/2","type":"function"},{"doc":"Returns an integer that is the size in bits of Bitstring , for example: &gt; bit_size ( &lt;&lt; 433 : 16 , 3 : 3 &gt;&gt; ) . 19 &gt; bit_size ( &lt;&lt; 1 , 2 , 3 &gt;&gt; ) . 24 Allowed in guard tests.","ref":"erlang.html#bit_size/1","title":"erlang.bit_size/1","type":"function"},{"doc":"Returns a list of integers corresponding to the bytes of Bitstring . If the number of bits in the binary is not divisible by 8, the last element of the list is a bitstring containing the remaining 1-7 bits. Examples: &gt; bitstring_to_list ( &lt;&lt; 433 : 16 &gt;&gt; ) . [ 1 , 177 ] &gt; bitstring_to_list ( &lt;&lt; 433 : 16 , 3 : 3 &gt;&gt; ) . [ 1 , 177 , &lt;&lt; 3 : 3 &gt;&gt; ]","ref":"erlang.html#bitstring_to_list/1","title":"erlang.bitstring_to_list/1","type":"function"},{"doc":"This implementation-dependent function increments the reduction counter for the calling process. In the Beam emulator, the reduction counter is normally incremented by one for each function and BIF call. A context switch is forced when the counter reaches the maximum number of reductions for a process (4000 reductions in Erlang/OTP 19.2 and later). This BIF can be removed in a future version of the Beam machine without prior warning. It is unlikely to be implemented in other Erlang implementations.","ref":"erlang.html#bump_reductions/1","title":"erlang.bump_reductions/1","type":"function"},{"doc":"Returns an integer that is the number of bytes needed to contain Bitstring . That is, if the number of bits in Bitstring is not divisible by 8, the resulting number of bytes is rounded up . Examples: &gt; byte_size ( &lt;&lt; 433 : 16 , 3 : 3 &gt;&gt; ) . 3 &gt; byte_size ( &lt;&lt; 1 , 2 , 3 &gt;&gt; ) . 3 Allowed in guard tests.","ref":"erlang.html#byte_size/1","title":"erlang.byte_size/1","type":"function"},{"doc":"Cancels a timer. The same as calling erlang:cancel_timer(TimerRef, []) .","ref":"erlang.html#cancel_timer/1","title":"erlang.cancel_timer/1","type":"function"},{"doc":"Cancels a timer that has been created by erlang:start_timer or erlang:send_after . TimerRef identifies the timer, and was returned by the BIF that created the timer. Option s: {async, Async} Asynchronous request for cancellation. Async defaults to false , which causes the cancellation to be performed synchronously. When Async is set to true , the cancel operation is performed asynchronously. That is, cancel_timer() sends an asynchronous request for cancellation to the timer service that manages the timer, and then returns ok . {info, Info} Requests information about the Result of the cancellation. Info defaults to true , which means the Result is given. When Info is set to false , no information about the result of the cancellation is given. When Async is false : if Info is true , the Result is returned by erlang:cancel_timer() . otherwise ok is returned. When Async is true : if Info is true , a message on the form {cancel_timer, TimerRef, Result} is sent to the caller of erlang:cancel_timer() when the cancellation operation has been performed, otherwise no message is sent. More Option s may be added in the future. If Result is an integer, it represents the time in milliseconds left until the canceled timer would have expired. If Result is false , a timer corresponding to TimerRef could not be found. This can be either because the timer had expired, already had been canceled, or because TimerRef never corresponded to a timer. Even if the timer had expired, it does not tell you if the time-out message has arrived at its destination yet. The timer service that manages the timer can be co-located with another scheduler than the scheduler that the calling process is executing on. If so, communication with the timer service takes much longer time than if it is located locally. If the calling process is in critical path, and can do other things while waiting for the result of this operation, or is not interested in the result of the operation, you want to use option {async, true} . If using option {async, false} , the calling process blocks until the operation has been performed. See also erlang:send_after/4 , erlang:start_timer/4 , and erlang:read_timer/2 .","ref":"erlang.html#cancel_timer/2","title":"erlang.cancel_timer/2","type":"function"},{"doc":"Returns the smallest integer not less than Number . For example: &gt; ceil ( 5.5 ) . 6 Allowed in guard tests.","ref":"erlang.html#ceil/1","title":"erlang.ceil/1","type":"function"},{"doc":"Returns true if Module has old code, otherwise false . See also code(3) .","ref":"erlang.html#check_old_code/1","title":"erlang.check_old_code/1","type":"function"},{"doc":"The same as check_process_code(Pid, Module, []) .","ref":"erlang.html#check_process_code/2","title":"erlang.check_process_code/2","type":"function"},{"doc":"Checks if the node local process identified by Pid executes old code for Module . Option s: {allow_gc, boolean()} Determines if garbage collection is allowed when performing the operation. If {allow_gc, false} is passed, and a garbage collection is needed to determine the result of the operation, the operation is aborted (see information on CheckResult below). The default is to allow garbage collection, that is, {allow_gc, true} . {async, RequestId} The function check_process_code/3 returns the value async immediately after the request has been sent. When the request has been processed, the process that called this function is passed a message on the form {check_process_code, RequestId, CheckResult} . If Pid equals self() , and no async option has been passed, the operation is performed at once. Otherwise a request for the operation is sent to the process identified by Pid , and is handled when appropriate. If no async option has been passed, the caller blocks until CheckResult is available and can be returned. CheckResult informs about the result of the request as follows: true The process identified by Pid executes old code for Module . That is, the current call of the process executes old code for this module, or the process has references to old code for this module, or the process contains funs that references old code for this module. false The process identified by Pid does not execute old code for Module . aborted The operation was aborted, as the process needed to be garbage collected to determine the operation result, and the operation was requested by passing option {allow_gc, false} . Up until ERTS version 8.*, the check process code operation checks for all types of references to the old code. That is, direct references (e.g. return addresses on the process stack), indirect references ( fun s in process context), and references to literals in the code. As of ERTS version 9.0, the check process code operation only checks for direct references to the code. Indirect references via fun s will be ignored. If such fun s exist and are used after a purge of the old code, an exception will be raised upon usage (same as the case when the fun is received by the process after the purge). Literals will be taken care of (copied) at a later stage. This behavior can as of ERTS version 8.1 be enabled when building OTP, and will automatically be enabled if dirty scheduler support is enabled. See also code(3) . Failures: badarg If Pid is not a node local process identifier. badarg If Module is not an atom. badarg If OptionList is an invalid list of options.","ref":"erlang.html#check_process_code/3","title":"erlang.check_process_code/3","type":"function"},{"doc":"Converts the Time value of time unit FromUnit to the corresponding ConvertedTime value of time unit ToUnit . The result is rounded using the floor function. You can lose accuracy and precision when converting between time units. To minimize such loss, collect all data at native time unit and do the conversion on the end result.","ref":"erlang.html#convert_time_unit/3","title":"erlang.convert_time_unit/3","type":"function"},{"doc":"Computes and returns the crc32 (IEEE 802.3 style) checksum for Data .","ref":"erlang.html#crc32/1","title":"erlang.crc32/1","type":"function"},{"doc":"Continues computing the crc32 checksum by combining the previous checksum, OldCrc , with the checksum of Data . The following code: X = erlang : crc32 ( Data1 ) , Y = erlang : crc32 ( X , Data2 ) . assigns the same value to Y as this: Y = erlang : crc32 ( [ Data1 , Data2 ] ) .","ref":"erlang.html#crc32/2","title":"erlang.crc32/2","type":"function"},{"doc":"Combines two previously computed crc32 checksums. This computation requires the size of the data object for the second checksum to be known. The following code: Y = erlang : crc32 ( Data1 ) , Z = erlang : crc32 ( Y , Data2 ) . assigns the same value to Z as this: X = erlang : crc32 ( Data1 ) , Y = erlang : crc32 ( Data2 ) , Z = erlang : crc32_combine ( X , Y , iolist_size ( Data2 ) ) .","ref":"erlang.html#crc32_combine/3","title":"erlang.crc32_combine/3","type":"function"},{"doc":"Returns the current date as {Year, Month, Day} . The time zone and Daylight Saving Time correction depend on the underlying OS. The return value is based on the OS System Time. Example: &gt; date ( ) . { 1995 , 2 , 19 }","ref":"erlang.html#date/0","title":"erlang.date/0","type":"function"},{"doc":"Decodes the binary Bin according to the packet protocol specified by Type . Similar to the packet handling done by sockets with option {packet,Type}. If an entire packet is contained in Bin , it is returned together with the remainder of the binary as {ok,Packet,Rest} . If Bin does not contain the entire packet, {more,Length} is returned. Length is either the expected total size of the packet, or undefined if the expected packet size is unknown. decode_packet can then be called again with more data added. If the packet does not conform to the protocol format, {error,Reason} is returned. Type s: raw | 0 No packet handling is done. The entire binary is returned unless it is empty. 1 | 2 | 4 Packets consist of a header specifying the number of bytes in the packet, followed by that number of bytes. The length of the header can be one, two, or four bytes; the order of the bytes is big-endian. The header is stripped off when the packet is returned. line A packet is a line-terminated by a delimiter byte, default is the latin-1 newline character. The delimiter byte is included in the returned packet unless the line was truncated according to option line_length . asn1 | cdr | sunrm | fcgi | tpkt The header is not stripped off. The meanings of the packet types are as follows: asn1 - ASN.1 BER sunrm - Sun's RPC encoding cdr - CORBA (GIOP 1.1) fcgi - Fast CGI tpkt - TPKT format [RFC1006] http | httph | http_bin | httph_bin The Hypertext Transfer Protocol. The packets are returned with the format according to HttpPacket described earlier. A packet is either a request, a response, a header, or an end of header mark. Invalid lines are returned as HttpError . Recognized request methods and header fields are returned as atoms. Others are returned as strings. Strings of unrecognized header fields are formatted with only capital letters first and after hyphen characters, for example, &quot;Sec-Websocket-Key&quot; . Header field names are also returned in UnmodifiedField as strings, without any conversion or formatting. The protocol type http is only to be used for the first line when an HttpRequest or an HttpResponse is expected. The following calls are to use httph to get HttpHeader s until http_eoh is returned, which marks the end of the headers and the beginning of any following message body. The variants http_bin and httph_bin return strings ( HttpString ) as binaries instead of lists. Options: {packet_size, integer() &gt;= 0} Sets the maximum allowed size of the packet body. If the packet header indicates that the length of the packet is longer than the maximum allowed length, the packet is considered invalid. Defaults to 0, which means no size limit. {line_length, integer() &gt;= 0} For packet type line , lines longer than the indicated length are truncated. Option line_length also applies to http* packet types as an alias for option packet_size if packet_size itself is not set. This use is only intended for backward compatibility. {line_delimiter, 0 =&lt; byte() =&lt; 255} For packet type line , sets the delimiting byte. Default is the latin-1 character $\\n . Examples: &gt; erlang : decode_packet ( 1 , &lt;&lt; 3 , &quot;abcd&quot; &gt;&gt; , [ ] ) . { ok , &lt;&lt; &quot;abc&quot; &gt;&gt; , &lt;&lt; &quot;d&quot; &gt;&gt; } &gt; erlang : decode_packet ( 1 , &lt;&lt; 5 , &quot;abcd&quot; &gt;&gt; , [ ] ) . { more , 6 }","ref":"erlang.html#decode_packet/3","title":"erlang.decode_packet/3","type":"function"},{"doc":"Returns a new tuple with element at Index removed from tuple Tuple1 , for example: &gt; erlang : delete_element ( 2 , { one , two , three } ) . { one , three }","ref":"erlang.html#delete_element/2","title":"erlang.delete_element/2","type":"function"},{"doc":"Makes the current code for Module become old code and deletes all references for this module from the export table. Returns undefined if the module does not exist, otherwise true . This BIF is intended for the code server (see code(3) ) and is not to be used elsewhere. Failure: badarg if there already is an old version of Module .","ref":"erlang.html#delete_module/1","title":"erlang.delete_module/1","type":"function"},{"doc":"If MonitorRef is a reference that the calling process obtained by calling monitor/2 , this monitoring is turned off. If the monitoring is already turned off, nothing happens. Once demonitor(MonitorRef) has returned, it is guaranteed that no {'DOWN', MonitorRef, _, _, _} message, because of the monitor, will be placed in the caller message queue in the future. However, a {'DOWN', MonitorRef, _, _, _} message can have been placed in the caller message queue before the call. It is therefore usually advisable to remove such a 'DOWN' message from the message queue after monitoring has been stopped. demonitor(MonitorRef, [flush]) can be used instead of demonitor(MonitorRef) if this cleanup is wanted. Before Erlang/OTP R11B (ERTS 5.5) demonitor/1 behaved completely asynchronously, that is, the monitor was active until the &quot;demonitor signal&quot; reached the monitored entity. This had one undesirable effect. You could never know when you were guaranteed not to receive a DOWN message because of the monitor. The current behavior can be viewed as two combined operations: asynchronously send a &quot;demonitor signal&quot; to the monitored entity and ignore any future results of the monitor. Failure: It is an error if MonitorRef refers to a monitoring started by another process. Not all such cases are cheap to check. If checking is cheap, the call fails with badarg , for example if MonitorRef is a remote reference.","ref":"erlang.html#demonitor/1","title":"erlang.demonitor/1","type":"function"},{"doc":"The returned value is true unless info is part of OptionList . demonitor(MonitorRef, []) is equivalent to demonitor(MonitorRef) . Option s: flush Removes (one) {_, MonitorRef, _, _, _} message, if there is one, from the caller message queue after monitoring has been stopped. Calling demonitor(MonitorRef, [flush]) is equivalent to the following, but more efficient: demonitor(MonitorRef), receive {_, MonitorRef, _, _, _} -&gt; true after 0 -&gt; true end info The returned value is one of the following: true The monitor was found and removed. In this case, no 'DOWN' message corresponding to this monitor has been delivered and will not be delivered. false The monitor was not found and could not be removed. This probably because someone already has placed a 'DOWN' message corresponding to this monitor in the caller message queue. If option info is combined with option flush , false is returned if a flush was needed, otherwise true . More options can be added in a future release. Failures: badarg If OptionList is not a list. badarg If Option is an invalid option. badarg The same failure as for demonitor/1 .","ref":"erlang.html#demonitor/2","title":"erlang.demonitor/2","type":"function"},{"doc":"Forces the disconnection of a node. This appears to the node Node as if the local node has crashed. This BIF is mainly used in the Erlang network authentication protocols. Returns true if disconnection succeeds, otherwise false . If the local node is not alive, ignored is returned. This function may return before nodedown messages have been delivered.","ref":"erlang.html#disconnect_node/1","title":"erlang.disconnect_node/1","type":"function"},{"doc":"Prints a text representation of Term on the standard output. This BIF is intended for debugging only.","ref":"erlang.html#display/1","title":"erlang.display/1","type":"function"},{"doc":"Get distribution channel data from the local node that is to be passed to the remote node. The distribution channel is identified by DHandle . If no data is available, the atom none is returned. One can request to be informed by a message when more data is available by calling erlang:dist_ctrl_get_data_notification(DHandle) . The returned value when there are data available depends on the value of the get_size option configured on the distribution channel identified by DHandle . For more information see the documentation of the get_size option for the erlang:dist_ctrl_set_opt/3 function. Only the process registered as distribution controller for the distribution channel identified by DHandle is allowed to call this function. This function is used when implementing an alternative distribution carrier using processes as distribution controllers. DHandle is retrived via the callback f_handshake_complete . More information can be found in the documentation of ERTS User's Guide ➜ How to implement an Alternative Carrier for the Erlang Distribution ➜ Distribution Module.","ref":"erlang.html#dist_ctrl_get_data/1","title":"erlang.dist_ctrl_get_data/1","type":"function"},{"doc":"Request notification when more data is available to fetch using erlang:dist_ctrl_get_data(DHandle) for the distribution channel identified by DHandle . When more data is present, the caller will be sent the message dist_data . Once a dist_data messages has been sent, no more dist_data messages will be sent until the dist_ctrl_get_data_notification/1 function has been called again. Only the process registered as distribution controller for the distribution channel identified by DHandle is allowed to call this function. This function is used when implementing an alternative distribution carrier using processes as distribution controllers. DHandle is retrived via the callback f_handshake_complete . More information can be found in the documentation of ERTS User's Guide ➜ How to implement an Alternative Carrier for the Erlang Distribution ➜ Distribution Module.","ref":"erlang.html#dist_ctrl_get_data_notification/1","title":"erlang.dist_ctrl_get_data_notification/1","type":"function"},{"doc":"Returns the value of the get_size option on the distribution channel identified by DHandle . For more information see the documentation of the get_size option for the erlang:dist_ctrl_set_opt/3 function. Only the process registered as distribution controller for the distribution channel identified by DHandle is allowed to call this function. This function is used when implementing an alternative distribution carrier using processes as distribution controllers. DHandle is retrived via the callback f_handshake_complete . More information can be found in the documentation of ERTS User's Guide ➜ How to implement an Alternative Carrier for the Erlang Distribution ➜ Distribution Module.","ref":"erlang.html#dist_ctrl_get_opt/2","title":"erlang.dist_ctrl_get_opt/2","type":"function"},{"doc":"Register an alternate input handler process for the distribution channel identified by DHandle . Once this function has been called, InputHandler is the only process allowed to call erlang:dist_ctrl_put_data(DHandle, Data) with the DHandle identifing this distribution channel. Only the process registered as distribution controller for the distribution channel identified by DHandle is allowed to call this function. This function is used when implementing an alternative distribution carrier using processes as distribution controllers. DHandle is retrived via the callback f_handshake_complete . More information can be found in the documentation of ERTS User's Guide ➜ How to implement an Alternative Carrier for the Erlang Distribution ➜ Distribution Module.","ref":"erlang.html#dist_ctrl_input_handler/2","title":"erlang.dist_ctrl_input_handler/2","type":"function"},{"doc":"Deliver distribution channel data from a remote node to the local node. Only the process registered as distribution controller for the distribution channel identified by DHandle is allowed to call this function unless an alternate input handler process has been registered using erlang:dist_ctrl_input_handler(DHandle, InputHandler) . If an alternate input handler has been registered, only the registered input handler process is allowed to call this function. This function is used when implementing an alternative distribution carrier using processes as distribution controllers. DHandle is retrived via the callback f_handshake_complete . More information can be found in the documentation of ERTS User's Guide ➜ How to implement an Alternative Carrier for the Erlang Distribution ➜ Distribution Module.","ref":"erlang.html#dist_ctrl_put_data/2","title":"erlang.dist_ctrl_put_data/2","type":"function"},{"doc":"Sets the value of the get_size option on the distribution channel identified by DHandle . This option controls the return value of calls to erlang:dist_ctrl_get_data(DHandle) where DHandle equals DHandle used when setting this option. When the get_size option is: false and there are distribution data available, a call to erlang:dist_ctrl_get_data(DHandle) will just return Data to pass over the channel. This is the default value of the get_size option. true and there are distribution data available, a call to erlang:dist_ctrl_get_data(DHandle) will return Data to pass over the channel as well as the Size of Data in bytes. This is returned as a tuple on the form {Size, Data} . All options are set to default when a channel is closed. Only the process registered as distribution controller for the distribution channel identified by DHandle is allowed to call this function. This function is used when implementing an alternative distribution carrier using processes as distribution controllers. DHandle is retrived via the callback f_handshake_complete . More information can be found in the documentation of ERTS User's Guide ➜ How to implement an Alternative Carrier for the Erlang Distribution ➜ Distribution Module.","ref":"erlang.html#dist_ctrl_set_opt/3","title":"erlang.dist_ctrl_set_opt/3","type":"function"},{"doc":"Returns the N th element (numbering from 1) of Tuple , for example: &gt; element ( 2 , { a , b , c } ) . b Allowed in guard tests.","ref":"erlang.html#element/2","title":"erlang.element/2","type":"function"},{"doc":"Returns the process dictionary and deletes it, for example: &gt; put ( key1 , { 1 , 2 , 3 } ) , put ( key2 , [ a , b , c ] ) , erase ( ) . [ { key1 , { 1 , 2 , 3 } } , { key2 , [ a , b , c ] } ]","ref":"erlang.html#erase/0","title":"erlang.erase/0","type":"function"},{"doc":"Returns the value Val associated with Key and deletes it from the process dictionary. Returns undefined if no value is associated with Key . The average time complexity for the current implementation of this function is O( 1 ) and the worst case time complexity is O( N ), where N is the number of items in the process dictionary. Example: &gt; put ( key1 , { merry , lambs , are , playing } ) , X = erase ( key1 ) , { X , erase ( key1 ) } . { { merry , lambs , are , playing } , undefined }","ref":"erlang.html#erase/1","title":"erlang.erase/1","type":"function"},{"doc":"Raises an exception of class error with the reason Reason . As evaluating this function causes an exception to be thrown, it has no return value. The intent of the exception class error is to signal that an unexpected error has happened (for example, a function is called with a parameter that has an incorrect type). See the guide about errors and error handling for additional information. Example: &gt; catch error ( foobar ) . { &#39;EXIT&#39; , { foobar , [ { shell , apply_fun , 3 , [ { file , &quot;shell.erl&quot; } , { line , 906 } ] } , { erl_eval , do_apply , 6 , [ { file , &quot;erl_eval.erl&quot; } , { line , 677 } ] } , { erl_eval , expr , 5 , [ { file , &quot;erl_eval.erl&quot; } , { line , 430 } ] } , { shell , exprs , 7 , [ { file , &quot;shell.erl&quot; } , { line , 687 } ] } , { shell , eval_exprs , 7 , [ { file , &quot;shell.erl&quot; } , { line , 642 } ] } , { shell , eval_loop , 3 , [ { file , &quot;shell.erl&quot; } , { line , 627 } ] } ] } }","ref":"erlang.html#error/1","title":"erlang.error/1","type":"function"},{"doc":"Raises an exception of class error with the reason Reason . Args is expected to be the list of arguments for the current function or the atom none . If it is a list, it is used to provide the arguments for the current function in the stack back-trace. If it is none , the arity of the calling function is used in the stacktrace. As evaluating this function causes an exception to be raised, it has no return value. The intent of the exception class error is to signal that an unexpected error has happened (for example, a function is called with a parameter that has an incorrect type). See the guide about errors and error handling for additional information. Example: test.erl : - module ( test ) . - export ( [ example_fun / 2 ] ) . example_fun ( A1 , A2 ) -&gt; erlang : error ( my_error , [ A1 , A2 ] ) . Erlang shell: 6 &gt; c ( test ) . { ok , test } 7 &gt; test : example_fun ( arg1 , &quot;this is the second argument&quot; ) . * * exception error : my_error in function test : example_fun / 2 called as test : example_fun ( arg1 , &quot;this is the second argument&quot; )","ref":"erlang.html#error/2","title":"erlang.error/2","type":"function"},{"doc":"Raises an exception of class error with the reason Reason . Args is expected to be the list of arguments for the current function or the atom none . If it is a list, it is used to provide the arguments for the current function in the stack back-trace. If it is none , the arity of the calling function is used in the stacktrace. As evaluating this function causes an exception to be raised, it has no return value. If the error_info option is given, the ErrorInfoMap will be inserted into the stacktrace. The information given in the ErrorInfoMap is to be used by error formatters such as erl_error to provide more context around an error. The default module of the ErrorInfoMap is the module that the call to error/3 is made. The default function is format_error . See format_error/2 for more details on how this Module:Function/2 is to be used The intent of the exception class error is to signal that an unexpected error has happened (for example, a function is called with a parameter that has an incorrect type). See the guide about errors and error handling for additional information.","ref":"erlang.html#error/3","title":"erlang.error/3","type":"function"},{"doc":"Raises an exception of class exit with exit reason Reason . As evaluating this function causes an exception to be raised, it has no return value. The intent of the exception class exit is that the current process should be stopped (for example when a message telling a process to stop is received). This function differ from error/1,2,3 by causing an exception of a different class and by having a reason that does not include the list of functions from the call stack. See the guide about errors and error handling for additional information. Example: &gt; exit ( foobar ) . * * exception exit : foobar &gt; catch exit ( foobar ) . { &#39;EXIT&#39; , foobar } If a process calls exit(kill) and does not catch the exception, it will terminate with exit reason kill and also emit exit signals with exit reason kill (not killed ) to all linked processes. Such exit signals with exit reason kill can be trapped by the linked processes. Note that this means that signals with exit reason kill behave differently depending on how they are sent because the signal will be untrappable if a process sends such a signal to another process with erlang:exit/2 .","ref":"erlang.html#exit/1","title":"erlang.exit/1","type":"function"},{"doc":"Sends an exit signal with exit reason Reason to the process or port identified by Pid . The following behavior applies if Reason is any term, except normal or kill , and P is the process or port identified by Pid : If P is not trapping exits , P exits with exit reason Reason . If P is trapping exits , the exit signal is transformed into a message {'EXIT', From, Reason} , where From is the process identifier of the process that sent the exit signal, and delivered to the message queue of P . The following behavior applies if Reason is the term normal and Pid is the identifier of a process P which is not the same as the process that invoked erlang:exit(Pid, normal) (the behavior when a process sends a signal with the normal reason to itself is described in the warning): If P is trapping exits , the exit signal is transformed into a message {'EXIT', From, normal} , where From is the process identifier of the process that sent the exit signal, and delivered to P 's message queue. The signal has no effect if P is not trapping exits. If Reason is the atom kill , that is, if exit(Pid, kill) is called, an untrappable exit signal is sent to the process that is identified by Pid , which unconditionally exits with exit reason killed . The exit reason is changed from kill to killed to hint to linked processes that the killed process got killed by a call to exit(Pid, kill) . The functions erlang:exit/1 and erlang:exit/2 are named similarly but provide very different functionalities. The erlang:exit/1 function should be used when the intent is to stop the current process while erlang:exit/2 should be used when the intent is to send an exit signal to another process. Note also that erlang:exit/1 raises an exception that can be caught while erlang:exit/2 does not cause any exception to be raised. The only scenario that has not been covered by the description above is when a process P sends an exit signal with reason normal to itself, that is erlang:exit(self(), normal) . The behavior in this scenario is as follows: If P is trapping exits , the exit signal is transformed into a message {'EXIT', From, normal} , where From is P 's process identifier, and delivered to P 's message queue. P exits with reason normal if P is not trapping exits. Note that the behavior described above is different from when a process sends an exit signal with reason normal to another process. This is arguably strange but this behavior is kept for backward compatibility reasons.","ref":"erlang.html#exit/2","title":"erlang.exit/2","type":"function"},{"doc":"Calculates, without doing the encoding, the maximum byte size for a term encoded in the Erlang external term format. The following condition applies always: &gt; Size1 = byte_size ( term_to_binary ( Term ) ) , &gt; Size2 = erlang : external_size ( Term ) , &gt; true = Size1 =&lt; Size2 . true This is equivalent to a call to: erlang : external_size ( Term , [ ] )","ref":"erlang.html#external_size/1","title":"erlang.external_size/1","type":"function"},{"doc":"Calculates, without doing the encoding, the maximum byte size for a term encoded in the Erlang external term format. The following condition applies always: &gt; Size1 = byte_size ( term_to_binary ( Term , Options ) ) , &gt; Size2 = erlang : external_size ( Term , Options ) , &gt; true = Size1 =&lt; Size2 . true Option {minor_version, Version} specifies how floats are encoded. For a detailed description, see term_to_binary/2 .","ref":"erlang.html#external_size/2","title":"erlang.external_size/2","type":"function"},{"doc":"Returns a float by converting Number to a float, for example: &gt; float ( 55 ) . 55.0 Allowed in guard tests. If used on the top level in a guard, it tests whether the argument is a floating point number; for clarity, use is_float/1 instead. When float/1 is used in an expression in a guard, such as ' float(A) == 4.0 ', it converts a number as described earlier.","ref":"erlang.html#float/1","title":"erlang.float/1","type":"function"},{"doc":"The same as float_to_binary(Float,[{scientific,20}]) .","ref":"erlang.html#float_to_binary/1","title":"erlang.float_to_binary/1","type":"function"},{"doc":"Returns a binary corresponding to the text representation of Float using fixed decimal point formatting. Options behaves in the same way as float_to_list/2 . Examples: &gt; float_to_binary ( 7.12 , [ { decimals , 4 } ] ) . &lt;&lt; &quot;7.1200&quot; &gt;&gt; &gt; float_to_binary ( 7.12 , [ { decimals , 4 } , compact ] ) . &lt;&lt; &quot;7.12&quot; &gt;&gt; &gt; float_to_binary ( 7.12 , [ { scientific , 3 } ] ) . &lt;&lt; &quot;7.120e+00&quot; &gt;&gt; &gt; float_to_binary ( 7.12 , [ short ] ) . &lt;&lt; &quot;7.12&quot; &gt;&gt; &gt; float_to_binary ( 0.1 + 0.2 , [ short ] ) . &lt;&lt; &quot;0.30000000000000004&quot; &gt;&gt; &gt; float_to_binary ( 0.1 + 0.2 ) &lt;&lt; &quot;3.00000000000000044409e-01&quot; &gt;&gt;","ref":"erlang.html#float_to_binary/2","title":"erlang.float_to_binary/2","type":"function"},{"doc":"The same as float_to_list(Float,[{scientific,20}]) .","ref":"erlang.html#float_to_list/1","title":"erlang.float_to_list/1","type":"function"},{"doc":"Returns a string corresponding to the text representation of Float using fixed decimal point formatting. Available options: If option decimals is specified, the returned value contains at most Decimals number of digits past the decimal point. If the number does not fit in the internal static buffer of 256 bytes, the function throws badarg . If option compact is specified, the trailing zeros at the end of the list are truncated. This option is only meaningful together with option decimals . If option scientific is specified, the float is formatted using scientific notation with Decimals digits of precision. If option short is specified, the float is formatted with the smallest number of digits that still guarantees that F =:= list_to_float(float_to_list(F, [short])) . When the float is inside the range (-2⁵³, 2⁵³), the notation that yields the smallest number of characters is used (scientific notation or normal decimal notation). Floats outside the range (-2⁵³, 2⁵³) are always formatted using scientific notation to avoid confusing results when doing arithmetic operations. If Options is [] , the function behaves as float_to_list/1 . Examples: &gt; float_to_list ( 7.12 , [ { decimals , 4 } ] ) . &quot;7.1200&quot; &gt; float_to_list ( 7.12 , [ { decimals , 4 } , compact ] ) . &quot;7.12&quot; &gt; float_to_list ( 7.12 , [ { scientific , 3 } ] ) . &quot;7.120e+00&quot; &gt; float_to_list ( 7.12 , [ short ] ) . &quot;7.12&quot; &gt; float_to_list ( 0.1 + 0.2 , [ short ] ) . &quot;0.30000000000000004&quot; &gt; float_to_list ( 0.1 + 0.2 ) &quot;3.00000000000000044409e-01&quot; In the last example, float_to_list(0.1+0.2) evaluates to &quot;3.00000000000000044409e-01&quot; . The reason for this is explained in Representation of Floating Point Numbers.","ref":"erlang.html#float_to_list/2","title":"erlang.float_to_list/2","type":"function"},{"doc":"Returns the largest integer not greater than Number . For example: &gt; floor ( - 10.5 ) . - 11 Allowed in guard tests.","ref":"erlang.html#floor/1","title":"erlang.floor/1","type":"function"},{"doc":"Returns a list with information about the fun Fun . Each list element is a tuple. The order of the tuples is undefined, and more tuples can be added in a future release. This BIF is mainly intended for debugging, but it can sometimes be useful in library functions that need to verify, for example, the arity of a fun. Two types of funs have slightly different semantics: A fun created by fun M:F/A is called an external fun. Calling it will always call the function F with arity A in the latest code for module M . Notice that module M does not even need to be loaded when the fun fun M:F/A is created. All other funs are called local . When a local fun is called, the same version of the code that created the fun is called (even if a newer version of the module has been loaded). The following elements are always present in the list for both local and external funs: {type, Type} Type is local or external . {module, Module} Module (an atom) is the module name. If Fun is a local fun, Module is the module in which the fun is defined. If Fun is an external fun, Module is the module that the fun refers to. {name, Name} Name (an atom) is a function name. If Fun is a local fun, Name is the name of the local function that implements the fun. (This name was generated by the compiler, and is only of informational use. As it is a local function, it cannot be called directly.) If no code is currently loaded for the fun, [] is returned instead of an atom. If Fun is an external fun, Name is the name of the exported function that the fun refers to. {arity, Arity} Arity is the number of arguments that the fun is to be called with. {env, Env} Env (a list) is the environment or free variables for the fun. For external funs, the returned list is always empty. The following elements are only present in the list if Fun is local: {pid, Pid} Pid is the process identifier of the process that originally created the fun. It might point to the init process if the Fun was statically allocated when module was loaded (this optimisation is performed for local functions that do not capture the environment). {index, Index} Index (an integer) is an index into the module fun table. {new_index, Index} Index (an integer) is an index into the module fun table. {new_uniq, Uniq} Uniq (a binary) is a unique value for this fun. It is calculated from the compiled code for the entire module. {uniq, Uniq} Uniq (an integer) is a unique value for this fun. As from Erlang/OTP R15, this integer is calculated from the compiled code for the entire module. Before Erlang/OTP R15, this integer was based on only the body of the fun.","ref":"erlang.html#fun_info/1","title":"erlang.fun_info/1","type":"function"},{"doc":"Returns information about Fun as specified by Item , in the form {Item,Info} . For any fun, Item can be any of the atoms module , name , arity , env , or type . For a local fun, Item can also be any of the atoms index , new_index , new_uniq , uniq , and pid . For an external fun, the value of any of these items is always the atom undefined . See erlang:fun_info/1 .","ref":"erlang.html#fun_info/2","title":"erlang.fun_info/2","type":"function"},{"doc":"Returns String that represents the code that created Fun . String has the following form, if Fun was created by a fun expression of the form fun ModuleName:FuncName/Arity : &quot;fun ModuleName:FuncName/Arity&quot; The form of String when Fun is created from other types of fun expressions differs depending on if the fun expression was executed while executing compiled code or if the fun expression was executed while executing uncompiled code (uncompiled escripts, the Erlang shell, and other code executed by the erl_eval module): compiled code &quot;#Fun&lt;M.I.U&gt;&quot; , where M, I and U correspond to the values named module , index and uniq in the result of erlang:fun_info(Fun) . uncompiled code All funs created from fun expressions in uncompiled code with the same arity are mapped to the same list by fun_to_list/1 . Generally, one can not use fun_to_list/1 to check if two funs are equal as fun_to_list/1 does not take the fun's environment into account. See erlang:fun_info/1 for how to get the environment of a fun. The output of fun_to_list/1 can differ between Erlang implementations and may change in future versions. Examples: - module ( test ) . - export ( [ add / 1 , add2 / 0 , fun_tuple / 0 ] ) . add ( A ) -&gt; fun ( B ) -&gt; A + B end . add2 ( ) -&gt; fun add / 1 . fun_tuple ( ) -&gt; { fun ( ) -&gt; 1 end , fun ( ) -&gt; 1 end } . &gt; { fun test : add / 1 , test : add2 ( ) } . { fun test : add / 1 , # Fun &lt; test . 1.107738983 &gt; } Explanation: fun test:add/1 is upgradable but test:add2() is not upgradable. &gt; { test : add ( 1 ) , test : add ( 42 ) } . { # Fun &lt; test . 0.107738983 &gt; , # Fun &lt; test . 0.107738983 &gt; } Explanation: test:add(1) and test:add(42) has the same string representation as the environment is not taken into account. &gt; test : fun_tuple ( ) . { # Fun &lt; test . 2.107738983 &gt; , # Fun &lt; test . 3.107738983 &gt; } Explanation: The string representations differ because the funs come from different fun experssions. &gt; { fun ( ) -&gt; 1 end , fun ( ) -&gt; 1 end } . &gt; { # Fun &lt; erl_eval . 45.97283095 &gt; , # Fun &lt; erl_eval . 45.97283095 &gt; } Explanation: All funs created from fun expressions of this form in uncompiled code with the same arity are mapped to the same list by fun_to_list/1 .","ref":"erlang.html#fun_to_list/1","title":"erlang.fun_to_list/1","type":"function"},{"doc":"Returns true if the module Module is current and contains an exported function Function/Arity , or if there is a BIF (a built-in function implemented in C) with the specified name, otherwise returns false .","ref":"erlang.html#function_exported/3","title":"erlang.function_exported/3","type":"function"},{"doc":"Forces an immediate garbage collection of the executing process. The function is not to be used unless it has been noticed (or there are good reasons to suspect) that the spontaneous garbage collection will occur too late or not at all. Improper use can seriously degrade system performance.","ref":"erlang.html#garbage_collect/0","title":"erlang.garbage_collect/0","type":"function"},{"doc":"The same as garbage_collect(Pid, []) .","ref":"erlang.html#garbage_collect/1","title":"erlang.garbage_collect/1","type":"function"},{"doc":"Garbage collects the node local process identified by Pid . Option : {async, RequestId} The function garbage_collect/2 returns the value async immediately after the request has been sent. When the request has been processed, the process that called this function is passed a message on the form {garbage_collect, RequestId, GCResult} . {type, 'major' | 'minor'} Triggers garbage collection of requested type. Default value is 'major' , which would trigger a fullsweep GC. The option 'minor' is considered a hint and may lead to either minor or major GC run. If Pid equals self() , and no async option has been passed, the garbage collection is performed at once, that is, the same as calling garbage_collect/0 . Otherwise a request for garbage collection is sent to the process identified by Pid , and will be handled when appropriate. If no async option has been passed, the caller blocks until GCResult is available and can be returned. GCResult informs about the result of the garbage collection request as follows: true The process identified by Pid has been garbage collected. false No garbage collection was performed, as the process identified by Pid terminated before the request could be satisfied. Notice that the same caveats apply as for garbage_collect/0 . Failures: badarg If Pid is not a node local process identifier. badarg If OptionList is an invalid list of options.","ref":"erlang.html#garbage_collect/2","title":"erlang.garbage_collect/2","type":"function"},{"doc":"Returns the process dictionary as a list of {Key, Val} tuples. The items in the returned list can be in any order. Example: &gt; put ( key1 , merry ) , put ( key2 , lambs ) , put ( key3 , { are , playing } ) , get ( ) . [ { key1 , merry } , { key2 , lambs } , { key3 , { are , playing } } ]","ref":"erlang.html#get/0","title":"erlang.get/0","type":"function"},{"doc":"Returns the value Val associated with Key in the process dictionary, or undefined if Key does not exist. The expected time complexity for the current implementation of this function is O( 1 ) and the worst case time complexity is O( N ), where N is the number of items in the process dictionary. Example: &gt; put ( key1 , merry ) , put ( key2 , lambs ) , put ( { any , [ valid , term ] } , { are , playing } ) , get ( { any , [ valid , term ] } ) . { are , playing }","ref":"erlang.html#get/1","title":"erlang.get/1","type":"function"},{"doc":"Returns the magic cookie of the local node if the node is alive, otherwise the atom nocookie .","ref":"erlang.html#get_cookie/0","title":"erlang.get_cookie/0","type":"function"},{"doc":"Returns the magic cookie for node Node if the local node is alive, otherwise the atom nocookie .","ref":"erlang.html#get_cookie/1","title":"erlang.get_cookie/1","type":"function"},{"doc":"Returns a list of all keys present in the process dictionary. The items in the returned list can be in any order. Example: &gt; put ( dog , { animal , 1 } ) , put ( cow , { animal , 2 } ) , put ( lamb , { animal , 3 } ) , get_keys ( ) . [ dog , cow , lamb ]","ref":"erlang.html#get_keys/0","title":"erlang.get_keys/0","type":"function"},{"doc":"Returns a list of keys that are associated with the value Val in the process dictionary. The items in the returned list can be in any order. Example: &gt; put ( mary , { 1 , 2 } ) , put ( had , { 1 , 2 } ) , put ( a , { 1 , 2 } ) , put ( little , { 1 , 2 } ) , put ( dog , { 1 , 3 } ) , put ( lamb , { 1 , 2 } ) , get_keys ( { 1 , 2 } ) . [ mary , had , a , little , lamb ]","ref":"erlang.html#get_keys/1","title":"erlang.get_keys/1","type":"function"},{"doc":"Returns the process identifier of the group leader for the process evaluating the function. Every process is a member of some process group and all groups have a group leader . All I/O from the group is channeled to the group leader. When a new process is spawned, it gets the same group leader as the spawning process. Initially, at system startup, init is both its own group leader and the group leader of all processes.","ref":"erlang.html#group_leader/0","title":"erlang.group_leader/0","type":"function"},{"doc":"Sets the group leader of Pid to GroupLeader . Typically, this is used when a process started from a certain shell is to have another group leader than init . The group leader should be rarely changed in applications with a supervision tree, because OTP assumes the group leader of their processes is their application master. Setting the group leader follows the signal ordering guarentees described in the Processes Chapter in the Erlang Reference Manual . See also group_leader/0 and OTP design principles related to starting and stopping applications.","ref":"erlang.html#group_leader/2","title":"erlang.group_leader/2","type":"function"},{"doc":"The same as halt(0, []) . Example: &gt; halt ( ) . os_prompt %","ref":"erlang.html#halt/0","title":"erlang.halt/0","type":"function"},{"doc":"The same as halt(Status, []) . Example: &gt; halt ( 17 ) . os_prompt % echo $? 17 os_prompt %","ref":"erlang.html#halt/1","title":"erlang.halt/1","type":"function"},{"doc":"Status must be a non-negative integer, a string, or the atom abort . Halts the Erlang runtime system. Has no return value. Depending on Status , the following occurs: integer() The runtime system exits with integer value Status as status code to the calling environment (OS). On many platforms, the OS supports only status codes 0-255. A too large status code is truncated by clearing the high bits. string() An Erlang crash dump is produced with Status as slogan. Then the runtime system exits with status code 1 . The string will be truncated if longer than 200 characters. Before ERTS 9.1 (OTP-20.1) only code points in the range 0-255 was accepted in the string. Now any unicode string is valid. abort The runtime system aborts producing a core dump, if that is enabled in the OS. For integer Status , the Erlang runtime system closes all ports and allows async threads to finish their operations before exiting. To exit without such flushing, use Option as {flush,false} . For statuses string() and abort , option flush is ignored and flushing is not done.","ref":"erlang.html#halt/2","title":"erlang.halt/2","type":"function"},{"doc":"Returns the head of List , that is, the first element, for example: &gt; hd ( [ 1 , 2 , 3 , 4 , 5 ] ) . 1 Allowed in guard tests. Failure: badarg if List is the empty list [] .","ref":"erlang.html#hd/1","title":"erlang.hd/1","type":"function"},{"doc":"Puts the calling process into a wait state where its memory allocation has been reduced as much as possible. This is useful if the process does not expect to receive any messages soon. The process is awaken when a message is sent to it, and control resumes in Module:Function with the arguments specified by Args with the call stack emptied, meaning that the process terminates when that function returns. Thus erlang:hibernate/3 never returns to its caller. The resume function Module:Function/Arity must be exported ( Arity =:= length(Args) ). If the process has any message in its message queue, the process is awakened immediately in the same way as described earlier. In more technical terms, erlang:hibernate/3 discards the call stack for the process, and then garbage collects the process. After this, all live data is in one continuous heap. The heap is then shrunken to the exact same size as the live data that it holds (even if that size is less than the minimum heap size for the process). If the size of the live data in the process is less than the minimum heap size, the first garbage collection occurring after the process is awakened ensures that the heap size is changed to a size not smaller than the minimum heap size. Notice that emptying the call stack means that any surrounding catch is removed and must be re-inserted after hibernation. One effect of this is that processes started using proc_lib (also indirectly, such as gen_server processes), are to use proc_lib:hibernate/3 instead, to ensure that the exception handler continues to work when the process wakes up.","ref":"erlang.html#hibernate/3","title":"erlang.hibernate/3","type":"function"},{"doc":"Returns a new tuple with element Term inserted at position Index in tuple Tuple1 . All elements from position Index and upwards are pushed one step higher in the new tuple Tuple2 . Example: &gt; erlang : insert_element ( 2 , { one , two , three } , new ) . { one , new , two , three }","ref":"erlang.html#insert_element/3","title":"erlang.insert_element/3","type":"function"},{"doc":"Returns a binary corresponding to the text representation of Integer , for example: &gt; integer_to_binary ( 77 ) . &lt;&lt; &quot;77&quot; &gt;&gt;","ref":"erlang.html#integer_to_binary/1","title":"erlang.integer_to_binary/1","type":"function"},{"doc":"Returns a binary corresponding to the text representation of Integer in base Base , for example: &gt; integer_to_binary ( 1023 , 16 ) . &lt;&lt; &quot;3FF&quot; &gt;&gt;","ref":"erlang.html#integer_to_binary/2","title":"erlang.integer_to_binary/2","type":"function"},{"doc":"Returns a string corresponding to the text representation of Integer , for example: &gt; integer_to_list ( 77 ) . &quot;77&quot;","ref":"erlang.html#integer_to_list/1","title":"erlang.integer_to_list/1","type":"function"},{"doc":"Returns a string corresponding to the text representation of Integer in base Base , for example: &gt; integer_to_list ( 1023 , 16 ) . &quot;3FF&quot;","ref":"erlang.html#integer_to_list/2","title":"erlang.integer_to_list/2","type":"function"},{"doc":"Returns an integer, that is the size in bytes, of the binary that would be the result of iolist_to_binary(Item) , for example: &gt; iolist_size ( [ 1 , 2 | &lt;&lt; 3 , 4 &gt;&gt; ] ) . 4","ref":"erlang.html#iolist_size/1","title":"erlang.iolist_size/1","type":"function"},{"doc":"Returns a binary that is made from the integers and binaries in IoListOrBinary , for example: &gt; Bin1 = &lt;&lt; 1 , 2 , 3 &gt;&gt; . &lt;&lt; 1 , 2 , 3 &gt;&gt; &gt; Bin2 = &lt;&lt; 4 , 5 &gt;&gt; . &lt;&lt; 4 , 5 &gt;&gt; &gt; Bin3 = &lt;&lt; 6 &gt;&gt; . &lt;&lt; 6 &gt;&gt; &gt; iolist_to_binary ( [ Bin1 , 1 , [ 2 , 3 , Bin2 ] , 4 | Bin3 ] ) . &lt;&lt; 1 , 2 , 3 , 1 , 2 , 3 , 4 , 5 , 4 , 6 &gt;&gt;","ref":"erlang.html#iolist_to_binary/1","title":"erlang.iolist_to_binary/1","type":"function"},{"doc":"Returns an iovec that is made from the integers and binaries in IoListOrBinary . This function is useful when you want to flatten an iolist but you do not need a single binary. This can be useful for passing the data to nif functions such as enif_inspect_iovec or do more efficient message passing. The advantage of using this function over iolist_to_binary/1 is that it does not have to copy off-heap binaries. Example: &gt; Bin1 = &lt;&lt; 1 , 2 , 3 &gt;&gt; . &lt;&lt; 1 , 2 , 3 &gt;&gt; &gt; Bin2 = &lt;&lt; 4 , 5 &gt;&gt; . &lt;&lt; 4 , 5 &gt;&gt; &gt; Bin3 = &lt;&lt; 6 &gt;&gt; . &lt;&lt; 6 &gt;&gt; %% If you pass small binaries and integers it works as iolist_to_binary &gt; erlang : iolist_to_iovec ( [ Bin1 , 1 , [ 2 , 3 , Bin2 ] , 4 | Bin3 ] ) . [ &lt;&lt; 1 , 2 , 3 , 1 , 2 , 3 , 4 , 5 , 4 , 6 &gt;&gt; ] %% If you pass larger binaries, they are split and returned in a form %% optimized for calling the C function writev. &gt; erlang : iolist_to_iovec ( [ &lt;&lt; 1 &gt;&gt; , &lt;&lt; 2 : 8096 &gt;&gt; , &lt;&lt; 3 : 8096 &gt;&gt; ] ) . [ &lt;&lt; 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , . . . &gt;&gt; , &lt;&lt; 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , . . . &gt;&gt; , &lt;&lt; 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , . . . &gt;&gt; ]","ref":"erlang.html#iolist_to_iovec/1","title":"erlang.iolist_to_iovec/1","type":"function"},{"doc":"Returns true if the local node is alive (that is, if the node can be part of a distributed system), otherwise false . A node is alive if it is started with: &quot;erl -name LONGNAME&quot; or, &quot;erl -sname SHORTNAME&quot; . A node can also be alive if it has got a name from a call to net_kernel:start/1 and has not been stopped by a call to net_kernel:stop/0 .","ref":"erlang.html#is_alive/0","title":"erlang.is_alive/0","type":"function"},{"doc":"Returns true if Term is an atom, otherwise false . Allowed in guard tests.","ref":"erlang.html#is_atom/1","title":"erlang.is_atom/1","type":"function"},{"doc":"Returns true if Term is a binary, otherwise false . A binary always contains a complete number of bytes. Allowed in guard tests.","ref":"erlang.html#is_binary/1","title":"erlang.is_binary/1","type":"function"},{"doc":"Returns true if Term is a bitstring (including a binary), otherwise false . Allowed in guard tests.","ref":"erlang.html#is_bitstring/1","title":"erlang.is_bitstring/1","type":"function"},{"doc":"Returns true if Term is the atom true or the atom false (that is, a boolean). Otherwise returns false . Allowed in guard tests.","ref":"erlang.html#is_boolean/1","title":"erlang.is_boolean/1","type":"function"},{"doc":"This BIF is useful for builders of cross-reference tools. Returns true if Module:Function/Arity is a BIF implemented in C, otherwise false .","ref":"erlang.html#is_builtin/3","title":"erlang.is_builtin/3","type":"function"},{"doc":"Returns true if Term is a floating point number, otherwise false . Allowed in guard tests.","ref":"erlang.html#is_float/1","title":"erlang.is_float/1","type":"function"},{"doc":"Returns true if Term is a fun, otherwise false . Allowed in guard tests.","ref":"erlang.html#is_function/1","title":"erlang.is_function/1","type":"function"},{"doc":"Returns true if Term is a fun that can be applied with Arity number of arguments, otherwise false . Allowed in guard tests.","ref":"erlang.html#is_function/2","title":"erlang.is_function/2","type":"function"},{"doc":"Returns true if Term is an integer, otherwise false . Allowed in guard tests.","ref":"erlang.html#is_integer/1","title":"erlang.is_integer/1","type":"function"},{"doc":"Returns true if Term is a list with zero or more elements, otherwise false . Allowed in guard tests.","ref":"erlang.html#is_list/1","title":"erlang.is_list/1","type":"function"},{"doc":"Returns true if Term is a map, otherwise false . Allowed in guard tests.","ref":"erlang.html#is_map/1","title":"erlang.is_map/1","type":"function"},{"doc":"Returns true if map Map contains Key and returns false if it does not contain the Key . The call fails with a {badmap,Map} exception if Map is not a map. Example: &gt; Map = \#{&quot;42&quot; =&gt; value}. \#{&quot;42&quot; =&gt; value} &gt; is_map_key(&quot;42&quot;,Map). true &gt; is_map_key(value,Map). false Allowed in guard tests.","ref":"erlang.html#is_map_key/2","title":"erlang.is_map_key/2","type":"function"},{"doc":"Returns true if Term is an integer or a floating point number. Otherwise returns false . Allowed in guard tests.","ref":"erlang.html#is_number/1","title":"erlang.is_number/1","type":"function"},{"doc":"Returns true if Term is a process identifier, otherwise false . Allowed in guard tests.","ref":"erlang.html#is_pid/1","title":"erlang.is_pid/1","type":"function"},{"doc":"Returns true if Term is a port identifier, otherwise false . Allowed in guard tests.","ref":"erlang.html#is_port/1","title":"erlang.is_port/1","type":"function"},{"doc":"Pid must refer to a process at the local node. Returns true if the process exists and is alive, that is, is not exiting and has not exited. Otherwise returns false . If process P1 calls is_process_alive(P2Pid) it is guaranteed that all signals, sent from P1 to P2 ( P2 is the process with identifier P2Pid ) before the call, will be delivered to P2 before the aliveness of P2 is checked. This guarantee means that one can use is_process_alive/1 to let a process P1 wait until a process P2 , which has got an exit signal with reason kill from P1, is killed. Example: exit ( P2Pid , kill ) , % P2 might not be killed is_process_alive ( P2Pid ) , % P2 is not alive (the call above always return false) See the documentation about signals and erlang:exit/2 for more information about signals and exit singnals.","ref":"erlang.html#is_process_alive/1","title":"erlang.is_process_alive/1","type":"function"},{"doc":"Returns true if Term is a tuple and its first element is RecordTag . Otherwise returns false . Normally the compiler treats calls to is_record/2 especially. It emits code to verify that Term is a tuple, that its first element is RecordTag , and that the size is correct. However, if RecordTag is not a literal atom, the BIF is_record/2 is called instead and the size of the tuple is not verified. Allowed in guard tests, if RecordTag is a literal atom.","ref":"erlang.html#is_record/2","title":"erlang.is_record/2","type":"function"},{"doc":"RecordTag must be an atom. Returns true if Term is a tuple, its first element is RecordTag , and its size is Size . Otherwise returns false . Allowed in guard tests if RecordTag is a literal atom and Size is a literal integer. This BIF is documented for completeness. Usually is_record/2 is to be used.","ref":"erlang.html#is_record/3","title":"erlang.is_record/3","type":"function"},{"doc":"Returns true if Term is a reference, otherwise false . Allowed in guard tests.","ref":"erlang.html#is_reference/1","title":"erlang.is_reference/1","type":"function"},{"doc":"Returns true if Term is a tuple, otherwise false . Allowed in guard tests.","ref":"erlang.html#is_tuple/1","title":"erlang.is_tuple/1","type":"function"},{"doc":"Returns the length of List , for example: &gt; length ( [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ) . 9 Allowed in guard tests.","ref":"erlang.html#length/1","title":"erlang.length/1","type":"function"},{"doc":"Sets up and activates a link between the calling process and another process or a port identified by PidOrPort . We will from here on call the identified process or port linkee. If the linkee is a port, it must reside on the same node as the caller. If one of the participants of a link terminates, it will send an exit signal to the other participant. The exit signal will contain the exit reason of the terminated participant. Other cases when exit signals are triggered due to a link are when no linkee exist ( noproc exit reason) and when the connection between linked processes on different nodes is lost or cannot be established ( noconnection exit reason). An existing link can be removed by calling unlink/1 . For more information on links and exit signals due to links, see the Processes chapter in the Erlang Reference Manual : Links Sending Exit Signals Receiving Exit Signals For historical reasons, link/1 has a strange semi-synchronous behavior when it is &quot;cheap&quot; to check if the linkee exists or not, and the caller does not trap exits . If the above is true and the linkee does not exist, link/1 will raise a noproc error exception . The expected behavior would instead have been that link/1 returned true , and the caller later was sent an exit signal with noproc exit reason, but this is unfortunately not the case. The noproc exception is not to be confused with an exit signal with exit reason noproc . Currently it is &quot;cheap&quot; to check if the linkee exists when it is supposed to reside on the same node as the calling process. The link setup and activation is performed asynchronously. If the link already exists, or if the caller attempts to create a link to itself, nothing is done. A detailed description of the link protocol can be found in the Distribution Protocol chapter of the ERTS User's Guide . Failure: badarg if PidOrPort does not identify a process or a node local port. noproc linkee does not exist and it is &quot;cheap&quot; to check if it exists as described above.","ref":"erlang.html#link/1","title":"erlang.link/1","type":"function"},{"doc":"Returns the atom whose text representation is String . As from Erlang/OTP 20, String may contain any Unicode character. Earlier versions allowed only ISO-latin-1 characters as the implementation did not allow Unicode characters above 255. For more information on Unicode support in atoms, see note on UTF-8 encoded atoms in section &quot;External Term Format&quot; in the User's Guide. The number of characters that are permitted in an atom name is limited. The default limits can be found in the efficiency guide (section Advanced). There is configurable limit on how many atoms that can exist and atoms are not garbage collected. Therefore, it is recommended to consider if list_to_existing_atom/1 is a better option than list_to_atom/1 . The default limits can be found in the efficiency guide (section Advanced). Example: &gt; list_to_atom ( &quot;Erlang&quot; ) . &#39;Erlang&#39;","ref":"erlang.html#list_to_atom/1","title":"erlang.list_to_atom/1","type":"function"},{"doc":"Returns a binary that is made from the integers and binaries in IoList , for example: &gt; Bin1 = &lt;&lt; 1 , 2 , 3 &gt;&gt; . &lt;&lt; 1 , 2 , 3 &gt;&gt; &gt; Bin2 = &lt;&lt; 4 , 5 &gt;&gt; . &lt;&lt; 4 , 5 &gt;&gt; &gt; Bin3 = &lt;&lt; 6 &gt;&gt; . &lt;&lt; 6 &gt;&gt; &gt; list_to_binary ( [ Bin1 , 1 , [ 2 , 3 , Bin2 ] , 4 | Bin3 ] ) . &lt;&lt; 1 , 2 , 3 , 1 , 2 , 3 , 4 , 5 , 4 , 6 &gt;&gt;","ref":"erlang.html#list_to_binary/1","title":"erlang.list_to_binary/1","type":"function"},{"doc":"Returns a bitstring that is made from the integers and bitstrings in BitstringList . (The last tail in BitstringList is allowed to be a bitstring.) Example: &gt; Bin1 = &lt;&lt; 1 , 2 , 3 &gt;&gt; . &lt;&lt; 1 , 2 , 3 &gt;&gt; &gt; Bin2 = &lt;&lt; 4 , 5 &gt;&gt; . &lt;&lt; 4 , 5 &gt;&gt; &gt; Bin3 = &lt;&lt; 6 , 7 : 4 &gt;&gt; . &lt;&lt; 6 , 7 : 4 &gt;&gt; &gt; list_to_bitstring ( [ Bin1 , 1 , [ 2 , 3 , Bin2 ] , 4 | Bin3 ] ) . &lt;&lt; 1 , 2 , 3 , 1 , 2 , 3 , 4 , 5 , 4 , 6 , 7 : 4 &gt;&gt;","ref":"erlang.html#list_to_bitstring/1","title":"erlang.list_to_bitstring/1","type":"function"},{"doc":"Returns the atom whose text representation is String , but only if there already exists such atom. An atom exists if it has been created by the run-time system by either loading code or creating a term in which the atom is part. Failure: badarg if there does not already exist an atom whose text representation is String . Note that the compiler may optimize away atoms. For example, the compiler will rewrite atom_to_list(some_atom) to &quot;some_atom&quot; . If that expression is the only mention of the atom some_atom in the containing module, the atom will not be created when the module is loaded, and a subsequent call to list_to_existing_atom(&quot;some_atom&quot;) will fail.","ref":"erlang.html#list_to_existing_atom/1","title":"erlang.list_to_existing_atom/1","type":"function"},{"doc":"Returns the float whose text representation is String , for example: &gt; list_to_float ( &quot;2.2017764e+0&quot; ) . 2.2017764 The float string format is the same as the format for Erlang float literals except for that underscores are not permitted. Failure: badarg if String contains a bad representation of a float.","ref":"erlang.html#list_to_float/1","title":"erlang.list_to_float/1","type":"function"},{"doc":"Returns an integer whose text representation is String , for example: &gt; list_to_integer ( &quot;123&quot; ) . 123 &gt; list_to_integer ( &quot;-123&quot; ) . - 123 &gt; list_to_integer ( &quot;+123234982304982309482093833234234&quot; ) . 123234982304982309482093833234234 String must contain at least one digit character and can have an optional prefix consisting of a single &quot; + &quot; or &quot; - &quot; character (that is, String must match the regular expression &quot;^[+-]?[0-9]+$&quot; ). Failure: badarg if String contains a bad representation of an integer.","ref":"erlang.html#list_to_integer/1","title":"erlang.list_to_integer/1","type":"function"},{"doc":"Returns an integer whose text representation in base Base is String , for example: &gt; list_to_integer ( &quot;3FF&quot; , 16 ) . 1023 &gt; list_to_integer ( &quot;+3FF&quot; , 16 ) . 1023 &gt; list_to_integer ( &quot;3ff&quot; , 16 ) . 1023 &gt; list_to_integer ( &quot;3fF&quot; , 16 ) . 1023 &gt; list_to_integer ( &quot;-3FF&quot; , 16 ) . - 1023 For example, when Base is 16, String must match the regular expression &quot;^[+-]?([0-9]|[A-F]|[a-f])+$&quot; . Failure: badarg if String contains a bad representation of an integer.","ref":"erlang.html#list_to_integer/2","title":"erlang.list_to_integer/2","type":"function"},{"doc":"Returns a process identifier whose text representation is a String , for example: &gt; list_to_pid ( &quot;&lt;0.4.1&gt;&quot; ) . &lt; 0.4 . 1 &gt; Failure: badarg if String contains a bad representation of a process identifier. This BIF is intended for debugging and is not to be used in application programs.","ref":"erlang.html#list_to_pid/1","title":"erlang.list_to_pid/1","type":"function"},{"doc":"Returns a port identifier whose text representation is a String , for example: &gt; list_to_port ( &quot;#Port&lt;0.4&gt;&quot; ) . # Port &lt; 0.4 &gt; Failure: badarg if String contains a bad representation of a port identifier. This BIF is intended for debugging and is not to be used in application programs.","ref":"erlang.html#list_to_port/1","title":"erlang.list_to_port/1","type":"function"},{"doc":"Returns a reference whose text representation is a String , for example: &gt; list_to_ref ( &quot;#Ref&lt;0.4192537678.4073193475.71181&gt;&quot; ) . # Ref &lt; 0.4192537678 . 4073193475.71181 &gt; Failure: badarg if String contains a bad representation of a reference. This BIF is intended for debugging and is not to be used in application programs.","ref":"erlang.html#list_to_ref/1","title":"erlang.list_to_ref/1","type":"function"},{"doc":"Returns a tuple corresponding to List , for example &gt; list_to_tuple ( [ share , [ &#39;Ericsson_B&#39; , 163 ] ] ) . { share , [ &#39;Ericsson_B&#39; , 163 ] } List can contain any Erlang terms.","ref":"erlang.html#list_to_tuple/1","title":"erlang.list_to_tuple/1","type":"function"},{"doc":"If Binary contains the object code for module Module , this BIF loads that object code. If the code for module Module already exists, all export references are replaced so they point to the newly loaded code. The previously loaded code is kept in the system as old code, as there can still be processes executing that code. Returns either {module, Module} , or {error, Reason} if loading fails. Reason is one of the following: badfile The object code in Binary has an incorrect format or the object code contains code for another module than Module . not_purged Binary contains a module that cannot be loaded because old code for this module already exists. on_load The code in Binary contains an on_load declaration that must be executed before Binary can become the current code. Any previous current code for Module will remain until the on_load call has finished. This BIF is intended for the code server (see code(3) ) and is not to be used elsewhere.","ref":"erlang.html#load_module/2","title":"erlang.load_module/2","type":"function"},{"doc":"Loads and links a dynamic library containing native implemented functions (NIFs) for a module. Path is a file path to the shareable object/dynamic library file minus the OS-dependent file extension ( .so for Unix and .dll for Windows). Notice that on most OSs the library has to have a different name on disc when an upgrade of the nif is done. If the name is the same, but the contents differ, the old library may be loaded instead. For information on how to implement a NIF library, see erl_nif(3) . LoadInfo can be any term. It is passed on to the library as part of the initialization. A good practice is to include a module version number to support future code upgrade scenarios. The call to load_nif/2 must be made directly from the Erlang code of the module that the NIF library belongs to. It returns either ok , or {error,{Reason,Text}} if loading fails. Reason is one of the following atoms while Text is a human readable string that can give more information about the failure: load_failed The OS failed to load the NIF library. bad_lib The library did not fulfill the requirements as a NIF library of the calling module. load | upgrade The corresponding library callback was unsuccessful. reload A NIF library is already loaded for this module instance. The previously deprecated reload feature was removed in OTP 20. old_code The call to load_nif/2 was made from the old code of a module that has been upgraded; this is not allowed.","ref":"erlang.html#load_nif/2","title":"erlang.load_nif/2","type":"function"},{"doc":"Returns a list of all loaded Erlang modules (current and old code), including preloaded modules. See also code(3) .","ref":"erlang.html#loaded/0","title":"erlang.loaded/0","type":"function"},{"doc":"Returns the current local date and time, {{Year, Month, Day}, {Hour, Minute, Second}} , for example: &gt; erlang : localtime ( ) . { { 1996 , 11 , 6 } , { 14 , 45 , 17 } } The time zone and Daylight Saving Time correction depend on the underlying OS. The return value is based on the OS System Time.","ref":"erlang.html#localtime/0","title":"erlang.localtime/0","type":"function"},{"doc":"Converts local date and time to Universal Time Coordinated (UTC), if supported by the underlying OS. Otherwise no conversion is done and Localtime is returned. Example: &gt; erlang : localtime_to_universaltime ( { { 1996 , 11 , 6 } , { 14 , 45 , 17 } } ) . { { 1996 , 11 , 6 } , { 13 , 45 , 17 } } Failure: badarg if Localtime denotes an invalid date and time.","ref":"erlang.html#localtime_to_universaltime/1","title":"erlang.localtime_to_universaltime/1","type":"function"},{"doc":"Converts local date and time to Universal Time Coordinated (UTC) as erlang:localtime_to_universaltime/1 , but the caller decides if Daylight Saving Time is active. If IsDst == true , Localtime is during Daylight Saving Time, if IsDst == false it is not. If IsDst == undefined , the underlying OS can guess, which is the same as calling erlang:localtime_to_universaltime(Localtime) . Examples: &gt; erlang : localtime_to_universaltime ( { { 1996 , 11 , 6 } , { 14 , 45 , 17 } } , true ) . { { 1996 , 11 , 6 } , { 12 , 45 , 17 } } &gt; erlang : localtime_to_universaltime ( { { 1996 , 11 , 6 } , { 14 , 45 , 17 } } , false ) . { { 1996 , 11 , 6 } , { 13 , 45 , 17 } } &gt; erlang : localtime_to_universaltime ( { { 1996 , 11 , 6 } , { 14 , 45 , 17 } } , undefined ) . { { 1996 , 11 , 6 } , { 13 , 45 , 17 } } Failure: badarg if Localtime denotes an invalid date and time.","ref":"erlang.html#localtime_to_universaltime/2","title":"erlang.localtime_to_universaltime/2","type":"function"},{"doc":"Returns a unique reference. The reference is unique among connected nodes. Before OTP-23 when a node is restarted multiple times with the same node name, references created on a newer node can be mistaken for a reference created on an older node with the same node name.","ref":"erlang.html#make_ref/0","title":"erlang.make_ref/0","type":"function"},{"doc":"Creates a new tuple of the specified Arity , where all elements are InitialValue , for example: &gt; erlang : make_tuple ( 4 , [ ] ) . { [ ] , [ ] , [ ] , [ ] }","ref":"erlang.html#make_tuple/2","title":"erlang.make_tuple/2","type":"function"},{"doc":"Creates a tuple of size Arity , where each element has value DefaultValue , and then fills in values from InitList . Each list element in InitList must be a two-tuple, where the first element is a position in the newly created tuple and the second element is any term. If a position occurs more than once in the list, the term corresponding to the last occurrence is used. Example: &gt; erlang : make_tuple ( 5 , [ ] , [ { 2 , ignored } , { 5 , zz } , { 2 , aa } ] ) . { [ ] , aa , [ ] , [ ] , zz }","ref":"erlang.html#make_tuple/3","title":"erlang.make_tuple/3","type":"function"},{"doc":"Returns value Value associated with Key if Map contains Key . The call fails with a {badmap,Map} exception if Map is not a map, or with a {badkey,Key} exception if no value is associated with Key . Example: &gt; Key = 1337, Map = \#{42 =&gt; value_two,1337 =&gt; &quot;value one&quot;,&quot;a&quot; =&gt; 1}, map_get(Key,Map). &quot;value one&quot; Allowed in guard tests.","ref":"erlang.html#map_get/2","title":"erlang.map_get/2","type":"function"},{"doc":"Returns an integer, which is the number of key-value pairs in Map , for example: &gt; map_size ( \#{ a =&gt; 1 , b =&gt; 2 , c =&gt; 3 } ) . 3 Allowed in guard tests.","ref":"erlang.html#map_size/1","title":"erlang.map_size/1","type":"function"},{"doc":"Tests a match specification used in calls to ets:select/2 and erlang:trace_pattern/3 . The function tests both a match specification for &quot;syntactic&quot; correctness and runs the match specification against the object. If the match specification contains errors, the tuple {error, Errors} is returned, where Errors is a list of natural language descriptions of what was wrong with the match specification. If Type is table , the object to match against is to be a tuple. The function then returns {ok,Result,[],Warnings} , where Result is what would have been the result in a real ets:select/2 call, or false if the match specification does not match the object tuple. If Type is trace , the object to match against is to be a list. The function returns {ok, Result, Flags, Warnings} , where Result is one of the following: true if a trace message is to be emitted false if a trace message is not to be emitted The message term to be appended to the trace message Flags is a list containing all the trace flags to be enabled, currently this is only return_trace . This is a useful debugging and test tool, especially when writing complicated match specifications. See also ets:test_ms/2 .","ref":"erlang.html#match_spec_test/3","title":"erlang.match_spec_test/3","type":"function"},{"doc":"Returns the largest of Term1 and Term2 . If the terms compare equal with the == operator, Term1 is returned. The Expressions section contains descriptions of the == operator and how terms are ordered. Examples: &gt; max ( 1 , 2 ) . 2 &gt; max ( 1.0 , 1 ) . 1.0 &gt; max ( 1 , 1.0 ) . 1 &gt; max ( &quot;abc&quot; , &quot;b&quot; ) . &quot;b&quot;","ref":"erlang.html#max/2","title":"erlang.max/2","type":"function"},{"doc":"Computes an MD5 message digest from Data , where the length of the digest is 128 bits (16 bytes). Data is a binary or a list of small integers and binaries. For more information about MD5, see RFC 1321 - The MD5 Message-Digest Algorithm . The MD5 Message-Digest Algorithm is not considered safe for code-signing or software-integrity purposes.","ref":"erlang.html#md5/1","title":"erlang.md5/1","type":"function"},{"doc":"Finishes the update of an MD5 Context and returns the computed MD5 message digest.","ref":"erlang.html#md5_final/1","title":"erlang.md5_final/1","type":"function"},{"doc":"Creates an MD5 context, to be used in the following calls to md5_update/2 .","ref":"erlang.html#md5_init/0","title":"erlang.md5_init/0","type":"function"},{"doc":"Update an MD5 Context with Data and returns a NewContext .","ref":"erlang.html#md5_update/2","title":"erlang.md5_update/2","type":"function"},{"doc":"Returns a list with information about memory dynamically allocated by the Erlang emulator. Each list element is a tuple {Type, Size} . The first element Type is an atom describing memory type. The second element Size is the memory size in bytes. Memory types: total The total amount of memory currently allocated. This is the same as the sum of the memory size for processes and system . processes The total amount of memory currently allocated for the Erlang processes. processes_used The total amount of memory currently used by the Erlang processes. This is part of the memory presented as processes memory. system The total amount of memory currently allocated for the emulator that is not directly related to any Erlang process. Memory presented as processes is not included in this memory. instrument(3) can be used to get a more detailed breakdown of what memory is part of this type. atom The total amount of memory currently allocated for atoms. This memory is part of the memory presented as system memory. atom_used The total amount of memory currently used for atoms. This memory is part of the memory presented as atom memory. binary The total amount of memory currently allocated for binaries. This memory is part of the memory presented as system memory. code The total amount of memory currently allocated for Erlang code. This memory is part of the memory presented as system memory. ets The total amount of memory currently allocated for ETS tables. This memory is part of the memory presented as system memory. maximum The maximum total amount of memory allocated since the emulator was started. This tuple is only present when the emulator is run with instrumentation. For information on how to run the emulator with instrumentation, see instrument(3) and/or erl(1) . The system value is not complete. Some allocated memory that is to be part of this value is not. When the emulator is run with instrumentation, the system value is more accurate, but memory directly allocated for malloc (and friends) is still not part of the system value. Direct calls to malloc are only done from OS-specific runtime libraries and perhaps from user-implemented Erlang drivers that do not use the memory allocation functions in the driver interface. As the total value is the sum of processes and system , the error in system propagates to the total value. The different amounts of memory that are summed are not gathered atomically, which introduces an error in the result. The different values have the following relation to each other. Values beginning with an uppercase letter is not part of the result. total = processes + system processes = processes_used + ProcessesNotUsed system = atom + binary + code + ets + OtherSystem atom = atom_used + AtomNotUsed RealTotal = processes + RealSystem RealSystem = system + MissedSystem More tuples in the returned list can be added in a future release. The total value is supposed to be the total amount of memory dynamically allocated by the emulator. Shared libraries, the code of the emulator itself, and the emulator stacks are not supposed to be included. That is, the total value is not supposed to be equal to the total size of all pages mapped to the emulator. Also, because of fragmentation and prereservation of memory areas, the size of the memory segments containing the dynamically allocated memory blocks can be much larger than the total size of the dynamically allocated memory blocks. As from ERTS 5.6.4, erlang:memory/0 requires that all erts_alloc(3) allocators are enabled (default behavior). Failure: notsup if an erts_alloc(3) allocator has been disabled.","ref":"erlang.html#memory/0","title":"erlang.memory/0","type":"function"},{"doc":"Returns the memory size in bytes allocated for memory of type Type . The argument can also be specified as a list of memory_type() atoms, in which case a corresponding list of {memory_type(), Size :: integer &gt;= 0} tuples is returned. As from ERTS 5.6.4, erlang:memory/1 requires that all erts_alloc(3) allocators are enabled (default behavior). Failures: badarg If Type is not one of the memory types listed in the description of erlang:memory/0 . badarg If maximum is passed as Type and the emulator is not run in instrumented mode. notsup If an erts_alloc(3) allocator has been disabled. See also erlang:memory/0 .","ref":"erlang.html#memory/1","title":"erlang.memory/1","type":"function"},{"doc":"Returns the smallest of Term1 and Term2 . If the terms compare equal with the == operator, Term1 is returned. The Expressions section contains descriptions of the == operator and how terms are ordered. Examples: &gt; min ( 1 , 2 ) . 1 &gt; min ( 1.0 , 1 ) . 1.0 &gt; min ( 1 , 1.0 ) . 1 &gt; min ( &quot;abc&quot; , &quot;b&quot; ) . &quot;abc&quot;","ref":"erlang.html#min/2","title":"erlang.min/2","type":"function"},{"doc":"Returns true if the module Module is loaded, otherwise false . It does not attempt to load the module. This BIF is intended for the code server (see code(3) ) and is not to be used elsewhere.","ref":"erlang.html#module_loaded/1","title":"erlang.module_loaded/1","type":"function"},{"doc":"Sends a monitor request of type Type to the entity identified by Item . If the monitored entity does not exist or it changes monitored state, the caller of monitor/2 is notified by a message on the following format: {Tag, MonitorRef, Type, Object, Info} The monitor request is an asynchronous signal. That is, it takes time before the signal reaches its destination. Type can be one of the following atoms: process , port or time_offset . A process or port monitor is triggered only once, after that it is removed from both monitoring process and the monitored entity. Monitors are fired when the monitored process or port terminates, does not exist at the moment of creation, or if the connection to it is lost. If the connection to it is lost, we do not know if it still exists. The monitoring is also turned off when demonitor/1 is called. A process or port monitor by name resolves the RegisteredName to pid() or port() only once at the moment of monitor instantiation, later changes to the name registration will not affect the existing monitor. When a process or port monitor is triggered, a 'DOWN' message is sent that has the following pattern: {'DOWN', MonitorRef, Type, Object, Info} In the monitor message MonitorRef and Type are the same as described earlier, and: Object The monitored entity, which triggered the event. When monitoring a process or a local port, Object will be equal to the pid() or port() that was being monitored. When monitoring process or port by name, Object will have format {RegisteredName, Node} where RegisteredName is the name which has been used with monitor/2 call and Node is local or remote node name (for ports monitored by name, Node is always local node name). Info Either the exit reason of the process, noproc (process or port did not exist at the time of monitor creation), or noconnection (no connection to the node where the monitored process resides). Monitoring a process Creates monitor between the current process and another process identified by Item , which can be a pid() (local or remote), an atom RegisteredName or a tuple {RegisteredName, Node} for a registered process, located elsewhere. Before ERTS 10.0 (OTP 21.0), monitoring a process could fail with badarg if the monitored process resided on a primitive node (such as erl_interface or jinterface), where remote process monitoring is not implemented. Now, such a call to monitor will instead succeed and a monitor is created. But the monitor will only supervise the connection. That is, a {'DOWN', _, process, _, noconnection} is the only message that may be received, as the primitive node have no way of reporting the status of the monitored process. Monitoring a port Creates monitor between the current process and a port identified by Item , which can be a port() (only local), an atom RegisteredName or a tuple {RegisteredName, Node} for a registered port, located on this node. Note, that attempt to monitor a remote port will result in badarg . Monitoring a time_offset Monitors changes in time offset between Erlang monotonic time and Erlang system time. One valid Item exists in combination with the time_offset Type , namely the atom clock_service . Notice that the atom clock_service is not the registered name of a process. In this case it serves as an identifier of the runtime system internal clock service at current runtime system instance. The monitor is triggered when the time offset is changed. This either if the time offset value is changed, or if the offset is changed from preliminary to final during finalization of the time offset when the single time warp mode is used. When a change from preliminary to final time offset is made, the monitor is triggered once regardless of whether the time offset value was changed or not. If the runtime system is in multi time warp mode, the time offset is changed when the runtime system detects that the OS system time has changed. The runtime system does, however, not detect this immediately when it occurs. A task checking the time offset is scheduled to execute at least once a minute, so under normal operation this is to be detected within a minute, but during heavy load it can take longer time. The monitor is not automatically removed after it has been triggered. That is, repeated changes of the time offset trigger the monitor repeatedly. When the monitor is triggered a 'CHANGE' message is sent to the monitoring process. A 'CHANGE' message has the following pattern: {'CHANGE', MonitorRef, Type, Item, NewTimeOffset} where MonitorRef , Type , and Item are the same as described above, and NewTimeOffset is the new time offset. When the 'CHANGE' message has been received you are guaranteed not to retrieve the old time offset when calling erlang:time_offset() . Notice that you can observe the change of the time offset when calling erlang:time_offset() before you get the 'CHANGE' message. Making several calls to monitor/2 for the same Item and/or Type is not an error; it results in as many independent monitoring instances. The monitor functionality is expected to be extended. That is, other Type s and Item s are expected to be supported in a future release. If or when monitor/2 is extended, other possible values for Tag , Object , and Info in the monitor message will be introduced.","ref":"erlang.html#monitor/2","title":"erlang.monitor/2","type":"function"},{"doc":"Provides an option list for modification of monitoring functionality provided by monitor/2 . The Type and Item arguments have the same meaning as when passed to monitor/2 . Currently available options: {alias, UnaliasOpt} The returned monitor reference will also become an alias for the calling process. That is, the returned reference can be used for sending messages to the calling process. See also alias/0 . The UnaliasOpt determines how the alias should be deactivated. explicit_unalias Only an explicit call to unalias/1 will deactivate the alias. demonitor The alias will be automatically deactivated when the monitor is removed. This either via an explicit call to demonitor/1 or when it is automatically removed at the same time as a 'DOWN' message is delivered due to the monitor. The alias can also still be deactivated via a call to unalias/1 . reply_demonitor The alias will be automatically deactivated when the monitor is removed (see demonitor option above) or a reply message sent via the alias is received. When a reply message is received via the alias the monitor will also be automatically removed. This is useful in client/server scenarios when a client monitors the server and will get the reply via the alias. Once the response is received both the alias and the monitor will be automatically removed regardless of whether the response is a reply or a 'DOWN' message. The alias can also still be deactivated via a call to unalias/1 . Note that if the alias is removed using the unalias/1 BIF, the monitor will still be left active. Example: server ( ) -&gt; receive { request , AliasReqId , Request } -&gt; Result = perform_request ( Request ) , AliasReqId ! { reply , AliasReqId , Result } end , server ( ) . client ( ServerPid , Request ) -&gt; AliasMonReqId = monitor ( process , ServerPid , [ { alias , reply_demonitor } ] ) , ServerPid ! { request , AliasMonReqId , Request } , %% Alias as well as monitor will be automatically deactivated if we %% receive a reply or a &#39;DOWN&#39; message since we used &#39;reply_demonitor&#39; %% as unalias option... receive { reply , AliasMonReqId , Result } -&gt; Result ; { &#39;DOWN&#39; , AliasMonReqId , process , ServerPid , ExitReason } -&gt; error ( ExitReason ) end . Note that both the server and the client in this example must be executing on at least OTP 24 systems in order for this to work. For more information on process aliases see the Process Aliases section of the Erlang Reference Manual . {tag, UserDefinedTag} Replace the default Tag with UserDefinedTag in the monitor message delivered when the monitor is triggered. For example, when monitoring a process, the 'DOWN' tag in the down message will be replaced by UserDefinedTag . An example of how the {tag, UserDefinedTag} option can be used in order to enable the new selective receive optimization, introduced in OTP 24, when making multiple requests to different servers: server ( ) -&gt; receive { request , From , ReqId , Request } -&gt; Result = perform_request ( Request ) , From ! { reply , self ( ) , ReqId , Result } end , server ( ) . client ( ServerPids , Request ) when is_list ( ServerPids ) -&gt; ReqId = make_ref ( ) , lists : foreach ( fun ( ServerPid ) -&gt; _ = monitor ( process , ServerPid , [ { tag , { &#39;DOWN&#39; , ReqId } } ] ) , ServerPid ! { request , self ( ) , ReqId , Request } end , ServerPids ) , receive_replies ( ReqId , length ( ServerPids ) , [ ] ) . receive_replies ( _ ReqId , 0 , Acc ) -&gt; Acc ; receive_replies ( ReqId , N , Acc ) -&gt; %% The compiler will detect that we match on the &#39;ReqId&#39; %% reference in all clauses, and will enable the selective %% receive optimization which makes the receive able to %% skip past all messages present in the message queue at %% the time when the &#39;ReqId&#39; reference was created... Res = receive { reply , ServerPid , ReqId , Result } -&gt; %% Here we typically would have deactivated the %% monitor by a call to demonitor(Mon, [flush]) but %% we ignore this in this example for simplicity... { ok , ServerPid , Result } ; { { &#39;DOWN&#39; , ReqId } , _ Mon , process , ServerPid , ExitReason } -&gt; { error , ServerPid , ExitReason } end , receive_replies ( ReqId , N - 1 , [ Res | Acc ] ) . In order for this example to work as intended, the client must be executing on at least an OTP 24 system, but the servers may execute on older systems.","ref":"erlang.html#monitor/3","title":"erlang.monitor/3","type":"function"},{"doc":"Monitor the status of the node Node . If Flag is true , monitoring is turned on. If Flag is false , monitoring is turned off. Making several calls to monitor_node(Node, true) for the same Node is not an error; it results in as many independent monitoring instances. If Node fails or does not exist, the message {nodedown, Node} is delivered to the process. If a process has made two calls to monitor_node(Node, true) and Node terminates, two nodedown messages are delivered to the process. If there is no connection to Node , an attempt is made to create one. If this fails, a nodedown message is delivered. The delivery of the nodedown signal is not ordered with respect to other link or monitor signals from the node that goes down. If you need a guarantee that all signals from the remote node has been delivered before the nodedown signal is sent, you should use net_kernel:monitor_nodes/1 . Nodes connected through hidden connections can be monitored as any other nodes. Failure: notalive if the local node is not alive.","ref":"erlang.html#monitor_node/2","title":"erlang.monitor_node/2","type":"function"},{"doc":"Behaves as monitor_node/2 except that it allows an extra option to be specified, namely allow_passive_connect . This option allows the BIF to wait the normal network connection time-out for the monitored node to connect itself, even if it cannot be actively connected from this node (that is, it is blocked). The state where this can be useful can only be achieved by using the Kernel option dist_auto_connect once . If that option is not used, option allow_passive_connect has no effect. Option allow_passive_connect is used internally and is seldom needed in applications where the network topology and the Kernel options in effect are known in advance. Failure: badarg if the local node is not alive or the option list is malformed.","ref":"erlang.html#monitor_node/3","title":"erlang.monitor_node/3","type":"function"},{"doc":"Returns the current Erlang monotonic time in native time unit . This is a monotonically increasing time since some unspecified point in time. This is a monotonically increasing time, but not a strictly monotonically increasing time. That is, consecutive calls to erlang:monotonic_time/0 can produce the same result. Different runtime system instances will use different unspecified points in time as base for their Erlang monotonic clocks. That is, it is pointless comparing monotonic times from different runtime system instances. Different runtime system instances can also place this unspecified point in time different relative runtime system start. It can be placed in the future (time at start is a negative value), the past (time at start is a positive value), or the runtime system start (time at start is zero). The monotonic time at runtime system start can be retrieved by calling erlang:system_info(start_time) .","ref":"erlang.html#monotonic_time/0","title":"erlang.monotonic_time/0","type":"function"},{"doc":"Returns the current Erlang monotonic time converted into the Unit passed as argument. Same as calling erlang:convert_time_unit ( erlang:monotonic_time() , native, Unit) , however optimized for commonly used Unit s.","ref":"erlang.html#monotonic_time/1","title":"erlang.monotonic_time/1","type":"function"},{"doc":"Works exactly like error/1 , but Dialyzer thinks that this BIF will return an arbitrary term. When used in a stub function for a NIF to generate an exception when the NIF library is not loaded, Dialyzer does not generate false warnings.","ref":"erlang.html#nif_error/1","title":"erlang.nif_error/1","type":"function"},{"doc":"Works exactly like error/2 , but Dialyzer thinks that this BIF will return an arbitrary term. When used in a stub function for a NIF to generate an exception when the NIF library is not loaded, Dialyzer does not generate false warnings.","ref":"erlang.html#nif_error/2","title":"erlang.nif_error/2","type":"function"},{"doc":"Returns the name of the local node. If the node is not alive, nonode@nohost is returned instead. Allowed in guard tests.","ref":"erlang.html#node/0","title":"erlang.node/0","type":"function"},{"doc":"Returns the node where Arg originates. Arg can be a process identifier, a reference, or a port. If Arg originates from the local node and the local node is not alive, nonode@nohost is returned. Allowed in guard tests.","ref":"erlang.html#node/1","title":"erlang.node/1","type":"function"},{"doc":"Returns a list of all nodes connected to this node through normal connections (that is, hidden nodes are not listed). Same as nodes(visible) .","ref":"erlang.html#nodes/0","title":"erlang.nodes/0","type":"function"},{"doc":"Returns a list of nodes according to the argument specified. The returned result, when the argument is a list, is the list of nodes satisfying the disjunction(s) of the list elements. NodeType s: visible Nodes connected to this node through normal connections. hidden Nodes connected to this node through hidden connections. connected All nodes connected to this node. this This node. known Nodes that are known to this node. That is, connected nodes and nodes referred to by process identifiers, port identifiers, and references located on this node. The set of known nodes is garbage collected. Notice that this garbage collection can be delayed. For more information, see erlang:system_info(delayed_node_table_gc) . Some equalities: [node()] = nodes(this) , nodes(connected) = nodes([visible, hidden]) , and nodes() = nodes(visible) .","ref":"erlang.html#nodes/1","title":"erlang.nodes/1","type":"function"},{"doc":"This function is deprecated. Do not use it. For more information, see section Time and Time Correction in the User's Guide. Specifically, section Dos and Dont's describes what to use instead of erlang:now/0 . Returns the tuple {MegaSecs, Secs, MicroSecs} , which is the elapsed time since 00:00 GMT, January 1, 1970 (zero hour), if provided by the underlying OS. Otherwise some other point in time is chosen. It is also guaranteed that the following calls to this BIF return continuously increasing values. Hence, the return value from erlang:now/0 can be used to generate unique time stamps. If it is called in a tight loop on a fast machine, the time of the node can become skewed. Can only be used to check the local time of day if the time-zone information of the underlying OS is properly configured.","ref":"erlang.html#now/0","title":"erlang.now/0","type":"function"},{"doc":"Returns a port identifier as the result of opening a new Erlang port. A port can be seen as an external Erlang process. The name of the executable as well as the arguments specifed in cd , env , args , and arg0 are subject to Unicode filename translation if the system is running in Unicode filename mode. To avoid translation or to force, for example UTF-8, supply the executable and/or arguments as a binary in the correct encoding. For details, see the module file(3) , the function file:native_name_encoding/0 in Kernel, and the Using Unicode in Erlang User's Guide. The characters in the name (if specified as a list) can only be &gt; 255 if the Erlang virtual machine is started in Unicode filename translation mode. Otherwise the name of the executable is limited to the ISO Latin-1 character set. PortName s: {spawn, Command} Starts an external program. Command is the name of the external program to be run. Command runs outside the Erlang work space unless an Erlang driver with the name Command is found. If found, that driver is started. A driver runs in the Erlang work space, which means that it is linked with the Erlang runtime system. For external programs, PATH is searched (or an equivalent method is used to find programs, depending on the OS). This is done by invoking the shell on certain platforms. The first space-separated token of the command is considered as the name of the executable (or driver). This (among other things) makes this option unsuitable for running programs with spaces in filenames or directory names. If spaces in executable filenames are desired, use {spawn_executable, Command} instead. {spawn_driver, Command} Works like {spawn, Command} , but demands the first (space-separated) token of the command to be the name of a loaded driver. If no driver with that name is loaded, a badarg error is raised. {spawn_executable, FileName} Works like {spawn, FileName} , but only runs external executables. FileName in its whole is used as the name of the executable, including any spaces. If arguments are to be passed, the PortSettings args and arg0 can be used. The shell is usually not invoked to start the program, it is executed directly. PATH (or equivalent) is not searched. To find a program in PATH to execute, use os:find_executable/1 . Only if a shell script or .bat file is executed, the appropriate command interpreter is invoked implicitly, but there is still no command-argument expansion or implicit PATH search. If FileName cannot be run, an error exception is raised, with the POSIX error code as the reason. The error reason can differ between OSs. Typically the error enoent is raised when an attempt is made to run a program that is not found and eacces is raised when the specified file is not executable. {fd, In, Out} Allows an Erlang process to access any currently opened file descriptors used by Erlang. The file descriptor In can be used for standard input, and the file descriptor Out for standard output. It is only used for various servers in the Erlang OS ( shell and user ). Hence, its use is limited. PortSettings is a list of settings for the port. The valid settings are as follows: {packet, N} Messages are preceded by their length, sent in N bytes, with the most significant byte first. The valid values for N are 1, 2, and 4. stream Output messages are sent without packet lengths. A user-defined protocol must be used between the Erlang process and the external object. {line, L} Messages are delivered on a per line basis. Each line (delimited by the OS-dependent newline sequence) is delivered in a single message. The message data format is {Flag, Line} , where Flag is eol or noeol , and Line is the data delivered (without the newline sequence). L specifies the maximum line length in bytes. Lines longer than this are delivered in more than one message, with Flag set to noeol for all but the last message. If end of file is encountered anywhere else than immediately following a newline sequence, the last line is also delivered with Flag set to noeol . Otherwise lines are delivered with Flag set to eol . The {packet, N} and {line, L} settings are mutually exclusive. {cd, Dir} Only valid for {spawn, Command} and {spawn_executable, FileName} . The external program starts using Dir as its working directory. Dir must be a string. {env, Env} Types:    Name = os:env_var_name()    Val = os:env_var_value() | false    Env = [{Name, Val}] Only valid for {spawn, Command} , and {spawn_executable, FileName} . The environment of the started process is extended using the environment specifications in Env . Env is to be a list of tuples {Name, Val} , where Name is the name of an environment variable, and Val is the value it is to have in the spawned port process. Both Name and Val must be strings. The one exception is Val being the atom false (in analogy with os:getenv/1 , which removes the environment variable. For information about encoding requirements, see documentation of the types for Name and Val . {args, [ string() | binary() ]} Only valid for {spawn_executable, FileName} and specifies arguments to the executable. Each argument is specified as a separate string and (on Unix) eventually ends up as one element each in the argument vector. On other platforms, a similar behavior is mimicked. The arguments are not expanded by the shell before they are supplied to the executable. Most notably this means that file wildcard expansion does not occur. To expand wildcards for the arguments, use filelib:wildcard/1 . Notice that even if the program is a Unix shell script, meaning that the shell ultimately is invoked, wildcard expansion does not occur, and the script is provided with the untouched arguments. On Windows, wildcard expansion is always up to the program itself, therefore this is not an issue. The executable name (also known as argv[0] ) is not to be specified in this list. The proper executable name is automatically used as argv[0] , where applicable. If you explicitly want to set the program name in the argument vector, option arg0 can be used. {arg0, string() | binary()} Only valid for {spawn_executable, FileName} and explicitly specifies the program name argument when running an executable. This can in some circumstances, on some OSs, be desirable. How the program responds to this is highly system-dependent and no specific effect is guaranteed. exit_status Only valid for {spawn, Command} , where Command refers to an external program, and for {spawn_executable, FileName} . When the external process connected to the port exits, a message of the form {Port,{exit_status,Status}} is sent to the connected process, where Status is the exit status of the external process. If the program aborts on Unix, the same convention is used as the shells do (that is, 128+signal). If option eof is specified also, the messages eof and exit_status appear in an unspecified order. If the port program closes its stdout without exiting, option exit_status does not work. use_stdio Only valid for {spawn, Command} and {spawn_executable, FileName} . It allows the standard input and output (file descriptors 0 and 1) of the spawned (Unix) process for communication with Erlang. nouse_stdio The opposite of use_stdio . It uses file descriptors 3 and 4 for communication with Erlang. stderr_to_stdout Affects ports to external programs. The executed program gets its standard error file redirected to its standard output file. stderr_to_stdout and nouse_stdio are mutually exclusive. overlapped_io Affects ports to external programs on Windows only. The standard input and standard output handles of the port program are, if this option is supplied, opened with flag FILE_FLAG_OVERLAPPED , so that the port program can (and must) do overlapped I/O on its standard handles. This is not normally the case for simple port programs, but an option of value for the experienced Windows programmer. On all other platforms, this option is silently discarded. in The port can only be used for input. out The port can only be used for output. binary All I/O from the port is binary data objects as opposed to lists of bytes. eof The port is not closed at the end of the file and does not produce an exit signal. Instead, it remains open and a {Port, eof} message is sent to the process holding the port. hide When running on Windows, suppresses creation of a new console window when spawning the port program. (This option has no effect on other platforms.) {parallelism, Boolean} Sets scheduler hint for port parallelism. If set to true , the virtual machine schedules port tasks; when doing so, it improves parallelism in the system. If set to false , the virtual machine tries to perform port tasks immediately, improving latency at the expense of parallelism. The default can be set at system startup by passing command-line argument +spp to erl(1) . {busy_limits_port, {Low, High} | disabled} Sets limits that will be used for controlling the busy state of the port. When the ports internal output queue size becomes larger than or equal to High bytes, it enters the busy state. When it becomes less than Low bytes it leaves the busy state. When the port is in the busy state, processes sending commands to it will be suspended until the port leaves the busy state. Commands are in this context either Port ! {Owner, {command, Data}} or port_command/[2,3] . The Low limit is automatically adjusted to the same as High if it is set larger then High . Valid range of values for Low and High is [1, (1 bsl (8*erlang:system_info(wordsize)))-2] . If the atom disabled is passed, the port will never enter the busy state. The defaults are Low = 4096 and High = 8192 . Note that this option is only valid when spawning an executable (port program) by opening the spawn driver and when opening the fd driver. This option will cause a failure with a badarg exception when opening other drivers. {busy_limits_msgq, {Low, High} | disabled} Sets limits that will be used for controlling the busy state of the port message queue. When the ports message queue size becomes larger than or equal to High bytes it enters the busy state. When it becomes less than Low bytes it leaves the busy state. When the port message queue is in the busy state, processes sending commands to it will be suspended until the port message queue leaves the busy state. Commands are in this context either Port ! {Owner, {command, Data}} or port_command/[2,3] . The Low limit is automatically adjusted to the same as High if it is set larger then High . Valid range of values for Low and High is [1, (1 bsl (8*erlang:system_info(wordsize)))-2] . If the atom disabled is passed, the port message queue will never enter the busy state. Note that if the driver statically has disabled the use of this feature, a failure with a badarg exception will be raised unless this option also is set to disable or not passed at all. The defaults are Low = 4096 and High = 8192 unless the driver itself does modifications of these values. Note that the driver might fail if it also adjust these limits by itself and you have disabled this feature. The spawn driver (used when spawning an executable) and the fd driver do not disable this feature and do not adjust these limits by themselves. For more information see the documentation erl_drv_busy_msgq_limits() . Default is stream for all port types and use_stdio for spawned ports. Failure: if the port cannot be opened, the exit reason is badarg , system_limit , or the POSIX error code that most closely describes the error, or einval if no POSIX code is appropriate: badarg Bad input arguments to open_port . system_limit All available ports in the Erlang emulator are in use. enomem Not enough memory to create the port. eagain No more available OS processes. enametoolong Too long external command. emfile No more available file descriptors (for the OS process that the Erlang emulator runs in). enfile Full file table (for the entire OS). eacces Command specified in {spawn_executable, Command} does not point out an executable file. enoent FileName specified in {spawn_executable, FileName} does not point out an existing file. During use of a port opened using {spawn, Name} , {spawn_driver, Name} , or {spawn_executable, Name} , errors arising when sending messages to it are reported to the owning process using signals of the form {'EXIT', Port, PosixCode} . For the possible values of PosixCode , see file(3) . The maximum number of ports that can be open at the same time can be configured by passing command-line flag +Q to erl(1) .","ref":"erlang.html#open_port/2","title":"erlang.open_port/2","type":"function"},{"doc":"This function is deprecated as erlang:phash2/2 should be used for new code. Note that erlang:phash(X,N) is not necessary equal to erlang:phash2(X,N) Portable hash function that gives the same hash for the same Erlang term regardless of machine architecture and ERTS version (the BIF was introduced in ERTS 4.9.1.1). The function returns a hash value for Term within the range 1..Range . The maximum value for Range is 2^32.","ref":"erlang.html#phash/2","title":"erlang.phash/2","type":"function"},{"doc":"Portable hash function that gives the same hash for the same Erlang term regardless of machine architecture and ERTS version (the BIF was introduced in ERTS 5.2). The function returns a hash value for Term within the range 0..Range-1 . The maximum value for Range is 2^32. When without argument Range , a value in the range 0..2^27-1 is returned. This BIF is always to be used for hashing terms. It distributes small integers better than phash/2 , and it is faster for bignums and binaries. Notice that the range 0..Range-1 is different from the range of phash/2 , which is 1..Range .","ref":"erlang.html#phash2/1","title":"erlang.phash2/1","type":"function"},{"doc":"","ref":"erlang.html#phash2/2","title":"erlang.phash2/2","type":"function"},{"doc":"Returns a string corresponding to the text representation of Pid . Example: &gt; erlang : pid_to_list ( self ( ) ) . &quot;&lt;0.85.0&gt;&quot; The creation for the node is not included in the list representation of Pid . This means that processes in different incarnations of a node with a specific name can get the same list representation.","ref":"erlang.html#pid_to_list/1","title":"erlang.pid_to_list/1","type":"function"},{"doc":"Performs a synchronous call to a port. The meaning of Operation and Data depends on the port, that is, on the port driver. Not all port drivers support this feature. Port is a port identifier, referring to a driver. Operation is an integer, which is passed on to the driver. Data is any Erlang term. This data is converted to binary term format and sent to the port. Returns a term from the driver. The meaning of the returned data also depends on the port driver. Failures: badarg If Port is not an identifier of an open port, or the registered name of an open port. If the calling process was previously linked to the closed port, identified by Port , the exit signal from the port is guaranteed to be delivered before this badarg exception occurs. badarg If Operation does not fit in a 32-bit integer. badarg If the port driver does not support synchronous control operations. badarg If the port driver so decides for any reason (probably something wrong with Operation or Data ). Do not call port_call with an unknown Port identifier and expect badarg exception. Any undefined behavior is possible (including node crash) depending on how the port driver interprets the supplied arguments.","ref":"erlang.html#port_call/3","title":"erlang.port_call/3","type":"function"},{"doc":"Closes an open port. Roughly the same as Port ! {self(), close} except for the error behavior (see below), being synchronous, and that the port does not reply with {Port, closed} . Any process can close a port with port_close/1 , not only the port owner (the connected process). If the calling process is linked to the port identified by Port , the exit signal from the port is guaranteed to be delivered before port_close/1 returns. For comparison: Port ! {self(), close} only fails with badarg if Port does not refer to a port or a process. If Port is a closed port, nothing happens. If Port is an open port and the calling process is the port owner, the port replies with {Port, closed} when all buffers have been flushed and the port really closes. If the calling process is not the port owner, the port owner fails with badsig . Notice that any process can close a port using Port ! {PortOwner, close} as if it itself was the port owner, but the reply always goes to the port owner. As from Erlang/OTP R16, Port ! {PortOwner, close} is truly asynchronous. Notice that this operation has always been documented as an asynchronous operation, while the underlying implementation has been synchronous. port_close/1 is however still fully synchronous because of its error behavior. Failure: badarg if Port is not an identifier of an open port, or the registered name of an open port. If the calling process was previously linked to the closed port, identified by Port , the exit signal from the port is guaranteed to be delivered before this badarg exception occurs.","ref":"erlang.html#port_close/1","title":"erlang.port_close/1","type":"function"},{"doc":"Sends data to a port. Same as Port ! {PortOwner, {command, Data}} except for the error behavior and being synchronous (see below). Any process can send data to a port with port_command/2 , not only the port owner (the connected process). For comparison: Port ! {PortOwner, {command, Data}} only fails with badarg if Port does not refer to a port or a process. If Port is a closed port, the data message disappears without a sound. If Port is open and the calling process is not the port owner, the port owner fails with badsig . The port owner fails with badsig also if Data is an invalid I/O list. Notice that any process can send to a port using Port ! {PortOwner, {command, Data}} as if it itself was the port owner. If the port is busy, the calling process is suspended until the port is not busy any more. As from Erlang/OTP R16, Port ! {PortOwner, {command, Data}} is truly asynchronous. Notice that this operation has always been documented as an asynchronous operation, while the underlying implementation has been synchronous. port_command/2 is however still fully synchronous because of its error behavior. Failures: badarg If Port is not an identifier of an open port, or the registered name of an open port. If the calling process was previously linked to the closed port, identified by Port , the exit signal from the port is guaranteed to be delivered before this badarg exception occurs. badarg If Data is an invalid I/O list. Do not send data to an unknown port. Any undefined behavior is possible (including node crash) depending on how the port driver interprets the data.","ref":"erlang.html#port_command/2","title":"erlang.port_command/2","type":"function"},{"doc":"Sends data to a port. port_command(Port, Data, []) equals port_command(Port, Data) . If the port command is aborted, false is returned, otherwise true . If the port is busy, the calling process is suspended until the port is not busy anymore. Option s: force The calling process is not suspended if the port is busy, instead the port command is forced through. The call fails with a notsup exception if the driver of the port does not support this. For more information, see driver flag ERL_DRV_FLAG_SOFT_BUSY . nosuspend The calling process is not suspended if the port is busy, instead the port command is aborted and false is returned. More options can be added in a future release. Failures: badarg If Port is not an identifier of an open port, or the registered name of an open port. If the calling process was previously linked to the closed port, identified by Port , the exit signal from the port is guaranteed to be delivered before this badarg exception occurs. badarg If Data is an invalid I/O list. badarg If OptionList is an invalid option list. notsup If option force has been passed, but the driver of the port does not allow forcing through a busy port. Do not send data to an unknown port. Any undefined behavior is possible (including node crash) depending on how the port driver interprets the data.","ref":"erlang.html#port_command/3","title":"erlang.port_command/3","type":"function"},{"doc":"Sets the port owner (the connected port) to Pid . Roughly the same as Port ! {Owner, {connect, Pid}} except for the following: The error behavior differs, see below. The port does not reply with {Port,connected} . port_connect/1 is synchronous, see below. The new port owner gets linked to the port. The old port owner stays linked to the port and must call unlink(Port) if this is not desired. Any process can set the port owner to be any process with port_connect/2 . For comparison: Port ! {self(), {connect, Pid}} only fails with badarg if Port does not refer to a port or a process. If Port is a closed port, nothing happens. If Port is an open port and the calling process is the port owner, the port replies with {Port, connected} to the old port owner. Notice that the old port owner is still linked to the port, while the new is not. If Port is an open port and the calling process is not the port owner, the port owner fails with badsig . The port owner fails with badsig also if Pid is not an existing local process identifier. Notice that any process can set the port owner using Port ! {PortOwner, {connect, Pid}} as if it itself was the port owner, but the reply always goes to the port owner. As from Erlang/OTP R16, Port ! {PortOwner, {connect, Pid}} is truly asynchronous. Notice that this operation has always been documented as an asynchronous operation, while the underlying implementation has been synchronous. port_connect/2 is however still fully synchronous because of its error behavior. Failures: badarg If Port is not an identifier of an open port, or the registered name of an open port. If the calling process was previously linked to the closed port, identified by Port , the exit signal from the port is guaranteed to be delivered before this badarg exception occurs. badarg If the process identified by Pid is not an existing local process.","ref":"erlang.html#port_connect/2","title":"erlang.port_connect/2","type":"function"},{"doc":"Performs a synchronous control operation on a port. The meaning of Operation and Data depends on the port, that is, on the port driver. Not all port drivers support this control feature. Returns a list of integers in the range 0..255, or a binary, depending on the port driver. The meaning of the returned data also depends on the port driver. Failures: badarg If Port is not an open port or the registered name of an open port. badarg If Operation cannot fit in a 32-bit integer. badarg If the port driver does not support synchronous control operations. badarg If the port driver so decides for any reason (probably something wrong with Operation or Data ). Do not call port_control/3 with an unknown Port identifier and expect badarg exception. Any undefined behavior is possible (including node crash) depending on how the port driver interprets the supplied arguments.","ref":"erlang.html#port_control/3","title":"erlang.port_control/3","type":"function"},{"doc":"Returns a list containing tuples with information about Port , or undefined if the port is not open. The order of the tuples is undefined, and all the tuples are not mandatory. If the port is closed and the calling process was previously linked to the port, the exit signal from the port is guaranteed to be delivered before port_info/1 returns undefined . The result contains information about the following Item s: registered_name (if the port has a registered name) id connected links name input output For more information about the different Item s, see port_info/2 . Failure: badarg if Port is not a local port identifier, or an atom.","ref":"erlang.html#port_info/1","title":"erlang.port_info/1","type":"function"},{"doc":"Pid is the process identifier of the process connected to the port. If the port identified by Port is not open, undefined is returned. If the port is closed and the calling process was previously linked to the port, the exit signal from the port is guaranteed to be delivered before port_info/2 returns undefined . Failure: badarg if Port is not a local port identifier, or an atom.","ref":"erlang.html#port_info/2","title":"erlang.port_info/2","type":"function"},{"doc":"Index is the internal index of the port. This index can be used to separate ports. If the port identified by Port is not open, undefined is returned. If the port is closed and the calling process was previously linked to the port, the exit signal from the port is guaranteed to be delivered before port_info/2 returns undefined . Failure: badarg if Port is not a local port identifier, or an atom.","ref":"erlang.html#port_info/2","title":"erlang.port_info/2","type":"function"},{"doc":"Bytes is the total number of bytes read from the port. If the port identified by Port is not open, undefined is returned. If the port is closed and the calling process was previously linked to the port, the exit signal from the port is guaranteed to be delivered before port_info/2 returns undefined . Failure: badarg if Port is not a local port identifier, or an atom.","ref":"erlang.html#port_info/2","title":"erlang.port_info/2","type":"function"},{"doc":"Pids is a list of the process identifiers of the processes that the port is linked to. If the port identified by Port is not open, undefined is returned. If the port is closed and the calling process was previously linked to the port, the exit signal from the port is guaranteed to be delivered before port_info/2 returns undefined . Failure: badarg if Port is not a local port identifier, or an atom.","ref":"erlang.html#port_info/2","title":"erlang.port_info/2","type":"function"},{"doc":"Locking is one of the following: port_level (port-specific locking) driver_level (driver-specific locking) Notice that these results are highly implementation-specific and can change in a future release. If the port identified by Port is not open, undefined is returned. If the port is closed and the calling process was previously linked to the port, the exit signal from the port is guaranteed to be delivered before port_info/2 returns undefined . Failure: badarg if Port is not a local port identifier, or an atom.","ref":"erlang.html#port_info/2","title":"erlang.port_info/2","type":"function"},{"doc":"Bytes is the total number of bytes allocated for this port by the runtime system. The port itself can have allocated memory that is not included in Bytes . If the port identified by Port is not open, undefined is returned. If the port is closed and the calling process was previously linked to the port, the exit signal from the port is guaranteed to be delivered before port_info/2 returns undefined . Failure: badarg if Port is not a local port identifier, or an atom.","ref":"erlang.html#port_info/2","title":"erlang.port_info/2","type":"function"},{"doc":"Monitors represent processes monitored by this port. If the port identified by Port is not open, undefined is returned. If the port is closed and the calling process was previously linked to the port, the exit signal from the port is guaranteed to be delivered before port_info/2 returns undefined . Failure: badarg if Port is not a local port identifier, or an atom.","ref":"erlang.html#port_info/2","title":"erlang.port_info/2","type":"function"},{"doc":"Returns list of pids that are monitoring given port at the moment. If the port identified by Port is not open, undefined is returned. If the port is closed and the calling process was previously linked to the port, the exit signal from the port is guaranteed to be delivered before port_info/2 returns undefined . Failure: badarg if Port is not a local port identifier, or an atom.","ref":"erlang.html#port_info/2","title":"erlang.port_info/2","type":"function"},{"doc":"Name is the command name set by open_port/2 . If the port identified by Port is not open, undefined is returned. If the port is closed and the calling process was previously linked to the port, the exit signal from the port is guaranteed to be delivered before port_info/2 returns undefined . Failure: badarg if Port is not a local port identifier, or an atom.","ref":"erlang.html#port_info/2","title":"erlang.port_info/2","type":"function"},{"doc":"OsPid is the process identifier (or equivalent) of an OS process created with open_port({spawn | spawn_executable, Command}, Options) . If the port is not the result of spawning an OS process, the value is undefined . If the port identified by Port is not open, undefined is returned. If the port is closed and the calling process was previously linked to the port, the exit signal from the port is guaranteed to be delivered before port_info/2 returns undefined . Failure: badarg if Port is not a local port identifier, or an atom.","ref":"erlang.html#port_info/2","title":"erlang.port_info/2","type":"function"},{"doc":"Bytes is the total number of bytes written to the port from Erlang processes using port_command/2 , port_command/3 , or Port ! {Owner, {command, Data} . If the port identified by Port is not open, undefined is returned. If the port is closed and the calling process was previously linked to the port, the exit signal from the port is guaranteed to be delivered before port_info/2 returns undefined . Failure: badarg if Port is not a local port identifier, or an atom.","ref":"erlang.html#port_info/2","title":"erlang.port_info/2","type":"function"},{"doc":"Boolean corresponds to the port parallelism hint used by this port. For more information, see option parallelism of open_port/2 .","ref":"erlang.html#port_info/2","title":"erlang.port_info/2","type":"function"},{"doc":"Bytes is the total number of bytes queued by the port using the ERTS driver queue implementation. If the port identified by Port is not open, undefined is returned. If the port is closed and the calling process was previously linked to the port, the exit signal from the port is guaranteed to be delivered before port_info/2 returns undefined . Failure: badarg if Port is not a local port identifier, or an atom.","ref":"erlang.html#port_info/2","title":"erlang.port_info/2","type":"function"},{"doc":"RegisteredName is the registered name of the port. If the port has no registered name, [] is returned. If the port identified by Port is not open, undefined is returned. If the port is closed and the calling process was previously linked to the port, the exit signal from the port is guaranteed to be delivered before port_info/2 returns undefined . Failure: badarg if Port is not a local port identifier, or an atom.","ref":"erlang.html#port_info/2","title":"erlang.port_info/2","type":"function"},{"doc":"Returns a string corresponding to the text representation of the port identifier Port .","ref":"erlang.html#port_to_list/1","title":"erlang.port_to_list/1","type":"function"},{"doc":"Returns a list of port identifiers corresponding to all the ports existing on the local node. Notice that an exiting port exists, but is not open.","ref":"erlang.html#ports/0","title":"erlang.ports/0","type":"function"},{"doc":"Returns a list of Erlang modules that are preloaded in the run-time system. Pre-loaded modules are Erlang modules that are needed to bootstrap the system to load the first Erlang modules from either disk or by using erl_boot_server .","ref":"erlang.html#pre_loaded/0","title":"erlang.pre_loaded/0","type":"function"},{"doc":"Writes information about the local process Pid on standard error. The only allowed value for the atom Type is backtrace , which shows the contents of the call stack, including information about the call chain, with the current function printed first. The format of the output is not further defined.","ref":"erlang.html#process_display/2","title":"erlang.process_display/2","type":"function"},{"doc":"When trap_exit is set to true , exit signals arriving to a process are converted to {'EXIT', From, Reason} messages, which can be received as ordinary messages. If trap_exit is set to false , the process exits if it receives an exit signal other than normal and the exit signal is propagated to its linked processes. Application processes are normally not to trap exits. Returns the old value of the flag. See also exit/2 .","ref":"erlang.html#process_flag/2","title":"erlang.process_flag/2","type":"function"},{"doc":"Used by a process to redefine the error handler for undefined function calls and undefined registered processes. Inexperienced users are not to use this flag, as code auto-loading depends on the correct operation of the error handling module. Returns the old value of the flag.","ref":"erlang.html#process_flag/2","title":"erlang.process_flag/2","type":"function"},{"doc":"Changes the maximum number of generational collections before forcing a fullsweep for the calling process. Returns the old value of the flag.","ref":"erlang.html#process_flag/2","title":"erlang.process_flag/2","type":"function"},{"doc":"Changes the minimum heap size for the calling process. Returns the old value of the flag.","ref":"erlang.html#process_flag/2","title":"erlang.process_flag/2","type":"function"},{"doc":"Changes the minimum binary virtual heap size for the calling process. Returns the old value of the flag.","ref":"erlang.html#process_flag/2","title":"erlang.process_flag/2","type":"function"},{"doc":"This flag sets the maximum heap size for the calling process. If MaxHeapSize is an integer, the system default values for kill and error_logger are used. size The maximum size in words of the process. If set to zero, the heap size limit is disabled. badarg is be thrown if the value is smaller than min_heap_size . The size check is only done when a garbage collection is triggered. size is the entire heap of the process when garbage collection is triggered. This includes all generational heaps, the process stack, any messages that are considered to be part of the heap , and any extra memory that the garbage collector needs during collection. size is the same as can be retrieved using erlang:process_info(Pid, total_heap_size) , or by adding heap_block_size , old_heap_block_size and mbuf_size from erlang:process_info(Pid, garbage_collection_info) . kill When set to true , the runtime system sends an untrappable exit signal with reason kill to the process if the maximum heap size is reached. The garbage collection that triggered the kill is not completed, instead the process exits as soon as possible. When set to false , no exit signal is sent to the process, instead it continues executing. If kill is not defined in the map, the system default will be used. The default system default is true . It can be changed by either option +hmaxk in erl(1) , or erlang:system_flag(max_heap_size, MaxHeapSize) . error_logger When set to true , the runtime system logs an error event via logger , containing details about the process when the maximum heap size is reached. One log event is sent each time the limit is reached. If error_logger is not defined in the map, the system default is used. The default system default is true . It can be changed by either the option +hmaxel int erl(1) , or erlang:system_flag(max_heap_size, MaxHeapSize) . The heap size of a process is quite hard to predict, especially the amount of memory that is used during the garbage collection. When contemplating using this option, it is recommended to first run it in production with kill set to false and inspect the log events to see what the normal peak sizes of the processes in the system is and then tune the value accordingly.","ref":"erlang.html#process_flag/2","title":"erlang.process_flag/2","type":"function"},{"doc":"Determines how messages in the message queue are stored, as follows: off_heap All messages in the message queue will be stored outside the process heap. This implies that no messages in the message queue will be part of a garbage collection of the process. on_heap All messages in the message queue will eventually be placed on the process heap. They can, however, be temporarily stored off the heap. This is how messages have always been stored up until ERTS 8.0. The default value of the message_queue_data process flag is determined by the command-line argument +hmqd in erl(1) . If the process may potentially accumulate a large number of messages in its queue it is recommended to set the flag value to off_heap . This is due to the fact that the garbage collection of a process that has a large number of messages stored on the heap can become extremely expensive and the process can consume large amounts of memory. The performance of the actual message passing is, however, generally better when the flag value is on_heap . Changing the flag value causes any existing messages to be moved. The move operation is initiated, but not necessarily completed, by the time the function returns. Returns the old value of the flag.","ref":"erlang.html#process_flag/2","title":"erlang.process_flag/2","type":"function"},{"doc":"Sets the process priority. Level is an atom. Four priority levels exist: low , normal , high , and max . Default is normal . Priority level max is reserved for internal use in the Erlang runtime system, and is not to be used by others. Internally in each priority level, processes are scheduled in a round robin fashion. Execution of processes on priority normal and low are interleaved. Processes on priority low are selected for execution less frequently than processes on priority normal . When runnable processes on priority high exist, no processes on priority low or normal are selected for execution. Notice however that this does not mean that no processes on priority low or normal can run when processes are running on priority high . When using multiple schedulers, more processes can be running in parallel than processes on priority high . That is, a low and a high priority process can execute at the same time. When runnable processes on priority max exist, no processes on priority low , normal , or high are selected for execution. As with priority high , processes on lower priorities can execute in parallel with processes on priority max . Scheduling is pre-emptive. Regardless of priority, a process is pre-empted when it has consumed more than a certain number of reductions since the last time it was selected for execution. Do not depend on the scheduling to remain exactly as it is today. Scheduling is likely to be changed in a future release to use available processor cores better. There is no automatic mechanism for avoiding priority inversion, such as priority inheritance or priority ceilings. When using priorities, take this into account and handle such scenarios by yourself. Making calls from a high priority process into code that you has no control over can cause the high priority process to wait for a process with lower priority. That is, effectively decreasing the priority of the high priority process during the call. Even if this is not the case with one version of the code that you have no control over, it can be the case in a future version of it. This can, for example, occur if a high priority process triggers code loading, as the code server runs on priority normal . Other priorities than normal are normally not needed. When other priorities are used, use them with care, especially priority high . A process on priority high is only to perform work for short periods. Busy looping for long periods in a high priority process causes most likely problems, as important OTP servers run on priority normal . Returns the old value of the flag.","ref":"erlang.html#process_flag/2","title":"erlang.process_flag/2","type":"function"},{"doc":"N must be an integer in the interval 0..10000. If N &gt; 0, call saving is made active for the process. This means that information about the N most recent global function calls, BIF calls, sends, and receives made by the process are saved in a list, which can be retrieved with process_info(Pid, last_calls) . A global function call is one in which the module of the function is explicitly mentioned. Only a fixed amount of information is saved, as follows: A tuple {Module, Function, Arity} for function calls The atoms send , 'receive' , and timeout for sends and receives ( 'receive' when a message is received and timeout when a receive times out) If N = 0, call saving is disabled for the process, which is the default. Whenever the size of the call saving list is set, its contents are reset. Returns the old value of the flag.","ref":"erlang.html#process_flag/2","title":"erlang.process_flag/2","type":"function"},{"doc":"Sets or clears flag sensitive for the current process. When a process has been marked as sensitive by calling process_flag(sensitive, true) , features in the runtime system that can be used for examining the data or inner working of the process are silently disabled. Features that are disabled include (but are not limited to) the following: Tracing. Trace flags can still be set for the process, but no trace messages of any kind are generated. (If flag sensitive is turned off, trace messages are again generated if any trace flags are set.) Sequential tracing. The sequential trace token is propagated as usual, but no sequential trace messages are generated. process_info/1,2 cannot be used to read out the message queue or the process dictionary (both are returned as empty lists). Stack back-traces cannot be displayed for the process. In crash dumps, the stack, messages, and the process dictionary are omitted. If {save_calls,N} has been set for the process, no function calls are saved to the call saving list. (The call saving list is not cleared. Also, send, receive, and time-out events are still added to the list.) Returns the old value of the flag.","ref":"erlang.html#process_flag/2","title":"erlang.process_flag/2","type":"function"},{"doc":"Sets certain flags for the process Pid , in the same manner as process_flag/2 . Returns the old value of the flag. The valid values for Flag are only a subset of those allowed in process_flag/2 , namely save_calls . Failure: badarg if Pid is not a local process.","ref":"erlang.html#process_flag/3","title":"erlang.process_flag/3","type":"function"},{"doc":"Returns a list containing InfoTuple s with miscellaneous information about the process identified by Pid , or undefined if the process is not alive. The order of the InfoTuple s is undefined and all InfoTuple s are not mandatory. The InfoTuple s part of the result can be changed without prior notice. The InfoTuple s with the following items are part of the result: current_function initial_call status message_queue_len links dictionary trap_exit error_handler priority group_leader total_heap_size heap_size stack_size reductions garbage_collection If the process identified by Pid has a registered name, also an InfoTuple with item registered_name is included. For information about specific InfoTuple s, see process_info/2 . This BIF is intended for debugging only . For all other purposes, use process_info/2 . Failure: badarg if Pid is not a local process.","ref":"erlang.html#process_info/1","title":"erlang.process_info/1","type":"function"},{"doc":"Returns information about the process identified by Pid , as specified by Item or ItemList . Returns undefined if the process is not alive. If the process is alive and a single Item is specified, the returned value is the corresponding InfoTuple , unless Item =:= registered_name and the process has no registered name. In this case, [] is returned. This strange behavior is because of historical reasons, and is kept for backward compatibility. If ItemList is specified, the result is InfoTupleList . The InfoTuple s in InfoTupleList are included with the corresponding Item s in the same order as the Item s were included in ItemList . Valid Item s can be included multiple times in ItemList . Getting process informations follows the signal ordering guarantees described in the Processes Chapter in the Erlang Reference Manual . If registered_name is part of ItemList and the process has no name registered, a {registered_name, []} , InfoTuple will be included in the resulting InfoTupleList . This behavior is different when a single Item =:= registered_name is specified, and when process_info/1 is used. Valid InfoTuple s with corresponding Item s: {backtrace, Bin} Binary Bin contains the same information as the output from erlang:process_display(Pid, backtrace) . Use binary_to_list/1 to obtain the string of characters from the binary. {binary, BinInfo} BinInfo is a list containing miscellaneous information about binaries on the heap of this process. This InfoTuple can be changed or removed without prior notice. In the current implementation BinInfo is a list of tuples. The tuples contain; BinaryId , BinarySize , BinaryRefcCount . Depending on the value of the message_queue_data process flag the message queue may be stored on the heap. {catchlevel, CatchLevel} CatchLevel is the number of currently active catches in this process. This InfoTuple can be changed or removed without prior notice. {current_function, {Module, Function, Arity} | undefined} Module , Function , Arity is the current function call of the process. The value undefined can be returned if the process is currently executing native compiled code. {current_location, {Module, Function, Arity, Location}} Module , Function , Arity is the current function call of the process. Location is a list of two-tuples describing the location in the source code. {current_stacktrace, Stack} Returns the current call stack back-trace ( stacktrace ) of the process. The stack has the same format as in the catch part of a try . See The call-stack back trace (stacktrace). The depth of the stacktrace is truncated according to the backtrace_depth system flag setting. {dictionary, Dictionary} Dictionary is the process dictionary. {error_handler, Module} Module is the error handler module used by the process (for undefined function calls, for example). {garbage_collection, GCInfo} GCInfo is a list containing miscellaneous information about garbage collection for this process. The content of GCInfo can be changed without prior notice. {garbage_collection_info, GCInfo} GCInfo is a list containing miscellaneous detailed information about garbage collection for this process. The content of GCInfo can be changed without prior notice. For details about the meaning of each item, see gc_minor_start in erlang:trace/3 . {group_leader, GroupLeader} GroupLeader is the group leader for the I/O of the process. {heap_size, Size} Size is the size in words of the youngest heap generation of the process. This generation includes the process stack. This information is highly implementation-dependent, and can change if the implementation changes. {initial_call, {Module, Function, Arity}} Module , Function , Arity is the initial function call with which the process was spawned. {links, PidsAndPorts} PidsAndPorts is a list of process identifiers and port identifiers, with processes or ports to which the process has a link. {last_calls, false|Calls} The value is false if call saving is not active for the process (see process_flag/3 ). If call saving is active, a list is returned, in which the last element is the most recent called. {memory, Size} Size is the size in bytes of the process. This includes call stack, heap, and internal structures. {message_queue_len, MessageQueueLen} MessageQueueLen is the number of messages currently in the message queue of the process. This is the length of the list MessageQueue returned as the information item messages (see below). {messages, MessageQueue} MessageQueue is a list of the messages to the process, which have not yet been processed. {min_heap_size, MinHeapSize} MinHeapSize is the minimum heap size for the process. {min_bin_vheap_size, MinBinVHeapSize} MinBinVHeapSize is the minimum binary virtual heap size for the process. {monitored_by, MonitoredBy} A list of identifiers for all the processes, ports and NIF resources, that are monitoring the process. {monitors, Monitors} A list of monitors (started by monitor/2 ) that are active for the process. For a local process monitor or a remote process monitor by a process identifier, the list consists of: {process, Pid} Process is monitored by pid. {process, {RegName, Node}} Local or remote process is monitored by name. {port, PortId} Local port is monitored by port id. {port, {RegName, Node}} Local port is monitored by name. Please note, that remote port monitors are not supported, so Node will always be the local node name. {message_queue_data, MQD} MQD is the current value of the message_queue_data process flag, which can be either off_heap or on_heap . For more information, see the documentation of process_flag(message_queue_data, MQD) . {priority, Level} Level is the current priority level for the process. For more information on priorities, see process_flag(priority, Level) . {reductions, Number} Number is the number of reductions executed by the process. {registered_name, Atom} Atom is the registered process name. If the process has no registered name, this tuple is not present in the list. {sequential_trace_token, [] | SequentialTraceToken} SequentialTraceToken is the sequential trace token for the process. This InfoTuple can be changed or removed without prior notice. {stack_size, Size} Size is the stack size, in words, of the process. {status, Status} Status is the status of the process and is one of the following: exiting garbage_collecting waiting (for a message) running runnable (ready to run, but another process is running) suspended (suspended on a &quot;busy&quot; port or by the BIF erlang:suspend_process/1,2 ) {suspending, SuspendeeList} SuspendeeList is a list of {Suspendee, ActiveSuspendCount, OutstandingSuspendCount} tuples. Suspendee is the process identifier of a process that has been, or is to be, suspended by the process identified by Pid through the BIF erlang:suspend_process/2 or erlang:suspend_process/1 . ActiveSuspendCount is the number of times Suspendee has been suspended by Pid . OutstandingSuspendCount is the number of not yet completed suspend requests sent by Pid , that is: If ActiveSuspendCount =/= 0 , Suspendee is currently in the suspended state. If OutstandingSuspendCount =/= 0 , option asynchronous of erlang:suspend_process/2 has been used and the suspendee has not yet been suspended by Pid . Notice that ActiveSuspendCount and OutstandingSuspendCount are not the total suspend count on Suspendee , only the parts contributed by Pid . {total_heap_size, Size} Size is the total size, in words, of all heap fragments of the process. This includes the process stack and any unreceived messages that are considered to be part of the heap. {trace, InternalTraceFlags} InternalTraceFlags is an integer representing the internal trace flag for this process. This InfoTuple can be changed or removed without prior notice. {trap_exit, Boolean} Boolean is true if the process is trapping exits, otherwise false . Notice that not all implementations support all these Item s. Failures: badarg If Pid is not a local process. badarg If Item is an invalid item.","ref":"erlang.html#process_info/2","title":"erlang.process_info/2","type":"function"},{"doc":"Returns a list of process identifiers corresponding to all the processes currently existing on the local node. Notice that an exiting process exists, but is not alive. That is, is_process_alive/1 returns false for an exiting process, but its process identifier is part of the result returned from processes/0 . Example: &gt; processes ( ) . [ &lt; 0.0 . 0 &gt; , &lt; 0.2 . 0 &gt; , &lt; 0.4 . 0 &gt; , &lt; 0.5 . 0 &gt; , &lt; 0.7 . 0 &gt; , &lt; 0.8 . 0 &gt; ]","ref":"erlang.html#processes/0","title":"erlang.processes/0","type":"function"},{"doc":"Removes old code for Module . Before this BIF is used, check_process_code/2 is to be called to check that no processes execute old code in the module. This BIF is intended for the code server (see code(3) ) and is not to be used elsewhere. As from ERTS 8.0 (Erlang/OTP 19), any lingering processes that still execute the old code is killed by this function. In earlier versions, such incorrect use could cause much more fatal failures, like emulator crash. Failure: badarg if there is no old code for Module .","ref":"erlang.html#purge_module/1","title":"erlang.purge_module/1","type":"function"},{"doc":"Adds a new Key to the process dictionary, associated with the value Val , and returns undefined . If Key exists, the old value is deleted and replaced by Val , and the function returns the old value. The average time complexity for the current implementation of this function is O( 1 ) and the worst case time complexity is O( N ), where N is the number of items in the process dictionary. Example: &gt; X = put ( name , walrus ) , Y = put ( name , carpenter ) , Z = get ( name ) , { X , Y , Z } . { undefined , walrus , carpenter } The values stored when put is evaluated within the scope of a catch are not retracted if a throw is evaluated, or if an error occurs.","ref":"erlang.html#put/2","title":"erlang.put/2","type":"function"},{"doc":"Raises an exception of the specified class, reason, and call stack backtrace ( stacktrace ). Class is error , exit , or throw . So, if it were not for the stacktrace, erlang:raise(Class, Reason, Stacktrace) is equivalent to erlang:Class(Reason) (given that Class is a valid class). Reason can be any term. Stacktrace is a list as provided in a try-catch clause. try . . . catch Class : Reason : Stacktrace -&gt; . . . end That is, a list of four-tuples {Module, Function, Arity | Args, ExtraInfo} , where Module and Function are atoms, and the third element is an integer arity or an argument list. The stacktrace can also contain {Fun, Args, ExtraInfo} tuples, where Fun is a local fun and Args is an argument list. Element ExtraInfo at the end is optional. Omitting it is equivalent to specifying an empty list. The stacktrace is used as the exception stacktrace for the calling process; it is truncated to the current maximum stacktrace depth. As evaluating this function causes the process to terminate, it has no return value unless the arguments are invalid, in which case the function returns the error reason badarg . If you want to be sure not to return, you can call error(erlang:raise(Class, Reason, Stacktrace)) and hope to distinguish exceptions later. See the reference manual about errors and error handling for more information about exception classes and how to catch exceptions.","ref":"erlang.html#raise/3","title":"erlang.raise/3","type":"function"},{"doc":"Reads the state of a timer. The same as calling erlang:read_timer(TimerRef, []) .","ref":"erlang.html#read_timer/1","title":"erlang.read_timer/1","type":"function"},{"doc":"Reads the state of a timer that has been created by either erlang:start_timer or erlang:send_after . TimerRef identifies the timer, and was returned by the BIF that created the timer. Options : {async, Async} Asynchronous request for state information. Async defaults to false , which causes the operation to be performed synchronously. In this case, the Result is returned by erlang:read_timer . When Async is true , erlang:read_timer sends an asynchronous request for the state information to the timer service that manages the timer, and then returns ok . A message on the format {read_timer, TimerRef, Result} is sent to the caller of erlang:read_timer when the operation has been processed. More Option s can be added in the future. If Result is an integer, it represents the time in milliseconds left until the timer expires. If Result is false , a timer corresponding to TimerRef could not be found. This because the timer had expired, or been canceled, or because TimerRef never has corresponded to a timer. Even if the timer has expired, it does not tell you whether or not the time-out message has arrived at its destination yet. The timer service that manages the timer can be co-located with another scheduler than the scheduler that the calling process is executing on. If so, communication with the timer service takes much longer time than if it is located locally. If the calling process is in a critical path, and can do other things while waiting for the result of this operation, you want to use option {async, true} . If using option {async, false} , the calling process is blocked until the operation has been performed. See also erlang:send_after/4 , erlang:start_timer/4 , and erlang:cancel_timer/2 .","ref":"erlang.html#read_timer/2","title":"erlang.read_timer/2","type":"function"},{"doc":"Returns a string corresponding to the text representation of Ref . This BIF is intended for debugging and is not to be used in application programs.","ref":"erlang.html#ref_to_list/1","title":"erlang.ref_to_list/1","type":"function"},{"doc":"Registers the name RegName with a process identifier (pid) or a port identifier in the name registry . RegName , which must be an atom, can be used instead of the pid or port identifier in send operator ( RegName ! Message ) and most other BIFs that take a pid or port identifies as an argument. Example: &gt; register ( db , Pid ) . true The registered name is considered a Directly Visible Erlang Resource and is automatically unregistered when the process terminates. Failures: badarg If PidOrPort is not an existing local process or port. badarg If RegName is already in use. badarg If the process or port is already registered (already has a name). badarg If RegName is the atom undefined .","ref":"erlang.html#register/2","title":"erlang.register/2","type":"function"},{"doc":"Returns a list of names that have been registered using register/2 , for example: &gt; registered ( ) . [ code_server , file_server , init , user , my_db ]","ref":"erlang.html#registered/0","title":"erlang.registered/0","type":"function"},{"doc":"Decreases the suspend count on the process identified by Suspendee . Suspendee is previously to have been suspended through erlang:suspend_process/2 or erlang:suspend_process/1 by the process calling erlang:resume_process(Suspendee) . When the suspend count on Suspendee reaches zero, Suspendee is resumed, that is, its state is changed from suspended into the state it had before it was suspended. This BIF is intended for debugging only. Failures: badarg If Suspendee is not a process identifier. badarg If the process calling erlang:resume_process/1 had not previously increased the suspend count on the process identified by Suspendee . badarg If the process identified by Suspendee is not alive.","ref":"erlang.html#resume_process/1","title":"erlang.resume_process/1","type":"function"},{"doc":"Returns an integer by rounding Number , for example: round ( 42.1 ) . 42 round ( 5.5 ) . 6 round ( - 5.5 ) . - 6 round ( 36028797018963969.0 ) . 36028797018963968 In the last example, round(36028797018963969.0) evaluates to 36028797018963968 . The reason for this is that the number 36028797018963969.0 cannot be represented exactly as a float value. Instead, the float literal is represented as 36028797018963968.0 , which is the closest number that can be represented exactly as a float value. See Representation of Floating Point Numbers for additional information. Allowed in guard tests.","ref":"erlang.html#round/1","title":"erlang.round/1","type":"function"},{"doc":"Returns the process identifier of the calling process, for example: &gt; self ( ) . &lt; 0.26 . 0 &gt; Allowed in guard tests.","ref":"erlang.html#self/0","title":"erlang.self/0","type":"function"},{"doc":"Sends a message and returns Msg . This is the same as using the send operator: Dest ! Msg . Dest can be a remote or local process identifier, an alias, a (local) port, a locally registered name, or a tuple {RegName, Node} for a registered name at another node. The function fails with a badarg run-time error if Dest is an atom name, but this name is not registered. This is the only case when send fails for an unreachable destination Dest (of correct type).","ref":"erlang.html#send/2","title":"erlang.send/2","type":"function"},{"doc":"Either sends a message and returns ok , or does not send the message but returns something else (see below). Otherwise the same as erlang:send/2 . For more detailed explanation and warnings, see erlang:send_nosuspend/2,3 . Options: nosuspend If the sender would have to be suspended to do the send, nosuspend is returned instead. noconnect If the destination node would have to be auto-connected to do the send, noconnect is returned instead. As with erlang:send_nosuspend/2,3 : use with extreme care.","ref":"erlang.html#send/3","title":"erlang.send/3","type":"function"},{"doc":"Starts a timer. The same as calling erlang:send_after(Time, Dest, Msg, []) .","ref":"erlang.html#send_after/3","title":"erlang.send_after/3","type":"function"},{"doc":"Starts a timer. When the timer expires, the message Msg is sent to the process identified by Dest . Apart from the format of the time-out message, this function works exactly as erlang:start_timer/4 .","ref":"erlang.html#send_after/4","title":"erlang.send_after/4","type":"function"},{"doc":"The same as erlang:send(Dest, Msg, [nosuspend]) , but returns true if the message was sent and false if the message was not sent because the sender would have had to be suspended. This function is intended for send operations to an unreliable remote node without ever blocking the sending (Erlang) process. If the connection to the remote node (usually not a real Erlang node, but a node written in C or Java) is overloaded, this function does not send the message and returns false . The same occurs if Dest refers to a local port that is busy. For all other destinations (allowed for the ordinary send operator '!' ), this function sends the message and returns true . This function is only to be used in rare circumstances where a process communicates with Erlang nodes that can disappear without any trace, causing the TCP buffers and the drivers queue to be over-full before the node is shut down (because of tick time-outs) by net_kernel . The normal reaction to take when this occurs is some kind of premature shutdown of the other node. Notice that ignoring the return value from this function would result in an unreliable message passing, which is contradictory to the Erlang programming model. The message is not sent if this function returns false . In many systems, transient states of overloaded queues are normal. Although this function returns false does not mean that the other node is guaranteed to be non-responsive, it could be a temporary overload. Also, a return value of true does only mean that the message can be sent on the (TCP) channel without blocking; the message is not guaranteed to arrive at the remote node. For a disconnected non-responsive node, the return value is true (mimics the behavior of operator ! ). The expected behavior and the actions to take when the function returns false are application- and hardware-specific. Use with extreme care.","ref":"erlang.html#send_nosuspend/2","title":"erlang.send_nosuspend/2","type":"function"},{"doc":"The same as erlang:send(Dest, Msg, [nosuspend | Options]) , but with a Boolean return value. This function behaves like erlang:send_nosuspend/2 , but takes a third parameter, a list of options. The only option is noconnect , which makes the function return false if the remote node is not currently reachable by the local node. The normal behavior is to try to connect to the node, which can stall the process during a short period. The use of option noconnect makes it possible to be sure not to get the slightest delay when sending to a remote process. This is especially useful when communicating with nodes that expect to always be the connecting part (that is, nodes written in C or Java). Whenever the function returns false (either when a suspend would occur or when noconnect was specified and the node was not already connected), the message is guaranteed not to have been sent. Use with extreme care.","ref":"erlang.html#send_nosuspend/3","title":"erlang.send_nosuspend/3","type":"function"},{"doc":"Sets the magic cookie of the local node to the atom Cookie , which is also the cookie for all nodes that have no explicit cookie set with set_cookie/2 Cookie (see section Distributed Erlang in the Erlang Reference Manual in System Documentation). Failure: function_clause if the local node is not alive.","ref":"erlang.html#set_cookie/1","title":"erlang.set_cookie/1","type":"function"},{"doc":"Sets the magic cookie for Node to the atom Cookie . If Node is the local node, the function sets the cookie of all other nodes (that have no explicit cookie set with this function) to Cookie (see section Distributed Erlang in the Erlang Reference Manual in System Documentation). Failure: function_clause if the local node is not alive.","ref":"erlang.html#set_cookie/2","title":"erlang.set_cookie/2","type":"function"},{"doc":"Returns a tuple that is a copy of argument Tuple1 with the element specified by integer argument Index (the first element is the element with index 1) replaced by argument Value , for example: &gt; setelement ( 2 , { 10 , green , bottles } , red ) . { 10 , red , bottles }","ref":"erlang.html#setelement/3","title":"erlang.setelement/3","type":"function"},{"doc":"Returns the number of elements in a tuple or the number of bytes in a binary or bitstring, for example: &gt; size ( { morni , mulle , bwange } ) . 3 &gt; size ( &lt;&lt; 11 , 22 , 33 &gt;&gt; ) . 3 For bitstrings, the number of whole bytes is returned. That is, if the number of bits in the bitstring is not divisible by 8, the resulting number of bytes is rounded down . Allowed in guard tests. See also tuple_size/1 , byte_size/1 , and bit_size/1 .","ref":"erlang.html#size/1","title":"erlang.size/1","type":"function"},{"doc":"Returns the process identifier of a new process started by the application of Fun to the empty list [] . Otherwise works like spawn/3 .","ref":"erlang.html#spawn/1","title":"erlang.spawn/1","type":"function"},{"doc":"Returns the process identifier of a new process started by the application of Fun to the empty list [] on Node . If Node does not exist, a useless pid is returned. Otherwise works like spawn/3 .","ref":"erlang.html#spawn/2","title":"erlang.spawn/2","type":"function"},{"doc":"Returns the process identifier of a new process started by the application of Module:Function to Args . error_handler:undefined_function(Module, Function, Args) is evaluated by the new process if Module:Function/Arity does not exist (where Arity is the length of Args ). The error handler can be redefined (see process_flag/2 ). If error_handler is undefined, or the user has redefined the default error_handler and its replacement is undefined, a failure with reason undef occurs. Example: &gt; spawn ( speed , regulator , [ high_speed , thin_cut ] ) . &lt; 0.13 . 1 &gt;","ref":"erlang.html#spawn/3","title":"erlang.spawn/3","type":"function"},{"doc":"Returns the process identifier (pid) of a new process started by the application of Module:Function to Args on Node . If Node does not exist, a useless pid is returned. Otherwise works like spawn/3 .","ref":"erlang.html#spawn/4","title":"erlang.spawn/4","type":"function"},{"doc":"Returns the process identifier of a new process started by the application of Fun to the empty list [] . A link is created between the calling process and the new process, atomically. Otherwise works like spawn/3 .","ref":"erlang.html#spawn_link/1","title":"erlang.spawn_link/1","type":"function"},{"doc":"Returns the process identifier (pid) of a new process started by the application of Fun to the empty list [] on Node . A link is created between the calling process and the new process, atomically. If Node does not exist, a useless pid is returned and an exit signal with reason noconnection is sent to the calling process. Otherwise works like spawn/3 .","ref":"erlang.html#spawn_link/2","title":"erlang.spawn_link/2","type":"function"},{"doc":"Returns the process identifier of a new process started by the application of Module:Function to Args . A link is created between the calling process and the new process, atomically. Otherwise works like spawn/3 .","ref":"erlang.html#spawn_link/3","title":"erlang.spawn_link/3","type":"function"},{"doc":"Returns the process identifier (pid) of a new process started by the application of Module:Function to Args on Node . A link is created between the calling process and the new process, atomically. If Node does not exist, a useless pid is returned and an exit signal with reason noconnection is sent to the calling process. Otherwise works like spawn/3 .","ref":"erlang.html#spawn_link/4","title":"erlang.spawn_link/4","type":"function"},{"doc":"Returns the process identifier of a new process, started by the application of Fun to the empty list [] , and a reference for a monitor created to the new process. Otherwise works like spawn/3 .","ref":"erlang.html#spawn_monitor/1","title":"erlang.spawn_monitor/1","type":"function"},{"doc":"Returns the process identifier of a new process, started by the application of Fun to the empty list [] on the node Node , and a reference for a monitor created to the new process. Otherwise works like spawn/3 . If the node identified by Node does not support distributed spawn_monitor() , the call will fail with a notsup exception.","ref":"erlang.html#spawn_monitor/2","title":"erlang.spawn_monitor/2","type":"function"},{"doc":"A new process is started by the application of Module:Function to Args . The process is monitored at the same time. Returns the process identifier and a reference for the monitor. Otherwise works like spawn/3 .","ref":"erlang.html#spawn_monitor/3","title":"erlang.spawn_monitor/3","type":"function"},{"doc":"A new process is started by the application of Module:Function to Args on the node Node . The process is monitored at the same time. Returns the process identifier and a reference for the monitor. Otherwise works like spawn/3 . If the node identified by Node does not support distributed spawn_monitor() , the call will fail with a notsup exception.","ref":"erlang.html#spawn_monitor/4","title":"erlang.spawn_monitor/4","type":"function"},{"doc":"Returns the process identifier (pid) of a new process started by the application of Fun to the empty list [] . Otherwise works like spawn_opt/4 . If option monitor is specified, the newly created process is monitored, and both the pid and reference for the monitor are returned.","ref":"erlang.html#spawn_opt/2","title":"erlang.spawn_opt/2","type":"function"},{"doc":"Returns the process identifier (pid) of a new process started by the application of Fun to the empty list [] on Node . If Node does not exist, a useless pid is returned. Otherwise works like spawn_opt/4 . Valid options depends on what options are supported by the node identified by Node . A description of valid Option s for the local node of current OTP version can be found in the documentation of spawn_opt/4 .","ref":"erlang.html#spawn_opt/3","title":"erlang.spawn_opt/3","type":"function"},{"doc":"Works as spawn/3 , except that an extra option list is specified when creating the process. If option monitor is specified, the newly created process is monitored, and both the pid and reference for the monitor are returned. Options: link Sets a link to the parent process (like spawn_link/3 does). monitor Monitors the new process (like monitor(process, Pid) does). A {Pid, MonitorRef} tuple will be returned instead of just a Pid . {monitor, MonitorOpts} Monitors the new process with options (like monitor(process, Pid, MonitorOpts) does). A {Pid, MonitorRef} tuple will be returned instead of just a Pid . {priority, Level} Sets the priority of the new process. Equivalent to executing process_flag(priority, Level) in the start function of the new process, except that the priority is set before the process is selected for execution for the first time. For more information on priorities, see process_flag(priority, Level) . {fullsweep_after, Number} Useful only for performance tuning. Do not use this option unless you know that there is problem with execution times or memory consumption, and ensure that the option improves matters. The Erlang runtime system uses a generational garbage collection scheme, using an &quot;old heap&quot; for data that has survived at least one garbage collection. When there is no more room on the old heap, a fullsweep garbage collection is done. Option fullsweep_after makes it possible to specify the maximum number of generational collections before forcing a fullsweep, even if there is room on the old heap. Setting the number to zero disables the general collection algorithm, that is, all live data is copied at every garbage collection. A few cases when it can be useful to change fullsweep_after : If binaries that are no longer used are to be thrown away as soon as possible. (Set Number to zero.) A process that mostly have short-lived data is fullsweeped seldom or never, that is, the old heap contains mostly garbage. To ensure a fullsweep occasionally, set Number to a suitable value, such as 10 or 20. In embedded systems with a limited amount of RAM and no virtual memory, you might want to preserve memory by setting Number to zero. (The value can be set globally, see erlang:system_flag/2 .) {min_heap_size, Size} Useful only for performance tuning. Do not use this option unless you know that there is problem with execution times or memory consumption, and ensure that the option improves matters. Gives a minimum heap size, in words. Setting this value higher than the system default can speed up some processes because less garbage collection is done. However, setting a too high value can waste memory and slow down the system because of worse data locality. Therefore, use this option only for fine-tuning an application and to measure the execution time with various Size values. {min_bin_vheap_size, VSize} Useful only for performance tuning. Do not use this option unless you know that there is problem with execution times or memory consumption, and ensure that the option improves matters. Gives a minimum binary virtual heap size, in words. Setting this value higher than the system default can speed up some processes because less garbage collection is done. However, setting a too high value can waste memory. Therefore, use this option only for fine-tuning an application and to measure the execution time with various VSize values. {max_heap_size, Size} Sets the max_heap_size process flag. The default max_heap_size is determined by command-line argument +hmax in erl(1) . For more information, see the documentation of process_flag(max_heap_size, Size) . {message_queue_data, MQD} Sets the value of the message_queue_data process flag. MQD can be either off_heap or on_heap . The default value of the message_queue_data process flag is determined by the command-line argument +hmqd in erl(1) . For more information, see the documentation of process_flag(message_queue_data, MQD) .","ref":"erlang.html#spawn_opt/4","title":"erlang.spawn_opt/4","type":"function"},{"doc":"Returns the process identifier (pid) of a new process started by the application of Module:Function to Args on Node . If Node does not exist, a useless pid is returned. Otherwise works like spawn_opt/4 . Valid options depends on what options are supported by the node identified by Node . A description of valid Option s for the local node of current OTP version can be found in the documentation of spawn_opt/4 .","ref":"erlang.html#spawn_opt/5","title":"erlang.spawn_opt/5","type":"function"},{"doc":"The same as the call spawn_request(node(),Fun,[]) . That is, a spawn request on the local node with no options.","ref":"erlang.html#spawn_request/1","title":"erlang.spawn_request/1","type":"function"},{"doc":"The same as the call spawn_request(node(),Fun,Options) . That is, a spawn request on the local node.","ref":"erlang.html#spawn_request/2","title":"erlang.spawn_request/2","type":"function"},{"doc":"The same as the call spawn_request(Node,Fun,[]) . That is, a spawn request with no options.","ref":"erlang.html#spawn_request/2","title":"erlang.spawn_request/2","type":"function"},{"doc":"The same as spawn_request(Node,erlang,apply,[Fun,[]],Options) . That is, a spawn request using the fun Fun of arity zero as entry point. This function will fail with a badarg exception if: Node is not an atom. Fun is not a fun of arity zero. Options is not a proper list of terms.","ref":"erlang.html#spawn_request/3","title":"erlang.spawn_request/3","type":"function"},{"doc":"The same as the call spawn_request(node(),Module,Function,Args,[]) . That is, a spawn request on the local node with no options.","ref":"erlang.html#spawn_request/3","title":"erlang.spawn_request/3","type":"function"},{"doc":"The same as the call spawn_request(Node,Module,Function,Args,[]) . That is, a spawn request with no options.","ref":"erlang.html#spawn_request/4","title":"erlang.spawn_request/4","type":"function"},{"doc":"The same as the call spawn_request(node(),Module,Function,Args,Options) . That is, a spawn request on the local node.","ref":"erlang.html#spawn_request/4","title":"erlang.spawn_request/4","type":"function"},{"doc":"Asynchronously send a spawn request. Returns a request identifier ReqId . If the spawn operation succeeds, a new process is created on the node identified by Node . When a spawn operation succeeds, the caller will by default be sent a message on the form {ReplyTag, ReqId, ok, Pid} where Pid is the process identifier of the newly created process. Such a message is referred to as a success message below in the text. ReplyTag is by default the atom spawn_reply unless modified by the {reply_tag, ReplyTag} option. The new process is started by the application of Module:Function to Args . The spawn operation fails either if creation of a new process failed or if the spawn operation was interrupted by a connection failure. When a spawn operation fails, the caller will by default be sent a message on the form {ReplyTag, ReqId, error, Reason} where Reason is the error reason. Such a message is referred to as an error message below in the text. Currently the following spawn error Reason s are defined, but other reasons can appear at any time without prior notice: badopt An invalid Option was passed as argument. Note that different runtime systems may support different options. notsup The node identified by Node does not support spawn operations issued by spawn_request() . noconnection Failure to set up a connection to the node identified by Node or the connection to that node was lost during the spawn operation. In the case the connection was lost, a process may or may not have been created. system_limit Could not create a new process due to that some system limit was reached. Typically the process table was full. Valid Option s: monitor In the absence of spawn operation failures, atomically sets up a monitor to the newly created process. That is, as if the calling process had called monitor(process, Pid) where Pid is the process identifier of the newly created process. The ReqId returned by spawn_request() is also used as monitor reference as if it was returned from monitor(process, Pid) . The monitor will not be activated for the calling process until the spawn operation has succeeded. The monitor can not be demonitored before the operation has succeeded. A 'DOWN' message for the corresponding monitor is guaranteed not to be delivered before a success message that corresponds to the spawn operation. If the spawn operation fails, no 'DOWN' message will be delivered. If the connection between the nodes involved in the spawn operation is lost during the spawn operation, the spawn operation will fail with an error reason of noconnection . A new process may or may not have been created. {monitor, MonitorOpts} In the absence of spawn operation failures, atomically sets up a monitor to the newly created process. That is, as if the calling process had called monitor(process, Pid, MonitorOpts) where Pid is the process identifier of the newly created process. See the monitor option above for more information. Note that the monitor will not be activated for the calling process until the spawn operation has succeeded. For example, in the case that an alias is created using the monitor option, the alias will not be active until the monitor is activated. link In absence of spawn operation failures, atomically sets up a link between the calling process and the newly created process. That is, as if the calling process had called link(Pid) where Pid is the process identifier of the newly created process. The link will not be activated for the calling process until the spawn operation has succeeded. The link can not be removed before the operation has succeeded. An exit signal due to the link is guaranteed not to be delivered before a success message that corresponds to the spawn operation. If the spawn operation fails, no exit signal due to the link will be delivered to the caller of spawn_request() . If the connection between the nodes involved in the spawn operation is lost during the spawn operation, the spawn operation will fail with an error reason of noconnection . A new process may or may not have been created. If it has been created, it will be delivered an exit signal with an exit reason of noconnection . {reply, Reply} Valid Reply values: yes A spawn reply message will be sent to the caller regardless of whether the operation succeeds or not. If the call to spawn_request() returns without raising an exception and the reply option is set to yes , the caller is guaranteed to be delivered either a success message or an error message . The reply option is by default set to yes . no No spawn reply message will be sent to the caller when the spawn operation completes. This regardless of whether the operation succeeds or not. error_only No spawn reply message will be sent to the caller if the spawn operation succeeds, but an error message will be sent to the caller if the operation fails. success_only No spawn reply message will be sent to the caller if the spawn operation fails, but a success message will be sent to the caller if the operation succeeds. {reply_tag, ReplyTag} Sets the reply tag to ReplyTag in the reply message. That is, in the success or error message that is sent to the caller due to the spawn operation. The default reply tag is the atom spawn_reply . OtherOption Other valid options depends on what options are supported by the node identified by Node . A description of other valid Option s for the local node of current OTP version can be found in the documentation of spawn_opt/4 . This function will fail with a badarg exception if: Node is not an atom. Module is not an atom. Function is not an atom. Args is not a proper list of terms. Options is not a proper list of terms. Note that not all individual Option s are checked when the spawn request is sent. Some Option s can only be checked on reception of the request. Therefore an invalid option does not cause a badarg exception, but will cause the spawn operation to fail with an error reason of badopt . A spawn request can be abandoned by calling spawn_request_abandon/1 .","ref":"erlang.html#spawn_request/5","title":"erlang.spawn_request/5","type":"function"},{"doc":"Abandon a previously issued spawn request. ReqId corresponds to a request identifier previously returned by spawn_request() in a call from current process. That is, only the process that has made the request can abandon the request. A spawn request can only be successfully abandoned until the spawn request has completed. When a spawn request has been successfully abandoned, the caller will not be effected by future direct effects of the spawn request itself. For example, it will not receive a spawn reply message. The request is however not withdrawn, so a new process may or may not be created due to the request. If a new process is created after the spawn request was abandoned, no monitors nor links will be set up to the caller of spawn_request_abandon/1 due to the spawn request. If the spawn request included the link option, the process created due to this request will be sent an exit signal from its parent with the exit reason abandoned when it is detected that the spawn operation has succeeded. A process created due to a spawn request that has been abandoned may communicate with its parent as any other process. It is only the direct effects on the parent of the actual spawn request, that will be canceled by abandoning a spawn request. Return values: true The spawn request was successfully abandoned. false No spawn request was abandoned. The ReqId request identifier did not correspond to an outstanding spawn request issued by the calling process. The reason for this is either: ReqId corresponds to a spawn request previoulsy made by the calling process. The spawn operation has completed and a spawn reply has already been delivered to the calling process unless the spawn reply was disabled in the request. ReqId does not correspond to a spawn request that has been made by the calling process. This function fail with a badarg exception if ReqId is not a reference.","ref":"erlang.html#spawn_request_abandon/1","title":"erlang.spawn_request_abandon/1","type":"function"},{"doc":"Returns a tuple containing the binaries that are the result of splitting Bin into two parts at position Pos . This is not a destructive operation. After the operation, there are three binaries altogether. Example: &gt; B = list_to_binary ( &quot;0123456789&quot; ) . &lt;&lt; &quot;0123456789&quot; &gt;&gt; &gt; byte_size ( B ) . 10 &gt; { B1 , B2 } = split_binary ( B , 3 ) . { &lt;&lt; &quot;012&quot; &gt;&gt; , &lt;&lt; &quot;3456789&quot; &gt;&gt; } &gt; byte_size ( B1 ) . 3 &gt; byte_size ( B2 ) . 7","ref":"erlang.html#split_binary/2","title":"erlang.split_binary/2","type":"function"},{"doc":"Starts a timer. The same as calling erlang:start_timer(Time, Dest, Msg, []) .","ref":"erlang.html#start_timer/3","title":"erlang.start_timer/3","type":"function"},{"doc":"Starts a timer. When the timer expires, the message {timeout, TimerRef, Msg} is sent to the process identified by Dest . Option s: {abs, false} This is the default. It means the Time value is interpreted as a time in milliseconds relative current Erlang monotonic time. {abs, true} Absolute Time value. The Time value is interpreted as an absolute Erlang monotonic time in milliseconds. More Option s can be added in the future. The absolute point in time, the timer is set to expire on, must be in the interval [ erlang:convert_time_unit ( erlang:system_info (start_time), native, millisecond), erlang:convert_time_unit ( erlang:system_info (end_time), native, millisecond) ] . If a relative time is specified, the Time value is not allowed to be negative. If Dest is a pid() , it must be a pid() of a process created on the current runtime system instance. This process has either terminated or not. If Dest is an atom() , it is interpreted as the name of a locally registered process. The process referred to by the name is looked up at the time of timer expiration. No error is returned if the name does not refer to a process. If Dest is a pid() , the timer is automatically canceled if the process referred to by the pid() is not alive, or if the process exits. This feature was introduced in ERTS 5.4.11. Notice that timers are not automatically canceled when Dest is an atom() . See also erlang:send_after/4 , erlang:cancel_timer/2 , and erlang:read_timer/2 . Failure: badarg if the arguments do not satisfy the requirements specified here.","ref":"erlang.html#start_timer/4","title":"erlang.start_timer/4","type":"function"},{"doc":"Returns the same as statistics(active_tasks_all) with the exception that no information about the dirty IO run queue and its associated schedulers is part of the result. That is, only tasks that are expected to be CPU bound are part of the result.","ref":"erlang.html#statistics/1","title":"erlang.statistics/1","type":"function"},{"doc":"Returns a list where each element represents the amount of active processes and ports on each run queue and its associated schedulers. That is, the number of processes and ports that are ready to run, or are currently running. Values for normal run queues and their associated schedulers are located first in the resulting list. The first element corresponds to scheduler number 1 and so on. If support for dirty schedulers exist, an element with the value for the dirty CPU run queue and its associated dirty CPU schedulers follow and then as last element the value for the the dirty IO run queue and its associated dirty IO schedulers follow. The information is not gathered atomically. That is, the result is not necessarily a consistent snapshot of the state, but instead quite efficiently gathered. Each normal scheduler has one run queue that it manages. If dirty schedulers schedulers are supported, all dirty CPU schedulers share one run queue, and all dirty IO schedulers share one run queue. That is, we have multiple normal run queues, one dirty CPU run queue and one dirty IO run queue. Work can not migrate between the different types of run queues. Only work in normal run queues can migrate to other normal run queues. This has to be taken into account when evaluating the result. See also statistics(total_active_tasks) , statistics(run_queue_lengths) , statistics(run_queue_lengths_all) , statistics(total_run_queue_lengths) , and statistics(total_run_queue_lengths_all) .","ref":"erlang.html#statistics/1","title":"erlang.statistics/1","type":"function"},{"doc":"Returns the total number of context switches since the system started.","ref":"erlang.html#statistics/1","title":"erlang.statistics/1","type":"function"},{"doc":"Returns the number of exact reductions. statistics(exact_reductions) is a more expensive operation than statistics(reductions) .","ref":"erlang.html#statistics/1","title":"erlang.statistics/1","type":"function"},{"doc":"Returns information about garbage collection, for example: &gt; statistics ( garbage_collection ) . { 85 , 23961 , 0 } This information can be invalid for some implementations.","ref":"erlang.html#statistics/1","title":"erlang.statistics/1","type":"function"},{"doc":"Returns Input , which is the total number of bytes received through ports, and Output , which is the total number of bytes output to ports.","ref":"erlang.html#statistics/1","title":"erlang.statistics/1","type":"function"},{"doc":"Microstate accounting can be used to measure how much time the Erlang runtime system spends doing various tasks. It is designed to be as lightweight as possible, but some overhead exists when this is enabled. Microstate accounting is meant to be a profiling tool to help finding performance bottlenecks. To start / stop / reset microstate accounting, use system flag microstate_accounting . statistics(microstate_accounting) returns a list of maps representing some of the OS threads within ERTS. Each map contains type and id fields that can be used to identify what thread it is, and also a counters field that contains data about how much time has been spent in the various states. Example: &gt; erlang : statistics ( microstate_accounting ) . [ \#{ counters =&gt; \#{ aux =&gt; 1899182914 , check_io =&gt; 2605863602 , emulator =&gt; 45731880463 , gc =&gt; 1512206910 , other =&gt; 5421338456 , port =&gt; 221631 , sleep =&gt; 5150294100 } , id =&gt; 1 , type =&gt; scheduler } | . . . ] The time unit is the same as returned by os:perf_counter/0 . So, to convert it to milliseconds, you can do something like this: lists : map ( fun ( \#{ counters := Cnt } = M ) -&gt; MsCnt = maps : map ( fun ( _ K , PerfCount ) -&gt; erlang : convert_time_unit ( PerfCount , perf_counter , 1000 ) end , Cnt ) , M \#{ counters := MsCnt } end , erlang : statistics ( microstate_accounting ) ) . Notice that these values are not guaranteed to be the exact time spent in each state. This is because of various optimisation done to keep the overhead as small as possible. MSAcc_Thread_Type s: scheduler The main execution threads that do most of the work. See erl +S for more details. dirty_cpu_scheduler The threads for long running cpu intensive work. See erl +SDcpu for more details. dirty_io_scheduler The threads for long running I/O work. See erl +SDio for more details. async Async threads are used by various linked-in drivers (mainly the file drivers) do offload non-CPU intensive work. See erl +A for more details. aux Takes care of any work that is not specifically assigned to a scheduler. poll Does the IO polling for the emulator. See erl +IOt for more details. The following MSAcc_Thread_State s are available. All states are exclusive, meaning that a thread cannot be in two states at once. So, if you add the numbers of all counters in a thread, you get the total runtime for that thread. aux Time spent handling auxiliary jobs. check_io Time spent checking for new I/O events. emulator Time spent executing Erlang processes. gc Time spent doing garbage collection. When extra states are enabled this is the time spent doing non-fullsweep garbage collections. other Time spent doing unaccounted things. port Time spent executing ports. sleep Time spent sleeping. More fine-grained MSAcc_Thread_State s can be added through configure (such as ./configure --with-microstate-accounting=extra ). Enabling these states causes performance degradation when microstate accounting is turned off and increases the overhead when it is turned on. alloc Time spent managing memory. Without extra states this time is spread out over all other states. bif Time spent in BIFs. Without extra states this time is part of the emulator state. busy_wait Time spent busy waiting. This is also the state where a scheduler no longer reports that it is active when using statistics(scheduler_wall_time) . So, if you add all other states but this and sleep, and then divide that by all time in the thread, you should get something very similar to the scheduler_wall_time fraction. Without extra states this time is part of the other state. ets Time spent executing ETS BIFs. Without extra states this time is part of the emulator state. gc_full Time spent doing fullsweep garbage collection. Without extra states this time is part of the gc state. nif Time spent in NIFs. Without extra states this time is part of the emulator state. send Time spent sending messages (processes only). Without extra states this time is part of the emulator state. timers Time spent managing timers. Without extra states this time is part of the other state. The utility module msacc(3) can be used to more easily analyse these statistics. Returns undefined if system flag microstate_accounting is turned off. The list of thread information is unsorted and can appear in different order between calls. The threads and states are subject to change without any prior notice.","ref":"erlang.html#statistics/1","title":"erlang.statistics/1","type":"function"},{"doc":"Returns information about reductions, for example: &gt; statistics ( reductions ) . { 2046 , 11 } As from ERTS 5.5 (Erlang/OTP R11B), this value does not include reductions performed in current time slices of currently scheduled processes. If an exact value is wanted, use statistics(exact_reductions) .","ref":"erlang.html#statistics/1","title":"erlang.statistics/1","type":"function"},{"doc":"Returns the total length of all normal and dirty CPU run queues. That is, queued work that is expected to be CPU bound. The information is gathered atomically. That is, the result is a consistent snapshot of the state, but this operation is much more expensive compared to statistics(total_run_queue_lengths) , especially when a large amount of schedulers is used.","ref":"erlang.html#statistics/1","title":"erlang.statistics/1","type":"function"},{"doc":"Returns the same as statistics(run_queue_lengths_all) with the exception that no information about the dirty IO run queue is part of the result. That is, only run queues with work that is expected to be CPU bound is part of the result.","ref":"erlang.html#statistics/1","title":"erlang.statistics/1","type":"function"},{"doc":"Returns a list where each element represents the amount of processes and ports ready to run for each run queue. Values for normal run queues are located first in the resulting list. The first element corresponds to the normal run queue of scheduler number 1 and so on. If support for dirty schedulers exist, values for the dirty CPU run queue and the dirty IO run queue follow (in that order) at the end. The information is not gathered atomically. That is, the result is not necessarily a consistent snapshot of the state, but instead quite efficiently gathered. Each normal scheduler has one run queue that it manages. If dirty schedulers schedulers are supported, all dirty CPU schedulers share one run queue, and all dirty IO schedulers share one run queue. That is, we have multiple normal run queues, one dirty CPU run queue and one dirty IO run queue. Work can not migrate between the different types of run queues. Only work in normal run queues can migrate to other normal run queues. This has to be taken into account when evaluating the result. See also statistics(run_queue_lengths) , statistics(total_run_queue_lengths_all) , statistics(total_run_queue_lengths) , statistics(active_tasks) , statistics(active_tasks_all) , and statistics(total_active_tasks) , statistics(total_active_tasks_all) .","ref":"erlang.html#statistics/1","title":"erlang.statistics/1","type":"function"},{"doc":"Returns information about runtime, in milliseconds. This is the sum of the runtime for all threads in the Erlang runtime system and can therefore be greater than the wall clock time. This value might wrap due to limitations in the underlying functionality provided by the operating system that is used. Example: &gt; statistics ( runtime ) . { 1690 , 1620 }","ref":"erlang.html#statistics/1","title":"erlang.statistics/1","type":"function"},{"doc":"Returns information describing how much time normal and dirty CPU schedulers in the system have been busy. This value is normally a better indicator of how much load an Erlang node is under instead of looking at the CPU utilization privided by tools such as top or sysstat . This is because scheduler_wall_time also includes time where the scheduler is waiting for some other reasource (such as an internal mutex) to be available but does not use the CPU. In order to better understand what a scheduler is busy doing you can use microstate accounting . The definition of a busy scheduler is when it is not idle and not busy waiting for new work, that is: Executing process code Executing linked-in driver or NIF code Executing BIFs, or any other runtime handling Garbage collecting Handling any other memory management Notice that a scheduler can also be busy even if the OS has scheduled out the scheduler thread. It is recommended to use the module scheduler instead of this function directly as it provides an easier way to get the information that you usually want. If enabled this function returns a list of tuples with {SchedulerId, ActiveTime, TotalTime} , where SchedulerId is an integer ID of the scheduler, ActiveTime is the duration the scheduler has been busy, and TotalTime is the total time duration since scheduler_wall_time activation for the specific scheduler. The time unit returned is undefined and can be subject to change between releases, OSs, and system restarts. scheduler_wall_time is only to be used to calculate relative values for scheduler utilization. The ActiveTime can never exceed TotalTime . The list of scheduler information is unsorted and can appear in different order between calls. The disabled this function returns undefined . The activation time can differ significantly between schedulers. Currently dirty schedulers are activated at system start while normal schedulers are activated some time after the scheduler_wall_time functionality is enabled. Only information about schedulers that are expected to handle CPU bound work is included in the return values from this function. If you also want information about dirty I/O schedulers , use statistics(scheduler_wall_time_all) instead. Normal schedulers will have scheduler identifiers in the range 1 =&lt; SchedulerId =&lt; erlang:system_info(schedulers) . Dirty CPU schedulers will have scheduler identifiers in the range erlang:system_info(schedulers) &lt; SchedulerId =&lt; erlang:system_info(schedulers) + erlang:system_info(dirty_cpu_schedulers) . The different types of schedulers handle specific types of jobs. Every job is assigned to a specific scheduler type. Jobs can migrate between different schedulers of the same type, but never between schedulers of different types. This fact has to be taken under consideration when evaluating the result returned. You can use scheduler_wall_time to calculate scheduler utilization. First you take a sample of the values returned by erlang:statistics(scheduler_wall_time) . &gt; erlang : system_flag ( scheduler_wall_time , true ) . false &gt; Ts0 = lists : sort ( erlang : statistics ( scheduler_wall_time ) ) , ok . ok Some time later the user takes another snapshot and calculates scheduler utilization per scheduler, for example: &gt; Ts1 = lists : sort ( erlang : statistics ( scheduler_wall_time ) ) , ok . ok &gt; lists : map ( fun ( { { I , A0 , T0 } , { I , A1 , T1 } } ) -&gt; { I , ( A1 - A0 ) / ( T1 - T0 ) } end , lists : zip ( Ts0 , Ts1 ) ) . [ { 1 , 0.9743474730177548 } , { 2 , 0.9744843782751444 } , { 3 , 0.9995902361669045 } , { 4 , 0.9738012596572161 } , { 5 , 0.9717956667018103 } , { 6 , 0.9739235846420741 } , { 7 , 0.973237033077876 } , { 8 , 0.9741297293248656 } ] Using the same snapshots to calculate a total scheduler utilization: &gt; { A , T } = lists : foldl ( fun ( { { _ , A0 , T0 } , { _ , A1 , T1 } } , { Ai , Ti } ) -&gt; { Ai + ( A1 - A0 ) , Ti + ( T1 - T0 ) } end , { 0 , 0 } , lists : zip ( Ts0 , Ts1 ) ) , TotalSchedulerUtilization = A / T . 0.9769136803764825 Total scheduler utilization will equal 1.0 when all schedulers have been active all the time between the two measurements. Another (probably more) useful value is to calculate total scheduler utilization weighted against maximum amount of available CPU time: &gt; WeightedSchedulerUtilization = ( TotalSchedulerUtilization * ( erlang : system_info ( schedulers ) + erlang : system_info ( dirty_cpu_schedulers ) ) ) / erlang : system_info ( logical_processors_available ) . 0.9769136803764825 This weighted scheduler utilization will reach 1.0 when schedulers are active the same amount of time as maximum available CPU time. If more schedulers exist than available logical processors, this value may be greater than 1.0 . As of ERTS version 9.0, the Erlang runtime system will as default have more schedulers than logical processors. This due to the dirty schedulers. scheduler_wall_time is by default disabled. To enable it, use erlang:system_flag(scheduler_wall_time, true) .","ref":"erlang.html#statistics/1","title":"erlang.statistics/1","type":"function"},{"doc":"The same as statistics(scheduler_wall_time) , except that it also include information about all dirty I/O schedulers. Dirty IO schedulers will have scheduler identifiers in the range erlang:system_info(schedulers) + erlang:system_info(dirty_cpu_schedulers) &lt; SchedulerId =&lt; erlang:system_info(schedulers) + erlang:system_info(dirty_cpu_schedulers) + erlang:system_info(dirty_io_schedulers) . Note that work executing on dirty I/O schedulers are expected to mainly wait for I/O. That is, when you get high scheduler utilization on dirty I/O schedulers, CPU utilization is not expected to be high due to this work.","ref":"erlang.html#statistics/1","title":"erlang.statistics/1","type":"function"},{"doc":"The same as calling lists:sum( statistics(active_tasks) ) , but more efficient.","ref":"erlang.html#statistics/1","title":"erlang.statistics/1","type":"function"},{"doc":"The same as calling lists:sum( statistics(active_tasks_all) ) , but more efficient.","ref":"erlang.html#statistics/1","title":"erlang.statistics/1","type":"function"},{"doc":"The same as calling lists:sum( statistics(run_queue_lengths) ) , but more efficient.","ref":"erlang.html#statistics/1","title":"erlang.statistics/1","type":"function"},{"doc":"The same as calling lists:sum( statistics(run_queue_lengths_all) ) , but more efficient.","ref":"erlang.html#statistics/1","title":"erlang.statistics/1","type":"function"},{"doc":"Returns information about wall clock. wall_clock can be used in the same manner as runtime , except that real time is measured as opposed to runtime or CPU time.","ref":"erlang.html#statistics/1","title":"erlang.statistics/1","type":"function"},{"doc":"Suspends the process identified by Suspendee . The same as calling erlang:suspend_process(Suspendee, []) . This BIF is intended for debugging only.","ref":"erlang.html#suspend_process/1","title":"erlang.suspend_process/1","type":"function"},{"doc":"Increases the suspend count on the process identified by Suspendee and puts it in the suspended state if it is not already in that state. A suspended process is not scheduled for execution until the process has been resumed. A process can be suspended by multiple processes and can be suspended multiple times by a single process. A suspended process does not leave the suspended state until its suspend count reaches zero. The suspend count of Suspendee is decreased when erlang:resume_process(Suspendee) is called by the same process that called erlang:suspend_process(Suspendee) . All increased suspend counts on other processes acquired by a process are automatically decreased when the process terminates. Options ( Opt s): asynchronous A suspend request is sent to the process identified by Suspendee . Suspendee eventually suspends unless it is resumed before it could suspend. The caller of erlang:suspend_process/2 returns immediately, regardless of whether Suspendee has suspended yet or not. The point in time when Suspendee suspends cannot be deduced from other events in the system. It is only guaranteed that Suspendee eventually suspends (unless it is resumed). If no asynchronous options has been passed, the caller of erlang:suspend_process/2 is blocked until Suspendee has suspended. {asynchronous, ReplyTag} A suspend request is sent to the process identified by Suspendee . When the suspend request has been processed, a reply message is sent to the caller of this function. The reply is on the form {ReplyTag, State} where State is either: exited Suspendee has exited. suspended Suspendee is now suspended. not_suspended Suspendee is not suspended. This can only happen when the process that issued this request, have called resume_process(Suspendee) before getting the reply. Appart from the reply message, the {asynchronous, ReplyTag} option behaves exactly the same as the asynchronous option without reply tag. unless_suspending The process identified by Suspendee is suspended unless the calling process already is suspending Suspendee . If unless_suspending is combined with option asynchronous , a suspend request is sent unless the calling process already is suspending Suspendee or if a suspend request already has been sent and is in transit. If the calling process already is suspending Suspendee , or if combined with option asynchronous and a send request already is in transit, false is returned and the suspend count on Suspendee remains unchanged. If the suspend count on the process identified by Suspendee is increased, true is returned, otherwise false . This BIF is intended for debugging only. You can easily create deadlocks if processes suspends each other (directly or in circles). In ERTS versions prior to ERTS version 10.0, the runtime system prevented such deadlocks, but this prevention has now been removed due to performance reasons. Failures: badarg If Suspendee is not a process identifier. badarg If the process identified by Suspendee is the same process as the process calling erlang:suspend_process/2 . badarg If the process identified by Suspendee is not alive. badarg If the process identified by Suspendee resides on another node. badarg If OptList is not a proper list of valid Opt s. system_limit If the process identified by Suspendee has been suspended more times by the calling process than can be represented by the currently used internal data structures. The system limit is greater than 2,000,000,000 suspends and will never be lower.","ref":"erlang.html#suspend_process/2","title":"erlang.suspend_process/2","type":"function"},{"doc":"Sets the maximum depth of call stack back-traces in the exit reason element of 'EXIT' tuples. The flag also limits the stacktrace depth returned by process_info item current_stacktrace. Returns the old value of the flag.","ref":"erlang.html#system_flag/2","title":"erlang.system_flag/2","type":"function"},{"doc":"This argument is deprecated. Instead of using this argument, use command-line argument +sct in erl(1) . When this argument is removed, a final CPU topology to use is determined at emulator boot time. Sets the user-defined CpuTopology . The user-defined CPU topology overrides any automatically detected CPU topology. By passing undefined as CpuTopology , the system reverts to the CPU topology automatically detected. The returned value equals the value returned from erlang:system_info(cpu_topology) before the change was made. Returns the old value of the flag. The CPU topology is used when binding schedulers to logical processors. If schedulers are already bound when the CPU topology is changed, the schedulers are sent a request to rebind according to the new CPU topology. The user-defined CPU topology can also be set by passing command-line argument +sct to erl(1) . For information on type CpuTopology and more, see erlang:system_info(cpu_topology) as well as command-line flags +sct and +sbt in erl(1) .","ref":"erlang.html#system_flag/2","title":"erlang.system_flag/2","type":"function"},{"doc":"Sets the number of dirty CPU schedulers online. Range is 1 &lt;= DirtyCPUSchedulersOnline &lt;= N , where N is the smallest of the return values of erlang:system_info(dirty_cpu_schedulers) and erlang:system_info(schedulers_online) . Returns the old value of the flag. The number of dirty CPU schedulers online can change if the number of schedulers online changes. For example, if 12 schedulers and 6 dirty CPU schedulers are online, and system_flag/2 is used to set the number of schedulers online to 6, then the number of dirty CPU schedulers online is automatically decreased by half as well, down to 3. Similarly, the number of dirty CPU schedulers online increases proportionally to increases in the number of schedulers online. For more information, see erlang:system_info(dirty_cpu_schedulers) and erlang:system_info(dirty_cpu_schedulers_online) .","ref":"erlang.html#system_flag/2","title":"erlang.system_flag/2","type":"function"},{"doc":"Sets system flags for erts_alloc(3) . Alloc is the allocator to affect, for example binary_alloc . F is the flag to change and V is the new value. Only a subset of all erts_alloc flags can be changed at run time. This subset is currently only the flag sbct . Returns ok if the flag was set or notsup if not supported by erts_alloc .","ref":"erlang.html#system_flag/2","title":"erlang.system_flag/2","type":"function"},{"doc":"Sets system flag fullsweep_after . Number is a non-negative integer indicating how many times generational garbage collections can be done without forcing a fullsweep collection. The value applies to new processes, while processes already running are not affected. Returns the old value of the flag. In low-memory systems (especially without virtual memory), setting the value to 0 can help to conserve memory. This value can also be set through (OS) environment variable ERL_FULLSWEEP_AFTER .","ref":"erlang.html#system_flag/2","title":"erlang.system_flag/2","type":"function"},{"doc":"Turns on/off microstate accounting measurements. When passing reset, all counters are reset to 0. For more information see statistics(microstate_accounting) .","ref":"erlang.html#system_flag/2","title":"erlang.system_flag/2","type":"function"},{"doc":"Sets the default minimum heap size for processes. The size is specified in words. The new min_heap_size effects only processes spawned after the change of min_heap_size has been made. min_heap_size can be set for individual processes by using spawn_opt/4 or process_flag/2 . Returns the old value of the flag.","ref":"erlang.html#system_flag/2","title":"erlang.system_flag/2","type":"function"},{"doc":"Sets the default minimum binary virtual heap size for processes. The size is specified in words. The new min_bin_vhheap_size effects only processes spawned after the change of min_bin_vheap_size has been made. min_bin_vheap_size can be set for individual processes by using spawn_opt/2,3,4 or process_flag/2 . Returns the old value of the flag.","ref":"erlang.html#system_flag/2","title":"erlang.system_flag/2","type":"function"},{"doc":"Sets the default maximum heap size settings for processes. The size is specified in words. The new max_heap_size effects only processes spawned efter the change has been made. max_heap_size can be set for individual processes using spawn_opt/2,3,4 or process_flag/2 . Returns the old value of the flag.","ref":"erlang.html#system_flag/2","title":"erlang.system_flag/2","type":"function"},{"doc":"If multi-scheduling is enabled, more than one scheduler thread is used by the emulator. Multi-scheduling can be blocked in two different ways. Either all schedulers but one is blocked, or all normal schedulers but one is blocked. When only normal schedulers are blocked, dirty schedulers are free to continue to schedule processes. If BlockState =:= block , multi-scheduling is blocked. That is, one and only one scheduler thread will execute. If BlockState =:= unblock and no one else blocks multi-scheduling, and this process has blocked only once, multi-scheduling is unblocked. If BlockState =:= block_normal , normal multi-scheduling is blocked. That is, only one normal scheduler thread will execute, but multiple dirty schedulers can execute. If BlockState =:= unblock_normal and no one else blocks normal multi-scheduling, and this process has blocked only once, normal multi-scheduling is unblocked. One process can block multi-scheduling and normal multi-scheduling multiple times. If a process has blocked multiple times, it must unblock exactly as many times as it has blocked before it has released its multi-scheduling block. If a process that has blocked multi-scheduling or normal multi-scheduling exits, it automatically releases its blocking of multi-scheduling and normal multi-scheduling. The return values are disabled , blocked , blocked_normal , or enabled . The returned value describes the state just after the call to erlang:system_flag(multi_scheduling, BlockState) has been made. For information about the return values, see erlang:system_info(multi_scheduling) . Blocking of multi-scheduling and normal multi-scheduling is normally not needed. If you feel that you need to use these features, consider it a few more times again. Blocking multi-scheduling is only to be used as a last resort, as it is most likely a very inefficient way to solve the problem. See also erlang:system_info(multi_scheduling) , erlang:system_info(normal_multi_scheduling_blockers) , erlang:system_info(multi_scheduling_blockers) , and erlang:system_info(schedulers) .","ref":"erlang.html#system_flag/2","title":"erlang.system_flag/2","type":"function"},{"doc":"This argument is deprecated. Instead of using this argument, use command-line argument +sbt in erl(1) . When this argument is removed, a final scheduler bind type to use is determined at emulator boot time. Controls if and how schedulers are bound to logical processors. When erlang:system_flag(scheduler_bind_type, How) is called, an asynchronous signal is sent to all schedulers online, causing them to try to bind or unbind as requested. If a scheduler fails to bind, this is often silently ignored, as it is not always possible to verify valid logical processor identifiers. If an error is reported, an error event is logged. To verify that the schedulers have bound as requested, call erlang:system_info(scheduler_bindings) . Schedulers can be bound on newer Linux, Solaris, FreeBSD, and Windows systems, but more systems will be supported in future releases. In order for the runtime system to be able to bind schedulers, the CPU topology must be known. If the runtime system fails to detect the CPU topology automatically, it can be defined. For more information on how to define the CPU topology, see command-line flag +sct in erl(1) . The runtime system does by default not bind schedulers to logical processors. If the Erlang runtime system is the only OS process binding threads to logical processors, this improves the performance of the runtime system. However, if other OS processes (for example, another Erlang runtime system) also bind threads to logical processors, there can be a performance penalty instead. Sometimes this performance penalty can be severe. If so, it is recommended to not bind the schedulers. Schedulers can be bound in different ways. Argument How determines how schedulers are bound and can be any of the following: unbound Same as command-line argument +sbt u in erl(1) . no_spread Same as command-line argument +sbt ns in erl(1) . thread_spread Same as command-line argument +sbt ts in erl(1) . processor_spread Same as command-line argument +sbt ps in erl(1) . spread Same as command-line argument +sbt s in erl(1) . no_node_thread_spread Same as command-line argument +sbt nnts in erl(1) . no_node_processor_spread Same as command-line argument +sbt nnps in erl(1) . thread_no_node_processor_spread Same as command-line argument +sbt tnnps in erl(1) . default_bind Same as command-line argument +sbt db in erl(1) . The returned value equals How before flag scheduler_bind_type was changed. Failures: notsup If binding of schedulers is not supported. badarg If How is not one of the documented alternatives. badarg If CPU topology information is unavailable. The scheduler bind type can also be set by passing command-line argument +sbt to erl(1) . For more information, see erlang:system_info(scheduler_bind_type) , erlang:system_info(scheduler_bindings) , as well as command-line flags +sbt and +sct in erl(1) .","ref":"erlang.html#system_flag/2","title":"erlang.system_flag/2","type":"function"},{"doc":"Turns on or off scheduler wall time measurements. For more information, see statistics(scheduler_wall_time) .","ref":"erlang.html#system_flag/2","title":"erlang.system_flag/2","type":"function"},{"doc":"Sets the number of schedulers online. Range is 1 &lt;= SchedulersOnline &lt;= erlang:system_info(schedulers) . Returns the old value of the flag. If the emulator was built with support for dirty schedulers , changing the number of schedulers online can also change the number of dirty CPU schedulers online. For example, if 12 schedulers and 6 dirty CPU schedulers are online, and system_flag/2 is used to set the number of schedulers online to 6, then the number of dirty CPU schedulers online is automatically decreased by half as well, down to 3. Similarly, the number of dirty CPU schedulers online increases proportionally to increases in the number of schedulers online. For more information, see erlang:system_info(schedulers) and erlang:system_info(schedulers_online) .","ref":"erlang.html#system_flag/2","title":"erlang.system_flag/2","type":"function"},{"doc":"Sets the process that will receive the logging messages generated by ERTS. If set to undefined , all logging messages generated by ERTS will be dropped. The messages will be in the format: { log , Level , Format , ArgList , Metadata } where Level = atom ( ) , Format = string ( ) , ArgList = list ( term ( ) ) , Metadata = \#{ pid =&gt; pid ( ) , group_leader =&gt; pid ( ) , time := logger : timestamp ( ) , error_logger := \#{ emulator := true , tag := atom ( ) } If the system_logger process dies, this flag will be reset to logger . The default is the process named logger . Returns the old value of the flag. This function is designed to be used by the KERNEL logger . Be careful if you change it to something else as log messages may be lost. If you want to intercept emulator log messages, do it by adding a specialized handler to the KERNEL logger.","ref":"erlang.html#system_flag/2","title":"erlang.system_flag/2","type":"function"},{"doc":"Sets the value of the node trace control word to TCW , which is to be an unsigned integer. For more information, see function set_tcw in section &quot;Match Specifications in Erlang&quot; in the User's Guide. Returns the old value of the flag.","ref":"erlang.html#system_flag/2","title":"erlang.system_flag/2","type":"function"},{"doc":"Finalizes the time offset when single time warp mode is used. If another time warp mode is used, the time offset state is left unchanged. Returns the old state identifier, that is: If preliminary is returned, finalization was performed and the time offset is now final. If final is returned, the time offset was already in the final state. This either because another erlang:system_flag(time_offset, finalize) call or because no time warp mode is used. If volatile is returned, the time offset cannot be finalized because multi-time warp mode is used.","ref":"erlang.html#system_flag/2","title":"erlang.system_flag/2","type":"function"},{"doc":"Returns information about the current system. The documentation of this function is broken into the following sections in order to make it easier to navigate. Memory Allocation allocated_areas , allocator , alloc_util_allocators , allocator_sizes CPU Topology cpu_topology , logical_processors , update_cpu_info Process Information fullsweep_after , garbage_collection , heap_sizes , heap_type , max_heap_size , message_queue_data , min_heap_size , min_bin_vheap_size , procs System Limits atom_count , atom_limit , ets_count , ets_limit , port_count , port_limit , process_count , process_limit System Time end_time , os_monotonic_time_source , os_system_time_source , start_time , time_correction , time_offset , time_warp_mode , tolerant_timeofday Scheduler Information dirty_cpu_schedulers , dirty_cpu_schedulers_online , dirty_io_schedulers , multi_scheduling , multi_scheduling_blockers , normal_multi_scheduling_blockers , scheduler_bind_type , scheduler_bindings , scheduler_id , schedulers , smp_support , threads , thread_pool_size Distribution Information creation , delayed_node_table_gc , dist , dist_buf_busy_limit , dist_ctrl System Information c_compiler_used , check_io , compat_rel , debug_compiled , driver_version , dynamic_trace , dynamic_trace_probes , emu_flavor , emu_type , info , kernel_poll , loaded , machine , modified_timing_level , nif_version , otp_release , port_parallelism , system_architecture , system_logger , system_version , trace_control_word , version , wordsize","ref":"erlang.html#system_info/1","title":"erlang.system_info/1","type":"function"},{"doc":"Returns various information about the memory allocators of the current system (emulator) as specified by Item : allocated_areas Returns a list of tuples with information about miscellaneous allocated memory areas. Each tuple contains an atom describing the type of memory as first element and the amount of allocated memory in bytes as second element. When information about allocated and used memory is present, also a third element is present, containing the amount of used memory in bytes. erlang:system_info(allocated_areas) is intended for debugging, and the content is highly implementation-dependent. The content of the results therefore changes when needed without prior notice. Notice that the sum of these values is not the total amount of memory allocated by the emulator. Some values are part of other values, and some memory areas are not part of the result. For information about the total amount of memory allocated by the emulator, see erlang:memory/0,1 . allocator Returns {Allocator, Version, Features, Settings , where: Allocator corresponds to the malloc() implementation used. If Allocator equals undefined , the malloc() implementation used cannot be identified. glibc can be identified. Version is a list of integers (but not a string) representing the version of the malloc() implementation used. Features is a list of atoms representing the allocation features used. Settings is a list of subsystems, their configurable parameters, and used values. Settings can differ between different combinations of platforms, allocators, and allocation features. Memory sizes are given in bytes. See also &quot;System Flags Effecting erts_alloc&quot; in erts_alloc(3) . {allocator, Alloc} Returns information about the specified allocator. As from ERTS 5.6.1, the return value is a list of {instance, InstanceNo, InstanceInfo} tuples, where InstanceInfo contains information about a specific instance of the allocator. If Alloc is not a recognized allocator, undefined is returned. If Alloc is disabled, false is returned. Notice that the information returned is highly implementation-dependent and can be changed or removed at any time without prior notice. It was initially intended as a tool when developing new allocators, but as it can be of interest for others it has been briefly documented. The recognized allocators are listed in erts_alloc(3) . Information about super carriers can be obtained from ERTS 8.0 with {allocator, erts_mmap} or from ERTS 5.10.4; the returned list when calling with {allocator, mseg_alloc} also includes an {erts_mmap, _} tuple as one element in the list. After reading the erts_alloc(3) documentation, the returned information more or less speaks for itself, but it can be worth explaining some things. Call counts are presented by two values, the first value is giga calls, and the second value is calls. mbcs and sbcs denote multi-block carriers, and single-block carriers, respectively. Sizes are presented in bytes. When a size is not presented, it is the amount of something. Sizes and amounts are often presented by three values: The first is the current value. The second is the maximum value since the last call to erlang:system_info({allocator, Alloc}) . The third is the maximum value since the emulator was started. If only one value is present, it is the current value. fix_alloc memory block types are presented by two values. The first value is the memory pool size and the second value is the used memory size. alloc_util_allocators Returns a list of the names of all allocators using the ERTS internal alloc_util framework as atoms. For more information, see section The alloc_util framework in erts_alloc(3) . {allocator_sizes, Alloc} Returns various size information for the specified allocator. The information returned is a subset of the information returned by erlang:system_info({allocator, Alloc}) .","ref":"erlang.html#system_info/1","title":"erlang.system_info/1","type":"function"},{"doc":"All LevelEntry s of a list must contain the same LevelTag , except on the top level where both node and processor LevelTag s can coexist. The info_list() can be extended in a future release. {LevelTag, SubLevel} == {LevelTag, [], SubLevel} More LevelTag s can be introduced in a future release. Returns various information about the CPU topology of the current system (emulator) as specified by Item : cpu_topology Returns the CpuTopology currently used by the emulator. The CPU topology is used when binding schedulers to logical processors. The CPU topology used is the user-defined CPU topology , if such exists, otherwise the automatically detected CPU topology , if such exists. If no CPU topology exists, undefined is returned. node refers to Non-Uniform Memory Access (NUMA) nodes. thread refers to hardware threads (for example, Intel hyper-threads). A level in term CpuTopology can be omitted if only one entry exists and InfoList is empty. thread can only be a sublevel to core . core can be a sublevel to processor or node . processor can be on the top level or a sublevel to node . node can be on the top level or a sublevel to processor . That is, NUMA nodes can be processor internal or processor external. A CPU topology can consist of a mix of processor internal and external NUMA nodes, as long as each logical CPU belongs to one NUMA node. Cache hierarchy is not part of the CpuTopology type, but will be in a future release. Other things can also make it into the CPU topology in a future release. So, expect the CpuTopology type to change. {cpu_topology, defined} Returns the user-defined CpuTopology . For more information, see command-line flag +sct in erl(1) and argument cpu_topology . {cpu_topology, detected} Returns the automatically detected CpuTopologyy . The emulator detects the CPU topology on some newer Linux, Solaris, FreeBSD, and Windows systems. On Windows system with more than 32 logical processors, the CPU topology is not detected. For more information, see argument cpu_topology . {cpu_topology, used} Returns CpuTopology used by the emulator. For more information, see argument cpu_topology . logical_processors Returns the detected number of logical processors configured in the system. The return value is either an integer, or the atom unknown if the emulator cannot detect the configured logical processors. logical_processors_available Returns the detected number of logical processors available to the Erlang runtime system. The return value is either an integer, or the atom unknown if the emulator cannot detect the available logical processors. The number of available logical processors is less than or equal to the number of logical processors online . logical_processors_online Returns the detected number of logical processors online on the system. The return value is either an integer, or the atom unknown if the emulator cannot detect logical processors online. The number of logical processors online is less than or equal to the number of logical processors configured . cpu_quota Returns the detected CPU quota the emulator is limited by. The return value is an integer saying how many processors' worth of runtime we get (between 1 and the number of logical processors), or the atom unknown if the emulator cannot detect a quota. update_cpu_info The runtime system rereads the CPU information available and updates its internally stored information about the detected CPU topology and the number of logical processors configured , online , available , and cpu quota . If the CPU information has changed since the last time it was read, the atom changed is returned, otherwise the atom unchanged . If the CPU information has changed, you probably want to adjust the number of schedulers online . You typically want to have as many schedulers online as logical processors available .","ref":"erlang.html#system_info/1","title":"erlang.system_info/1","type":"function"},{"doc":"Returns information about the default process heap settings: fullsweep_after Returns {fullsweep_after, integer() &gt;= 0} , which is the fullsweep_after garbage collection setting used by default. For more information, see garbage_collection described below. garbage_collection Returns a list describing the default garbage collection settings. A process spawned on the local node by a spawn or spawn_link uses these garbage collection settings. The default settings can be changed by using erlang:system_flag/2 . spawn_opt/2,3,4 can spawn a process that does not use the default settings. heap_sizes Returns a list of integers representing valid heap sizes in words. All Erlang heaps are sized from sizes in this list. heap_type Returns the heap type used by the current emulator. One heap type exists: private Each process has a heap reserved for its use and no references between heaps of different processes are allowed. Messages passed between processes are copied between heaps. max_heap_size Returns {max_heap_size, MaxHeapSize} , where MaxHeapSize is the current system-wide maximum heap size settings for spawned processes. This setting can be set using the command-line flags +hmax , +hmaxk and +hmaxel in erl(1) . It can also be changed at runtime using erlang:system_flag(max_heap_size, MaxHeapSize) . For more details about the max_heap_size process flag, see process_flag(max_heap_size, MaxHeapSize) . message_queue_data Returns the default value of the message_queue_data process flag, which can be either off_heap or on_heap . The default value is set by the command-line argument +hmqd in erl(1) . For more information, see the documentation of process_flag(message_queue_data, MQD) . min_heap_size Returns {min_heap_size, MinHeapSize} , where MinHeapSize is the current system-wide minimum heap size for spawned processes. min_bin_vheap_size Returns {min_bin_vheap_size, MinBinVHeapSize} , where MinBinVHeapSize is the current system-wide minimum binary virtual heap size for spawned processes. procs Returns a binary containing a string of process and port information formatted as in Erlang crash dumps. For more information, see section How to interpret the Erlang crash dumps in the User's Guide.","ref":"erlang.html#system_info/1","title":"erlang.system_info/1","type":"function"},{"doc":"Returns information about the current system (emulator) limits as specified by Item : atom_count Returns the number of atoms currently existing at the local node. The value is given as an integer. atom_limit Returns the maximum number of atoms allowed. This limit can be increased at startup by passing command-line flag +t to erl(1) . ets_count Returns the number of ETS tables currently existing at the local node. ets_limit Returns the limit for number of ETS tables. This limit is partially obsolete and number of tables are only limited by available memory. port_count Returns the number of ports currently existing at the local node. The value is given as an integer. This is the same value as returned by length(erlang:ports()) , but more efficient. port_limit Returns the maximum number of simultaneously existing ports at the local node as an integer. This limit can be configured at startup by using command-line flag +Q in erl(1) . process_count Returns the number of processes currently existing at the local node. The value is given as an integer. This is the same value as returned by length(processes()) , but more efficient. process_limit Returns the maximum number of simultaneously existing processes at the local node. The value is given as an integer. This limit can be configured at startup by using command-line flag +P in erl(1) .","ref":"erlang.html#system_info/1","title":"erlang.system_info/1","type":"function"},{"doc":"Returns information about the current system (emulator) time as specified by Item : end_time The last Erlang monotonic time in native time unit that can be represented internally in the current Erlang runtime system instance. The time between the start time and the end time is at least a quarter of a millennium. os_monotonic_time_source Returns a list containing information about the source of OS monotonic time that is used by the runtime system. If [] is returned, no OS monotonic time is available. The list contains two-tuples with Key s as first element, and Value s as second element. The order of these tuples is undefined. The following tuples can be part of the list, but more tuples can be introduced in the future: {function, Function} Function is the name of the function used. This tuple always exists if OS monotonic time is available to the runtime system. {clock_id, ClockId} This tuple only exists if Function can be used with different clocks. ClockId corresponds to the clock identifier used when calling Function . {resolution, OsMonotonicTimeResolution} Highest possible resolution of current OS monotonic time source as parts per second. If no resolution information can be retrieved from the OS, OsMonotonicTimeResolution is set to the resolution of the time unit of Function s return value. That is, the actual resolution can be lower than OsMonotonicTimeResolution . Notice that the resolution does not say anything about the accuracy or whether the precision aligns with the resolution. You do, however, know that the precision is not better than OsMonotonicTimeResolution . {extended, Extended} Extended equals yes if the range of time values has been extended; otherwise Extended equals no . The range must be extended if Function returns values that wrap fast. This typically is the case when the return value is a 32-bit value. {parallel, Parallel} Parallel equals yes if Function is called in parallel from multiple threads. If it is not called in parallel, because calls must be serialized, Parallel equals no . {time, OsMonotonicTime} OsMonotonicTime equals current OS monotonic time in native time unit . os_system_time_source Returns a list containing information about the source of OS system time that is used by the runtime system. The list contains two-tuples with Key s as first element, and Value s as second element. The order of these tuples is undefined. The following tuples can be part of the list, but more tuples can be introduced in the future: {function, Function} Function is the name of the funcion used. {clock_id, ClockId} Exists only if Function can be used with different clocks. ClockId corresponds to the clock identifier used when calling Function . {resolution, OsSystemTimeResolution} Highest possible resolution of current OS system time source as parts per second. If no resolution information can be retrieved from the OS, OsSystemTimeResolution is set to the resolution of the time unit of Function s return value. That is, the actual resolution can be lower than OsSystemTimeResolution . Notice that the resolution does not say anything about the accuracy or whether the precision do align with the resolution. You do, however, know that the precision is not better than OsSystemTimeResolution . {parallel, Parallel} Parallel equals yes if Function is called in parallel from multiple threads. If it is not called in parallel, because calls needs to be serialized, Parallel equals no . {time, OsSystemTime} OsSystemTime equals current OS system time in native time unit . start_time The Erlang monotonic time in native time unit at the time when current Erlang runtime system instance started. See also erlang:system_info(end_time) . time_correction Returns a boolean value indicating whether time correction is enabled or not. time_offset Returns the state of the time offset: preliminary The time offset is preliminary, and will be changed and finalized later. The preliminary time offset is used during the preliminary phase of the single time warp mode. final The time offset is final. This either because no time warp mode is used, or because the time offset have been finalized when single time warp mode is used. volatile The time offset is volatile. That is, it can change at any time. This is because multi-time warp mode is used. time_warp_mode Returns a value identifying the time warp mode that is used: no_time_warp The no time warp mode is used. single_time_warp The single time warp mode is used. multi_time_warp The multi-time warp mode is used. tolerant_timeofday Returns whether a pre ERTS 7.0 backwards compatible compensation for sudden changes of system time is enabled or disabled . Such compensation is enabled when the time offset is final , and time correction is enabled.","ref":"erlang.html#system_info/1","title":"erlang.system_info/1","type":"function"},{"doc":"Returns information about schedulers, scheduling and threads in the current system as specified by Item : dirty_cpu_schedulers Returns the number of dirty CPU scheduler threads used by the emulator. Dirty CPU schedulers execute CPU-bound native functions, such as NIFs, linked-in driver code, and BIFs that cannot be managed cleanly by the normal emulator schedulers. The number of dirty CPU scheduler threads is determined at emulator boot time and cannot be changed after that. However, the number of dirty CPU scheduler threads online can be changed at any time. The number of dirty CPU schedulers can be set at startup by passing command-line flag +SDcpu or +SDPcpu in erl(1) . See also erlang:system_flag(dirty_cpu_schedulers_online, DirtyCPUSchedulersOnline) , erlang:system_info(dirty_cpu_schedulers_online) , erlang:system_info(dirty_io_schedulers) , erlang:system_info(schedulers) , erlang:system_info(schedulers_online) , and erlang:system_flag(schedulers_online, SchedulersOnline) . dirty_cpu_schedulers_online Returns the number of dirty CPU schedulers online. The return value satisfies 1 &lt;= DirtyCPUSchedulersOnline &lt;= N , where N is the smallest of the return values of erlang:system_info(dirty_cpu_schedulers) and erlang:system_info(schedulers_online) . The number of dirty CPU schedulers online can be set at startup by passing command-line flag +SDcpu in erl(1) . For more information, see erlang:system_info(dirty_cpu_schedulers) , erlang:system_info(dirty_io_schedulers) , erlang:system_info(schedulers_online) , and erlang:system_flag(dirty_cpu_schedulers_online, DirtyCPUSchedulersOnline) . dirty_io_schedulers Returns the number of dirty I/O schedulers as an integer. Dirty I/O schedulers execute I/O-bound native functions, such as NIFs and linked-in driver code, which cannot be managed cleanly by the normal emulator schedulers. This value can be set at startup by passing command-line argument +SDio in erl(1) . For more information, see erlang:system_info(dirty_cpu_schedulers) , erlang:system_info(dirty_cpu_schedulers_online) , and erlang:system_flag(dirty_cpu_schedulers_online, DirtyCPUSchedulersOnline) . multi_scheduling Returns one of the following: disabled The emulator has been started with only one scheduler thread. blocked The emulator has more than one scheduler thread, but all scheduler threads except one are blocked. That is, only one scheduler thread schedules Erlang processes and executes Erlang code. blocked_normal The emulator has more than one scheduler thread, but all normal scheduler threads except one are blocked. Notice that dirty schedulers are not blocked, and can schedule Erlang processes and execute native code. enabled The emulator has more than one scheduler thread, and no scheduler threads are blocked. That is, all available scheduler threads schedule Erlang processes and execute Erlang code. See also erlang:system_flag(multi_scheduling, BlockState) , erlang:system_info(multi_scheduling_blockers) , erlang:system_info(normal_multi_scheduling_blockers) , and erlang:system_info(schedulers) . multi_scheduling_blockers Returns a list of Pid s when multi-scheduling is blocked, otherwise the empty list is returned. The Pid s in the list represent all the processes currently blocking multi-scheduling. A Pid occurs only once in the list, even if the corresponding process has blocked multiple times. See also erlang:system_flag(multi_scheduling, BlockState) , erlang:system_info(multi_scheduling) , erlang:system_info(normal_multi_scheduling_blockers) , and erlang:system_info(schedulers) . normal_multi_scheduling_blockers Returns a list of Pid s when normal multi-scheduling is blocked (that is, all normal schedulers but one is blocked), otherwise the empty list is returned. The Pid s in the list represent all the processes currently blocking normal multi-scheduling. A Pid occurs only once in the list, even if the corresponding process has blocked multiple times. See also erlang:system_flag(multi_scheduling, BlockState) , erlang:system_info(multi_scheduling) , erlang:system_info(multi_scheduling_blockers) , and erlang:system_info(schedulers) . scheduler_bind_type Returns information about how the user has requested schedulers to be bound or not bound. Notice that although a user has requested schedulers to be bound, they can silently have failed to bind. To inspect the scheduler bindings, call erlang:system_info(scheduler_bindings) . For more information, see command-line argument +sbt in erl(1) and erlang:system_info(scheduler_bindings) . scheduler_bindings Returns information about the currently used scheduler bindings. A tuple of a size equal to erlang:system_info(schedulers) is returned. The tuple elements are integers or the atom unbound . Logical processor identifiers are represented as integers. The N th element of the tuple equals the current binding for the scheduler with the scheduler identifier equal to N . For example, if the schedulers are bound, element(erlang:system_info(scheduler_id), erlang:system_info(scheduler_bindings)) returns the identifier of the logical processor that the calling process is executing on. Notice that only schedulers online can be bound to logical processors. For more information, see command-line argument +sbt in erl(1) and erlang:system_info(schedulers_online) . scheduler_id Returns the scheduler ID ( SchedulerId ) of the scheduler thread that the calling process is executing on. SchedulerId is a positive integer, where 1 &lt;= SchedulerId &lt;= erlang:system_info(schedulers) . See also erlang:system_info(schedulers) . schedulers Returns the number of scheduler threads used by the emulator. Scheduler threads online schedules Erlang processes and Erlang ports, and execute Erlang code and Erlang linked-in driver code. The number of scheduler threads is determined at emulator boot time and cannot be changed later. However, the number of schedulers online can be changed at any time. See also erlang:system_flag(schedulers_online, SchedulersOnline) , erlang:system_info(schedulers_online) , erlang:system_info(scheduler_id) , erlang:system_flag(multi_scheduling, BlockState) , erlang:system_info(multi_scheduling) , erlang:system_info(normal_multi_scheduling_blockers) and erlang:system_info(multi_scheduling_blockers) . schedulers_online Returns the number of schedulers online. The scheduler identifiers of schedulers online satisfy the relationship 1 &lt;= SchedulerId &lt;= erlang:system_info(schedulers_online) . For more information, see erlang:system_info(schedulers) and erlang:system_flag(schedulers_online, SchedulersOnline) . smp_support Returns true . threads Returns true . thread_pool_size Returns the number of async threads in the async thread pool used for asynchronous driver calls ( erl_driver:driver_async() ). The value is given as an integer.","ref":"erlang.html#system_info/1","title":"erlang.system_info/1","type":"function"},{"doc":"Returns information about Erlang Distribution in the current system as specified by Item : creation Returns the creation of the local node as an integer. The creation is changed when a node is restarted. The creation of a node is stored in process identifiers, port identifiers, and references. This makes it (to some extent) possible to distinguish between identifiers from different incarnations of a node. The valid creations are integers in the range 1..3, but this will probably change in a future release. If the node is not alive, 0 is returned. delayed_node_table_gc Returns the amount of time in seconds garbage collection of an entry in a node table is delayed. This limit can be set on startup by passing command-line flag +zdntgc to erl(1) . For more information, see the documentation of the command-line flag. dist Returns a binary containing a string of distribution information formatted as in Erlang crash dumps. For more information, see section How to interpret the Erlang crash dumps in the User's Guide. dist_buf_busy_limit Returns the value of the distribution buffer busy limit in bytes. This limit can be set at startup by passing command-line flag +zdbbl to erl(1) . dist_ctrl Returns a list of tuples {Node, ControllingEntity} , one entry for each connected remote node. Node is the node name and ControllingEntity is the port or process identifier responsible for the communication to that node. More specifically, ControllingEntity for nodes connected through TCP/IP (the normal case) is the socket used in communication with the specific node.","ref":"erlang.html#system_info/1","title":"erlang.system_info/1","type":"function"},{"doc":"Returns various information about the current system (emulator) as specified by Item : build_type Deprecated, use emu_type instead c_compiler_used Returns a two-tuple describing the C compiler used when compiling the runtime system. The first element is an atom describing the name of the compiler, or undefined if unknown. The second element is a term describing the version of the compiler, or undefined if unknown. check_io Returns a list containing miscellaneous information about the emulators internal I/O checking. Notice that the content of the returned list can vary between platforms and over time. It is only guaranteed that a list is returned. compat_rel Returns the compatibility mode of the local node as an integer. The integer returned represents the Erlang/OTP release that the current emulator has been set to be backward compatible with. The compatibility mode can be configured at startup by using command-line flag +R in erl(1) . debug_compiled Returns true if the emulator has been debug-compiled, otherwise false . driver_version Returns a string containing the Erlang driver version used by the runtime system. It has the form &quot;&lt;major ver&gt;.&lt;minor ver&gt;&quot;. dynamic_trace Returns an atom describing the dynamic trace framework compiled into the virtual machine. It can be dtrace , systemtap , or none . For a commercial or standard build, it is always none . The other return values indicate a custom configuration (for example, ./configure --with-dynamic-trace=dtrace ). For more information about dynamic tracing, see dyntrace(3) manual page and the README.dtrace / README.systemtap files in the Erlang source code top directory. dynamic_trace_probes Returns a boolean() indicating if dynamic trace probes ( dtrace or systemtap ) are built into the emulator. This can only be true if the virtual machine was built for dynamic tracing (that is, system_info(dynamic_trace) returns dtrace or systemtap ). emu_flavor Returns an atom describing the flavor of the runtime system. This will be either emu or jit . Possible return values can be added or removed at any time without prior notice. emu_type Returns an atom describing the build type of the runtime system. This is normally the atom opt for optimized. Other possible return values are debug , gcov , valgrind , gprof , and lcnt . Possible return values can be added or removed at any time without prior notice. info Returns a binary containing a string of miscellaneous system information formatted as in Erlang crash dumps. For more information, see section How to interpret the Erlang crash dumps in the User's Guide. kernel_poll Returns true if the emulator uses some kind of kernel-poll implementation, otherwise false . loaded Returns a binary containing a string of loaded module information formatted as in Erlang crash dumps. For more information, see section How to interpret the Erlang crash dumps in the User's Guide. machine Returns a string containing the Erlang machine name. modified_timing_level Returns the modified timing-level (an integer) if modified timing is enabled, otherwise undefined . For more information about modified timing, see command-line flag +T in erl(1) nif_version Returns a string containing the version of the Erlang NIF interface used by the runtime system. It is on the form &quot;&lt;major ver&gt;.&lt;minor ver&gt;&quot;. otp_release Returns a string containing the OTP release number of the OTP release that the currently executing ERTS application is part of. As from Erlang/OTP 17, the OTP release number corresponds to the major OTP version number. No erlang:system_info() argument gives the exact OTP version. This is because the exact OTP version in the general case is difficult to determine. For more information, see the description of versions in System principles in System Documentation. port_parallelism Returns the default port parallelism scheduling hint used. For more information, see command-line argument +spp in erl(1) . system_architecture Returns a string containing the processor and OS architecture the emulator is built for. system_logger Returns the current system_logger as set by erlang:system_flag(system_logger, _) . system_version Returns a string containing version number and some important properties, such as the number of schedulers. trace_control_word Returns the value of the node trace control word. For more information, see function get_tcw in section Match Specifications in Erlang in the User's Guide. version Returns a string containing the version number of the emulator. wordsize Same as {wordsize, internal} . {wordsize, internal} Returns the size of Erlang term words in bytes as an integer, that is, 4 is returned on a 32-bit architecture, and 8 is returned on a 64-bit architecture. {wordsize, external} Returns the true word size of the emulator, that is, the size of a pointer. The value is given in bytes as an integer. On a pure 32-bit architecture, 4 is returned. On a 64-bit architecture, 8 is returned.","ref":"erlang.html#system_info/1","title":"erlang.system_info/1","type":"function"},{"doc":"Returns the current system monitoring settings set by erlang:system_monitor/2 as {MonitorPid, Options} , or undefined if no settings exist. The order of the options can be different from the one that was set.","ref":"erlang.html#system_monitor/0","title":"erlang.system_monitor/0","type":"function"},{"doc":"When called with argument undefined , all system performance monitoring settings are cleared. Calling the function with {MonitorPid, Options} as argument is the same as calling erlang:system_monitor(MonitorPid, Options) . Returns the previous system monitor settings just like erlang:system_monitor/0 .","ref":"erlang.html#system_monitor/1","title":"erlang.system_monitor/1","type":"function"},{"doc":"Sets the system performance monitoring options. MonitorPid is a local process identifier (pid) receiving system monitor messages. The second argument is a list of monitoring options: {long_gc, Time} If a garbage collection in the system takes at least Time wall clock milliseconds, a message {monitor, GcPid, long_gc, Info} is sent to MonitorPid . GcPid is the pid that was garbage collected. Info is a list of two-element tuples describing the result of the garbage collection. One of the tuples is {timeout, GcTime} , where GcTime is the time for the garbage collection in milliseconds. The other tuples are tagged with heap_size , heap_block_size , stack_size , mbuf_size , old_heap_size , and old_heap_block_size . These tuples are explained in the description of trace message gc_minor_start (see erlang:trace/3 ). New tuples can be added, and the order of the tuples in the Info list can be changed at any time without prior notice. {long_schedule, Time} If a process or port in the system runs uninterrupted for at least Time wall clock milliseconds, a message {monitor, PidOrPort, long_schedule, Info} is sent to MonitorPid . PidOrPort is the process or port that was running. Info is a list of two-element tuples describing the event. If a pid() , the tuples {timeout, Millis} , {in, Location} , and {out, Location} are present, where Location is either an MFA ( {Module, Function, Arity} ) describing the function where the process was scheduled in/out, or the atom undefined . If a port() , the tuples {timeout, Millis} and {port_op,Op} are present. Op is one of proc_sig , timeout , input , output , event , or dist_cmd , depending on which driver callback was executing. proc_sig is an internal operation and is never to appear, while the others represent the corresponding driver callbacks timeout , ready_input , ready_output , event , and outputv (when the port is used by distribution). Value Millis in tuple timeout informs about the uninterrupted execution time of the process or port, which always is equal to or higher than the Time value supplied when starting the trace. New tuples can be added to the Info list in a future release. The order of the tuples in the list can be changed at any time without prior notice. This can be used to detect problems with NIFs or drivers that take too long to execute. 1 ms is considered a good maximum time for a driver callback or a NIF. However, a time-sharing system is usually to consider everything &lt; 100 ms as &quot;possible&quot; and fairly &quot;normal&quot;. However, longer schedule times can indicate swapping or a misbehaving NIF/driver. Misbehaving NIFs and drivers can cause bad resource utilization and bad overall system performance. {large_heap, Size} If a garbage collection in the system results in the allocated size of a heap being at least Size words, a message {monitor, GcPid, large_heap, Info} is sent to MonitorPid . GcPid and Info are the same as for long_gc earlier, except that the tuple tagged with timeout is not present. The monitor message is sent if the sum of the sizes of all memory blocks allocated for all heap generations after a garbage collection is equal to or higher than Size . When a process is killed by max_heap_size , it is killed before the garbage collection is complete and thus no large heap message is sent. busy_port If a process in the system gets suspended because it sends to a busy port, a message {monitor, SusPid, busy_port, Port} is sent to MonitorPid . SusPid is the pid that got suspended when sending to Port . busy_dist_port If a process in the system gets suspended because it sends to a process on a remote node whose inter-node communication was handled by a busy port, a message {monitor, SusPid, busy_dist_port, Port} is sent to MonitorPid . SusPid is the pid that got suspended when sending through the inter-node communication port Port . Returns the previous system monitor settings just like erlang:system_monitor/0 . The arguments to system_monitor/2 specifies how all system monitoring on the node should be done, not how it should be changed. This means only one process at a time ( MonitorPid ) can be the receiver of system monitor messages. Also, the way to clear a specific monitor option is to not include it in the list Options . All system monitoring will, however, be cleared if the process identified by MonitorPid terminates. There are no special option values (like zero) to clear an option. Some of the options have a unspecified minimum value. Lower values will be adjusted to the minimum value. For example, it is currently not possible to monitor all garbage collections with {long_gc, 0} . If a monitoring process gets so large that it itself starts to cause system monitor messages when garbage collecting, the messages enlarge the process message queue and probably make the problem worse. Keep the monitoring process neat and do not set the system monitor limits too tight. Failures: badarg If MonitorPid does not exist. badarg If MonitorPid is not a local process.","ref":"erlang.html#system_monitor/2","title":"erlang.system_monitor/2","type":"function"},{"doc":"Returns the current system profiling settings set by erlang:system_profile/2 as {ProfilerPid, Options} , or undefined if there are no settings. The order of the options can be different from the one that was set.","ref":"erlang.html#system_profile/0","title":"erlang.system_profile/0","type":"function"},{"doc":"Sets system profiler options. ProfilerPid is a local process identifier (pid) or port receiving profiling messages. The receiver is excluded from all profiling. The second argument is a list of profiling options: exclusive If a synchronous call to a port from a process is done, the calling process is considered not runnable during the call runtime to the port. The calling process is notified as inactive , and later active when the port callback returns. monotonic_timestamp Time stamps in profile messages use Erlang monotonic time. The time stamp (Ts) has the same format and value as produced by erlang:monotonic_time(nanosecond) . runnable_procs If a process is put into or removed from the run queue, a message, {profile, Pid, State, Mfa, Ts} , is sent to ProfilerPid . Running processes that are reinserted into the run queue after having been pre-empted do not trigger this message. runnable_ports If a port is put into or removed from the run queue, a message, {profile, Port, State, 0, Ts} , is sent to ProfilerPid . scheduler If a scheduler is put to sleep or awoken, a message, {profile, scheduler, Id, State, NoScheds, Ts} , is sent to ProfilerPid . strict_monotonic_timestamp Time stamps in profile messages consist of Erlang monotonic time and a monotonically increasing integer. The time stamp (Ts) has the same format and value as produced by {erlang:monotonic_time(nanosecond), erlang:unique_integer([monotonic])} . timestamp Time stamps in profile messages include a time stamp (Ts) that has the same form as returned by erlang:now() . This is also the default if no time stamp flag is specified. If cpu_timestamp has been enabled through erlang:trace/3 , this also effects the time stamp produced in profiling messages when flag timestamp is enabled. erlang:system_profile behavior can change in a future release.","ref":"erlang.html#system_profile/2","title":"erlang.system_profile/2","type":"function"},{"doc":"Returns current Erlang system time in native time unit . Calling erlang:system_time() is equivalent to erlang:monotonic_time() + erlang:time_offset() . This time is not a monotonically increasing time in the general case. For more information, see the documentation of time warp modes in the User's Guide.","ref":"erlang.html#system_time/0","title":"erlang.system_time/0","type":"function"},{"doc":"Returns current Erlang system time converted into the Unit passed as argument. Calling erlang:system_time(Unit) is equivalent to erlang:convert_time_unit ( erlang:system_time() , native, Unit) . This time is not a monotonically increasing time in the general case. For more information, see the documentation of time warp modes in the User's Guide.","ref":"erlang.html#system_time/1","title":"erlang.system_time/1","type":"function"},{"doc":"Returns a binary data object that is the result of encoding Term according to the Erlang external term format. This can be used for various purposes, for example, writing a term to a file in an efficient way, or sending an Erlang term to some type of communications channel not supported by distributed Erlang. &gt; Bin = term_to_binary ( hello ) . &lt;&lt; 131 , 100 , 0 , 5 , 104 , 101 , 108 , 108 , 111 &gt;&gt; &gt; hello = binary_to_term ( Bin ) . hello See also binary_to_term/1 . There is no guarantee that this function will return the same encoded representation for the same term.","ref":"erlang.html#term_to_binary/1","title":"erlang.term_to_binary/1","type":"function"},{"doc":"Returns a binary data object that is the result of encoding Term according to the Erlang external term format. If option compressed is provided, the external term format is compressed. The compressed format is automatically recognized by binary_to_term/1 as from Erlang/OTP R7B. A compression level can be specified by giving option {compressed, Level} . Level is an integer with range 0..9, where: 0 - No compression is done (it is the same as giving no compressed option). 1 - Takes least time but may not compress as well as the higher levels. 6 - Default level when option compressed is provided. 9 - Takes most time and tries to produce a smaller result. Notice &quot;tries&quot; in the preceding sentence; depending on the input term, level 9 compression either does or does not produce a smaller result than level 1 compression. Option {minor_version, Version} can be used to control some encoding details. This option was introduced in Erlang/OTP R11B-4. The valid values for Version are: 0 Floats are encoded using a textual representation. This option is useful to ensure that releases before Erlang/OTP R11B-4 can decode resulting binary. This version encode atoms that can be represented by a latin1 string using latin1 encoding while only atoms that cannot be represented by latin1 are encoded using utf8. 1 This is as of Erlang/OTP 17.0 the default. It forces any floats in the term to be encoded in a more space-efficient and exact way (namely in the 64-bit IEEE format, rather than converted to a textual representation). As from Erlang/OTP R11B-4, binary_to_term/1 can decode this representation. This version encode atoms that can be represented by a latin1 string using latin1 encoding while only atoms that cannot be represented by latin1 are encoded using utf8. 2 Drops usage of the latin1 atom encoding and unconditionally use utf8 encoding for all atoms. This will be changed to the default in a future major release of Erlang/OTP. Erlang/OTP systems as of R16B can decode this representation. See also binary_to_term/1 .","ref":"erlang.html#term_to_binary/2","title":"erlang.term_to_binary/2","type":"function"},{"doc":"Returns the encoding of Term according to the Erlang external term format as ext_iovec() . This function produce the same encoding as term_to_binary/1 , but with another return type. The call iolist_to_binary(term_to_iovec(Term)) will produce exactly the same result as the call term_to_binary(Term) . term_to_iovec() is a pure optimization of the functionality term_to_binary() provide. term_to_iovec() can for example refer directly to off heap binaries instead of copying the binary data into the result. See also term_to_binary/1 .","ref":"erlang.html#term_to_iovec/1","title":"erlang.term_to_iovec/1","type":"function"},{"doc":"Returns the encoding of Term according to the Erlang external term format as ext_iovec() . This function produce the same encoding as term_to_binary/2 , but with another return type. The call iolist_to_binary(term_to_iovec(Term, Opts)) will produce exactly the same result as term_to_binary(Term, Opts) . Currently recognised options are all options recognised by term_to_binary/2 . term_to_iovec() is a pure optimization of the functionality term_to_binary() provide. term_to_iovec() can for example refer directly to off heap binaries instead of copying the binary data into the result. See also term_to_binary/2 .","ref":"erlang.html#term_to_iovec/2","title":"erlang.term_to_iovec/2","type":"function"},{"doc":"Raises an exception of class throw . Intended to be used to do non-local returns from functions. If evaluated within a catch expression, the catch expression returns value Any . Example: &gt; catch throw ( { hello , there } ) . { hello , there } If evaluated within a try -block of a try expression, the value Any can be caught within the catch block. Example: try throw ( { my_exception , &quot;Something happened&quot; } ) catch throw : { my_exception , Desc } -&gt; io : format ( standard_error , &quot;Error: ~s ~n &quot; , [ Desc ] ) end Failure: nocatch if not caught by an exception handler. See the guide about errors and error handling for additional information.","ref":"erlang.html#throw/1","title":"erlang.throw/1","type":"function"},{"doc":"Returns the current time as {Hour, Minute, Second} . The time zone and Daylight Saving Time correction depend on the underlying OS. The return value is based on the OS System Time. Example: &gt; time ( ) . { 9 , 42 , 44 }","ref":"erlang.html#time/0","title":"erlang.time/0","type":"function"},{"doc":"Returns the current time offset between Erlang monotonic time and Erlang system time in native time unit . Current time offset added to an Erlang monotonic time gives corresponding Erlang system time. The time offset may or may not change during operation depending on the time warp mode used. A change in time offset can be observed at slightly different points in time by different processes. If the runtime system is in multi-time warp mode, the time offset is changed when the runtime system detects that the OS system time has changed. The runtime system will, however, not detect this immediately when it occurs. A task checking the time offset is scheduled to execute at least once a minute; so, under normal operation this is to be detected within a minute, but during heavy load it can take longer time.","ref":"erlang.html#time_offset/0","title":"erlang.time_offset/0","type":"function"},{"doc":"Returns the current time offset between Erlang monotonic time and Erlang system time converted into the Unit passed as argument. Same as calling erlang:convert_time_unit ( erlang:time_offset() , native, Unit) however optimized for commonly used Unit s.","ref":"erlang.html#time_offset/1","title":"erlang.time_offset/1","type":"function"},{"doc":"Returns current Erlang system time on the format {MegaSecs, Secs, MicroSecs} . This format is the same as os:timestamp/0 and the deprecated erlang:now/0 use. The reason for the existence of erlang:timestamp() is purely to simplify use for existing code that assumes this time stamp format. Current Erlang system time can more efficiently be retrieved in the time unit of your choice using erlang:system_time/1 . The erlang:timestamp() BIF is equivalent to: timestamp() -&gt; ErlangSystemTime = erlang:system_time(microsecond), MegaSecs = ErlangSystemTime div 1000_000_000_000, Secs = ErlangSystemTime div 1000_000 - MegaSecs*1000_000, MicroSecs = ErlangSystemTime rem 1000_000, {MegaSecs, Secs, MicroSecs}. It, however, uses a native implementation that does not build garbage on the heap and with slightly better performance. This time is not a monotonically increasing time in the general case. For more information, see the documentation of time warp modes in the User's Guide.","ref":"erlang.html#timestamp/0","title":"erlang.timestamp/0","type":"function"},{"doc":"Returns the tail of List , that is, the list minus the first element, for example: &gt; tl ( [ geesties , guilies , beasties ] ) . [ guilies , beasties ] &gt; tl ( [ geesties ] ) . [ ] &gt; tl ( [ geesties , guilies , beasties | improper_end ] ) . [ guilies , beasties | improper_end ] &gt; tl ( [ geesties | improper_end ] ) . improper_end Allowed in guard tests. Failure: badarg if List is the empty list [] .","ref":"erlang.html#tl/1","title":"erlang.tl/1","type":"function"},{"doc":"Turns on (if How == true ) or off (if How == false ) the trace flags in FlagList for the process or processes represented by PidPortSpec . PidPortSpec is either a process identifier (pid) for a local process, a port identifier, or one of the following atoms: all All currently existing processes and ports and all that will be created in the future. processes All currently existing processes and all that will be created in the future. ports All currently existing ports and all that will be created in the future. existing All currently existing processes and ports. existing_processes All currently existing processes. existing_ports All currently existing ports. new All processes and ports that will be created in the future. new_processes All processes that will be created in the future. new_ports All ports that will be created in the future. FlagList can contain any number of the following flags (the &quot;message tags&quot; refers to the list of trace messages ): all Sets all trace flags except tracer and cpu_timestamp , which are in their nature different than the others. send Traces sending of messages. Message tags: send and send_to_non_existing_process . 'receive' Traces receiving of messages. Message tags: 'receive' . call Traces certain function calls. Specify which function calls to trace by calling erlang:trace_pattern/3 . Message tags: call and return_from . silent Used with the call trace flag. The call , return_from , and return_to trace messages are inhibited if this flag is set, but they are executed as normal if there are match specifications. Silent mode is inhibited by executing erlang:trace(_, false, [silent|_]) , or by a match specification executing the function {silent, false} . The silent trace flag facilitates setting up a trace on many or even all processes in the system. The trace can then be activated and deactivated using the match specification function {silent,Bool} , giving a high degree of control of which functions with which arguments that trigger the trace. Message tags: call , return_from , and return_to . Or rather, the absence of. return_to Used with the call trace flag. Traces the return from a traced function back to its caller. Only works for functions traced with option local to erlang:trace_pattern/3 . The semantics is that a trace message is sent when a call traced function returns, that is, when a chain of tail recursive calls ends. Only one trace message is sent per chain of tail recursive calls, so the properties of tail recursiveness for function calls are kept while tracing with this flag. Using call and return_to trace together makes it possible to know exactly in which function a process executes at any time. To get trace messages containing return values from functions, use the {return_trace} match specification action instead. Message tags: return_to . procs Traces process-related events. Message tags: spawn , spawned , exit , register , unregister , link , unlink , getting_linked , and getting_unlinked . ports Traces port-related events. Message tags: open , closed , register , unregister , getting_linked , and getting_unlinked . running Traces scheduling of processes. Message tags: in and out . exiting Traces scheduling of exiting processes. Message tags: in_exiting , out_exiting , and out_exited . running_procs Traces scheduling of processes just like running . However, this option also includes schedule events when the process executes within the context of a port without being scheduled out itself. Message tags: in and out . running_ports Traces scheduling of ports. Message tags: in and out . garbage_collection Traces garbage collections of processes. Message tags: gc_minor_start , gc_max_heap_size , and gc_minor_end . timestamp Includes a time stamp in all trace messages. The time stamp (Ts) has the same form as returned by erlang:now() . cpu_timestamp A global trace flag for the Erlang node that makes all trace time stamps using flag timestamp to be in CPU time, not wall clock time. That is, cpu_timestamp is not be used if monotonic_timestamp or strict_monotonic_timestamp is enabled. Only allowed with PidPortSpec==all . If the host machine OS does not support high-resolution CPU time measurements, trace/3 exits with badarg . Notice that most OS do not synchronize this value across cores, so be prepared that time can seem to go backwards when using this option. monotonic_timestamp Includes an Erlang monotonic time time stamp in all trace messages. The time stamp (Ts) has the same format and value as produced by erlang:monotonic_time(nanosecond) . This flag overrides flag cpu_timestamp . strict_monotonic_timestamp Includes an time stamp consisting of Erlang monotonic time and a monotonically increasing integer in all trace messages. The time stamp (Ts) has the same format and value as produced by { erlang:monotonic_time(nanosecond) , erlang:unique_integer([monotonic]) } . This flag overrides flag cpu_timestamp . arity Used with the call trace flag. {M, F, Arity} is specified instead of {M, F, Args} in call trace messages. set_on_spawn Makes any process created by a traced process inherit its trace flags, including flag set_on_spawn . set_on_first_spawn Makes the first process created by a traced process inherit its trace flags, excluding flag set_on_first_spawn . set_on_link Makes any process linked by a traced process inherit its trace flags, including flag set_on_link . set_on_first_link Makes the first process linked to by a traced process inherit its trace flags, excluding flag set_on_first_link . {tracer, Tracer} Specifies where to send the trace messages. Tracer must be the process identifier of a local process or the port identifier of a local port. {tracer, TracerModule, TracerState} Specifies that a tracer module is to be called instead of sending a trace message. The tracer module can then ignore or change the trace message. For more details on how to write a tracer module, see erl_tracer(3) . If no tracer is specified, the calling process receives all the trace messages. The effect of combining set_on_first_link with set_on_link is the same as set_on_first_link alone. Likewise for set_on_spawn and set_on_first_spawn . The tracing process receives the trace messages described in the following list. Pid is the process identifier of the traced process in which the traced event has occurred. The third tuple element is the message tag. If flag timestamp , strict_monotonic_timestamp , or monotonic_timestamp is specified, the first tuple element is trace_ts instead, and the time stamp is added as an extra element last in the message tuple. If multiple time stamp flags are passed, timestamp has precedence over strict_monotonic_timestamp , which in turn has precedence over monotonic_timestamp . All time stamp flags are remembered, so if two are passed and the one with highest precedence later is disabled, the other one becomes active. If a match specification (applicable only for call , send and 'receive' tracing) contains a {message} action function with a non-boolean value, that value is added as an extra element to the message tuple either in the last position or before the timestamp (if it is present). Trace messages: {trace, PidPort, send, Msg, To} When PidPort sends message Msg to process To . {trace, PidPort, send_to_non_existing_process, Msg, To} When PidPort sends message Msg to the non-existing process To . {trace, PidPort, 'receive', Msg} When PidPort receives message Msg . If Msg is set to time-out, a receive statement can have timed out, or the process received a message with the payload timeout . {trace, Pid, call, {M, F, Args}} When Pid calls a traced function. The return values of calls are never supplied, only the call and its arguments. Trace flag arity can be used to change the contents of this message, so that Arity is specified instead of Args . {trace, Pid, return_to, {M, F, Arity}} When Pid returns to the specified function. This trace message is sent if both the flags call and return_to are set, and the function is set to be traced on local function calls. The message is only sent when returning from a chain of tail recursive function calls, where at least one call generated a call trace message (that is, the functions match specification matched, and {message, false} was not an action). {trace, Pid, return_from, {M, F, Arity}, ReturnValue} When Pid returns from the specified function. This trace message is sent if flag call is set, and the function has a match specification with a return_trace or exception_trace action. {trace, Pid, exception_from, {M, F, Arity}, {Class, Value}} When Pid exits from the specified function because of an exception. This trace message is sent if flag call is set, and the function has a match specification with an exception_trace action. {trace, Pid, spawn, Pid2, {M, F, Args}} When Pid spawns a new process Pid2 with the specified function call as entry point. Args is supposed to be the argument list, but can be any term if the spawn is erroneous. {trace, Pid, spawned, Pid2, {M, F, Args}} When Pid is spawned by process Pid2 with the specified function call as entry point. Args is supposed to be the argument list, but can be any term if the spawn is erroneous. {trace, Pid, exit, Reason} When Pid exits with reason Reason . {trace, PidPort, register, RegName} When PidPort gets the name RegName registered. {trace, PidPort, unregister, RegName} When PidPort gets the name RegName unregistered. This is done automatically when a registered process or port exits. {trace, Pid, link, Pid2} When Pid links to a process Pid2 . {trace, Pid, unlink, Pid2} When Pid removes the link from a process Pid2 . {trace, PidPort, getting_linked, Pid2} When PidPort gets linked to a process Pid2 . {trace, PidPort, getting_unlinked, Pid2} When PidPort gets unlinked from a process Pid2 . {trace, Port, open, Pid, Driver} When Pid opens a new port Port with the running Driver . Driver is the name of the driver as an atom. {trace, Port, closed, Reason} When Port closes with Reason . {trace, Pid, in | in_exiting, {M, F, Arity} | 0} When Pid is scheduled to run. The process runs in function {M, F, Arity} . On some rare occasions, the current function cannot be determined, then the last element is 0 . {trace, Pid, out | out_exiting | out_exited, {M, F, Arity} | 0} When Pid is scheduled out. The process was running in function {M, F, Arity}. On some rare occasions, the current function cannot be determined, then the last element is 0 . {trace, Port, in, Command | 0} When Port is scheduled to run. Command is the first thing the port will execute, it can however run several commands before being scheduled out. On some rare occasions, the current function cannot be determined, then the last element is 0 . The possible commands are call , close , command , connect , control , flush , info , link , open , and unlink . {trace, Port, out, Command | 0} When Port is scheduled out. The last command run was Command . On some rare occasions, the current function cannot be determined, then the last element is 0 . Command can contain the same commands as in {trace, Pid, gc_minor_start, Info} Sent when a young garbage collection is about to be started. Info is a list of two-element tuples, where the first element is a key, and the second is the value. Do not depend on any order of the tuples. The following keys are defined: heap_size The size of the used part of the heap. heap_block_size The size of the memory block used for storing the heap and the stack. old_heap_size The size of the used part of the old heap. old_heap_block_size The size of the memory block used for storing the old heap. stack_size The size of the stack. recent_size The size of the data that survived the previous garbage collection. mbuf_size The combined size of message buffers associated with the process. bin_vheap_size The total size of unique off-heap binaries referenced from the process heap. bin_vheap_block_size The total size of binaries allowed in the virtual heap in the process before doing a garbage collection. bin_old_vheap_size The total size of unique off-heap binaries referenced from the process old heap. bin_old_vheap_block_size The total size of binaries allowed in the virtual old heap in the process before doing a garbage collection. wordsize For the gc_minor_start event it is the size of the need that triggered the GC. For the corresponding gc_minor_end event it is the size of reclaimed memory = start heap_size - end heap_size . All sizes are in words. {trace, Pid, gc_max_heap_size, Info} Sent when the max_heap_size is reached during garbage collection. Info contains the same kind of list as in message gc_start , but the sizes reflect the sizes that triggered max_heap_size to be reached. {trace, Pid, gc_minor_end, Info} Sent when young garbage collection is finished. Info contains the same kind of list as in message gc_minor_start , but the sizes reflect the new sizes after garbage collection. {trace, Pid, gc_major_start, Info} Sent when fullsweep garbage collection is about to be started. Info contains the same kind of list as in message gc_minor_start . {trace, Pid, gc_major_end, Info} Sent when fullsweep garbage collection is finished. Info contains the same kind of list as in message gc_minor_start , but the sizes reflect the new sizes after a fullsweep garbage collection. If the tracing process/port dies or the tracer module returns remove , the flags are silently removed. Each process can only be traced by one tracer. Therefore, attempts to trace an already traced process fail. Returns a number indicating the number of processes that matched PidPortSpec . If PidPortSpec is a process identifier, the return value is 1 . If PidPortSpec is all or existing , the return value is the number of processes running. If PidPortSpec is new , the return value is 0 . Failure: badarg if the specified arguments are not supported. For example, cpu_timestamp is not supported on all platforms.","ref":"erlang.html#trace/3","title":"erlang.trace/3","type":"function"},{"doc":"The delivery of trace messages (generated by erlang:trace/3 , seq_trace(3) , or erlang:system_profile/2 ) is dislocated on the time-line compared to other events in the system. If you know that Tracee has passed some specific point in its execution, and you want to know when at least all trace messages corresponding to events up to this point have reached the tracer, use erlang:trace_delivered(Tracee) . When it is guaranteed that all trace messages are delivered to the tracer up to the point that Tracee reached at the time of the call to erlang:trace_delivered(Tracee) , then a {trace_delivered, Tracee, Ref} message is sent to the caller of erlang:trace_delivered(Tracee) . Notice that message trace_delivered does not imply that trace messages have been delivered. Instead it implies that all trace messages that are to be delivered have been delivered. It is not an error if Tracee is not, and has not been traced by someone, but if this is the case, no trace messages have been delivered when the trace_delivered message arrives. Notice that Tracee must refer to a process currently or previously existing on the same node as the caller of erlang:trace_delivered(Tracee) resides on. The special Tracee atom all denotes all processes that currently are traced in the node. When used together with a Tracer Module , any message sent in the trace callback is guaranteed to have reached its recipient before the trace_delivered message is sent. Example: Process A is Tracee , port B is tracer, and process C is the port owner of B . C wants to close B when A exits. To ensure that the trace is not truncated, C can call erlang:trace_delivered(A) when A exits, and wait for message {trace_delivered, A, Ref} before closing B . Failure: badarg if Tracee does not refer to a process (dead or alive) on the same node as the caller of erlang:trace_delivered(Tracee) resides on.","ref":"erlang.html#trace_delivered/1","title":"erlang.trace_delivered/1","type":"function"},{"doc":"Approximation of '$1' | '$2' | '$3' | ... Returns trace information about a port, process, function, or event. To get information about a port or process , PidPortFuncEvent is to be a process identifier (pid), port identifier, or one of the atoms new , new_processes , or new_ports . The atom new or new_processes means that the default trace state for processes to be created is returned. The atom new_ports means that the default trace state for ports to be created is returned. Valid Item s for ports and processes: flags Returns a list of atoms indicating what kind of traces is enabled for the process. The list is empty if no traces are enabled, and one or more of the followings atoms if traces are enabled: send , 'receive' , set_on_spawn , call , return_to , procs , ports , set_on_first_spawn , set_on_link , running , running_procs , running_ports , silent , exiting , monotonic_timestamp , strict_monotonic_timestamp , garbage_collection , timestamp , and arity . The order is arbitrary. tracer Returns the identifier for process, port, or a tuple containing the tracer module and tracer state tracing this process. If this process is not traced, the return value is [] . To get information about a function , PidPortFuncEvent is to be the three-element tuple {Module, Function, Arity} or the atom on_load . No wildcards are allowed. Returns undefined if the function does not exist, or false if the function is not traced. If PidPortFuncEvent is on_load , the information returned refers to the default value for code that will be loaded. Valid Item s for functions: traced Returns global if this function is traced on global function calls, local if this function is traced on local function calls (that is, local and global function calls), and false if local or global function calls are not traced. match_spec Returns the match specification for this function, if it has one. If the function is locally or globally traced but has no match specification defined, the returned value is [] . meta Returns the meta-trace tracer process, port, or trace module for this function, if it has one. If the function is not meta-traced, the returned value is false . If the function is meta-traced but has once detected that the tracer process is invalid, the returned value is [] . meta_match_spec Returns the meta-trace match specification for this function, if it has one. If the function is meta-traced but has no match specification defined, the returned value is [] . call_count Returns the call count value for this function or true for the pseudo function on_load if call count tracing is active. Otherwise false is returned. See also erlang:trace_pattern/3 . call_time Returns the call time values for this function or true for the pseudo function on_load if call time tracing is active. Otherwise false is returned. The call time values returned, [{Pid, Count, S, Us}] , is a list of each process that executed the function and its specific counters. See also erlang:trace_pattern/3 . all Returns a list containing the {Item, Value} tuples for all other items, or returns false if no tracing is active for this function. To get information about an event , PidPortFuncEvent is to be one of the atoms send or 'receive' . One valid Item for events exists: match_spec Returns the match specification for this event, if it has one, or true if no match specification has been set. The return value is {Item, Value} , where Value is the requested information as described earlier. If a pid for a dead process was specified, or the name of a non-existing function, Value is undefined .","ref":"erlang.html#trace_info/2","title":"erlang.trace_info/2","type":"function"},{"doc":"Approximation of '$1' | '$2' | '$3' | ... The same as erlang:trace_pattern(Event, MatchSpec, []) , retained for backward compatibility.","ref":"erlang.html#trace_pattern/2","title":"erlang.trace_pattern/2","type":"function"},{"doc":"Approximation of '$1' | '$2' | '$3' | ... Sets trace pattern for message sending . Must be combined with erlang:trace/3 to set the send trace flag for one or more processes. By default all messages sent from send traced processes are traced. To limit traced send events based on the message content, the sender and/or the receiver, use erlang:trace_pattern/3 . Argument MatchSpec can take the following forms: MatchSpecList A list of match specifications. The matching is done on the list [Receiver, Msg] . Receiver is the process or port identity of the receiver and Msg is the message term. The pid of the sending process can be accessed with the guard function self/0 . An empty list is the same as true . For more information, see section Match Specifications in Erlang in the User's Guide. true Enables tracing for all sent messages (from send traced processes). Any match specification is removed. This is the default . false Disables tracing for all sent messages. Any match specification is removed. Argument FlagList must be [] for send tracing. The return value is always 1 . Examples: Only trace messages to a specific process Pid : &gt; erlang : trace_pattern ( send , [ { [ Pid , &#39;_&#39; ] , [ ] , [ ] } ] , [ ] ) . 1 Only trace messages matching {reply, _} : &gt; erlang : trace_pattern ( send , [ { [ &#39;_&#39; , { reply , &#39;_&#39; } ] , [ ] , [ ] } ] , [ ] ) . 1 Only trace messages sent to the sender itself: &gt; erlang : trace_pattern ( send , [ { [ &#39;$1&#39; , &#39;_&#39; ] , [ { &#39;=:=&#39; , &#39;$1&#39; , { self } } ] , [ ] } ] , [ ] ) . 1 Only trace messages sent to other nodes: &gt; erlang : trace_pattern ( send , [ { [ &#39;$1&#39; , &#39;_&#39; ] , [ { &#39;=/=&#39; , { node , &#39;$1&#39; } , { node } } ] , [ ] } ] , [ ] ) . 1 A match specification for send trace can use all guard and body functions except caller . Fails by raising an error exception with an error reason of: badarg If an argument is invalid. system_limit If a match specification passed as argument has excessive nesting which causes scheduler stack exhaustion for the scheduler that the calling process is executing on. Scheduler stack size can be configured when starting the runtime system.","ref":"erlang.html#trace_pattern/3","title":"erlang.trace_pattern/3","type":"function"},{"doc":"Approximation of '$1' | '$2' | '$3' | ... Sets trace pattern for message receiving . Must be combined with erlang:trace/3 to set the 'receive' trace flag for one or more processes. By default all messages received by 'receive' traced processes are traced. To limit traced receive events based on the message content, the sender and/or the receiver, use erlang:trace_pattern/3 . Argument MatchSpec can take the following forms: MatchSpecList A list of match specifications. The matching is done on the list [Node, Sender, Msg] . Node is the node name of the sender. Sender is the process or port identity of the sender, or the atom undefined if the sender is not known (which can be the case for remote senders). Msg is the message term. The pid of the receiving process can be accessed with the guard function self/0 . An empty list is the same as true . For more information, see section Match Specifications in Erlang in the User's Guide. true Enables tracing for all received messages (to 'receive' traced processes). Any match specification is removed. This is the default . false Disables tracing for all received messages. Any match specification is removed. Argument FlagList must be [] for receive tracing. The return value is always 1 . Examples: Only trace messages from a specific process Pid : &gt; erlang : trace_pattern ( &#39;receive&#39; , [ { [ &#39;_&#39; , Pid , &#39;_&#39; ] , [ ] , [ ] } ] , [ ] ) . 1 Only trace messages matching {reply, _} : &gt; erlang : trace_pattern ( &#39;receive&#39; , [ { [ &#39;_&#39; , &#39;_&#39; , { reply , &#39;_&#39; } ] , [ ] , [ ] } ] , [ ] ) . 1 Only trace messages from other nodes: &gt; erlang : trace_pattern ( &#39;receive&#39; , [ { [ &#39;$1&#39; , &#39;_&#39; , &#39;_&#39; ] , [ { &#39;=/=&#39; , &#39;$1&#39; , { node } } ] , [ ] } ] , [ ] ) . 1 A match specification for 'receive' trace can use all guard and body functions except caller , is_seq_trace , get_seq_token , set_seq_token , enable_trace , disable_trace , trace , silent , and process_dump . Fails by raising an error exception with an error reason of: badarg If an argument is invalid. system_limit If a match specification passed as argument has excessive nesting which causes scheduler stack exhaustion for the scheduler that the calling process is executing on. Scheduler stack size can be configured when starting the runtime system.","ref":"erlang.html#trace_pattern/3","title":"erlang.trace_pattern/3","type":"function"},{"doc":"Approximation of '$1' | '$2' | '$3' | ... Enables or disables call tracing for one or more functions. Must be combined with erlang:trace/3 to set the call trace flag for one or more processes. Conceptually, call tracing works as follows. Inside the Erlang virtual machine, a set of processes and a set of functions are to be traced. If a traced process calls a traced function, the trace action is taken. Otherwise, nothing happens. To add or remove one or more processes to the set of traced processes, use erlang:trace/3 . To add or remove functions to the set of traced functions, use erlang:trace_pattern/3 . The BIF erlang:trace_pattern/3 can also add match specifications to a function. A match specification comprises a pattern that the function arguments must match, a guard expression that must evaluate to true , and an action to be performed. The default action is to send a trace message. If the pattern does not match or the guard fails, the action is not executed. Argument MFA is to be a tuple, such as {Module, Function, Arity} , or the atom on_load (described below). It can be the module, function, and arity for a function (or a BIF in any module). The atom '_' can be used as a wildcard in any of the following ways: {Module,Function,'_'} All functions of any arity named Function in module Module . {Module,'_','_'} All functions in module Module . {'_','_','_'} All functions in all loaded modules. Other combinations, such as {Module,'_',Arity} , are not allowed. Local functions match wildcards only if option local is in FlagList . If argument MFA is the atom on_load , the match specification and flag list are used on all modules that are newly loaded. Argument MatchSpec can take the following forms: false Disables tracing for the matching functions. Any match specification is removed. true Enables tracing for the matching functions. Any match specification is removed. MatchSpecList A list of match specifications. An empty list is equivalent to true . For a description of match specifications, see section Match Specifications in Erlang in the User's Guide. restart For the FlagList options call_count and call_time : restarts the existing counters. The behavior is undefined for other FlagList options. pause For the FlagList options call_count and call_time : pauses the existing counters. The behavior is undefined for other FlagList options. Parameter FlagList is a list of options. The following are the valid options: global Turns on or off call tracing for global function calls (that is, calls specifying the module explicitly). Only exported functions match and only global calls generate trace messages. This is the default . local Turns on or off call tracing for all types of function calls. Trace messages are sent whenever any of the specified functions are called, regardless of how they are called. If flag return_to is set for the process, a return_to message is also sent when this function returns to its caller. meta | {meta, Pid} | {meta, TracerModule, TracerState} Turns on or off meta-tracing for all types of function calls. Trace messages are sent to the tracer whenever any of the specified functions are called. If no tracer is specified, self() is used as a default tracer process. Meta-tracing traces all processes and does not care about the process trace flags set by erlang:trace/3 , the trace flags are instead fixed to [call, timestamp] . The match specification function {return_trace} works with meta-trace and sends its trace message to the same tracer. call_count Starts ( MatchSpec == true ) or stops ( MatchSpec == false ) call count tracing for all types of function calls. For every function, a counter is incremented when the function is called, in any process. No process trace flags need to be activated. If call count tracing is started while already running, the count is restarted from zero. To pause running counters, use MatchSpec == pause . Paused and running counters can be restarted from zero with MatchSpec == restart . To read the counter value, use erlang:trace_info/2 . call_time Starts ( MatchSpec == true ) or stops ( MatchSpec == false ) call time tracing for all types of function calls. For every function, a counter is incremented when the function is called. Time spent in the function is accumulated in two other counters, seconds and microseconds. The counters are stored for each call traced process. If call time tracing is started while already running, the count and time restart from zero. To pause running counters, use MatchSpec == pause . Paused and running counters can be restarted from zero with MatchSpec == restart . To read the counter value, use erlang:trace_info/2 . The options global and local are mutually exclusive, and global is the default (if no options are specified). The options call_count and meta perform a kind of local tracing, and cannot be combined with global . A function can be globally or locally traced. If global tracing is specified for a set of functions, then local, meta, call time, and call count tracing for the matching set of local functions is disabled, and conversely. When disabling trace, the option must match the type of trace set on the function. That is, local tracing must be disabled with option local and global tracing with option global (or no option), and so on. Part of a match specification list cannot be changed directly. If a function has a match specification, it can be replaced with a new one. To change an existing match specification, use the BIF erlang:trace_info/2 to retrieve the existing match specification. Returns the number of functions matching argument MFA . This is zero if none matched. Fails by raising an error exception with an error reason of: badarg If an argument is invalid. system_limit If a match specification passed as argument has excessive nesting which causes scheduler stack exhaustion for the scheduler that the calling process is executing on. Scheduler stack size can be configured when starting the runtime system.","ref":"erlang.html#trace_pattern/3","title":"erlang.trace_pattern/3","type":"function"},{"doc":"Truncates the decimals of Number , for example: &gt; trunc ( 5.7 ) . 5 &gt; trunc ( - 5.7 ) . - 5 &gt; trunc ( 5 ) . 5 &gt; trunc ( 36028797018963969.0 ) . 36028797018963968 In the last example, trunc(36028797018963969.0) evaluates to 36028797018963968 . The reason for this is that the number 36028797018963969.0 cannot be represented exactly as a float value. Instead, the float literal is represented as 36028797018963968.0 , which is the closest number that can be represented exactly as a float value. See Representation of Floating Point Numbers for additional information. Allowed in guard tests.","ref":"erlang.html#trunc/1","title":"erlang.trunc/1","type":"function"},{"doc":"Returns an integer that is the number of elements in Tuple , for example: &gt; tuple_size ( { morni , mulle , bwange } ) . 3 Allowed in guard tests.","ref":"erlang.html#tuple_size/1","title":"erlang.tuple_size/1","type":"function"},{"doc":"Returns a list corresponding to Tuple . Tuple can contain any Erlang terms. Example: &gt; tuple_to_list ( { share , { &#39;Ericsson_B&#39; , 163 } } ) . [ share , { &#39;Ericsson_B&#39; , 163 } ]","ref":"erlang.html#tuple_to_list/1","title":"erlang.tuple_to_list/1","type":"function"},{"doc":"Deactivate the alias Alias previously created by the calling process. An alias can for example be created via alias/0 , or monitor/3 . unalias/1 will always deactivate the alias regardless of options used when creating the alias. Returns true if Alias was a currently active alias for current processes; otherwise, false. For more information on process aliases see the Process Aliases section of the Erlang Reference Manual .","ref":"erlang.html#unalias/1","title":"erlang.unalias/1","type":"function"},{"doc":"Generates and returns an integer unique on current runtime system instance. The same as calling erlang:unique_integer([]) .","ref":"erlang.html#unique_integer/0","title":"erlang.unique_integer/0","type":"function"},{"doc":"Generates and returns an integer unique on current runtime system instance. The integer is unique in the sense that this BIF, using the same set of modifiers, does not return the same integer more than once on the current runtime system instance. Each integer value can of course be constructed by other means. By default, when [] is passed as ModifierList , both negative and positive integers can be returned. This to use the range of integers that do not need heap memory allocation as much as possible. By default the returned integers are also only guaranteed to be unique, that is, any returned integer can be smaller or larger than previously returned integers. Modifier s: positive Returns only positive integers. Notice that by passing the positive modifier you will get heap allocated integers (bignums) quicker. monotonic Returns strictly monotonically increasing integers corresponding to creation time. That is, the integer returned is always larger than previously returned integers on the current runtime system instance. These values can be used to determine order between events on the runtime system instance. That is, if both X = erlang:unique_integer([monotonic]) and Y = erlang:unique_integer([monotonic]) are executed by different processes (or the same process) on the same runtime system instance and X &lt; Y , we know that X was created before Y . Strictly monotonically increasing values are inherently quite expensive to generate and scales poorly. This is because the values need to be synchronized between CPU cores. That is, do not pass the monotonic modifier unless you really need strictly monotonically increasing values. All valid Modifier s can be combined. Repeated (valid) Modifier s in the ModifierList are ignored. The set of integers returned by erlang:unique_integer/1 using different sets of Modifier s will overlap . For example, by calling unique_integer([monotonic]) , and unique_integer([positive, monotonic]) repeatedly, you will eventually see some integers that are returned by both calls. Failures: badarg if ModifierList is not a proper list. badarg if Modifier is not a valid modifier.","ref":"erlang.html#unique_integer/1","title":"erlang.unique_integer/1","type":"function"},{"doc":"Returns the current date and time according to Universal Time Coordinated (UTC) in the form {{Year, Month, Day}, {Hour, Minute, Second}} if supported by the underlying OS. Otherwise erlang:universaltime() is equivalent to erlang:localtime() . The return value is based on the OS System Time. Example: &gt; erlang : universaltime ( ) . { { 1996 , 11 , 6 } , { 14 , 18 , 43 } }","ref":"erlang.html#universaltime/0","title":"erlang.universaltime/0","type":"function"},{"doc":"Converts Universal Time Coordinated (UTC) date and time to local date and time in the form {{Year, Month, Day}, {Hour, Minute, Second}} if supported by the underlying OS. Otherwise no conversion is done, and Universaltime is returned. Example: &gt; erlang : universaltime_to_localtime ( { { 1996 , 11 , 6 } , { 14 , 18 , 43 } } ) . { { 1996 , 11 , 7 } , { 15 , 18 , 43 } } Failure: badarg if Universaltime denotes an invalid date and time.","ref":"erlang.html#universaltime_to_localtime/1","title":"erlang.universaltime_to_localtime/1","type":"function"},{"doc":"Removes a link between the calling process and another process or a port identified by Id . We will from here on call the identified process or port unlinkee. A link can be set up using the link/1 BIF. For more information on links and exit signals due to links, see the Processes chapter in the Erlang Reference Manual : Links Sending Exit Signals Receiving Exit Signals Once unlink(Id) has returned, it is guaranteed that the link between the caller and the unlinkee has no effect on the caller in the future (unless the link is setup again). Note that if the caller is trapping exits , an {'EXIT', Id, ExitReason} message due to the link may have been placed in the message queue of the caller before the unlink(Id) call completed. Also note that the {'EXIT', Id, ExitReason} message may be the result of the link, but may also be the result of the unlikee sending the caller an exit signal by calling the exit/2 BIF. Therefore, it may or may not be appropriate to clean up the message queue after a call to unlink(Id) as follows, when trapping exits: unlink(Id), receive {'EXIT', Id, _} -&gt; true after 0 -&gt; true end The link removal is performed asynchronously. If such a link does not exist, nothing is done. A detailed description of the link protocol can be found in the Distribution Protocol chapter of the ERTS User's Guide . Failure: badarg if Id does not identify a process or a node local port.","ref":"erlang.html#unlink/1","title":"erlang.unlink/1","type":"function"},{"doc":"Removes the registered name RegName associated with a process identifier or a port identifier from the name registry . For example: &gt; unregister ( db ) . true Keep in mind that you can still receive signals associated with the registered name after it has been unregistered as the sender may have looked up the name before sending to it. Users are advised not to unregister system processes. Failure: badarg if RegName is not a registered name.","ref":"erlang.html#unregister/1","title":"erlang.unregister/1","type":"function"},{"doc":"Returns the process identifier or port identifier with the registered name RegName from the name registry . Returns undefined if the name is not registered. Example: &gt; whereis ( db ) . &lt; 0.43 . 0 &gt;","ref":"erlang.html#whereis/1","title":"erlang.whereis/1","type":"function"},{"doc":"Tries to give other processes with the same or higher priority (if any) a chance to execute before returning. There is no guarantee that any other process runs between the invocation and return of erlang:yield/0 . See the documentation for receive-after expressions for how to make the current process sleep for a specific number of milliseconds. There is seldom or never any need to use this BIF. Using this BIF without a thorough grasp of how the scheduler works can cause performance degradation. The current implementation of this function puts the current process last in the current scheduler's queue for processes of the same priority as the current process.","ref":"erlang.html#yield/0","title":"erlang.yield/0","type":"function"},{"doc":"The time_unit() type also consist of the following deprecated symbolic time units: seconds Same as second . milli_seconds Same as millisecond . micro_seconds Same as microsecond . nano_seconds Same as nanosecond .","ref":"erlang.html#t:deprecated_time_unit/0","title":"erlang.deprecated_time_unit/0","type":"type"},{"doc":"An opaque handle identifing a distribution channel.","ref":"erlang.html#t:dist_handle/0","title":"erlang.dist_handle/0","type":"opaque"},{"doc":"A binary data object, structured according to the Erlang external term format.","ref":"erlang.html#t:ext_binary/0","title":"erlang.ext_binary/0","type":"type"},{"doc":"A term of type iovec() , structured according to the Erlang external term format.","ref":"erlang.html#t:ext_iovec/0","title":"erlang.ext_iovec/0","type":"type"},{"doc":"A list of binaries. This datatype is useful to use together with enif_inspect_iovec .","ref":"erlang.html#t:iovec/0","title":"erlang.iovec/0","type":"type"},{"doc":"Process max heap size configuration. For more info see process_flag(max_heap_size, MaxHeapSize)","ref":"erlang.html#t:max_heap_size/0","title":"erlang.max_heap_size/0","type":"type"},{"doc":"See process_flag(message_queue_data, MQD) .","ref":"erlang.html#t:message_queue_data/0","title":"erlang.message_queue_data/0","type":"type"},{"doc":"Process message queue data configuration. For more information, see process_flag(message_queue_data, MQD)","ref":"erlang.html#t:message_queue_data/0","title":"erlang.message_queue_data/0","type":"type"},{"doc":"See monitor/3 .","ref":"erlang.html#t:monitor_option/0","title":"erlang.monitor_option/0","type":"type"},{"doc":"An opaque handle identifing a NIF resource object .","ref":"erlang.html#t:nif_resource/0","title":"erlang.nif_resource/0","type":"opaque"},{"doc":"Process priority level. For more info see process_flag(priority, Level)","ref":"erlang.html#t:priority_level/0","title":"erlang.priority_level/0","type":"type"},{"doc":"Options for spawn_opt() .","ref":"erlang.html#t:spawn_opt_option/0","title":"erlang.spawn_opt_option/0","type":"type"},{"doc":"An Erlang stacktrace as described by Errors and Error Handling section in the Erlang Reference Manual.","ref":"erlang.html#t:stacktrace/0","title":"erlang.stacktrace/0","type":"type"},{"doc":"An Erlang stacktrace as described by Errors and Error Handling section in the Erlang Reference Manual.","ref":"erlang.html#t:stacktrace_extrainfo/0","title":"erlang.stacktrace_extrainfo/0","type":"type"},{"doc":"Supported time unit representations: PartsPerSecond :: integer() &gt;= 1 Time unit expressed in parts per second. That is, the time unit equals 1/PartsPerSecond second. second Symbolic representation of the time unit represented by the integer 1 . millisecond Symbolic representation of the time unit represented by the integer 1000 . microsecond Symbolic representation of the time unit represented by the integer 1000_000 . nanosecond Symbolic representation of the time unit represented by the integer 1000_000_000 . native Symbolic representation of the native time unit used by the Erlang runtime system. The native time unit is determined at runtime system start, and remains the same until the runtime system terminates. If a runtime system is stopped and then started again (even on the same machine), the native time unit of the new runtime system instance can differ from the native time unit of the old runtime system instance. One can get an approximation of the native time unit by calling erlang:convert_time_unit(1, second, native) . The result equals the number of whole native time units per second. If the number of native time units per second does not add up to a whole number, the result is rounded downwards. The value of the native time unit gives you more or less no information about the quality of time values. It sets a limit for the resolution and for the precision of time values, but it gives no information about the accuracy of time values. The resolution of the native time unit and the resolution of time values can differ significantly. perf_counter Symbolic representation of the performance counter time unit used by the Erlang runtime system. The perf_counter time unit behaves much in the same way as the native time unit. That is, it can differ between runtime restarts. To get values of this type, call os:perf_counter/0 . deprecated_time_unit() Deprecated symbolic representations kept for backwards-compatibility. The time_unit/0 type can be extended. To convert time values between time units, use erlang:convert_time_unit/3 .","ref":"erlang.html#t:time_unit/0","title":"erlang.time_unit/0","type":"type"},{"doc":"See erlang:timestamp/0 .","ref":"erlang.html#t:timestamp/0","title":"erlang.timestamp/0","type":"type"},{"doc":"This module is preloaded and contains the code for the init system process that coordinates the startup of the system. The first function evaluated at startup is boot(BootArgs) , where BootArgs is a list of command-line arguments supplied to the Erlang runtime system from the local operating system; see erl(1) . init reads the boot script, which contains instructions on how to initiate the system. For more information about boot scripts, see script(4) . init also contains functions to restart, reboot, and stop the system. Command-Line Flags The support for loading of code from archive files is experimental. The only purpose of releasing it before it is ready is to obtain early feedback. The file format, semantics, interfaces, and so on, can be changed in a future release. The -code_path_choice flag is also experimental. The init module interprets the following command-line flags: -- Everything following -- up to the next flag is considered plain arguments and can be retrieved using get_plain_arguments/0 . -code_path_choice Choice Can be set to strict or relaxed . It controls how each directory in the code path is to be interpreted: Strictly as it appears in the boot script , or init is to be more relaxed and try to find a suitable directory if it can choose from a regular ebin directory and an ebin directory in an archive file. This flag is particular useful when you want to elaborate with code loading from archives without editing the boot script . For more information about interpretation of boot scripts, see script(4) . The flag has also a similar effect on how the code server works; see code(3) . -epmd_module Module Specifies the module to use for registration and lookup of node names. Defaults to erl_epmd . -eval Expr Scans, parses, and evaluates an arbitrary expression Expr during system initialization. If any of these steps fail (syntax error, parse error, or exception during evaluation), Erlang stops with an error message. In the following example Erlang is used as a hexadecimal calculator: % erl -noshell -eval &#39;R = 16#1F+16#A0, io:format(&quot;~.16B~n&quot;, [R])&#39; \\\\ - s erlang halt BF If multiple -eval expressions are specified, they are evaluated sequentially in the order specified. -eval expressions are evaluated sequentially with -s and -run function calls (this also in the order specified). As with -s and -run , an evaluation that does not terminate blocks the system initialization process. -extra Everything following -extra is considered plain arguments and can be retrieved using get_plain_arguments/0 . -run Mod [Func [Arg1, Arg2, ...]] Evaluates the specified function call during system initialization. Func defaults to start . If no arguments are provided, the function is assumed to be of arity 0. Otherwise it is assumed to be of arity 1, taking the list [Arg1,Arg2,...] as argument. All arguments are passed as strings. If an exception is raised, Erlang stops with an error message. Example: % erl -run foo -run foo bar -run foo bar baz 1 2 This starts the Erlang runtime system and evaluates the following functions: foo:start() foo:bar() foo:bar([&quot;baz&quot;, &quot;1&quot;, &quot;2&quot;]). The functions are executed sequentially in an initialization process, which then terminates normally and passes control to the user. This means that a -run call that does not return blocks further processing; to avoid this, use some variant of spawn in such cases. -s Mod [Func [Arg1, Arg2, ...]] Evaluates the specified function call during system initialization. Func defaults to start . If no arguments are provided, the function is assumed to be of arity 0. Otherwise it is assumed to be of arity 1, taking the list [Arg1,Arg2,...] as argument. All arguments are passed as atoms. If an exception is raised, Erlang stops with an error message. Example: % erl -s foo -s foo bar -s foo bar baz 1 2 This starts the Erlang runtime system and evaluates the following functions: foo:start() foo:bar() foo:bar([baz, '1', '2']). The functions are executed sequentially in an initialization process, which then terminates normally and passes control to the user. This means that a -s call that does not return blocks further processing; to avoid this, use some variant of spawn in such cases. Because of the limited length of atoms, it is recommended to use -run instead. Example % erl -- a b -children thomas claire -ages 7 3 -- x y . . . 1 &gt; init : get_plain_arguments ( ) . [ &quot;a&quot; , &quot;b&quot; , &quot;x&quot; , &quot;y&quot; ] 2 &gt; init : get_argument ( children ) . { ok , [ [ &quot;thomas&quot; , &quot;claire&quot; ] ] } 3 &gt; init : get_argument ( ages ) . { ok , [ [ &quot;7&quot; , &quot;3&quot; ] ] } 4 &gt; init : get_argument ( silly ) . error See Also erl_prim_loader(3) , heart(3)","ref":"init.html","title":"init","type":"module"},{"doc":"Starts the Erlang runtime system. This function is called when the emulator is started and coordinates system startup. BootArgs are all command-line arguments except the emulator flags, that is, flags and plain arguments; see erl(1) . init interprets some of the flags, see section Command-Line Flags below. The remaining flags (&quot;user flags&quot;) and plain arguments are passed to the init loop and can be retrieved by calling get_arguments/0 and get_plain_arguments/0 , respectively.","ref":"init.html#boot/1","title":"init.boot/1","type":"function"},{"doc":"Returns all values associated with the command-line user flag Flag . If Flag is provided several times, each Values is returned in preserved order. Example: % erl -a b c -a d . . . 1 &gt; init : get_argument ( a ) . { ok , [ [ &quot;b&quot; , &quot;c&quot; ] , [ &quot;d&quot; ] ] } The following flags are defined automatically and can be retrieved using this function: root The installation directory of Erlang/OTP, $ROOT : 2 &gt; init : get_argument ( root ) . { ok , [ [ &quot;/usr/local/otp/releases/otp_beam_solaris8_r10b_patched&quot; ] ] } progname The name of the program which started Erlang: 3 &gt; init : get_argument ( progname ) . { ok , [ [ &quot;erl&quot; ] ] } home The home directory (on Unix, the value of $HOME): 4 &gt; init : get_argument ( home ) . { ok , [ [ &quot;/home/harry&quot; ] ] } Returns error if no value is associated with Flag .","ref":"init.html#get_argument/1","title":"init.get_argument/1","type":"function"},{"doc":"Returns all command-line flags and the system-defined flags, see get_argument/1 .","ref":"init.html#get_arguments/0","title":"init.get_arguments/0","type":"function"},{"doc":"Returns any plain command-line arguments as a list of strings (possibly empty).","ref":"init.html#get_plain_arguments/0","title":"init.get_plain_arguments/0","type":"function"},{"doc":"The current status of the init process can be inspected. During system startup (initialization), InternalStatus is starting , and ProvidedStatus indicates how far the boot script has been interpreted. Each {progress, Info} term interpreted in the boot script affects ProvidedStatus , that is, ProvidedStatus gets the value of Info .","ref":"init.html#get_status/0","title":"init.get_status/0","type":"function"},{"doc":"All applications are taken down smoothly, all code is unloaded, and all ports are closed before the system terminates. If command-line flag -heart was specified, the heart program tries to reboot the system. For more information, see heart(3) . To limit the shutdown time, the time init is allowed to spend taking down applications, command-line flag -shutdown_time is to be used.","ref":"init.html#reboot/0","title":"init.reboot/0","type":"function"},{"doc":"The same as restart([]) .","ref":"init.html#restart/0","title":"init.restart/0","type":"function"},{"doc":"The system is restarted inside the running Erlang node, which means that the emulator is not restarted. All applications are taken down smoothly, all code is unloaded, and all ports are closed before the system is booted again in the same way as initially started. The same BootArgs are used when restarting the system unless the mode option is given, allowing the code loading mode to be set to either embedded or interactive . All other BootArgs remain the same. To limit the shutdown time, the time init is allowed to spend taking down applications, command-line flag -shutdown_time is to be used.","ref":"init.html#restart/1","title":"init.restart/1","type":"function"},{"doc":"Gets the identity of the boot script used to boot the system. Id can be any Erlang term. In the delivered boot scripts, Id is {Name, Vsn} . Name and Vsn are strings.","ref":"init.html#script_id/0","title":"init.script_id/0","type":"function"},{"doc":"The same as stop(0) .","ref":"init.html#stop/0","title":"init.stop/0","type":"function"},{"doc":"All applications are taken down smoothly, all code is unloaded, and all ports are closed before the system terminates by calling halt(Status) . If command-line flag -heart was specified, the heart program is terminated before the Erlang node terminates. For more information, see heart(3) . To limit the shutdown time, the time init is allowed to spend taking down applications, command-line flag -shutdown_time is to be used.","ref":"init.html#stop/1","title":"init.stop/1","type":"function"},{"doc":"Code loading mode.","ref":"init.html#t:mode/0","title":"init.mode/0","type":"type"},{"doc":"This module is similar to ets in that it provides a storage for Erlang terms that can be accessed in constant time, but with the difference that persistent_term has been highly optimized for reading terms at the expense of writing and updating terms. When a persistent term is updated or deleted, a global garbage collection pass is run to scan all processes for the deleted term, and to copy it into each process that still uses it. Therefore, persistent_term is suitable for storing Erlang terms that are frequently accessed but never or infrequently updated. Persistent terms is an advanced feature and is not a general replacement for ETS tables. Before using persistent terms, make sure to fully understand the consequence to system performance when updating or deleting persistent terms. Term lookup (using get/1 ), is done in constant time and without taking any locks, and the term is not copied to the heap (as is the case with terms stored in ETS tables). Storing or updating a term (using put/2 ) is proportional to the number of already created persistent terms because the hash table holding the keys will be copied. In addition, the term itself will be copied. When a (complex) term is deleted (using erase/1 ) or replaced by another (using put/2 ), a global garbage collection is initiated. It works like this: All processes in the system will be scheduled to run a scan of their heaps for the term that has been deleted. While such scan is relatively light-weight, if there are many processes, the system can become less responsive until all process have scanned their heaps. If the deleted term (or any part of it) is still used by a process, that process will do a major (fullsweep) garbage collection and copy the term into the process. However, at most two processes at a time will be scheduled to do that kind of garbage collection. Deletion of atoms and other terms that fit in one machine word is specially optimized to avoid doing a global GC. It is still not recommended to update persistent terms with such values too frequently because the hash table holding the keys is copied every time a persistent term is updated. Some examples are suitable uses for persistent terms are: Storing of configuration data that must be easily accessible by all processes. Storing of references for NIF resources. Storing of references for efficient counters. Storing an atom to indicate a logging level or whether debugging is turned on. Storing Huge Persistent Terms The current implementation of persistent terms uses the literal allocator also used for literals (constant terms) in BEAM code. By default, 1 GB of virtual address space is reserved for literals in BEAM code and persistent terms. The amount of virtual address space reserved for literals can be changed by using the +MIscs option when starting the emulator. Here is an example how the reserved virtual address space for literals can be raised to 2 GB (2048 MB): erl + MIscs 2048 Best Practices for Using Persistent Terms It is recommended to use keys like ?MODULE or {?MODULE,SubKey} to avoid name collisions. Prefer creating a few large persistent terms to creating many small persistent terms. The execution time for storing a persistent term is proportional to the number of already existing terms. Updating a persistent term with the same value as it already has is specially optimized to do nothing quickly; thus, there is no need compare the old and new values and avoid calling put/2 if the values are equal. When atoms or other terms that fit in one machine word are deleted, no global GC is needed. Therefore, persistent terms that have atoms as their values can be updated more frequently, but note that updating such persistent terms is still much more expensive than reading them. Updating or deleting a persistent term will trigger a global GC if the term does not fit in one machine word. Processes will be scheduled as usual, but all processes will be made runnable at once, which will make the system less responsive until all process have run and scanned their heaps for the deleted terms. One way to minimize the effects on responsiveness could be to minimize the number of processes on the node before updating or deleting a persistent term. It would also be wise to avoid updating terms when the system is at peak load. Avoid storing a retrieved persistent term in a process if that persistent term could be deleted or updated in the future. If a process holds a reference to a persistent term when the term is deleted, the process will be garbage collected and the term copied to process. Avoid updating or deleting more than one persistent term at a time. Each deleted term will trigger its own global GC. That means that deleting N terms will make the system less responsive N times longer than deleting a single persistent term. Therefore, terms that are to be updated at the same time should be collected into a larger term, for example, a map or a tuple. Example The following example shows how lock contention for ETS tables can be minimized by having one ETS table for each scheduler. The table identifiers for the ETS tables are stored as a single persistent term: %% There is one ETS table for each scheduler. Sid = erlang : system_info ( scheduler_id ) , Tid = element ( Sid , persistent_term : get ( ? MODULE ) ) , ets : update_counter ( Tid , Key , 1 ) .","ref":"persistent_term.html","title":"persistent_term","type":"module"},{"doc":"Erase the name for the persistent term with key Key . The return value will be true if there was a persistent term with the key Key , and false if there was no persistent term associated with the key. If there existed a previous persistent term associated with key Key , a global GC has been initiated when erase/1 returns. See Description .","ref":"persistent_term.html#erase/1","title":"persistent_term.erase/1","type":"function"},{"doc":"Retrieve the keys and values for all persistent terms. The keys will be copied to the heap for the process calling get/0 , but the values will not.","ref":"persistent_term.html#get/0","title":"persistent_term.get/0","type":"function"},{"doc":"Retrieve the value for the persistent term associated with the key Key . The lookup will be made in constant time and the value will not be copied to the heap of the calling process. This function fails with a badarg exception if no term has been stored with the key Key . If the calling process holds on to the value of the persistent term and the persistent term is deleted in the future, the term will be copied to the process.","ref":"persistent_term.html#get/1","title":"persistent_term.get/1","type":"function"},{"doc":"Retrieve the value for the persistent term associated with the key Key . The lookup will be made in constant time and the value will not be copied to the heap of the calling process. This function returns Default if no term has been stored with the key Key . If the calling process holds on to the value of the persistent term and the persistent term is deleted in the future, the term will be copied to the process.","ref":"persistent_term.html#get/2","title":"persistent_term.get/2","type":"function"},{"doc":"Return information about persistent terms in a map. The map has the following keys: count The number of persistent terms. memory The total amount of memory (measured in bytes) used by all persistent terms.","ref":"persistent_term.html#info/0","title":"persistent_term.info/0","type":"function"},{"doc":"Store the value Value as a persistent term and associate it with the key Key . If the value Value is equal to the value previously stored for the key, put/2 will do nothing and return quickly. If there existed a previous persistent term associated with key Key , a global GC has been initiated when put/2 returns. See Description .","ref":"persistent_term.html#put/2","title":"persistent_term.put/2","type":"function"},{"doc":"Any Erlang term.","ref":"persistent_term.html#t:key/0","title":"persistent_term.key/0","type":"type"},{"doc":"Any Erlang term.","ref":"persistent_term.html#t:value/0","title":"persistent_term.value/0","type":"type"},{"doc":"This module provides an API for the zlib library ( www.zlib.net ). It is used to compress and decompress data. The data format is described by RFC 1950 , RFC 1951 , and RFC 1952 . A typical (compress) usage is as follows: Z = zlib : open ( ) , ok = zlib : deflateInit ( Z , default ) , Compress = fun ( end_of_data , _ Cont ) -&gt; [ ] ; ( Data , Cont ) -&gt; [ zlib : deflate ( Z , Data ) | Cont ( Read ( ) , Cont ) ] end , Compressed = Compress ( Read ( ) , Compress ) , Last = zlib : deflate ( Z , [ ] , finish ) , ok = zlib : deflateEnd ( Z ) , zlib : close ( Z ) , list_to_binary ( [ Compressed | Last ] ) In all functions errors, {'EXIT',{Reason,Backtrace}} , can be thrown, where Reason describes the error. Typical Reason s: badarg Bad argument. not_initialized The stream hasn't been initialized, eg. if inflateInit/1 wasn't called prior to a call to inflate/2 . not_on_controlling_process The stream was used by a process that doesn't control it. Use set_controlling_process/2 if you need to transfer a stream to a different process. data_error The data contains errors. stream_error Inconsistent stream state. {need_dictionary,Adler32} See inflate/2 .","ref":"zlib.html","title":"zlib","type":"module"},{"doc":"Calculates the Adler-32 checksum for Data . This function is deprecated and will be removed in a future release. Use erlang:adler32/1 instead.","ref":"zlib.html#adler32/2","title":"zlib.adler32/2","type":"function"},{"doc":"Updates a running Adler-32 checksum for Data . If Data is the empty binary or the empty iolist, this function returns the required initial value for the checksum. Example: Crc = lists : foldl ( fun ( Data , Crc0 ) -&gt; zlib : adler32 ( Z , Crc0 , Data ) , end , zlib : adler32 ( Z , &lt;&lt; &gt;&gt; ) , Datas ) This function is deprecated and will be removed in a future release. Use erlang:adler32/2 instead.","ref":"zlib.html#adler32/3","title":"zlib.adler32/3","type":"function"},{"doc":"Combines two Adler-32 checksums into one. For two binaries or iolists, Data1 and Data2 with sizes of Size1 and Size2 , with Adler-32 checksums Adler1 and Adler2 . This function returns the Adler checksum of [Data1,Data2] , requiring only Adler1 , Adler2 , and Size2 . This function is deprecated and will be removed in a future release. Use erlang:adler32_combine/3 instead.","ref":"zlib.html#adler32_combine/4","title":"zlib.adler32_combine/4","type":"function"},{"doc":"Closes the stream referenced by Z .","ref":"zlib.html#close/1","title":"zlib.close/1","type":"function"},{"doc":"Compresses data with zlib headers and checksum.","ref":"zlib.html#compress/1","title":"zlib.compress/1","type":"function"},{"doc":"Gets the current calculated CRC checksum. This function is deprecated and will be removed in a future release. Use erlang:crc32/1 on the uncompressed data instead.","ref":"zlib.html#crc32/1","title":"zlib.crc32/1","type":"function"},{"doc":"Calculates the CRC checksum for Data . This function is deprecated and will be removed in a future release. Use erlang:crc32/1 instead.","ref":"zlib.html#crc32/2","title":"zlib.crc32/2","type":"function"},{"doc":"Updates a running CRC checksum for Data . If Data is the empty binary or the empty iolist, this function returns the required initial value for the CRC. Example: Crc = lists : foldl ( fun ( Data , Crc0 ) -&gt; zlib : crc32 ( Z , Crc0 , Data ) , end , zlib : crc32 ( Z , &lt;&lt; &gt;&gt; ) , Datas ) This function is deprecated and will be removed in a future release. Use erlang:crc32/2 instead.","ref":"zlib.html#crc32/3","title":"zlib.crc32/3","type":"function"},{"doc":"Combines two CRC checksums into one. For two binaries or iolists, Data1 and Data2 with sizes of Size1 and Size2 , with CRC checksums CRC1 and CRC2 . This function returns the CRC checksum of [Data1,Data2] , requiring only CRC1 , CRC2 , and Size2 . This function is deprecated and will be removed in a future release. Use erlang:crc32_combine/3 instead.","ref":"zlib.html#crc32_combine/4","title":"zlib.crc32_combine/4","type":"function"},{"doc":"Same as deflate(Z, Data, none) .","ref":"zlib.html#deflate/2","title":"zlib.deflate/2","type":"function"},{"doc":"Compresses as much data as possible, and stops when the input buffer becomes empty. It can introduce some output latency (reading input without producing any output) except when forced to flush. If Flush is set to sync , all pending output is flushed to the output buffer and the output is aligned on a byte boundary, so that the decompressor can get all input data available so far. Flushing can degrade compression for some compression algorithms; thus, use it only when necessary. If Flush is set to full , all output is flushed as with sync , and the compression state is reset so that decompression can restart from this point if previous compressed data has been damaged or if random access is desired. Using full too often can seriously degrade the compression. If Flush is set to finish , pending input is processed, pending output is flushed, and deflate/3 returns. Afterwards the only possible operations on the stream are deflateReset/1 or deflateEnd/1 . Flush can be set to finish immediately after deflateInit if all compression is to be done in one step. Example: zlib : deflateInit ( Z ) , B1 = zlib : deflate ( Z , Data ) , B2 = zlib : deflate ( Z , &lt;&lt; &gt;&gt; , finish ) , zlib : deflateEnd ( Z ) , list_to_binary ( [ B1 , B2 ] )","ref":"zlib.html#deflate/3","title":"zlib.deflate/3","type":"function"},{"doc":"Ends the deflate session and cleans all data used. Notice that this function throws a data_error exception if the last call to deflate/3 was not called with Flush set to finish .","ref":"zlib.html#deflateEnd/1","title":"zlib.deflateEnd/1","type":"function"},{"doc":"Same as zlib:deflateInit(Z, default) .","ref":"zlib.html#deflateInit/1","title":"zlib.deflateInit/1","type":"function"},{"doc":"Initializes a zlib stream for compression. Level decides the compression level to be used: default gives default compromise between speed and compression none (0) gives no compression best_speed (1) gives best speed best_compression (9) gives best compression","ref":"zlib.html#deflateInit/2","title":"zlib.deflateInit/2","type":"function"},{"doc":"Initiates a zlib stream for compression. Level Compression level to use: default gives default compromise between speed and compression none (0) gives no compression best_speed (1) gives best speed best_compression (9) gives best compression Method Compression method to use, currently the only supported method is deflated . WindowBits The base two logarithm of the window size (the size of the history buffer). It is to be in the range 8 through 15. Larger values result in better compression at the expense of memory usage. Defaults to 15 if deflateInit/2 is used. A negative WindowBits value suppresses the zlib header (and checksum) from the stream. Notice that the zlib source mentions this only as a undocumented feature. Due to a known bug in the underlying zlib library, WindowBits values 8 and -8 do not work as expected. In zlib versions before 1.2.9 values 8 and -8 are automatically changed to 9 and -9. From zlib version 1.2.9 value -8 is rejected causing zlib:deflateInit/6 to fail (8 is still changed to 9). It also seem possible that future versions of zlib may fix this bug and start accepting 8 and -8 as is. Conclusion: Avoid values 8 and -8 unless you know your zlib version supports them. MemLevel Specifies how much memory is to be allocated for the internal compression state: MemLevel =1 uses minimum memory but is slow and reduces compression ratio; MemLevel =9 uses maximum memory for optimal speed. Defaults to 8. Strategy Tunes the compression algorithm. Use the following values: default for normal data filtered for data produced by a filter (or predictor) huffman_only to force Huffman encoding only (no string match) rle to limit match distances to one (run-length encoding) Filtered data consists mostly of small values with a somewhat random distribution. In this case, the compression algorithm is tuned to compress them better. The effect of filtered is to force more Huffman coding and less string matching; it is somewhat intermediate between default and huffman_only . rle is designed to be almost as fast as huffman_only , but gives better compression for PNG image data. Strategy affects only the compression ratio, but not the correctness of the compressed output even if it is not set appropriately.","ref":"zlib.html#deflateInit/6","title":"zlib.deflateInit/6","type":"function"},{"doc":"Dynamically updates the compression level and compression strategy. The interpretation of Level and Strategy is as in deflateInit/6 . This can be used to switch between compression and straight copy of the input data, or to switch to a different kind of input data requiring a different strategy. If the compression level is changed, the input available so far is compressed with the old level (and can be flushed); the new level takes effect only at the next call of deflate/3 . Before the call of deflateParams , the stream state must be set as for a call of deflate/3 , as the currently available input may have to be compressed and flushed.","ref":"zlib.html#deflateParams/3","title":"zlib.deflateParams/3","type":"function"},{"doc":"Equivalent to deflateEnd/1 followed by deflateInit/1,2,6 , but does not free and reallocate all the internal compression state. The stream keeps the same compression level and any other attributes.","ref":"zlib.html#deflateReset/1","title":"zlib.deflateReset/1","type":"function"},{"doc":"Initializes the compression dictionary from the specified byte sequence without producing any compressed output. This function must be called immediately after deflateInit/1,2,6 or deflateReset/1 , before any call of deflate/3 . The compressor and decompressor must use the same dictionary (see inflateSetDictionary/2 ). The Adler checksum of the dictionary is returned.","ref":"zlib.html#deflateSetDictionary/2","title":"zlib.deflateSetDictionary/2","type":"function"},{"doc":"Gets the size of the intermediate buffer. This function is deprecated and will be removed in a future release.","ref":"zlib.html#getBufSize/1","title":"zlib.getBufSize/1","type":"function"},{"doc":"Uncompresses data with gz headers and checksum.","ref":"zlib.html#gunzip/1","title":"zlib.gunzip/1","type":"function"},{"doc":"Compresses data with gz headers and checksum.","ref":"zlib.html#gzip/1","title":"zlib.gzip/1","type":"function"},{"doc":"Equivalent to inflate(Z, Data, [])","ref":"zlib.html#inflate/2","title":"zlib.inflate/2","type":"function"},{"doc":"Decompresses as much data as possible. It can introduce some output latency (reading input without producing any output). Currently the only available option is {exception_on_need_dict,boolean()} which controls whether the function should throw an exception when a preset dictionary is required for decompression. When set to false, a need_dictionary tuple will be returned instead. See inflateSetDictionary/2 for details. This option defaults to true for backwards compatibility but we intend to remove the exception behavior in a future release. New code that needs to handle dictionaries manually should always specify {exception_on_need_dict,false} .","ref":"zlib.html#inflate/3","title":"zlib.inflate/3","type":"function"},{"doc":"This function is deprecated and will be removed in a future release. Use safeInflate/2 instead. Reads the next chunk of uncompressed data, initialized by inflateChunk/2 . This function is to be repeatedly called, while it returns {more, Decompressed} .","ref":"zlib.html#inflateChunk/1","title":"zlib.inflateChunk/1","type":"function"},{"doc":"This function is deprecated and will be removed in a future release. Use safeInflate/2 instead. Like inflate/2 , but decompresses no more data than will fit in the buffer configured through setBufSize/2 . Is is useful when decompressing a stream with a high compression ratio, such that a small amount of compressed input can expand up to 1000 times. This function returns {more, Decompressed} , when there is more output available, and inflateChunk/1 is to be used to read it. This function can introduce some output latency (reading input without producing any output). An exception will be thrown if a preset dictionary is required for further decompression. See inflateSetDictionary/2 for details. Example: walk ( Compressed , Handler ) -&gt; Z = zlib : open ( ) , zlib : inflateInit ( Z ) , % Limit single uncompressed chunk size to 512kb zlib : setBufSize ( Z , 512 * 1024 ) , loop ( Z , Handler , zlib : inflateChunk ( Z , Compressed ) ) , zlib : inflateEnd ( Z ) , zlib : close ( Z ) . loop ( Z , Handler , { more , Uncompressed } ) -&gt; Handler ( Uncompressed ) , loop ( Z , Handler , zlib : inflateChunk ( Z ) ) ; loop ( Z , Handler , Uncompressed ) -&gt; Handler ( Uncompressed ) .","ref":"zlib.html#inflateChunk/2","title":"zlib.inflateChunk/2","type":"function"},{"doc":"Ends the inflate session and cleans all data used. Notice that this function throws a data_error exception if no end of stream was found (meaning that not all data has been uncompressed).","ref":"zlib.html#inflateEnd/1","title":"zlib.inflateEnd/1","type":"function"},{"doc":"Returns the decompression dictionary currently in use by the stream. This function must be called between inflateInit/1,2 and inflateEnd . Only supported if ERTS was compiled with zlib &gt;= 1.2.8.","ref":"zlib.html#inflateGetDictionary/1","title":"zlib.inflateGetDictionary/1","type":"function"},{"doc":"Initializes a zlib stream for decompression.","ref":"zlib.html#inflateInit/1","title":"zlib.inflateInit/1","type":"function"},{"doc":"Initializes a decompression session on zlib stream. WindowBits is the base two logarithm of the maximum window size (the size of the history buffer). It is to be in the range 8 through 15. Default to 15 if inflateInit/1 is used. If a compressed stream with a larger window size is specified as input, inflate/2 throws the data_error exception. A negative WindowBits value makes zlib ignore the zlib header (and checksum) from the stream. Notice that the zlib source mentions this only as a undocumented feature.","ref":"zlib.html#inflateInit/2","title":"zlib.inflateInit/2","type":"function"},{"doc":"Equivalent to inflateEnd/1 followed by inflateInit/1 , but does not free and reallocate all the internal decompression state. The stream will keep attributes that could have been set by inflateInit/1,2 .","ref":"zlib.html#inflateReset/1","title":"zlib.inflateReset/1","type":"function"},{"doc":"Initializes the decompression dictionary from the specified uncompressed byte sequence. This function must be called as a response to an inflate operation (eg. safeInflate/2 ) returning {need_dictionary,Adler,Output} or in the case of deprecated functions, throwing an {'EXIT',{{need_dictionary,Adler},_StackTrace}} exception. The dictionary chosen by the compressor can be determined from the Adler value returned or thrown by the call to the inflate function. The compressor and decompressor must use the same dictionary (See deflateSetDictionary/2 ). After setting the dictionary the inflate operation should be retried without new input. Example: deprecated_unpack ( Z , Compressed , Dict ) -&gt; case catch zlib : inflate ( Z , Compressed ) of { &#39;EXIT&#39; , { { need_dictionary , _ DictID } , _ } } -&gt; ok = zlib : inflateSetDictionary ( Z , Dict ) , Uncompressed = zlib : inflate ( Z , [ ] ) ; Uncompressed -&gt; Uncompressed end . new_unpack ( Z , Compressed , Dict ) -&gt; case zlib : inflate ( Z , Compressed , [ { exception_on_need_dict , false } ] ) of { need_dictionary , _ DictId , Output } -&gt; ok = zlib : inflateSetDictionary ( Z , Dict ) , [ Output | zlib : inflate ( Z , [ ] ) ] ; Uncompressed -&gt; Uncompressed end .","ref":"zlib.html#inflateSetDictionary/2","title":"zlib.inflateSetDictionary/2","type":"function"},{"doc":"Opens a zlib stream.","ref":"zlib.html#open/0","title":"zlib.open/0","type":"function"},{"doc":"Like inflate/2 , but returns once it has expanded beyond a small implementation-defined threshold. It's useful when decompressing untrusted input which could have been maliciously crafted to expand until the system runs out of memory. This function returns {continue | finished, Output} , where Output is the data that was decompressed in this call. New input can be queued up on each call if desired, and the function will return {finished, Output} once all queued data has been decompressed. This function can introduce some output latency (reading input without producing any output). If a preset dictionary is required for further decompression, this function returns a need_dictionary tuple. See inflateSetDictionary/2 ) for details. Example: walk ( Compressed , Handler ) -&gt; Z = zlib : open ( ) , zlib : inflateInit ( Z ) , loop ( Z , Handler , zlib : safeInflate ( Z , Compressed ) ) , zlib : inflateEnd ( Z ) , zlib : close ( Z ) . loop ( Z , Handler , { continue , Output } ) -&gt; Handler ( Output ) , loop ( Z , Handler , zlib : safeInflate ( Z , [ ] ) ) ; loop ( Z , Handler , { finished , Output } ) -&gt; Handler ( Output ) .","ref":"zlib.html#safeInflate/2","title":"zlib.safeInflate/2","type":"function"},{"doc":"Sets the intermediate buffer size. This function is deprecated and will be removed in a future release.","ref":"zlib.html#setBufSize/2","title":"zlib.setBufSize/2","type":"function"},{"doc":"Changes the controlling process of Z to Pid , which must be a local process.","ref":"zlib.html#set_controlling_process/2","title":"zlib.set_controlling_process/2","type":"function"},{"doc":"Uncompresses data with zlib headers and checksum.","ref":"zlib.html#uncompress/1","title":"zlib.uncompress/1","type":"function"},{"doc":"Uncompresses data without zlib headers and checksum.","ref":"zlib.html#unzip/1","title":"zlib.unzip/1","type":"function"},{"doc":"Compresses data without zlib headers and checksum.","ref":"zlib.html#zip/1","title":"zlib.zip/1","type":"function"},{"doc":"","ref":"zlib.html#t:zflush/0","title":"zlib.zflush/0","type":"type"},{"doc":"","ref":"zlib.html#t:zlevel/0","title":"zlib.zlevel/0","type":"type"},{"doc":"","ref":"zlib.html#t:zmemlevel/0","title":"zlib.zmemlevel/0","type":"type"},{"doc":"","ref":"zlib.html#t:zmethod/0","title":"zlib.zmethod/0","type":"type"},{"doc":"","ref":"zlib.html#t:zstrategy/0","title":"zlib.zstrategy/0","type":"type"},{"doc":"A zlib stream, see open/0 .","ref":"zlib.html#t:zstream/0","title":"zlib.zstream/0","type":"type"},{"doc":"Normally in the range -15..-8 | 8..15 .","ref":"zlib.html#t:zwindowbits/0","title":"zlib.zwindowbits/0","type":"type"}]