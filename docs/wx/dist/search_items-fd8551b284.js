searchNodes=[{"doc":"Standard OpenGL API This documents the functions as a brief version of the complete OpenGL reference pages.","ref":"glu.html","title":"glu","type":"module"},{"doc":"glu:build1DMipmapLevels/9 builds a subset of prefiltered one-dimensional texture maps of decreasing resolutions called a mipmap. This is used for the antialiasing of texture mapped primitives. External documentation.","ref":"glu.html#build1DMipmapLevels/9","title":"glu.build1DMipmapLevels/9","type":"function"},{"doc":"glu:build1DMipmaps/6 builds a series of prefiltered one-dimensional texture maps of decreasing resolutions called a mipmap. This is used for the antialiasing of texture mapped primitives. External documentation.","ref":"glu.html#build1DMipmaps/6","title":"glu.build1DMipmaps/6","type":"function"},{"doc":"glu:build2DMipmapLevels/10 builds a subset of prefiltered two-dimensional texture maps of decreasing resolutions called a mipmap. This is used for the antialiasing of texture mapped primitives. External documentation.","ref":"glu.html#build2DMipmapLevels/10","title":"glu.build2DMipmapLevels/10","type":"function"},{"doc":"glu:build2DMipmaps/7 builds a series of prefiltered two-dimensional texture maps of decreasing resolutions called a mipmap. This is used for the antialiasing of texture-mapped primitives. External documentation.","ref":"glu.html#build2DMipmaps/7","title":"glu.build2DMipmaps/7","type":"function"},{"doc":"glu:build3DMipmapLevels/11 builds a subset of prefiltered three-dimensional texture maps of decreasing resolutions called a mipmap. This is used for the antialiasing of texture mapped primitives. External documentation.","ref":"glu.html#build3DMipmapLevels/11","title":"glu.build3DMipmapLevels/11","type":"function"},{"doc":"glu:build3DMipmaps/8 builds a series of prefiltered three-dimensional texture maps of decreasing resolutions called a mipmap. This is used for the antialiasing of texture-mapped primitives. External documentation.","ref":"glu.html#build3DMipmaps/8","title":"glu.build3DMipmaps/8","type":"function"},{"doc":"glu:checkExtension/2 returns ?GLU_TRUE if ExtName is supported otherwise ?GLU_FALSE is returned. External documentation.","ref":"glu.html#checkExtension/2","title":"glu.checkExtension/2","type":"function"},{"doc":"glu:cylinder/6 draws a cylinder oriented along the z axis. The base of the cylinder is placed at z = 0 and the top at z=height. Like a sphere, a cylinder is subdivided around the z axis into slices and along the z axis into stacks. External documentation.","ref":"glu.html#cylinder/6","title":"glu.cylinder/6","type":"function"},{"doc":"glu:deleteQuadric/1 destroys the quadrics object (created with glu:newQuadric/0 ) and frees any memory it uses. Once glu:deleteQuadric/1 has been called, Quad cannot be used again. External documentation.","ref":"glu.html#deleteQuadric/1","title":"glu.deleteQuadric/1","type":"function"},{"doc":"glu:disk/5 renders a disk on the z = 0 plane. The disk has a radius of Outer and contains a concentric circular hole with a radius of Inner . If Inner is 0, then no hole is generated. The disk is subdivided around the z axis into slices (like pizza slices) and also about the z axis into rings (as specified by Slices and Loops , respectively). External documentation.","ref":"glu.html#disk/5","title":"glu.disk/5","type":"function"},{"doc":"glu:errorString/1 produces an error string from a GL or GLU error code. The string is in ISO Latin 1 format. For example, glu:errorString/1 ( ?GLU_OUT_OF_MEMORY ) returns the string out of memory . External documentation.","ref":"glu.html#errorString/1","title":"glu.errorString/1","type":"function"},{"doc":"glu:getString/1 returns a pointer to a static string describing the GLU version or the GLU extensions that are supported. External documentation.","ref":"glu.html#getString/1","title":"glu.getString/1","type":"function"},{"doc":"glu:lookAt/9 creates a viewing matrix derived from an eye point, a reference point indicating the center of the scene, and an UP vector. External documentation.","ref":"glu.html#lookAt/9","title":"glu.lookAt/9","type":"function"},{"doc":"glu:newQuadric/0 creates and returns a pointer to a new quadrics object. This object must be referred to when calling quadrics rendering and control functions. A return value of 0 means that there is not enough memory to allocate the object. External documentation.","ref":"glu.html#newQuadric/0","title":"glu.newQuadric/0","type":"function"},{"doc":"glu:ortho2D/4 sets up a two-dimensional orthographic viewing region. This is equivalent to calling gl:ortho/6 with near=-1 and far=1. External documentation.","ref":"glu.html#ortho2D/4","title":"glu.ortho2D/4","type":"function"},{"doc":"glu:partialDisk/7 renders a partial disk on the z=0 plane. A partial disk is similar to a full disk, except that only the subset of the disk from Start through Start + Sweep is included (where 0 degrees is along the +f2yf axis, 90 degrees along the + x axis, 180 degrees along the - y axis, and 270 degrees along the - x axis). External documentation.","ref":"glu.html#partialDisk/7","title":"glu.partialDisk/7","type":"function"},{"doc":"glu:perspective/4 specifies a viewing frustum into the world coordinate system. In general, the aspect ratio in glu:perspective/4 should match the aspect ratio of the associated viewport. For example, aspect=2.0 means the viewer's angle of view is twice as wide in x as it is in y . If the viewport is twice as wide as it is tall, it displays the image without distortion. External documentation.","ref":"glu.html#perspective/4","title":"glu.perspective/4","type":"function"},{"doc":"glu:pickMatrix/5 creates a projection matrix that can be used to restrict drawing to a small region of the viewport. This is typically useful to determine what objects are being drawn near the cursor. Use glu:pickMatrix/5 to restrict drawing to a small region around the cursor. Then, enter selection mode (with gl:renderMode/1 ) and rerender the scene. All primitives that would have been drawn near the cursor are identified and stored in the selection buffer. External documentation.","ref":"glu.html#pickMatrix/5","title":"glu.pickMatrix/5","type":"function"},{"doc":"glu:project/6 transforms the specified object coordinates into window coordinates using Model , Proj , and View . The result is stored in WinX , WinY , and WinZ . A return value of ?GLU_TRUE indicates success, a return value of ?GLU_FALSE indicates failure. External documentation.","ref":"glu.html#project/6","title":"glu.project/6","type":"function"},{"doc":"glu:quadricDrawStyle/2 specifies the draw style for quadrics rendered with Quad . The legal values are as follows: External documentation.","ref":"glu.html#quadricDrawStyle/2","title":"glu.quadricDrawStyle/2","type":"function"},{"doc":"glu:quadricNormals/2 specifies what kind of normals are desired for quadrics rendered with Quad . The legal values are as follows: External documentation.","ref":"glu.html#quadricNormals/2","title":"glu.quadricNormals/2","type":"function"},{"doc":"glu:quadricOrientation/2 specifies what kind of orientation is desired for quadrics rendered with Quad . The Orientation values are as follows: External documentation.","ref":"glu.html#quadricOrientation/2","title":"glu.quadricOrientation/2","type":"function"},{"doc":"glu:quadricTexture/2 specifies if texture coordinates should be generated for quadrics rendered with Quad . If the value of Texture is ?GLU_TRUE , then texture coordinates are generated, and if Texture is ?GLU_FALSE , they are not. The initial value is ?GLU_FALSE . External documentation.","ref":"glu.html#quadricTexture/2","title":"glu.quadricTexture/2","type":"function"},{"doc":"glu:scaleImage/9 scales a pixel image using the appropriate pixel store modes to unpack data from the source image and pack data into the destination image. External documentation.","ref":"glu.html#scaleImage/9","title":"glu.scaleImage/9","type":"function"},{"doc":"glu:sphere/4 draws a sphere of the given radius centered around the origin. The sphere is subdivided around the z axis into slices and along the z axis into stacks (similar to lines of longitude and latitude). External documentation.","ref":"glu.html#sphere/4","title":"glu.sphere/4","type":"function"},{"doc":"Triangulates a polygon, the polygon is specified by a Normal and Vs a list of vertex positions. The function returns a list of indices of the vertices and a binary (64bit native float) containing an array of vertex positions, it starts with the vertices in Vs and may contain newly created vertices in the end.","ref":"glu.html#tesselate/2","title":"glu.tesselate/2","type":"function"},{"doc":"glu:unProject/6 maps the specified window coordinates into object coordinates using Model , Proj , and View . The result is stored in ObjX , ObjY , and ObjZ . A return value of ?GLU_TRUE indicates success; a return value of ?GLU_FALSE indicates failure. External documentation.","ref":"glu.html#unProject/6","title":"glu.unProject/6","type":"function"},{"doc":"","ref":"glu.html#unProject4/9","title":"glu.unProject4/9","type":"function"},{"doc":"","ref":"glu.html#t:enum/0","title":"glu.enum/0","type":"type"},{"doc":"","ref":"glu.html#t:f/0","title":"glu.f/0","type":"type"},{"doc":"","ref":"glu.html#t:i/0","title":"glu.i/0","type":"type"},{"doc":"","ref":"glu.html#t:m12/0","title":"glu.m12/0","type":"type"},{"doc":"","ref":"glu.html#t:m16/0","title":"glu.m16/0","type":"type"},{"doc":"","ref":"glu.html#t:matrix/0","title":"glu.matrix/0","type":"type"},{"doc":"","ref":"glu.html#t:mem/0","title":"glu.mem/0","type":"type"},{"doc":"","ref":"glu.html#t:vertex/0","title":"glu.vertex/0","type":"type"},{"doc":"A port of wxWidgets . This is the base api of wxWidgets . This module contains functions for starting and stopping the wx-server, as well as other utility functions. wxWidgets is object oriented, and not functional. Thus, in wxErlang a module represents a class, and the object created by this class has an own type, wxCLASS(). This module represents the base class, and all other wxMODULE's are sub-classes of this class. Objects of a class are created with wxCLASS:new(...) and destroyed with wxCLASS:destroy(). Member functions are called with wxCLASS:member(Object, ...) instead of as in C++ Object.member(...). Sub class modules inherit (non static) functions from their parents. The inherited functions are not documented in the sub-classes. This erlang port of wxWidgets tries to be a one-to-one mapping with the original wxWidgets library. Some things are different though, as the optional arguments use property lists and can be in any order. The main difference is the event handling which is different from the original library. See wxEvtHandler . The following classes are implemented directly as erlang types: wxPoint={x,y},wxSize={w,h},wxRect={x,y,w,h},wxColour={r,g,b [,a]}, wxString= unicode:chardata() , wxGBPosition={r,c},wxGBSpan={rs,cs},wxGridCellCoords={r,c}. wxWidgets uses a process specific environment, which is created by wx:new/0 . To be able to use the environment from other processes, call get_env/0 to retrieve the environment and set_env/1 to assign the environment in the other process. Global (classless) functions are located in the wx_misc module. DATA TYPES wx_colour() = {R::byte(), G::byte(), B::byte()} | wx_colour4() wx_colour4() = {R::byte(), G::byte(), B::byte(), A::byte()} wx_datetime() = {{Year::integer(), Month::integer(), Day::integer()}, {Hour::integer(), Minute::integer(), Second::integer()}} In Local Timezone wx_enum() = integer() Constant defined in wx.hrl wx_env() = #wx_env{} Opaque process environment wx_memory() = binary() | #wx_mem{} Opaque memory reference wx_object() = #wx_ref{} Opaque object reference wx_wxHtmlLinkInfo() = #wxHtmlLinkInfo{href= unicode:chardata() , target= unicode:chardata() } wx_wxMouseState() = #wxMouseState{x=integer(), y=integer(), leftDown=boolean(), middleDown=boolean(), rightDown=boolean(), controlDown=boolean(), shiftDown=boolean(), altDown=boolean(), metaDown=boolean(), cmdDown=boolean()} See #wxMouseState{} defined in wx.hrl","ref":"wx.html","title":"wx","type":"module"},{"doc":"Batches all wx commands used in the fun. Improves performance of the command processing by grabbing the wxWidgets thread so that no event processing will be done before the complete batch of commands is invoked. See also: foldl/3 , foldr/3 , foreach/2 , map/2 .","ref":"wx.html#batch/1","title":"wx.batch/1","type":"function"},{"doc":"Creates a memory area (of Size in bytes) which can be used by an external library (i.e. opengl). It is up to the client to keep a reference to this object so it does not get garbage collected by erlang while still in use by the external library. This is far from erlang's intentional usage and can crash the erlang emulator. Use it carefully.","ref":"wx.html#create_memory/1","title":"wx.create_memory/1","type":"function"},{"doc":"Level = none | verbose | trace | driver | integer() Sets debug level. If debug level is 'verbose' or 'trace' each call is printed on console. If Level is 'driver' each allocated object and deletion is printed on the console.","ref":"wx.html#debug/1","title":"wx.debug/1","type":"function"},{"doc":"Starts a wxErlang demo if examples directory exists and is compiled","ref":"wx.html#demo/0","title":"wx.demo/0","type":"function"},{"doc":"Stops a wx server.","ref":"wx.html#destroy/0","title":"wx.destroy/0","type":"function"},{"doc":"Returns true if both arguments references the same object, false otherwise","ref":"wx.html#equal/2","title":"wx.equal/2","type":"function"},{"doc":"Behaves like lists:foldl/3 but batches wx commands. See batch/1 .","ref":"wx.html#foldl/3","title":"wx.foldl/3","type":"function"},{"doc":"Behaves like lists:foldr/3 but batches wx commands. See batch/1 .","ref":"wx.html#foldr/3","title":"wx.foldr/3","type":"function"},{"doc":"Behaves like lists:foreach/2 but batches wx commands. See batch/1 .","ref":"wx.html#foreach/2","title":"wx.foreach/2","type":"function"},{"doc":"Returns the object type","ref":"wx.html#getObjectType/1","title":"wx.getObjectType/1","type":"function"},{"doc":"Gets this process's current wx environment. Can be sent to other processes to allow them use this process wx environment. See also: set_env/1 .","ref":"wx.html#get_env/0","title":"wx.get_env/0","type":"function"},{"doc":"Returns the memory area as a binary.","ref":"wx.html#get_memory_bin/1","title":"wx.get_memory_bin/1","type":"function"},{"doc":"Returns true if object is null, false otherwise","ref":"wx.html#is_null/1","title":"wx.is_null/1","type":"function"},{"doc":"Behaves like lists:map/2 but batches wx commands. See batch/1 .","ref":"wx.html#map/2","title":"wx.map/2","type":"function"},{"doc":"Starts a wx server.","ref":"wx.html#new/0","title":"wx.new/0","type":"function"},{"doc":"Option = {debug, list() | atom()} | {silent_start, boolean()} Starts a wx server. Option may be {debug, Level}, see debug/1. Or {silent_start, Bool}, which causes error messages at startup to be suppressed. The latter can be used as a silent test of whether wx is properly installed or not.","ref":"wx.html#new/1","title":"wx.new/1","type":"function"},{"doc":"Returns the null object","ref":"wx.html#null/0","title":"wx.null/0","type":"function"},{"doc":"","ref":"wx.html#parent_class/1","title":"wx.parent_class/1","type":"function"},{"doc":"","ref":"wx.html#release_memory/1","title":"wx.release_memory/1","type":"function"},{"doc":"Saves the memory from deletion until release_memory/1 is called. If release_memory/1 is not called the memory will not be garbage collected.","ref":"wx.html#retain_memory/1","title":"wx.retain_memory/1","type":"function"},{"doc":"Sets the process wx environment, allows this process to use another process wx environment.","ref":"wx.html#set_env/1","title":"wx.set_env/1","type":"function"},{"doc":"Casts the object to class NewType. It is needed when using functions like wxWindow:findWindow/2, which returns a generic wxObject type.","ref":"wx.html#typeCast/2","title":"wx.typeCast/2","type":"function"},{"doc":"An object used by an application wishing to create an accelerator table (see wxAcceleratorTable ). See: wxAcceleratorTable , wxWindow:setAcceleratorTable/2 wxWidgets docs: wxAcceleratorEntry","ref":"wxAcceleratorEntry.html","title":"wxAcceleratorEntry","type":"module"},{"doc":"Destroys the object.","ref":"wxAcceleratorEntry.html#destroy/1","title":"wxAcceleratorEntry.destroy/1","type":"function"},{"doc":"Returns the command identifier for the accelerator table entry.","ref":"wxAcceleratorEntry.html#getCommand/1","title":"wxAcceleratorEntry.getCommand/1","type":"function"},{"doc":"Returns the flags for the accelerator table entry.","ref":"wxAcceleratorEntry.html#getFlags/1","title":"wxAcceleratorEntry.getFlags/1","type":"function"},{"doc":"Returns the keycode for the accelerator table entry.","ref":"wxAcceleratorEntry.html#getKeyCode/1","title":"wxAcceleratorEntry.getKeyCode/1","type":"function"},{"doc":"","ref":"wxAcceleratorEntry.html#new/0","title":"wxAcceleratorEntry.new/0","type":"function"},{"doc":"Copy ctor.","ref":"wxAcceleratorEntry.html#new/1","title":"wxAcceleratorEntry.new/1","type":"function"},{"doc":"","ref":"wxAcceleratorEntry.html#set/4","title":"wxAcceleratorEntry.set/4","type":"function"},{"doc":"Sets the accelerator entry parameters.","ref":"wxAcceleratorEntry.html#set/5","title":"wxAcceleratorEntry.set/5","type":"function"},{"doc":"","ref":"wxAcceleratorEntry.html#t:wxAcceleratorEntry/0","title":"wxAcceleratorEntry.wxAcceleratorEntry/0","type":"type"},{"doc":"An accelerator table allows the application to specify a table of keyboard shortcuts for menu or button commands. The object ?wxNullAcceleratorTable is defined to be a table with no data, and is the initial accelerator table for a window. Example: Remark: An accelerator takes precedence over normal processing and can be a convenient way to program some event handling. For example, you can use an accelerator table to enable a dialog with a multi-line text control to accept CTRL-Enter as meaning 'OK'. Predefined objects (include wx.hrl): ?wxNullAcceleratorTable See: wxAcceleratorEntry , wxWindow:setAcceleratorTable/2 wxWidgets docs: wxAcceleratorTable","ref":"wxAcceleratorTable.html","title":"wxAcceleratorTable","type":"module"},{"doc":"Destroys the wxAcceleratorTable object. See overview_refcount_destruct for more info.","ref":"wxAcceleratorTable.html#destroy/1","title":"wxAcceleratorTable.destroy/1","type":"function"},{"doc":"Returns true if the accelerator table is valid.","ref":"wxAcceleratorTable.html#isOk/1","title":"wxAcceleratorTable.isOk/1","type":"function"},{"doc":"Default ctor.","ref":"wxAcceleratorTable.html#new/0","title":"wxAcceleratorTable.new/0","type":"function"},{"doc":"Initializes the accelerator table from an array of wxAcceleratorEntry .","ref":"wxAcceleratorTable.html#new/2","title":"wxAcceleratorTable.new/2","type":"function"},{"doc":"See: isOk/1 .","ref":"wxAcceleratorTable.html#ok/1","title":"wxAcceleratorTable.ok/1","type":"function"},{"doc":"","ref":"wxAcceleratorTable.html#t:wxAcceleratorTable/0","title":"wxAcceleratorTable.wxAcceleratorTable/0","type":"type"},{"doc":"An activate event is sent when a window or application is being activated or deactivated. Note: Until wxWidgets 3.1.0 activation events could be sent by wxMSW when the window was minimized. This reflected the native MSW behaviour but was often surprising and unexpected, so starting from 3.1.0 such events are not sent any more when the window is in the minimized state. See: Overview events , wxApp::IsActive (not implemented in wx) This class is derived (and can use functions) from: wxEvent wxWidgets docs: wxActivateEvent Events Use wxEvtHandler:connect/3 with wxActivateEventType to subscribe to events of this type.","ref":"wxActivateEvent.html","title":"wxActivateEvent","type":"module"},{"doc":"Returns true if the application or window is being activated, false otherwise.","ref":"wxActivateEvent.html#getActive/1","title":"wxActivateEvent.getActive/1","type":"function"},{"doc":"","ref":"wxActivateEvent.html#t:wxActivate/0","title":"wxActivateEvent.wxActivate/0","type":"type"},{"doc":"","ref":"wxActivateEvent.html#t:wxActivateEvent/0","title":"wxActivateEvent.wxActivateEvent/0","type":"type"},{"doc":"","ref":"wxActivateEvent.html#t:wxActivateEventType/0","title":"wxActivateEvent.wxActivateEventType/0","type":"type"},{"doc":"wxArtProvider class is used to customize the look of wxWidgets application. When wxWidgets needs to display an icon or a bitmap (e.g. in the standard file dialog), it does not use a hard-coded resource but asks wxArtProvider for it instead. This way users can plug in their own wxArtProvider class and easily replace standard art with their own version. All that is needed is to derive a class from wxArtProvider , override either its wxArtProvider::CreateBitmap() (not implemented in wx) and/or its wxArtProvider::CreateIconBundle() (not implemented in wx) methods and register the provider with wxArtProvider::Push() (not implemented in wx): If you need bitmap images (of the same artwork) that should be displayed at different sizes you should probably consider overriding wxArtProvider::CreateIconBundle (not implemented in wx) and supplying icon bundles that contain different bitmap sizes. There's another way of taking advantage of this class: you can use it in your code and use platform native icons as provided by getBitmap/2 or getIcon/2 . Identifying art resources Every bitmap and icon bundle are known to wxArtProvider under an unique ID that is used when requesting a resource from it. The ID is represented by the ?wxArtID type and can have one of these predefined values (you can see bitmaps represented by these constants in the page_samples_artprov): Additionally, any string recognized by custom art providers registered using wxArtProvider::Push (not implemented in wx) may be used. Note: When running under GTK+ 2, GTK+ stock item IDs (e.g. &quot;gtk-cdrom&quot; ) may be used as well: For a list of the GTK+ stock items please refer to the GTK+ documentation page . It is also possible to load icons from the current icon theme by specifying their name (without extension and directory components). Icon themes recognized by GTK+ follow the freedesktop.org Icon Themes specification . Note that themes are not guaranteed to contain all icons, so wxArtProvider may return ?wxNullBitmap or ?wxNullIcon. The default theme is typically installed in /usr/share/icons/hicolor . Clients The client is the entity that calls wxArtProvider 's getBitmap/2 or getIcon/2 function. It is represented by wxClientID type and can have one of these values: Client ID serve as a hint to wxArtProvider that is supposed to help it to choose the best looking bitmap. For example it is often desirable to use slightly different icons in menus and toolbars even though they represent the same action (e.g. wxART_FILE_OPEN). Remember that this is really only a hint for wxArtProvider - it is common that getBitmap/2 returns identical bitmap for different client values! See: Examples , wxArtProvider , usage; stock ID list wxWidgets docs: wxArtProvider","ref":"wxArtProvider.html","title":"wxArtProvider","type":"module"},{"doc":"","ref":"wxArtProvider.html#getBitmap/1","title":"wxArtProvider.getBitmap/1","type":"function"},{"doc":"Query registered providers for bitmap with given ID. Return: The bitmap if one of registered providers recognizes the ID or wxNullBitmap otherwise.","ref":"wxArtProvider.html#getBitmap/2","title":"wxArtProvider.getBitmap/2","type":"function"},{"doc":"","ref":"wxArtProvider.html#getIcon/1","title":"wxArtProvider.getIcon/1","type":"function"},{"doc":"Same as getBitmap/2 , but return a wxIcon object (or ?wxNullIcon on failure).","ref":"wxArtProvider.html#getIcon/2","title":"wxArtProvider.getIcon/2","type":"function"},{"doc":"","ref":"wxArtProvider.html#t:wxArtProvider/0","title":"wxArtProvider.wxArtProvider/0","type":"type"},{"doc":"wxAuiDockArt is part of the wxAUI class framework. See also overview_aui. wxAuiDockArt is the art provider: provides all drawing functionality to the wxAui dock manager. This allows the dock manager to have a pluggable look-and-feel. By default, a wxAuiManager uses an instance of this class called wxAuiDefaultDockArt (not implemented in wx) which provides bitmap art and a colour scheme that is adapted to the major platforms' look. You can either derive from that class to alter its behaviour or write a completely new dock art class. Call wxAuiManager:setArtProvider/2 to force wxAUI to use your new dock art provider. See: wxAuiManager , wxAuiPaneInfo wxWidgets docs: wxAuiDockArt","ref":"wxAuiDockArt.html","title":"wxAuiDockArt","type":"module"},{"doc":"Get the colour of a certain setting. id can be one of the colour values of wxAuiPaneDockArtSetting .","ref":"wxAuiDockArt.html#getColour/2","title":"wxAuiDockArt.getColour/2","type":"function"},{"doc":"Get a font setting.","ref":"wxAuiDockArt.html#getFont/2","title":"wxAuiDockArt.getFont/2","type":"function"},{"doc":"Get the value of a certain setting. id can be one of the size values of wxAuiPaneDockArtSetting .","ref":"wxAuiDockArt.html#getMetric/2","title":"wxAuiDockArt.getMetric/2","type":"function"},{"doc":"Set a certain setting with the value colour . id can be one of the colour values of wxAuiPaneDockArtSetting .","ref":"wxAuiDockArt.html#setColour/3","title":"wxAuiDockArt.setColour/3","type":"function"},{"doc":"Set a font setting.","ref":"wxAuiDockArt.html#setFont/3","title":"wxAuiDockArt.setFont/3","type":"function"},{"doc":"Set a certain setting with the value new_val . id can be one of the size values of wxAuiPaneDockArtSetting .","ref":"wxAuiDockArt.html#setMetric/3","title":"wxAuiDockArt.setMetric/3","type":"function"},{"doc":"","ref":"wxAuiDockArt.html#t:wxAuiDockArt/0","title":"wxAuiDockArt.wxAuiDockArt/0","type":"type"},{"doc":"wxAuiManager is the central class of the wxAUI class framework. wxAuiManager manages the panes associated with it for a particular wxFrame , using a pane's wxAuiPaneInfo information to determine each pane's docking and floating behaviour. wxAuiManager uses wxWidgets' sizer mechanism to plan the layout of each frame. It uses a replaceable dock art class to do all drawing, so all drawing is localized in one area, and may be customized depending on an application's specific needs. wxAuiManager works as follows: the programmer adds panes to the class, or makes changes to existing pane properties (dock position, floating state, show state, etc.). To apply these changes, wxAuiManager 's update/1 function is called. This batch processing can be used to avoid flicker, by modifying more than one pane at a time, and then &quot;committing&quot; all of the changes at once by calling update/1 . Panes can be added quite easily: Later on, the positions can be modified easily. The following will float an existing pane in a tool window: Layers, Rows and Directions, Positions Inside wxAUI, the docking layout is figured out by checking several pane parameters. Four of these are important for determining where a pane will end up: Styles This class supports the following styles: See: Overview aui , wxAuiNotebook , wxAuiDockArt , wxAuiPaneInfo This class is derived (and can use functions) from: wxEvtHandler wxWidgets docs: wxAuiManager Events Event types emitted from this class: aui_pane_button , aui_pane_close , aui_pane_maximize , aui_pane_restore , aui_pane_activated , aui_render","ref":"wxAuiManager.html","title":"wxAuiManager","type":"module"},{"doc":"","ref":"wxAuiManager.html#addPane/2","title":"wxAuiManager.addPane/2","type":"function"},{"doc":"addPane/4 tells the frame manager to start managing a child window. There are several versions of this function. The first version allows the full spectrum of pane parameter possibilities. The second version is used for simpler user interfaces which do not require as much configuration. The last version allows a drop position to be specified, which will determine where the pane will be added.","ref":"wxAuiManager.html#addPane/3","title":"wxAuiManager.addPane/3","type":"function"},{"doc":"","ref":"wxAuiManager.html#addPane/4","title":"wxAuiManager.addPane/4","type":"function"},{"doc":"Dtor.","ref":"wxAuiManager.html#destroy/1","title":"wxAuiManager.destroy/1","type":"function"},{"doc":"Tells the wxAuiManager to stop managing the pane specified by window. The window, if in a floated frame, is reparented to the frame managed by wxAuiManager .","ref":"wxAuiManager.html#detachPane/2","title":"wxAuiManager.detachPane/2","type":"function"},{"doc":"Returns an array of all panes managed by the frame manager.","ref":"wxAuiManager.html#getAllPanes/1","title":"wxAuiManager.getAllPanes/1","type":"function"},{"doc":"Returns the current art provider being used. See: wxAuiDockArt","ref":"wxAuiManager.html#getArtProvider/1","title":"wxAuiManager.getArtProvider/1","type":"function"},{"doc":"Returns the current dock constraint values. See setDockSizeConstraint/3 for more information.","ref":"wxAuiManager.html#getDockSizeConstraint/1","title":"wxAuiManager.getDockSizeConstraint/1","type":"function"},{"doc":"Returns the current ?wxAuiManagerOption's flags.","ref":"wxAuiManager.html#getFlags/1","title":"wxAuiManager.getFlags/1","type":"function"},{"doc":"Returns the frame currently being managed by wxAuiManager .","ref":"wxAuiManager.html#getManagedWindow/1","title":"wxAuiManager.getManagedWindow/1","type":"function"},{"doc":"Calling this method will return the wxAuiManager for a given window. The window parameter should specify any child window or sub-child window of the frame or window managed by wxAuiManager . The window parameter need not be managed by the manager itself, nor does it even need to be a child or sub-child of a managed window. It must however be inside the window hierarchy underneath the managed window.","ref":"wxAuiManager.html#getManager/1","title":"wxAuiManager.getManager/1","type":"function"},{"doc":"getPane/2 is used to lookup a wxAuiPaneInfo object either by window pointer or by pane name, which acts as a unique id for a window pane. The returned wxAuiPaneInfo object may then be modified to change a pane's look, state or position. After one or more modifications to wxAuiPaneInfo , update/1 should be called to commit the changes to the user interface. If the lookup failed (meaning the pane could not be found in the manager), a call to the returned wxAuiPaneInfo 's IsOk() method will return false.","ref":"wxAuiManager.html#getPane/2","title":"wxAuiManager.getPane/2","type":"function"},{"doc":"hideHint/1 hides any docking hint that may be visible.","ref":"wxAuiManager.html#hideHint/1","title":"wxAuiManager.hideHint/1","type":"function"},{"doc":"","ref":"wxAuiManager.html#insertPane/3","title":"wxAuiManager.insertPane/3","type":"function"},{"doc":"This method is used to insert either a previously unmanaged pane window into the frame manager, or to insert a currently managed pane somewhere else. insertPane/4 will push all panes, rows, or docks aside and insert the window into the position specified by insert_location . Because insert_location can specify either a pane, dock row, or dock layer, the insert_level parameter is used to disambiguate this. The parameter insert_level can take a value of wxAUI_INSERT_PANE, wxAUI_INSERT_ROW or wxAUI_INSERT_DOCK.","ref":"wxAuiManager.html#insertPane/4","title":"wxAuiManager.insertPane/4","type":"function"},{"doc":"loadPaneInfo/3 is similar to LoadPerspective, with the exception that it only loads information about a single pane. This method writes the serialized data into the passed pane. Pointers to UI elements are not modified. Note: This operation also changes the name in the pane information! See: loadPerspective/3 See: savePaneInfo/2 See: savePerspective/1","ref":"wxAuiManager.html#loadPaneInfo/3","title":"wxAuiManager.loadPaneInfo/3","type":"function"},{"doc":"","ref":"wxAuiManager.html#loadPerspective/2","title":"wxAuiManager.loadPerspective/2","type":"function"},{"doc":"Loads a saved perspective. A perspective is the layout state of an AUI managed window. All currently existing panes that have an object in &quot;perspective&quot; with the same name (&quot;equivalent&quot;) will receive the layout parameters of the object in &quot;perspective&quot;. Existing panes that do not have an equivalent in &quot;perspective&quot; remain unchanged, objects in &quot;perspective&quot; having no equivalent in the manager are ignored. See: loadPaneInfo/3 See: loadPerspective/3 See: savePerspective/1","ref":"wxAuiManager.html#loadPerspective/3","title":"wxAuiManager.loadPerspective/3","type":"function"},{"doc":"","ref":"wxAuiManager.html#new/0","title":"wxAuiManager.new/0","type":"function"},{"doc":"Constructor.","ref":"wxAuiManager.html#new/1","title":"wxAuiManager.new/1","type":"function"},{"doc":"savePaneInfo/2 is similar to SavePerspective, with the exception that it only saves information about a single pane. Return: The serialized layout parameters of the pane are returned within the string. Information about the pointers to UI elements stored in the pane are not serialized. See: loadPaneInfo/3 See: loadPerspective/3 See: savePerspective/1","ref":"wxAuiManager.html#savePaneInfo/2","title":"wxAuiManager.savePaneInfo/2","type":"function"},{"doc":"Saves the entire user interface layout into an encoded wxString (not implemented in wx), which can then be stored by the application (probably using wxConfig). See: loadPerspective/3 See: loadPaneInfo/3 See: savePaneInfo/2","ref":"wxAuiManager.html#savePerspective/1","title":"wxAuiManager.savePerspective/1","type":"function"},{"doc":"Instructs wxAuiManager to use art provider specified by parameter art_provider for all drawing calls. This allows pluggable look-and-feel features. The previous art provider object, if any, will be deleted by wxAuiManager . See: wxAuiDockArt","ref":"wxAuiManager.html#setArtProvider/2","title":"wxAuiManager.setArtProvider/2","type":"function"},{"doc":"When a user creates a new dock by dragging a window into a docked position, often times the large size of the window will create a dock that is unwieldy large. wxAuiManager by default limits the size of any new dock to 1/3 of the window size. For horizontal docks, this would be 1/3 of the window height. For vertical docks, 1/3 of the width. Calling this function will adjust this constraint value. The numbers must be between 0.0 and 1.0. For instance, calling SetDockSizeContraint with 0.5, 0.5 will cause new docks to be limited to half of the size of the entire managed window.","ref":"wxAuiManager.html#setDockSizeConstraint/3","title":"wxAuiManager.setDockSizeConstraint/3","type":"function"},{"doc":"This method is used to specify ?wxAuiManagerOption's flags. flags specifies options which allow the frame management behaviour to be modified.","ref":"wxAuiManager.html#setFlags/2","title":"wxAuiManager.setFlags/2","type":"function"},{"doc":"Called to specify the frame or window which is to be managed by wxAuiManager . Frame management is not restricted to just frames. Child windows or custom controls are also allowed.","ref":"wxAuiManager.html#setManagedWindow/2","title":"wxAuiManager.setManagedWindow/2","type":"function"},{"doc":"This function is used by controls to explicitly show a hint window at the specified rectangle. It is rarely called, and is mostly used by controls implementing custom pane drag/drop behaviour. The specified rectangle should be in screen coordinates.","ref":"wxAuiManager.html#showHint/2","title":"wxAuiManager.showHint/2","type":"function"},{"doc":"Dissociate the managed window from the manager. This function may be called before the managed frame or window is destroyed, but, since wxWidgets 3.1.4, it's unnecessary to call it explicitly, as it will be called automatically when this window is destroyed, as well as when the manager itself is.","ref":"wxAuiManager.html#unInit/1","title":"wxAuiManager.unInit/1","type":"function"},{"doc":"This method is called after any number of changes are made to any of the managed panes. update/1 must be invoked after addPane/4 or insertPane/4 are called in order to &quot;realize&quot; or &quot;commit&quot; the changes. In addition, any number of changes may be made to wxAuiPaneInfo structures (retrieved with getPane/2 ), but to realize the changes, update/1 must be called. This construction allows pane flicker to be avoided by updating the whole layout at one time.","ref":"wxAuiManager.html#update/1","title":"wxAuiManager.update/1","type":"function"},{"doc":"","ref":"wxAuiManager.html#t:wxAuiManager/0","title":"wxAuiManager.wxAuiManager/0","type":"type"},{"doc":"Event used to indicate various actions taken with wxAuiManager . See wxAuiManager for available event types. See: wxAuiManager , wxAuiPaneInfo This class is derived (and can use functions) from: wxEvent wxWidgets docs: wxAuiManagerEvent Events Use wxEvtHandler:connect/3 with wxAuiManagerEventType to subscribe to events of this type.","ref":"wxAuiManagerEvent.html","title":"wxAuiManagerEvent","type":"module"},{"doc":"Return: true if this event can be vetoed. See: veto/2","ref":"wxAuiManagerEvent.html#canVeto/1","title":"wxAuiManagerEvent.canVeto/1","type":"function"},{"doc":"Return: The ID of the button that was clicked.","ref":"wxAuiManagerEvent.html#getButton/1","title":"wxAuiManagerEvent.getButton/1","type":"function"},{"doc":"","ref":"wxAuiManagerEvent.html#getDC/1","title":"wxAuiManagerEvent.getDC/1","type":"function"},{"doc":"Return: The wxAuiManager this event is associated with.","ref":"wxAuiManagerEvent.html#getManager/1","title":"wxAuiManagerEvent.getManager/1","type":"function"},{"doc":"Return: The pane this event is associated with.","ref":"wxAuiManagerEvent.html#getPane/1","title":"wxAuiManagerEvent.getPane/1","type":"function"},{"doc":"Return: true if this event was vetoed. See: veto/2","ref":"wxAuiManagerEvent.html#getVeto/1","title":"wxAuiManagerEvent.getVeto/1","type":"function"},{"doc":"Sets the ID of the button clicked that triggered this event.","ref":"wxAuiManagerEvent.html#setButton/2","title":"wxAuiManagerEvent.setButton/2","type":"function"},{"doc":"Sets whether or not this event can be vetoed.","ref":"wxAuiManagerEvent.html#setCanVeto/2","title":"wxAuiManagerEvent.setCanVeto/2","type":"function"},{"doc":"","ref":"wxAuiManagerEvent.html#setDC/2","title":"wxAuiManagerEvent.setDC/2","type":"function"},{"doc":"Sets the wxAuiManager this event is associated with.","ref":"wxAuiManagerEvent.html#setManager/2","title":"wxAuiManagerEvent.setManager/2","type":"function"},{"doc":"Sets the pane this event is associated with.","ref":"wxAuiManagerEvent.html#setPane/2","title":"wxAuiManagerEvent.setPane/2","type":"function"},{"doc":"","ref":"wxAuiManagerEvent.html#veto/1","title":"wxAuiManagerEvent.veto/1","type":"function"},{"doc":"Cancels the action indicated by this event if canVeto/1 is true.","ref":"wxAuiManagerEvent.html#veto/2","title":"wxAuiManagerEvent.veto/2","type":"function"},{"doc":"","ref":"wxAuiManagerEvent.html#t:wxAuiManager/0","title":"wxAuiManagerEvent.wxAuiManager/0","type":"type"},{"doc":"","ref":"wxAuiManagerEvent.html#t:wxAuiManagerEvent/0","title":"wxAuiManagerEvent.wxAuiManagerEvent/0","type":"type"},{"doc":"","ref":"wxAuiManagerEvent.html#t:wxAuiManagerEventType/0","title":"wxAuiManagerEvent.wxAuiManagerEventType/0","type":"type"},{"doc":"wxAuiNotebook is part of the wxAUI class framework, which represents a notebook control, managing multiple windows with associated tabs. See also overview_aui. wxAuiNotebook is a notebook control which implements many features common in applications with dockable panes. Specifically, wxAuiNotebook implements functionality which allows the user to rearrange tab order via drag-and-drop, split the tab window into many different splitter configurations, and toggle through different themes to customize the control's look and feel. The default theme that is used is wxAuiDefaultTabArt (not implemented in wx), which provides a modern, glossy look and feel. The theme can be changed by calling setArtProvider/2 . Styles This class supports the following styles: This class is derived (and can use functions) from: wxControl wxWindow wxEvtHandler wxWidgets docs: wxAuiNotebook Events Event types emitted from this class: command_auinotebook_page_close , command_auinotebook_page_closed , command_auinotebook_page_changed , command_auinotebook_page_changing , command_auinotebook_button , command_auinotebook_begin_drag , command_auinotebook_end_drag , command_auinotebook_drag_motion , command_auinotebook_allow_dnd , command_auinotebook_drag_done , command_auinotebook_tab_middle_down , command_auinotebook_tab_middle_up , command_auinotebook_tab_right_down , command_auinotebook_tab_right_up , command_auinotebook_bg_dclick","ref":"wxAuiNotebook.html","title":"wxAuiNotebook","type":"module"},{"doc":"","ref":"wxAuiNotebook.html#addPage/3","title":"wxAuiNotebook.addPage/3","type":"function"},{"doc":"Adds a page. If the select parameter is true, calling this will generate a page change event.","ref":"wxAuiNotebook.html#addPage/4","title":"wxAuiNotebook.addPage/4","type":"function"},{"doc":"Adds a new page. The page must have the book control itself as the parent and must not have been added to this control previously. The call to this function may generate the page changing events. Return: true if successful, false otherwise. Remark: Do not delete the page, it will be deleted by the book control. See: insertPage/6 Since: 2.9.3","ref":"wxAuiNotebook.html#addPage/5","title":"wxAuiNotebook.addPage/5","type":"function"},{"doc":"","ref":"wxAuiNotebook.html#create/2","title":"wxAuiNotebook.create/2","type":"function"},{"doc":"Creates the notebook window.","ref":"wxAuiNotebook.html#create/3","title":"wxAuiNotebook.create/3","type":"function"},{"doc":"Constructs the book control with the given parameters.","ref":"wxAuiNotebook.html#create/4","title":"wxAuiNotebook.create/4","type":"function"},{"doc":"Deletes a page at the given index. Calling this method will generate a page change event.","ref":"wxAuiNotebook.html#deletePage/2","title":"wxAuiNotebook.deletePage/2","type":"function"},{"doc":"Destroys the object.","ref":"wxAuiNotebook.html#destroy/1","title":"wxAuiNotebook.destroy/1","type":"function"},{"doc":"Returns the associated art provider.","ref":"wxAuiNotebook.html#getArtProvider/1","title":"wxAuiNotebook.getArtProvider/1","type":"function"},{"doc":"Returns the page specified by the given index.","ref":"wxAuiNotebook.html#getPage/2","title":"wxAuiNotebook.getPage/2","type":"function"},{"doc":"Returns the tab bitmap for the page.","ref":"wxAuiNotebook.html#getPageBitmap/2","title":"wxAuiNotebook.getPageBitmap/2","type":"function"},{"doc":"Returns the number of pages in the notebook.","ref":"wxAuiNotebook.html#getPageCount/1","title":"wxAuiNotebook.getPageCount/1","type":"function"},{"doc":"Returns the page index for the specified window. If the window is not found in the notebook, wxNOT_FOUND is returned.","ref":"wxAuiNotebook.html#getPageIndex/2","title":"wxAuiNotebook.getPageIndex/2","type":"function"},{"doc":"Returns the tab label for the page.","ref":"wxAuiNotebook.html#getPageText/2","title":"wxAuiNotebook.getPageText/2","type":"function"},{"doc":"Returns the currently selected page.","ref":"wxAuiNotebook.html#getSelection/1","title":"wxAuiNotebook.getSelection/1","type":"function"},{"doc":"","ref":"wxAuiNotebook.html#insertPage/4","title":"wxAuiNotebook.insertPage/4","type":"function"},{"doc":"insertPage/6 is similar to AddPage, but allows the ability to specify the insert location. If the select parameter is true, calling this will generate a page change event.","ref":"wxAuiNotebook.html#insertPage/5","title":"wxAuiNotebook.insertPage/5","type":"function"},{"doc":"Inserts a new page at the specified position. Return: true if successful, false otherwise. Remark: Do not delete the page, it will be deleted by the book control. See: addPage/5 Since: 2.9.3","ref":"wxAuiNotebook.html#insertPage/6","title":"wxAuiNotebook.insertPage/6","type":"function"},{"doc":"Default ctor.","ref":"wxAuiNotebook.html#new/0","title":"wxAuiNotebook.new/0","type":"function"},{"doc":"","ref":"wxAuiNotebook.html#new/1","title":"wxAuiNotebook.new/1","type":"function"},{"doc":"Constructor. Creates a wxAuiNotebok control.","ref":"wxAuiNotebook.html#new/2","title":"wxAuiNotebook.new/2","type":"function"},{"doc":"Removes a page, without deleting the window pointer.","ref":"wxAuiNotebook.html#removePage/2","title":"wxAuiNotebook.removePage/2","type":"function"},{"doc":"Sets the art provider to be used by the notebook.","ref":"wxAuiNotebook.html#setArtProvider/2","title":"wxAuiNotebook.setArtProvider/2","type":"function"},{"doc":"Sets the font for drawing the tab labels, using a bold version of the font for selected tab labels.","ref":"wxAuiNotebook.html#setFont/2","title":"wxAuiNotebook.setFont/2","type":"function"},{"doc":"Sets the bitmap for the page. To remove a bitmap from the tab caption, pass wxNullBitmap.","ref":"wxAuiNotebook.html#setPageBitmap/3","title":"wxAuiNotebook.setPageBitmap/3","type":"function"},{"doc":"Sets the tab label for the page.","ref":"wxAuiNotebook.html#setPageText/3","title":"wxAuiNotebook.setPageText/3","type":"function"},{"doc":"Sets the page selection. Calling this method will generate a page change event.","ref":"wxAuiNotebook.html#setSelection/2","title":"wxAuiNotebook.setSelection/2","type":"function"},{"doc":"Sets the tab height. By default, the tab control height is calculated by measuring the text height and bitmap sizes on the tab captions. Calling this method will override that calculation and set the tab control to the specified height parameter. A call to this method will override any call to setUniformBitmapSize/2 . Specifying -1 as the height will return the control to its default auto-sizing behaviour.","ref":"wxAuiNotebook.html#setTabCtrlHeight/2","title":"wxAuiNotebook.setTabCtrlHeight/2","type":"function"},{"doc":"Ensure that all tabs have the same height, even if some of them don't have bitmaps. Passing ?wxDefaultSize as size undoes the effect of a previous call to this function and instructs the control to use dynamic tab height.","ref":"wxAuiNotebook.html#setUniformBitmapSize/2","title":"wxAuiNotebook.setUniformBitmapSize/2","type":"function"},{"doc":"","ref":"wxAuiNotebook.html#t:wxAuiNotebook/0","title":"wxAuiNotebook.wxAuiNotebook/0","type":"type"},{"doc":"This class is used by the events generated by wxAuiNotebook . See: wxAuiNotebook , wxBookCtrlEvent This class is derived (and can use functions) from: wxBookCtrlEvent wxNotifyEvent wxCommandEvent wxEvent wxWidgets docs: wxAuiNotebookEvent Events Use wxEvtHandler:connect/3 with wxAuiNotebookEventType to subscribe to events of this type.","ref":"wxAuiNotebookEvent.html","title":"wxAuiNotebookEvent","type":"module"},{"doc":"","ref":"wxAuiNotebookEvent.html#getDragSource/1","title":"wxAuiNotebookEvent.getDragSource/1","type":"function"},{"doc":"Returns the page that was selected before the change, wxNOT_FOUND if none was selected.","ref":"wxAuiNotebookEvent.html#getOldSelection/1","title":"wxAuiNotebookEvent.getOldSelection/1","type":"function"},{"doc":"Returns the currently selected page, or wxNOT_FOUND if none was selected. Note: under Windows, getSelection/1 will return the same value as getOldSelection/1 when called from the EVT_BOOKCTRL_PAGE_CHANGING handler and not the page which is going to be selected.","ref":"wxAuiNotebookEvent.html#getSelection/1","title":"wxAuiNotebookEvent.getSelection/1","type":"function"},{"doc":"","ref":"wxAuiNotebookEvent.html#setDragSource/2","title":"wxAuiNotebookEvent.setDragSource/2","type":"function"},{"doc":"Sets the id of the page selected before the change.","ref":"wxAuiNotebookEvent.html#setOldSelection/2","title":"wxAuiNotebookEvent.setOldSelection/2","type":"function"},{"doc":"Sets the selection member variable.","ref":"wxAuiNotebookEvent.html#setSelection/2","title":"wxAuiNotebookEvent.setSelection/2","type":"function"},{"doc":"","ref":"wxAuiNotebookEvent.html#t:wxAuiNotebook/0","title":"wxAuiNotebookEvent.wxAuiNotebook/0","type":"type"},{"doc":"","ref":"wxAuiNotebookEvent.html#t:wxAuiNotebookEvent/0","title":"wxAuiNotebookEvent.wxAuiNotebookEvent/0","type":"type"},{"doc":"","ref":"wxAuiNotebookEvent.html#t:wxAuiNotebookEventType/0","title":"wxAuiNotebookEvent.wxAuiNotebookEventType/0","type":"type"},{"doc":"wxAuiPaneInfo is part of the wxAUI class framework. See also overview_aui. wxAuiPaneInfo specifies all the parameters for a pane. These parameters specify where the pane is on the screen, whether it is docked or floating, or hidden. In addition, these parameters specify the pane's docked position, floating position, preferred size, minimum size, caption text among many other parameters. See: wxAuiManager , wxAuiDockArt wxWidgets docs: wxAuiPaneInfo","ref":"wxAuiPaneInfo.html","title":"wxAuiPaneInfo","type":"module"},{"doc":"bestSize/3 sets the ideal size for the pane. The docking manager will attempt to use this size as much as possible when docking or floating the pane.","ref":"wxAuiPaneInfo.html#bestSize/2","title":"wxAuiPaneInfo.bestSize/2","type":"function"},{"doc":"","ref":"wxAuiPaneInfo.html#bestSize/3","title":"wxAuiPaneInfo.bestSize/3","type":"function"},{"doc":"bottom/1 sets the pane dock position to the bottom side of the frame. This is the same thing as calling Direction(wxAUI_DOCK_BOTTOM).","ref":"wxAuiPaneInfo.html#bottom/1","title":"wxAuiPaneInfo.bottom/1","type":"function"},{"doc":"","ref":"wxAuiPaneInfo.html#bottomDockable/1","title":"wxAuiPaneInfo.bottomDockable/1","type":"function"},{"doc":"bottomDockable/2 indicates whether a pane can be docked at the bottom of the frame.","ref":"wxAuiPaneInfo.html#bottomDockable/2","title":"wxAuiPaneInfo.bottomDockable/2","type":"function"},{"doc":"caption/2 sets the caption of the pane.","ref":"wxAuiPaneInfo.html#caption/2","title":"wxAuiPaneInfo.caption/2","type":"function"},{"doc":"","ref":"wxAuiPaneInfo.html#captionVisible/1","title":"wxAuiPaneInfo.captionVisible/1","type":"function"},{"doc":"CaptionVisible indicates that a pane caption should be visible. If false, no pane caption is drawn.","ref":"wxAuiPaneInfo.html#captionVisible/2","title":"wxAuiPaneInfo.captionVisible/2","type":"function"},{"doc":"Center() (not implemented in wx) sets the pane dock position to the left side of the frame. The centre pane is the space in the middle after all border panes (left, top, right, bottom) are subtracted from the layout. This is the same thing as calling Direction(wxAUI_DOCK_CENTRE).","ref":"wxAuiPaneInfo.html#centre/1","title":"wxAuiPaneInfo.centre/1","type":"function"},{"doc":"centrePane/1 specifies that the pane should adopt the default center pane settings. Centre panes usually do not have caption bars. This function provides an easy way of preparing a pane to be displayed in the center dock position.","ref":"wxAuiPaneInfo.html#centrePane/1","title":"wxAuiPaneInfo.centrePane/1","type":"function"},{"doc":"","ref":"wxAuiPaneInfo.html#closeButton/1","title":"wxAuiPaneInfo.closeButton/1","type":"function"},{"doc":"closeButton/2 indicates that a close button should be drawn for the pane.","ref":"wxAuiPaneInfo.html#closeButton/2","title":"wxAuiPaneInfo.closeButton/2","type":"function"},{"doc":"defaultPane/1 specifies that the pane should adopt the default pane settings.","ref":"wxAuiPaneInfo.html#defaultPane/1","title":"wxAuiPaneInfo.defaultPane/1","type":"function"},{"doc":"Destroys the object.","ref":"wxAuiPaneInfo.html#destroy/1","title":"wxAuiPaneInfo.destroy/1","type":"function"},{"doc":"","ref":"wxAuiPaneInfo.html#destroyOnClose/1","title":"wxAuiPaneInfo.destroyOnClose/1","type":"function"},{"doc":"destroyOnClose/2 indicates whether a pane should be destroyed when it is closed. Normally a pane is simply hidden when the close button is clicked. Setting DestroyOnClose to true will cause the window to be destroyed when the user clicks the pane's close button.","ref":"wxAuiPaneInfo.html#destroyOnClose/2","title":"wxAuiPaneInfo.destroyOnClose/2","type":"function"},{"doc":"direction/2 determines the direction of the docked pane. It is functionally the same as calling left/1 , right/1 , top/1 or bottom/1 , except that docking direction may be specified programmatically via the parameter.","ref":"wxAuiPaneInfo.html#direction/2","title":"wxAuiPaneInfo.direction/2","type":"function"},{"doc":"dock/1 indicates that a pane should be docked. It is the opposite of float/1 .","ref":"wxAuiPaneInfo.html#dock/1","title":"wxAuiPaneInfo.dock/1","type":"function"},{"doc":"","ref":"wxAuiPaneInfo.html#dockable/1","title":"wxAuiPaneInfo.dockable/1","type":"function"},{"doc":"dockable/2 specifies whether a frame can be docked or not. It is the same as specifying TopDockable(b).BottomDockable(b).LeftDockable(b).RightDockable(b).","ref":"wxAuiPaneInfo.html#dockable/2","title":"wxAuiPaneInfo.dockable/2","type":"function"},{"doc":"fixed/1 forces a pane to be fixed size so that it cannot be resized. After calling fixed/1 , isFixed/1 will return true.","ref":"wxAuiPaneInfo.html#fixed/1","title":"wxAuiPaneInfo.fixed/1","type":"function"},{"doc":"float/1 indicates that a pane should be floated. It is the opposite of dock/1 .","ref":"wxAuiPaneInfo.html#float/1","title":"wxAuiPaneInfo.float/1","type":"function"},{"doc":"","ref":"wxAuiPaneInfo.html#floatable/1","title":"wxAuiPaneInfo.floatable/1","type":"function"},{"doc":"floatable/2 sets whether the user will be able to undock a pane and turn it into a floating window.","ref":"wxAuiPaneInfo.html#floatable/2","title":"wxAuiPaneInfo.floatable/2","type":"function"},{"doc":"floatingPosition/3 sets the position of the floating pane.","ref":"wxAuiPaneInfo.html#floatingPosition/2","title":"wxAuiPaneInfo.floatingPosition/2","type":"function"},{"doc":"","ref":"wxAuiPaneInfo.html#floatingPosition/3","title":"wxAuiPaneInfo.floatingPosition/3","type":"function"},{"doc":"floatingSize/3 sets the size of the floating pane.","ref":"wxAuiPaneInfo.html#floatingSize/2","title":"wxAuiPaneInfo.floatingSize/2","type":"function"},{"doc":"","ref":"wxAuiPaneInfo.html#floatingSize/3","title":"wxAuiPaneInfo.floatingSize/3","type":"function"},{"doc":"","ref":"wxAuiPaneInfo.html#getDirection/1","title":"wxAuiPaneInfo.getDirection/1","type":"function"},{"doc":"","ref":"wxAuiPaneInfo.html#getFloatingPosition/1","title":"wxAuiPaneInfo.getFloatingPosition/1","type":"function"},{"doc":"","ref":"wxAuiPaneInfo.html#getFloatingSize/1","title":"wxAuiPaneInfo.getFloatingSize/1","type":"function"},{"doc":"","ref":"wxAuiPaneInfo.html#getFrame/1","title":"wxAuiPaneInfo.getFrame/1","type":"function"},{"doc":"","ref":"wxAuiPaneInfo.html#getLayer/1","title":"wxAuiPaneInfo.getLayer/1","type":"function"},{"doc":"","ref":"wxAuiPaneInfo.html#getPosition/1","title":"wxAuiPaneInfo.getPosition/1","type":"function"},{"doc":"","ref":"wxAuiPaneInfo.html#getRow/1","title":"wxAuiPaneInfo.getRow/1","type":"function"},{"doc":"","ref":"wxAuiPaneInfo.html#getWindow/1","title":"wxAuiPaneInfo.getWindow/1","type":"function"},{"doc":"","ref":"wxAuiPaneInfo.html#gripper/1","title":"wxAuiPaneInfo.gripper/1","type":"function"},{"doc":"gripper/2 indicates that a gripper should be drawn for the pane.","ref":"wxAuiPaneInfo.html#gripper/2","title":"wxAuiPaneInfo.gripper/2","type":"function"},{"doc":"","ref":"wxAuiPaneInfo.html#gripperTop/1","title":"wxAuiPaneInfo.gripperTop/1","type":"function"},{"doc":"gripperTop/2 indicates that a gripper should be drawn at the top of the pane.","ref":"wxAuiPaneInfo.html#gripperTop/2","title":"wxAuiPaneInfo.gripperTop/2","type":"function"},{"doc":"hasBorder/1 returns true if the pane displays a border.","ref":"wxAuiPaneInfo.html#hasBorder/1","title":"wxAuiPaneInfo.hasBorder/1","type":"function"},{"doc":"hasCaption/1 returns true if the pane displays a caption.","ref":"wxAuiPaneInfo.html#hasCaption/1","title":"wxAuiPaneInfo.hasCaption/1","type":"function"},{"doc":"hasCloseButton/1 returns true if the pane displays a button to close the pane.","ref":"wxAuiPaneInfo.html#hasCloseButton/1","title":"wxAuiPaneInfo.hasCloseButton/1","type":"function"},{"doc":"hasFlag/2 returns true if the property specified by flag is active for the pane.","ref":"wxAuiPaneInfo.html#hasFlag/2","title":"wxAuiPaneInfo.hasFlag/2","type":"function"},{"doc":"hasGripper/1 returns true if the pane displays a gripper.","ref":"wxAuiPaneInfo.html#hasGripper/1","title":"wxAuiPaneInfo.hasGripper/1","type":"function"},{"doc":"hasGripper/1 returns true if the pane displays a gripper at the top.","ref":"wxAuiPaneInfo.html#hasGripperTop/1","title":"wxAuiPaneInfo.hasGripperTop/1","type":"function"},{"doc":"hasMaximizeButton/1 returns true if the pane displays a button to maximize the pane.","ref":"wxAuiPaneInfo.html#hasMaximizeButton/1","title":"wxAuiPaneInfo.hasMaximizeButton/1","type":"function"},{"doc":"hasMinimizeButton/1 returns true if the pane displays a button to minimize the pane.","ref":"wxAuiPaneInfo.html#hasMinimizeButton/1","title":"wxAuiPaneInfo.hasMinimizeButton/1","type":"function"},{"doc":"hasPinButton/1 returns true if the pane displays a button to float the pane.","ref":"wxAuiPaneInfo.html#hasPinButton/1","title":"wxAuiPaneInfo.hasPinButton/1","type":"function"},{"doc":"hide/1 indicates that a pane should be hidden.","ref":"wxAuiPaneInfo.html#hide/1","title":"wxAuiPaneInfo.hide/1","type":"function"},{"doc":"isBottomDockable/1 returns true if the pane can be docked at the bottom of the managed frame. See: IsDockable() (not implemented in wx)","ref":"wxAuiPaneInfo.html#isBottomDockable/1","title":"wxAuiPaneInfo.isBottomDockable/1","type":"function"},{"doc":"isDocked/1 returns true if the pane is currently docked.","ref":"wxAuiPaneInfo.html#isDocked/1","title":"wxAuiPaneInfo.isDocked/1","type":"function"},{"doc":"isFixed/1 returns true if the pane cannot be resized.","ref":"wxAuiPaneInfo.html#isFixed/1","title":"wxAuiPaneInfo.isFixed/1","type":"function"},{"doc":"isFloatable/1 returns true if the pane can be undocked and displayed as a floating window.","ref":"wxAuiPaneInfo.html#isFloatable/1","title":"wxAuiPaneInfo.isFloatable/1","type":"function"},{"doc":"isFloating/1 returns true if the pane is floating.","ref":"wxAuiPaneInfo.html#isFloating/1","title":"wxAuiPaneInfo.isFloating/1","type":"function"},{"doc":"isLeftDockable/1 returns true if the pane can be docked on the left of the managed frame. See: IsDockable() (not implemented in wx)","ref":"wxAuiPaneInfo.html#isLeftDockable/1","title":"wxAuiPaneInfo.isLeftDockable/1","type":"function"},{"doc":"IsMoveable() returns true if the docked frame can be undocked or moved to another dock position.","ref":"wxAuiPaneInfo.html#isMovable/1","title":"wxAuiPaneInfo.isMovable/1","type":"function"},{"doc":"isOk/1 returns true if the wxAuiPaneInfo structure is valid. A pane structure is valid if it has an associated window.","ref":"wxAuiPaneInfo.html#isOk/1","title":"wxAuiPaneInfo.isOk/1","type":"function"},{"doc":"isResizable/1 returns true if the pane can be resized.","ref":"wxAuiPaneInfo.html#isResizable/1","title":"wxAuiPaneInfo.isResizable/1","type":"function"},{"doc":"isRightDockable/1 returns true if the pane can be docked on the right of the managed frame. See: IsDockable() (not implemented in wx)","ref":"wxAuiPaneInfo.html#isRightDockable/1","title":"wxAuiPaneInfo.isRightDockable/1","type":"function"},{"doc":"isShown/1 returns true if the pane is currently shown.","ref":"wxAuiPaneInfo.html#isShown/1","title":"wxAuiPaneInfo.isShown/1","type":"function"},{"doc":"isToolbar/1 returns true if the pane contains a toolbar.","ref":"wxAuiPaneInfo.html#isToolbar/1","title":"wxAuiPaneInfo.isToolbar/1","type":"function"},{"doc":"isTopDockable/1 returns true if the pane can be docked at the top of the managed frame. See: IsDockable() (not implemented in wx)","ref":"wxAuiPaneInfo.html#isTopDockable/1","title":"wxAuiPaneInfo.isTopDockable/1","type":"function"},{"doc":"layer/2 determines the layer of the docked pane. The dock layer is similar to an onion, the inner-most layer being layer 0. Each shell moving in the outward direction has a higher layer number. This allows for more complex docking layout formation.","ref":"wxAuiPaneInfo.html#layer/2","title":"wxAuiPaneInfo.layer/2","type":"function"},{"doc":"left/1 sets the pane dock position to the left side of the frame. This is the same thing as calling Direction(wxAUI_DOCK_LEFT).","ref":"wxAuiPaneInfo.html#left/1","title":"wxAuiPaneInfo.left/1","type":"function"},{"doc":"","ref":"wxAuiPaneInfo.html#leftDockable/1","title":"wxAuiPaneInfo.leftDockable/1","type":"function"},{"doc":"leftDockable/2 indicates whether a pane can be docked on the left of the frame.","ref":"wxAuiPaneInfo.html#leftDockable/2","title":"wxAuiPaneInfo.leftDockable/2","type":"function"},{"doc":"maxSize/3 sets the maximum size of the pane.","ref":"wxAuiPaneInfo.html#maxSize/2","title":"wxAuiPaneInfo.maxSize/2","type":"function"},{"doc":"","ref":"wxAuiPaneInfo.html#maxSize/3","title":"wxAuiPaneInfo.maxSize/3","type":"function"},{"doc":"","ref":"wxAuiPaneInfo.html#maximizeButton/1","title":"wxAuiPaneInfo.maximizeButton/1","type":"function"},{"doc":"maximizeButton/2 indicates that a maximize button should be drawn for the pane.","ref":"wxAuiPaneInfo.html#maximizeButton/2","title":"wxAuiPaneInfo.maximizeButton/2","type":"function"},{"doc":"minSize/3 sets the minimum size of the pane. Please note that this is only partially supported as of this writing.","ref":"wxAuiPaneInfo.html#minSize/2","title":"wxAuiPaneInfo.minSize/2","type":"function"},{"doc":"","ref":"wxAuiPaneInfo.html#minSize/3","title":"wxAuiPaneInfo.minSize/3","type":"function"},{"doc":"","ref":"wxAuiPaneInfo.html#minimizeButton/1","title":"wxAuiPaneInfo.minimizeButton/1","type":"function"},{"doc":"minimizeButton/2 indicates that a minimize button should be drawn for the pane.","ref":"wxAuiPaneInfo.html#minimizeButton/2","title":"wxAuiPaneInfo.minimizeButton/2","type":"function"},{"doc":"","ref":"wxAuiPaneInfo.html#movable/1","title":"wxAuiPaneInfo.movable/1","type":"function"},{"doc":"Movable indicates whether a frame can be moved.","ref":"wxAuiPaneInfo.html#movable/2","title":"wxAuiPaneInfo.movable/2","type":"function"},{"doc":"name/2 sets the name of the pane so it can be referenced in lookup functions. If a name is not specified by the user, a random name is assigned to the pane when it is added to the manager.","ref":"wxAuiPaneInfo.html#name/2","title":"wxAuiPaneInfo.name/2","type":"function"},{"doc":"","ref":"wxAuiPaneInfo.html#new/0","title":"wxAuiPaneInfo.new/0","type":"function"},{"doc":"Copy constructor.","ref":"wxAuiPaneInfo.html#new/1","title":"wxAuiPaneInfo.new/1","type":"function"},{"doc":"","ref":"wxAuiPaneInfo.html#paneBorder/1","title":"wxAuiPaneInfo.paneBorder/1","type":"function"},{"doc":"PaneBorder indicates that a border should be drawn for the pane.","ref":"wxAuiPaneInfo.html#paneBorder/2","title":"wxAuiPaneInfo.paneBorder/2","type":"function"},{"doc":"","ref":"wxAuiPaneInfo.html#pinButton/1","title":"wxAuiPaneInfo.pinButton/1","type":"function"},{"doc":"pinButton/2 indicates that a pin button should be drawn for the pane.","ref":"wxAuiPaneInfo.html#pinButton/2","title":"wxAuiPaneInfo.pinButton/2","type":"function"},{"doc":"position/2 determines the position of the docked pane.","ref":"wxAuiPaneInfo.html#position/2","title":"wxAuiPaneInfo.position/2","type":"function"},{"doc":"","ref":"wxAuiPaneInfo.html#resizable/1","title":"wxAuiPaneInfo.resizable/1","type":"function"},{"doc":"resizable/2 allows a pane to be resized if the parameter is true, and forces it to be a fixed size if the parameter is false. This is simply an antonym for fixed/1 .","ref":"wxAuiPaneInfo.html#resizable/2","title":"wxAuiPaneInfo.resizable/2","type":"function"},{"doc":"right/1 sets the pane dock position to the right side of the frame. This is the same thing as calling Direction(wxAUI_DOCK_RIGHT).","ref":"wxAuiPaneInfo.html#right/1","title":"wxAuiPaneInfo.right/1","type":"function"},{"doc":"","ref":"wxAuiPaneInfo.html#rightDockable/1","title":"wxAuiPaneInfo.rightDockable/1","type":"function"},{"doc":"rightDockable/2 indicates whether a pane can be docked on the right of the frame.","ref":"wxAuiPaneInfo.html#rightDockable/2","title":"wxAuiPaneInfo.rightDockable/2","type":"function"},{"doc":"row/2 determines the row of the docked pane.","ref":"wxAuiPaneInfo.html#row/2","title":"wxAuiPaneInfo.row/2","type":"function"},{"doc":"Write the safe parts of a PaneInfo object &quot;source&quot; into &quot;this&quot;. &quot;Safe parts&quot; are all non-UI elements (e.g. all layout determining parameters like the size, position etc.). &quot;Unsafe parts&quot; (pointers to button, frame and window) are not modified by this write operation. Remark: This method is used when loading perspectives.","ref":"wxAuiPaneInfo.html#safeSet/2","title":"wxAuiPaneInfo.safeSet/2","type":"function"},{"doc":"setFlag/3 turns the property given by flag on or off with the option_state parameter.","ref":"wxAuiPaneInfo.html#setFlag/3","title":"wxAuiPaneInfo.setFlag/3","type":"function"},{"doc":"","ref":"wxAuiPaneInfo.html#show/1","title":"wxAuiPaneInfo.show/1","type":"function"},{"doc":"show/2 indicates that a pane should be shown.","ref":"wxAuiPaneInfo.html#show/2","title":"wxAuiPaneInfo.show/2","type":"function"},{"doc":"toolbarPane/1 specifies that the pane should adopt the default toolbar pane settings.","ref":"wxAuiPaneInfo.html#toolbarPane/1","title":"wxAuiPaneInfo.toolbarPane/1","type":"function"},{"doc":"top/1 sets the pane dock position to the top of the frame. This is the same thing as calling Direction(wxAUI_DOCK_TOP).","ref":"wxAuiPaneInfo.html#top/1","title":"wxAuiPaneInfo.top/1","type":"function"},{"doc":"","ref":"wxAuiPaneInfo.html#topDockable/1","title":"wxAuiPaneInfo.topDockable/1","type":"function"},{"doc":"topDockable/2 indicates whether a pane can be docked at the top of the frame.","ref":"wxAuiPaneInfo.html#topDockable/2","title":"wxAuiPaneInfo.topDockable/2","type":"function"},{"doc":"window/2 assigns the window pointer that the wxAuiPaneInfo should use. This normally does not need to be specified, as the window pointer is automatically assigned to the wxAuiPaneInfo structure as soon as it is added to the manager.","ref":"wxAuiPaneInfo.html#window/2","title":"wxAuiPaneInfo.window/2","type":"function"},{"doc":"","ref":"wxAuiPaneInfo.html#t:wxAuiPaneInfo/0","title":"wxAuiPaneInfo.wxAuiPaneInfo/0","type":"type"},{"doc":"Another standard tab art provider for wxAuiNotebook . wxAuiSimpleTabArt is derived from wxAuiTabArt demonstrating how to write a completely new tab art class. It can also be used as alternative to wxAuiDefaultTabArt (not implemented in wx). This class is derived (and can use functions) from: wxAuiTabArt wxWidgets docs: wxAuiSimpleTabArt","ref":"wxAuiSimpleTabArt.html","title":"wxAuiSimpleTabArt","type":"module"},{"doc":"Destroys the object.","ref":"wxAuiSimpleTabArt.html#destroy/1","title":"wxAuiSimpleTabArt.destroy/1","type":"function"},{"doc":"","ref":"wxAuiSimpleTabArt.html#new/0","title":"wxAuiSimpleTabArt.new/0","type":"function"},{"doc":"","ref":"wxAuiSimpleTabArt.html#t:wxAuiSimpleTabArt/0","title":"wxAuiSimpleTabArt.wxAuiSimpleTabArt/0","type":"type"},{"doc":"Tab art provider defines all the drawing functions used by wxAuiNotebook . This allows the wxAuiNotebook to have a pluggable look-and-feel. By default, a wxAuiNotebook uses an instance of this class called wxAuiDefaultTabArt (not implemented in wx) which provides bitmap art and a colour scheme that is adapted to the major platforms' look. You can either derive from that class to alter its behaviour or write a completely new tab art class. Another example of creating a new wxAuiNotebook tab bar is wxAuiSimpleTabArt . Call wxAuiNotebook:setArtProvider/2 to make use of this new tab art. wxWidgets docs: wxAuiTabArt","ref":"wxAuiTabArt.html","title":"wxAuiTabArt","type":"module"},{"doc":"Sets the colour of the selected tab. Since: 2.9.2","ref":"wxAuiTabArt.html#setActiveColour/2","title":"wxAuiTabArt.setActiveColour/2","type":"function"},{"doc":"Sets the colour of the inactive tabs. Since: 2.9.2","ref":"wxAuiTabArt.html#setColour/2","title":"wxAuiTabArt.setColour/2","type":"function"},{"doc":"Sets flags.","ref":"wxAuiTabArt.html#setFlags/2","title":"wxAuiTabArt.setFlags/2","type":"function"},{"doc":"Sets the font used for calculating measurements.","ref":"wxAuiTabArt.html#setMeasuringFont/2","title":"wxAuiTabArt.setMeasuringFont/2","type":"function"},{"doc":"Sets the normal font for drawing labels.","ref":"wxAuiTabArt.html#setNormalFont/2","title":"wxAuiTabArt.setNormalFont/2","type":"function"},{"doc":"Sets the font for drawing text for selected UI elements.","ref":"wxAuiTabArt.html#setSelectedFont/2","title":"wxAuiTabArt.setSelectedFont/2","type":"function"},{"doc":"","ref":"wxAuiTabArt.html#t:wxAuiTabArt/0","title":"wxAuiTabArt.wxAuiTabArt/0","type":"type"},{"doc":"This class encapsulates the concept of a platform-dependent bitmap, either monochrome or colour or colour with alpha channel support. If you need direct access the bitmap data instead going through drawing to it using wxMemoryDC you need to use the wxPixelData (not implemented in wx) class (either wxNativePixelData for RGB bitmaps or wxAlphaPixelData for bitmaps with an additionally alpha channel). Note that many wxBitmap functions take a type parameter, which is a value of the ?wxBitmapType enumeration. The validity of those values depends however on the platform where your program is running and from the wxWidgets configuration. If all possible wxWidgets settings are used: In addition, wxBitmap can load and save all formats that wxImage can; see wxImage for more info. Of course, you must have loaded the wxImage handlers (see ?wxInitAllImageHandlers() and wxImage::AddHandler (not implemented in wx)). Note that all available wxBitmapHandlers for a given wxWidgets port are automatically loaded at startup so you won't need to use wxBitmap::AddHandler (not implemented in wx). More on the difference between wxImage and wxBitmap : wxImage is just a buffer of RGB bytes with an optional buffer for the alpha bytes. It is all generic, platform independent and image file format independent code. It includes generic code for scaling, resizing, clipping, and other manipulations of the image data. OTOH, wxBitmap is intended to be a wrapper of whatever is the native image format that is quickest/easiest to draw to a DC or to be the target of the drawing operations performed on a wxMemoryDC . By splitting the responsibilities between wxImage/wxBitmap like this then it's easier to use generic code shared by all platforms and image types for generic operations and platform specific code where performance or compatibility is needed. Predefined objects (include wx.hrl): ?wxNullBitmap See: Overview bitmap , Overview bitmap , wxDC:blit/6 , wxIcon , wxCursor , wxMemoryDC , wxImage , wxPixelData (not implemented in wx) wxWidgets docs: wxBitmap","ref":"wxBitmap.html","title":"wxBitmap","type":"module"},{"doc":"Creates an image from a platform-dependent bitmap. This preserves mask information so that bitmaps and images can be converted back and forth without loss in that respect.","ref":"wxBitmap.html#convertToImage/1","title":"wxBitmap.convertToImage/1","type":"function"},{"doc":"Creates the bitmap from an icon.","ref":"wxBitmap.html#copyFromIcon/2","title":"wxBitmap.copyFromIcon/2","type":"function"},{"doc":"","ref":"wxBitmap.html#create/2","title":"wxBitmap.create/2","type":"function"},{"doc":"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.","ref":"wxBitmap.html#create/3","title":"wxBitmap.create/3","type":"function"},{"doc":"Create a bitmap compatible with the given DC, inheriting its magnification factor. Return: true if the creation was successful. Since: 3.1.0","ref":"wxBitmap.html#create/4","title":"wxBitmap.create/4","type":"function"},{"doc":"Creates bitmap corresponding to the given cursor. This can be useful to display a cursor as it cannot be drawn directly on a window. This constructor only exists in wxMSW and wxGTK (where it is implemented for GTK+ 2.8 or later) only. Since: 3.1.0 Destructor. See overview_refcount_destruct for more info. If the application omits to delete the bitmap explicitly, the bitmap will be destroyed automatically by wxWidgets when the application exits. Warning: Do not delete a bitmap that is selected into a memory device context.","ref":"wxBitmap.html#destroy/1","title":"wxBitmap.destroy/1","type":"function"},{"doc":"Gets the colour depth of the bitmap. A value of 1 indicates a monochrome bitmap.","ref":"wxBitmap.html#getDepth/1","title":"wxBitmap.getDepth/1","type":"function"},{"doc":"Gets the height of the bitmap in pixels. See: getWidth/1 , GetSize() (not implemented in wx)","ref":"wxBitmap.html#getHeight/1","title":"wxBitmap.getHeight/1","type":"function"},{"doc":"Gets the associated mask (if any) which may have been loaded from a file or set for the bitmap. See: setMask/2 , wxMask","ref":"wxBitmap.html#getMask/1","title":"wxBitmap.getMask/1","type":"function"},{"doc":"Gets the associated palette (if any) which may have been loaded from a file or set for the bitmap. See: wxPalette","ref":"wxBitmap.html#getPalette/1","title":"wxBitmap.getPalette/1","type":"function"},{"doc":"Returns a sub bitmap of the current one as long as the rect belongs entirely to the bitmap. This function preserves bit depth and mask information.","ref":"wxBitmap.html#getSubBitmap/2","title":"wxBitmap.getSubBitmap/2","type":"function"},{"doc":"Gets the width of the bitmap in pixels. See: getHeight/1 , GetSize() (not implemented in wx)","ref":"wxBitmap.html#getWidth/1","title":"wxBitmap.getWidth/1","type":"function"},{"doc":"Returns true if bitmap data is present.","ref":"wxBitmap.html#isOk/1","title":"wxBitmap.isOk/1","type":"function"},{"doc":"","ref":"wxBitmap.html#loadFile/2","title":"wxBitmap.loadFile/2","type":"function"},{"doc":"Loads a bitmap from a file or resource. Return: true if the operation succeeded, false otherwise. Remark: A palette may be associated with the bitmap if one exists (especially for colour Windows bitmaps), and if the code supports it. You can check if one has been created by using the getPalette/1 member. See: saveFile/4","ref":"wxBitmap.html#loadFile/3","title":"wxBitmap.loadFile/3","type":"function"},{"doc":"Default constructor. Constructs a bitmap object with no data; an assignment or another member function such as create/4 or loadFile/3 must be called subsequently.","ref":"wxBitmap.html#new/0","title":"wxBitmap.new/0","type":"function"},{"doc":"","ref":"wxBitmap.html#new/1","title":"wxBitmap.new/1","type":"function"},{"doc":"Creates this bitmap object from the given image. This has to be done to actually display an image as you cannot draw an image directly on a window. The resulting bitmap will use the provided colour depth (or that of the current system if depth is ?wxBITMAP_SCREEN_DEPTH) which entails that a colour reduction may take place. On Windows, if there is a palette present (set with SetPalette), it will be used when creating the wxBitmap (most useful in 8-bit display mode). On other platforms, the palette is currently ignored.","ref":"wxBitmap.html#new/2","title":"wxBitmap.new/2","type":"function"},{"doc":"Creates a new bitmap. A depth of ?wxBITMAP_SCREEN_DEPTH indicates the depth of the current screen or visual. Some platforms only support 1 for monochrome and ?wxBITMAP_SCREEN_DEPTH for the current colour setting. A depth of 32 including an alpha channel is supported under MSW, Mac and GTK+.","ref":"wxBitmap.html#new/3","title":"wxBitmap.new/3","type":"function"},{"doc":"Creates a bitmap from the given array bits . You should only use this function for monochrome bitmaps (depth 1) in portable programs: in this case the bits parameter should contain an XBM image. For other bit depths, the behaviour is platform dependent: under Windows, the data is passed without any changes to the underlying CreateBitmap() API. Under other platforms, only monochrome bitmaps may be created using this constructor and wxImage should be used for creating colour bitmaps from static data.","ref":"wxBitmap.html#new/4","title":"wxBitmap.new/4","type":"function"},{"doc":"See: isOk/1 .","ref":"wxBitmap.html#ok/1","title":"wxBitmap.ok/1","type":"function"},{"doc":"","ref":"wxBitmap.html#saveFile/3","title":"wxBitmap.saveFile/3","type":"function"},{"doc":"Saves a bitmap in the named file. Return: true if the operation succeeded, false otherwise. Remark: Depending on how wxWidgets has been configured, not all formats may be available. See: loadFile/3","ref":"wxBitmap.html#saveFile/4","title":"wxBitmap.saveFile/4","type":"function"},{"doc":"Deprecated: This function is deprecated since version 3.1.2, dimensions and depth can only be set at construction time. Sets the depth member (does not affect the bitmap data).","ref":"wxBitmap.html#setDepth/2","title":"wxBitmap.setDepth/2","type":"function"},{"doc":"Deprecated: This function is deprecated since version 3.1.2, dimensions and depth can only be set at construction time. Sets the height member (does not affect the bitmap data).","ref":"wxBitmap.html#setHeight/2","title":"wxBitmap.setHeight/2","type":"function"},{"doc":"Sets the mask for this bitmap. Remark: The bitmap object owns the mask once this has been called. Note: A mask can be set also for bitmap with an alpha channel but doing so under wxMSW is not recommended because performance of drawing such bitmap is not very good. See: getMask/1 , wxMask","ref":"wxBitmap.html#setMask/2","title":"wxBitmap.setMask/2","type":"function"},{"doc":"Sets the associated palette. (Not implemented under GTK+). See: wxPalette","ref":"wxBitmap.html#setPalette/2","title":"wxBitmap.setPalette/2","type":"function"},{"doc":"Deprecated: This function is deprecated since version 3.1.2, dimensions and depth can only be set at construction time. Sets the width member (does not affect the bitmap data).","ref":"wxBitmap.html#setWidth/2","title":"wxBitmap.setWidth/2","type":"function"},{"doc":"","ref":"wxBitmap.html#t:wxBitmap/0","title":"wxBitmap.wxBitmap/0","type":"type"},{"doc":"A bitmap button is a control that contains a bitmap. Notice that since wxWidgets 2.9.1 bitmap display is supported by the base wxButton class itself and the only tiny advantage of using this class is that it allows specifying the bitmap in its constructor, unlike wxButton . Please see the base class documentation for more information about images support in wxButton . Styles This class supports the following styles: See: wxButton This class is derived (and can use functions) from: wxButton wxControl wxWindow wxEvtHandler wxWidgets docs: wxBitmapButton Events Event types emitted from this class: command_button_clicked","ref":"wxBitmapButton.html","title":"wxBitmapButton","type":"module"},{"doc":"","ref":"wxBitmapButton.html#create/4","title":"wxBitmapButton.create/4","type":"function"},{"doc":"Button creation function for two-step creation. For more details, see new/4 .","ref":"wxBitmapButton.html#create/5","title":"wxBitmapButton.create/5","type":"function"},{"doc":"Destroys the object.","ref":"wxBitmapButton.html#destroy/1","title":"wxBitmapButton.destroy/1","type":"function"},{"doc":"Default ctor.","ref":"wxBitmapButton.html#new/0","title":"wxBitmapButton.new/0","type":"function"},{"doc":"","ref":"wxBitmapButton.html#new/3","title":"wxBitmapButton.new/3","type":"function"},{"doc":"Constructor, creating and showing a button. Remark: The bitmap parameter is normally the only bitmap you need to provide, and wxWidgets will draw the button correctly in its different states. If you want more control, call any of the functions SetBitmapPressed() (not implemented in wx), wxButton:setBitmapFocus/2 , wxButton:setBitmapDisabled/2 . See: create/5 , wxValidator (not implemented in wx)","ref":"wxBitmapButton.html#new/4","title":"wxBitmapButton.new/4","type":"function"},{"doc":"Helper function creating a standard-looking &quot;Close&quot; button. To get the best results, platform-specific code may need to be used to create a small, title bar-like &quot;Close&quot; button. This function is provided to avoid the need to test for the current platform and creates the button with as native look as possible. Return: The new button. Since: 2.9.5","ref":"wxBitmapButton.html#newCloseButton/2","title":"wxBitmapButton.newCloseButton/2","type":"function"},{"doc":"","ref":"wxBitmapButton.html#t:wxBitmapButton/0","title":"wxBitmapButton.wxBitmapButton/0","type":"type"},{"doc":"wxBitmapDataObject is a specialization of wxDataObject for bitmap data. It can be used without change to paste data into the wxClipboard or a wxDropSource (not implemented in wx). A user may wish to derive a new class from this class for providing a bitmap on-demand in order to minimize memory consumption when offering data in several formats, such as a bitmap and GIF. This class may be used as is, but getBitmap/1 may be overridden to increase efficiency. See: Overview dnd , wxDataObject , wxDataObjectSimple (not implemented in wx), wxFileDataObject , wxTextDataObject , wxDataObject This class is derived (and can use functions) from: wxDataObject wxWidgets docs: wxBitmapDataObject","ref":"wxBitmapDataObject.html","title":"wxBitmapDataObject","type":"module"},{"doc":"Destroys the object.","ref":"wxBitmapDataObject.html#destroy/1","title":"wxBitmapDataObject.destroy/1","type":"function"},{"doc":"Returns the bitmap associated with the data object. You may wish to override this method when offering data on-demand, but this is not required by wxWidgets' internals. Use this method to get data in bitmap form from the wxClipboard .","ref":"wxBitmapDataObject.html#getBitmap/1","title":"wxBitmapDataObject.getBitmap/1","type":"function"},{"doc":"","ref":"wxBitmapDataObject.html#new/0","title":"wxBitmapDataObject.new/0","type":"function"},{"doc":"Constructor, optionally passing a bitmap (otherwise use setBitmap/2 later).","ref":"wxBitmapDataObject.html#new/1","title":"wxBitmapDataObject.new/1","type":"function"},{"doc":"Sets the bitmap associated with the data object. This method is called when the data object receives data. Usually there will be no reason to override this function.","ref":"wxBitmapDataObject.html#setBitmap/2","title":"wxBitmapDataObject.setBitmap/2","type":"function"},{"doc":"","ref":"wxBitmapDataObject.html#t:wxBitmapDataObject/0","title":"wxBitmapDataObject.wxBitmapDataObject/0","type":"type"},{"doc":"A book control is a convenient way of displaying multiple pages of information, displayed one page at a time. wxWidgets has five variants of this control: This abstract class is the parent of all these book controls, and provides their basic interface. This is a pure virtual class so you cannot allocate it directly. See: Overview bookctrl This class is derived (and can use functions) from: wxControl wxWindow wxEvtHandler wxWidgets docs: wxBookCtrlBase","ref":"wxBookCtrlBase.html","title":"wxBookCtrlBase","type":"module"},{"doc":"","ref":"wxBookCtrlBase.html#addPage/3","title":"wxBookCtrlBase.addPage/3","type":"function"},{"doc":"Adds a new page. The page must have the book control itself as the parent and must not have been added to this control previously. The call to this function will generate the page changing and page changed events if select is true, but not when inserting the very first page (as there is no previous page selection to switch from in this case and so it wouldn't make sense to e.g. veto such event). Return: true if successful, false otherwise. Remark: Do not delete the page, it will be deleted by the book control. See: insertPage/5","ref":"wxBookCtrlBase.html#addPage/4","title":"wxBookCtrlBase.addPage/4","type":"function"},{"doc":"","ref":"wxBookCtrlBase.html#advanceSelection/1","title":"wxBookCtrlBase.advanceSelection/1","type":"function"},{"doc":"Cycles through the tabs. The call to this function generates the page changing events.","ref":"wxBookCtrlBase.html#advanceSelection/2","title":"wxBookCtrlBase.advanceSelection/2","type":"function"},{"doc":"Changes the selection to the given page, returning the previous selection. This function behaves as setSelection/2 but does not generate the page changing events. See overview_events_prog for more information.","ref":"wxBookCtrlBase.html#changeSelection/2","title":"wxBookCtrlBase.changeSelection/2","type":"function"},{"doc":"Deletes all pages.","ref":"wxBookCtrlBase.html#deleteAllPages/1","title":"wxBookCtrlBase.deleteAllPages/1","type":"function"},{"doc":"Deletes the specified page, and the associated window. The call to this function generates the page changing events when deleting the currently selected page or a page preceding it in the index order, but it does not send any events when deleting the last page: while in this case the selection also changes, it becomes invalid and for compatibility reasons the control never generates events with the invalid selection index.","ref":"wxBookCtrlBase.html#deletePage/2","title":"wxBookCtrlBase.deletePage/2","type":"function"},{"doc":"Returns the currently selected page or NULL.","ref":"wxBookCtrlBase.html#getCurrentPage/1","title":"wxBookCtrlBase.getCurrentPage/1","type":"function"},{"doc":"Returns the window at the given page position.","ref":"wxBookCtrlBase.html#getPage/2","title":"wxBookCtrlBase.getPage/2","type":"function"},{"doc":"Returns the number of pages in the control.","ref":"wxBookCtrlBase.html#getPageCount/1","title":"wxBookCtrlBase.getPageCount/1","type":"function"},{"doc":"Returns the string for the given page.","ref":"wxBookCtrlBase.html#getPageText/2","title":"wxBookCtrlBase.getPageText/2","type":"function"},{"doc":"Returns the currently selected page, or wxNOT_FOUND if none was selected. Note that this method may return either the previously or newly selected page when called from the EVT_BOOKCTRL_PAGE_CHANGED handler depending on the platform and so wxBookCtrlEvent:getSelection/1 should be used instead in this case.","ref":"wxBookCtrlBase.html#getSelection/1","title":"wxBookCtrlBase.getSelection/1","type":"function"},{"doc":"Returns the index of the tab at the specified position or wxNOT_FOUND if none. If flags parameter is non-NULL, the position of the point inside the tab is returned as well. Return: Returns the zero-based tab index or wxNOT_FOUND if there is no tab at the specified position.","ref":"wxBookCtrlBase.html#hitTest/2","title":"wxBookCtrlBase.hitTest/2","type":"function"},{"doc":"","ref":"wxBookCtrlBase.html#insertPage/4","title":"wxBookCtrlBase.insertPage/4","type":"function"},{"doc":"Inserts a new page at the specified position. Return: true if successful, false otherwise. Remark: Do not delete the page, it will be deleted by the book control. See: addPage/4","ref":"wxBookCtrlBase.html#insertPage/5","title":"wxBookCtrlBase.insertPage/5","type":"function"},{"doc":"Deletes the specified page, without deleting the associated window. See deletePage/2 for a note about the events generated by this function.","ref":"wxBookCtrlBase.html#removePage/2","title":"wxBookCtrlBase.removePage/2","type":"function"},{"doc":"Sets the text for the given page.","ref":"wxBookCtrlBase.html#setPageText/3","title":"wxBookCtrlBase.setPageText/3","type":"function"},{"doc":"Sets the selection to the given page, returning the previous selection. Notice that the call to this function generates the page changing events, use the changeSelection/2 function if you don't want these events to be generated. See: getSelection/1","ref":"wxBookCtrlBase.html#setSelection/2","title":"wxBookCtrlBase.setSelection/2","type":"function"},{"doc":"","ref":"wxBookCtrlBase.html#t:wxBookCtrlBase/0","title":"wxBookCtrlBase.wxBookCtrlBase/0","type":"type"},{"doc":"This class represents the events generated by book controls ( wxNotebook , wxListbook , wxChoicebook , wxTreebook , wxAuiNotebook ). The PAGE_CHANGING events are sent before the current page is changed. It allows the program to examine the current page (which can be retrieved with getOldSelection/1 ) and to veto the page change by calling wxNotifyEvent:veto/1 if, for example, the current values in the controls of the old page are invalid. The PAGE_CHANGED events are sent after the page has been changed and the program cannot veto it any more, it just informs it about the page change. To summarize, if the program is interested in validating the page values before allowing the user to change it, it should process the PAGE_CHANGING event, otherwise PAGE_CHANGED is probably enough. In any case, it is probably unnecessary to process both events at once. See: wxNotebook , wxListbook , wxChoicebook , wxTreebook , wxToolbook , wxAuiNotebook This class is derived (and can use functions) from: wxNotifyEvent wxCommandEvent wxEvent wxWidgets docs: wxBookCtrlEvent","ref":"wxBookCtrlEvent.html","title":"wxBookCtrlEvent","type":"module"},{"doc":"Returns the page that was selected before the change, wxNOT_FOUND if none was selected.","ref":"wxBookCtrlEvent.html#getOldSelection/1","title":"wxBookCtrlEvent.getOldSelection/1","type":"function"},{"doc":"Returns the currently selected page, or wxNOT_FOUND if none was selected. Note: under Windows, getSelection/1 will return the same value as getOldSelection/1 when called from the EVT_BOOKCTRL_PAGE_CHANGING handler and not the page which is going to be selected.","ref":"wxBookCtrlEvent.html#getSelection/1","title":"wxBookCtrlEvent.getSelection/1","type":"function"},{"doc":"Sets the id of the page selected before the change.","ref":"wxBookCtrlEvent.html#setOldSelection/2","title":"wxBookCtrlEvent.setOldSelection/2","type":"function"},{"doc":"Sets the selection member variable.","ref":"wxBookCtrlEvent.html#setSelection/2","title":"wxBookCtrlEvent.setSelection/2","type":"function"},{"doc":"","ref":"wxBookCtrlEvent.html#t:wxBookCtrl/0","title":"wxBookCtrlEvent.wxBookCtrl/0","type":"type"},{"doc":"","ref":"wxBookCtrlEvent.html#t:wxBookCtrlEvent/0","title":"wxBookCtrlEvent.wxBookCtrlEvent/0","type":"type"},{"doc":"","ref":"wxBookCtrlEvent.html#t:wxBookCtrlEventType/0","title":"wxBookCtrlEvent.wxBookCtrlEventType/0","type":"type"},{"doc":"The basic idea behind a box sizer is that windows will most often be laid out in rather simple basic geometry, typically in a row or a column or several hierarchies of either. For more information, please see overview_sizer_box. See: wxSizer , Overview sizer This class is derived (and can use functions) from: wxSizer wxWidgets docs: wxBoxSizer","ref":"wxBoxSizer.html","title":"wxBoxSizer","type":"module"},{"doc":"Destroys the object.","ref":"wxBoxSizer.html#destroy/1","title":"wxBoxSizer.destroy/1","type":"function"},{"doc":"Returns the orientation of the box sizer, either wxVERTICAL or wxHORIZONTAL.","ref":"wxBoxSizer.html#getOrientation/1","title":"wxBoxSizer.getOrientation/1","type":"function"},{"doc":"Constructor for a wxBoxSizer . orient may be either of wxVERTICAL or wxHORIZONTAL for creating either a column sizer or a row sizer.","ref":"wxBoxSizer.html#new/1","title":"wxBoxSizer.new/1","type":"function"},{"doc":"","ref":"wxBoxSizer.html#t:wxBoxSizer/0","title":"wxBoxSizer.wxBoxSizer/0","type":"type"},{"doc":"A brush is a drawing tool for filling in areas. It is used for painting the background of rectangles, ellipses, etc. It has a colour and a style. On a monochrome display, wxWidgets shows all brushes as white unless the colour is really black. Do not initialize objects on the stack before the program commences, since other required structures may not have been set up yet. Instead, define global pointers to objects and create them in wxApp::OnInit (not implemented in wx) or when required. An application may wish to create brushes with different characteristics dynamically, and there is the consequent danger that a large number of duplicate brushes will be created. Therefore an application may wish to get a pointer to a brush by using the global list of brushes ?wxTheBrushList, and calling the member function wxBrushList::FindOrCreateBrush() (not implemented in wx). This class uses reference counting and copy-on-write internally so that assignments between two instances of this class are very cheap. You can therefore use actual objects instead of pointers without efficiency problems. If an instance of this class is changed it will create its own data internally so that other instances, which previously shared the data using the reference counting, are not affected. Predefined objects (include wx.hrl): See: wxBrushList (not implemented in wx), wxDC , wxDC:setBrush/2 wxWidgets docs: wxBrush","ref":"wxBrush.html","title":"wxBrush","type":"module"},{"doc":"Destructor. See overview_refcount_destruct for more info. Remark: Although all remaining brushes are deleted when the application exits, the application should try to clean up all brushes itself. This is because wxWidgets cannot know if a pointer to the brush object is stored in an application data structure, and there is a risk of double deletion.","ref":"wxBrush.html#destroy/1","title":"wxBrush.destroy/1","type":"function"},{"doc":"Returns a reference to the brush colour. See: setColour/4","ref":"wxBrush.html#getColour/1","title":"wxBrush.getColour/1","type":"function"},{"doc":"Gets a pointer to the stipple bitmap. If the brush does not have a wxBRUSHSTYLE_STIPPLE style, this bitmap may be non-NULL but uninitialised (i.e. wxBitmap : isOk/1 returns false). See: setStipple/2","ref":"wxBrush.html#getStipple/1","title":"wxBrush.getStipple/1","type":"function"},{"doc":"Returns the brush style, one of the ?wxBrushStyle values. See: setStyle/2 , setColour/4 , setStipple/2","ref":"wxBrush.html#getStyle/1","title":"wxBrush.getStyle/1","type":"function"},{"doc":"Returns true if the style of the brush is any of hatched fills. See: getStyle/1","ref":"wxBrush.html#isHatch/1","title":"wxBrush.isHatch/1","type":"function"},{"doc":"Returns true if the brush is initialised. Notice that an uninitialized brush object can't be queried for any brush properties and all calls to the accessor methods on it will result in an assert failure.","ref":"wxBrush.html#isOk/1","title":"wxBrush.isOk/1","type":"function"},{"doc":"Default constructor. The brush will be uninitialised, and wxBrush : isOk/1 will return false.","ref":"wxBrush.html#new/0","title":"wxBrush.new/0","type":"function"},{"doc":"Copy constructor, uses reference counting.","ref":"wxBrush.html#new/1","title":"wxBrush.new/1","type":"function"},{"doc":"Constructs a brush from a colour object and style .","ref":"wxBrush.html#new/2","title":"wxBrush.new/2","type":"function"},{"doc":"Sets the brush colour using red, green and blue values. See: getColour/1","ref":"wxBrush.html#setColour/2","title":"wxBrush.setColour/2","type":"function"},{"doc":"","ref":"wxBrush.html#setColour/4","title":"wxBrush.setColour/4","type":"function"},{"doc":"Sets the stipple bitmap. Remark: The style will be set to wxBRUSHSTYLE_STIPPLE , unless the bitmap has a mask associated to it, in which case the style will be set to wxBRUSHSTYLE_STIPPLE_MASK_OPAQUE . See: wxBitmap","ref":"wxBrush.html#setStipple/2","title":"wxBrush.setStipple/2","type":"function"},{"doc":"Sets the brush style. See: getStyle/1","ref":"wxBrush.html#setStyle/2","title":"wxBrush.setStyle/2","type":"function"},{"doc":"","ref":"wxBrush.html#t:wxBrush/0","title":"wxBrush.wxBrush/0","type":"type"},{"doc":"This class provides a simple way to avoid flicker: when drawing on it, everything is in fact first drawn on an in-memory buffer (a wxBitmap ) and then copied to the screen, using the associated wxDC , only once, when this object is destroyed. wxBufferedDC itself is typically associated with wxClientDC , if you want to use it in your EVT_PAINT handler, you should look at wxBufferedPaintDC instead. When used like this, a valid DC must be specified in the constructor while the buffer bitmap doesn't have to be explicitly provided, by default this class will allocate the bitmap of required size itself. However using a dedicated bitmap can speed up the redrawing process by eliminating the repeated creation and destruction of a possibly big bitmap. Otherwise, wxBufferedDC can be used in the same way as any other device context. Another possible use for wxBufferedDC is to use it to maintain a backing store for the window contents. In this case, the associated DC may be NULL but a valid backing store bitmap should be specified. Finally, please note that GTK+ 2.0 as well as macOS provide double buffering themselves natively. You can either use wxWindow:isDoubleBuffered/1 to determine whether you need to use buffering or not, or use wxAutoBufferedPaintDC (not implemented in wx) to avoid needless double buffering on the systems which already do it automatically. See: wxDC , wxMemoryDC , wxBufferedPaintDC , wxAutoBufferedPaintDC (not implemented in wx) This class is derived (and can use functions) from: wxMemoryDC wxDC wxWidgets docs: wxBufferedDC","ref":"wxBufferedDC.html","title":"wxBufferedDC","type":"module"},{"doc":"Copies everything drawn on the DC so far to the underlying DC associated with this object, if any.","ref":"wxBufferedDC.html#destroy/1","title":"wxBufferedDC.destroy/1","type":"function"},{"doc":"","ref":"wxBufferedDC.html#init/2","title":"wxBufferedDC.init/2","type":"function"},{"doc":"","ref":"wxBufferedDC.html#init/3","title":"wxBufferedDC.init/3","type":"function"},{"doc":"Initializes the object created using the default constructor. Please see the constructors for parameter details.","ref":"wxBufferedDC.html#init/4","title":"wxBufferedDC.init/4","type":"function"},{"doc":"Default constructor. You must call one of the init/4 methods later in order to use the device context.","ref":"wxBufferedDC.html#new/0","title":"wxBufferedDC.new/0","type":"function"},{"doc":"","ref":"wxBufferedDC.html#new/1","title":"wxBufferedDC.new/1","type":"function"},{"doc":"Creates a buffer for the provided dc. init/4 must not be called when using this constructor.","ref":"wxBufferedDC.html#new/2","title":"wxBufferedDC.new/2","type":"function"},{"doc":"Creates a buffer for the provided dc . init/4 must not be called when using this constructor.","ref":"wxBufferedDC.html#new/3","title":"wxBufferedDC.new/3","type":"function"},{"doc":"","ref":"wxBufferedDC.html#t:wxBufferedDC/0","title":"wxBufferedDC.wxBufferedDC/0","type":"type"},{"doc":"This is a subclass of wxBufferedDC which can be used inside of an EVT_PAINT() event handler to achieve double-buffered drawing. Just use this class instead of wxPaintDC and make sure wxWindow:setBackgroundStyle/2 is called with wxBG_STYLE_PAINT somewhere in the class initialization code, and that's all you have to do to (mostly) avoid flicker. The only thing to watch out for is that if you are using this class together with wxScrolled (not implemented in wx), you probably do not want to call wxScrolledWindow:prepareDC/2 on it as it already does this internally for the real underlying wxPaintDC . See: wxDC , wxBufferedDC , wxAutoBufferedPaintDC (not implemented in wx), wxPaintDC This class is derived (and can use functions) from: wxBufferedDC wxMemoryDC wxDC wxWidgets docs: wxBufferedPaintDC","ref":"wxBufferedPaintDC.html","title":"wxBufferedPaintDC","type":"module"},{"doc":"Copies everything drawn on the DC so far to the window associated with this object, using a wxPaintDC .","ref":"wxBufferedPaintDC.html#destroy/1","title":"wxBufferedPaintDC.destroy/1","type":"function"},{"doc":"","ref":"wxBufferedPaintDC.html#new/1","title":"wxBufferedPaintDC.new/1","type":"function"},{"doc":"","ref":"wxBufferedPaintDC.html#new/2","title":"wxBufferedPaintDC.new/2","type":"function"},{"doc":"As with wxBufferedDC , you may either provide the bitmap to be used for buffering or let this object create one internally (in the latter case, the size of the client part of the window is used). Pass wxBUFFER_CLIENT_AREA for the style parameter to indicate that just the client area of the window is buffered, or wxBUFFER_VIRTUAL_AREA to indicate that the buffer bitmap covers the virtual area.","ref":"wxBufferedPaintDC.html#new/3","title":"wxBufferedPaintDC.new/3","type":"function"},{"doc":"","ref":"wxBufferedPaintDC.html#t:wxBufferedPaintDC/0","title":"wxBufferedPaintDC.wxBufferedPaintDC/0","type":"type"},{"doc":"A button is a control that contains a text string, and is one of the most common elements of a GUI. It may be placed on a wxDialog or on a wxPanel panel, or indeed on almost any other window. By default, i.e. if none of the alignment styles are specified, the label is centered both horizontally and vertically. If the button has both a label and a bitmap, the alignment styles above specify the location of the rectangle combining both the label and the bitmap and the bitmap position set with wxButton::SetBitmapPosition() (not implemented in wx) defines the relative position of the bitmap with respect to the label (however currently non-default alignment combinations are not implemented on all platforms). Since version 2.9.1 wxButton supports showing both text and an image (currently only when using wxMSW, wxGTK or wxOSX/Cocoa ports), see SetBitmap() (not implemented in wx) and setBitmapLabel/2 , setBitmapDisabled/2 &amp;c methods. In the previous wxWidgets versions this functionality was only available in (the now trivial) wxBitmapButton class which was only capable of showing an image without text. A button may have either a single image for all states or different images for the following states (different images are not currently supported under macOS where the normal image is used for all states): All of the bitmaps must be of the same size and the normal bitmap must be set first (to a valid bitmap), before setting any other ones. Also, if the size of the bitmaps is changed later, you need to change the size of the normal bitmap before setting any other bitmaps with the new size (and you do need to reset all of them as their original values can be lost when the normal bitmap size changes). The position of the image inside the button be configured using SetBitmapPosition() (not implemented in wx). By default the image is on the left of the text. Please also notice that GTK+ uses a global setting called gtk-button-images to determine if the images should be shown in the buttons at all. If it is off (which is the case in e.g. Gnome 2.28 by default), no images will be shown, consistently with the native behaviour. Styles This class supports the following styles: See: wxBitmapButton This class is derived (and can use functions) from: wxControl wxWindow wxEvtHandler wxWidgets docs: wxButton Events Event types emitted from this class: command_button_clicked","ref":"wxButton.html","title":"wxButton","type":"module"},{"doc":"","ref":"wxButton.html#create/3","title":"wxButton.create/3","type":"function"},{"doc":"Button creation function for two-step creation. For more details, see new/3 .","ref":"wxButton.html#create/4","title":"wxButton.create/4","type":"function"},{"doc":"Destroys the object.","ref":"wxButton.html#destroy/1","title":"wxButton.destroy/1","type":"function"},{"doc":"Returns the bitmap for the disabled state, which may be invalid. See: setBitmapDisabled/2 Since: 2.9.1 (available in wxBitmapButton only in previous versions)","ref":"wxButton.html#getBitmapDisabled/1","title":"wxButton.getBitmapDisabled/1","type":"function"},{"doc":"Returns the bitmap for the focused state, which may be invalid. See: setBitmapFocus/2 Since: 2.9.1 (available in wxBitmapButton only in previous versions)","ref":"wxButton.html#getBitmapFocus/1","title":"wxButton.getBitmapFocus/1","type":"function"},{"doc":"Returns the bitmap for the normal state. This is exactly the same as GetBitmap() (not implemented in wx) but uses a name backwards-compatible with wxBitmapButton . See: SetBitmap() (not implemented in wx), setBitmapLabel/2 Since: 2.9.1 (available in wxBitmapButton only in previous versions)","ref":"wxButton.html#getBitmapLabel/1","title":"wxButton.getBitmapLabel/1","type":"function"},{"doc":"Returns the default size for the buttons. It is advised to make all the dialog buttons of the same size and this function allows retrieving the (platform, and current font dependent) size which should be the best suited for this. The optional win argument is new since wxWidgets 3.1.3 and allows to get a per-monitor DPI specific size.","ref":"wxButton.html#getDefaultSize/0","title":"wxButton.getDefaultSize/0","type":"function"},{"doc":"","ref":"wxButton.html#getDefaultSize/1","title":"wxButton.getDefaultSize/1","type":"function"},{"doc":"Default ctor.","ref":"wxButton.html#new/0","title":"wxButton.new/0","type":"function"},{"doc":"","ref":"wxButton.html#new/2","title":"wxButton.new/2","type":"function"},{"doc":"Constructor, creating and showing a button. The preferred way to create standard buttons is to use default value of label . If no label is supplied and id is one of standard IDs from this list, a standard label will be used. In other words, if you use a predefined wxID_XXX constant, just omit the label completely rather than specifying it. In particular, help buttons (the ones with id of wxID_HELP ) under macOS can't display any label at all and while wxButton will detect if the standard &quot;Help&quot; label is used and ignore it, using any other label will prevent the button from correctly appearing as a help button and so should be avoided. In addition to that, the button will be decorated with stock icons under GTK+ 2. See: create/4 , wxValidator (not implemented in wx)","ref":"wxButton.html#new/3","title":"wxButton.new/3","type":"function"},{"doc":"Sets the bitmap for the disabled button appearance. If bitmap is invalid, the disabled bitmap is set to the automatically generated greyed out version of the normal bitmap, i.e. the same bitmap as is used by default if this method is not called at all. Use SetBitmap() (not implemented in wx) with an invalid bitmap to remove the bitmap completely (for all states). See: getBitmapDisabled/1 , setBitmapLabel/2 , SetBitmapPressed() (not implemented in wx), setBitmapFocus/2 Since: 2.9.1 (available in wxBitmapButton only in previous versions)","ref":"wxButton.html#setBitmapDisabled/2","title":"wxButton.setBitmapDisabled/2","type":"function"},{"doc":"Sets the bitmap for the button appearance when it has the keyboard focus. If bitmap is invalid, the normal bitmap will be used in the focused state. See: getBitmapFocus/1 , setBitmapLabel/2 , SetBitmapPressed() (not implemented in wx), setBitmapDisabled/2 Since: 2.9.1 (available in wxBitmapButton only in previous versions)","ref":"wxButton.html#setBitmapFocus/2","title":"wxButton.setBitmapFocus/2","type":"function"},{"doc":"Sets the bitmap label for the button. Remark: This is the bitmap used for the unselected state, and for all other states if no other bitmaps are provided. See: SetBitmap() (not implemented in wx), getBitmapLabel/1 Since: 2.9.1 (available in wxBitmapButton only in previous versions)","ref":"wxButton.html#setBitmapLabel/2","title":"wxButton.setBitmapLabel/2","type":"function"},{"doc":"This sets the button to be the default item in its top-level window (e.g. the panel or the dialog box containing it). As normal, pressing return causes the default button to be depressed when the return key is pressed. See also wxWindow:setFocus/1 which sets the keyboard focus for windows and text panel items, and wxTopLevelWindow::SetDefaultItem() (not implemented in wx). Remark: Under Windows, only dialog box buttons respond to this function. Return: the old default item (possibly NULL)","ref":"wxButton.html#setDefault/1","title":"wxButton.setDefault/1","type":"function"},{"doc":"Sets the string label for the button.","ref":"wxButton.html#setLabel/2","title":"wxButton.setLabel/2","type":"function"},{"doc":"","ref":"wxButton.html#t:wxButton/0","title":"wxButton.wxButton/0","type":"type"},{"doc":"The calendar control allows the user to pick a date. The user can move the current selection using the keyboard and select the date (generating EVT_CALENDAR event) by pressing &lt;Return&gt; or double clicking it. Generic calendar has advanced possibilities for the customization of its display, described below. If you want to use these possibilities on every platform, use wxGenericCalendarCtrl instead of wxCalendarCtrl . All global settings (such as colours and fonts used) can, of course, be changed. But also, the display style for each day in the month can be set independently using wxCalendarDateAttr class. An item without custom attributes is drawn with the default colours and font and without border, but setting custom attributes with setAttr/3 allows modifying its appearance. Just create a custom attribute object and set it for the day you want to be displayed specially (note that the control will take ownership of the pointer, i.e. it will delete it itself). A day may be marked as being a holiday, even if it is not recognized as one by wx_datetime() using the wxCalendarDateAttr:setHoliday/2 method. As the attributes are specified for each day, they may change when the month is changed, so you will often want to update them in EVT_CALENDAR_PAGE_CHANGED event handler. If neither the wxCAL_SUNDAY_FIRST or wxCAL_MONDAY_FIRST style is given, the first day of the week is determined from operating system's settings, if possible. The native wxGTK calendar chooses the first weekday based on locale, and these styles have no effect on it. Styles This class supports the following styles: Note: Changing the selected date will trigger an EVT_CALENDAR_DAY, MONTH or YEAR event as well as an EVT_CALENDAR_SEL_CHANGED event. See: Examples , wxCalendarDateAttr , wxCalendarEvent , wxDatePickerCtrl This class is derived (and can use functions) from: wxControl wxWindow wxEvtHandler wxWidgets docs: wxCalendarCtrl Events Event types emitted from this class: calendar_sel_changed , calendar_weekday_clicked","ref":"wxCalendarCtrl.html","title":"wxCalendarCtrl","type":"module"},{"doc":"","ref":"wxCalendarCtrl.html#create/3","title":"wxCalendarCtrl.create/3","type":"function"},{"doc":"Creates the control. See wxWindow:new/3 for the meaning of the parameters and the control overview for the possible styles.","ref":"wxCalendarCtrl.html#create/4","title":"wxCalendarCtrl.create/4","type":"function"},{"doc":"Destroys the control.","ref":"wxCalendarCtrl.html#destroy/1","title":"wxCalendarCtrl.destroy/1","type":"function"},{"doc":"","ref":"wxCalendarCtrl.html#enableHolidayDisplay/1","title":"wxCalendarCtrl.enableHolidayDisplay/1","type":"function"},{"doc":"This function should be used instead of changing wxCAL_SHOW_HOLIDAYS style bit directly. It enables or disables the special highlighting of the holidays.","ref":"wxCalendarCtrl.html#enableHolidayDisplay/2","title":"wxCalendarCtrl.enableHolidayDisplay/2","type":"function"},{"doc":"","ref":"wxCalendarCtrl.html#enableMonthChange/1","title":"wxCalendarCtrl.enableMonthChange/1","type":"function"},{"doc":"This function should be used instead of changing wxCAL_NO_MONTH_CHANGE style bit. It allows or disallows the user to change the month interactively. Note that if the month cannot be changed, the year cannot be changed neither. Return: true if the value of this option really changed or false if it was already set to the requested value.","ref":"wxCalendarCtrl.html#enableMonthChange/2","title":"wxCalendarCtrl.enableMonthChange/2","type":"function"},{"doc":"","ref":"wxCalendarCtrl.html#enableYearChange/1","title":"wxCalendarCtrl.enableYearChange/1","type":"function"},{"doc":"Deprecated: This function should be used instead of changing wxCAL_NO_YEAR_CHANGE style bit directly. It allows or disallows the user to change the year interactively. Only in generic wxCalendarCtrl .","ref":"wxCalendarCtrl.html#enableYearChange/2","title":"wxCalendarCtrl.enableYearChange/2","type":"function"},{"doc":"Returns the attribute for the given date (should be in the range 1...31). The returned pointer may be NULL. Only in generic wxCalendarCtrl .","ref":"wxCalendarCtrl.html#getAttr/2","title":"wxCalendarCtrl.getAttr/2","type":"function"},{"doc":"Gets the currently selected date.","ref":"wxCalendarCtrl.html#getDate/1","title":"wxCalendarCtrl.getDate/1","type":"function"},{"doc":"Gets the background colour of the header part of the calendar window. This method is currently only implemented in generic wxCalendarCtrl and always returns wxNullColour in the native versions. See: setHeaderColours/3","ref":"wxCalendarCtrl.html#getHeaderColourBg/1","title":"wxCalendarCtrl.getHeaderColourBg/1","type":"function"},{"doc":"Gets the foreground colour of the header part of the calendar window. This method is currently only implemented in generic wxCalendarCtrl and always returns wxNullColour in the native versions. See: setHeaderColours/3","ref":"wxCalendarCtrl.html#getHeaderColourFg/1","title":"wxCalendarCtrl.getHeaderColourFg/1","type":"function"},{"doc":"Gets the background highlight colour. Only in generic wxCalendarCtrl . This method is currently only implemented in generic wxCalendarCtrl and always returns wxNullColour in the native versions. See: setHighlightColours/3","ref":"wxCalendarCtrl.html#getHighlightColourBg/1","title":"wxCalendarCtrl.getHighlightColourBg/1","type":"function"},{"doc":"Gets the foreground highlight colour. Only in generic wxCalendarCtrl . This method is currently only implemented in generic wxCalendarCtrl and always returns wxNullColour in the native versions. See: setHighlightColours/3","ref":"wxCalendarCtrl.html#getHighlightColourFg/1","title":"wxCalendarCtrl.getHighlightColourFg/1","type":"function"},{"doc":"Return the background colour currently used for holiday highlighting. Only useful with generic wxCalendarCtrl as native versions currently don't support holidays display at all and always return wxNullColour . See: setHolidayColours/3","ref":"wxCalendarCtrl.html#getHolidayColourBg/1","title":"wxCalendarCtrl.getHolidayColourBg/1","type":"function"},{"doc":"Return the foreground colour currently used for holiday highlighting. Only useful with generic wxCalendarCtrl as native versions currently don't support holidays display at all and always return wxNullColour . See: setHolidayColours/3","ref":"wxCalendarCtrl.html#getHolidayColourFg/1","title":"wxCalendarCtrl.getHolidayColourFg/1","type":"function"},{"doc":"Returns one of wxCalendarHitTestResult constants and fills either date or wd pointer with the corresponding value depending on the hit test code. Not implemented in wxGTK currently.","ref":"wxCalendarCtrl.html#hitTest/2","title":"wxCalendarCtrl.hitTest/2","type":"function"},{"doc":"Default constructor.","ref":"wxCalendarCtrl.html#new/0","title":"wxCalendarCtrl.new/0","type":"function"},{"doc":"","ref":"wxCalendarCtrl.html#new/2","title":"wxCalendarCtrl.new/2","type":"function"},{"doc":"Does the same as create/4 method.","ref":"wxCalendarCtrl.html#new/3","title":"wxCalendarCtrl.new/3","type":"function"},{"doc":"Clears any attributes associated with the given day (in the range 1...31). Only in generic wxCalendarCtrl .","ref":"wxCalendarCtrl.html#resetAttr/2","title":"wxCalendarCtrl.resetAttr/2","type":"function"},{"doc":"Associates the attribute with the specified date (in the range 1...31). If the pointer is NULL, the items attribute is cleared. Only in generic wxCalendarCtrl .","ref":"wxCalendarCtrl.html#setAttr/3","title":"wxCalendarCtrl.setAttr/3","type":"function"},{"doc":"Sets the current date. The date parameter must be valid and in the currently valid range as set by SetDateRange() (not implemented in wx), otherwise the current date is not changed and the function returns false and, additionally, triggers an assertion failure if the date is invalid.","ref":"wxCalendarCtrl.html#setDate/2","title":"wxCalendarCtrl.setDate/2","type":"function"},{"doc":"Set the colours used for painting the weekdays at the top of the control. This method is currently only implemented in generic wxCalendarCtrl and does nothing in the native versions.","ref":"wxCalendarCtrl.html#setHeaderColours/3","title":"wxCalendarCtrl.setHeaderColours/3","type":"function"},{"doc":"Set the colours to be used for highlighting the currently selected date. This method is currently only implemented in generic wxCalendarCtrl and does nothing in the native versions.","ref":"wxCalendarCtrl.html#setHighlightColours/3","title":"wxCalendarCtrl.setHighlightColours/3","type":"function"},{"doc":"Marks the specified day as being a holiday in the current month. This method is only implemented in the generic version of the control and does nothing in the native ones.","ref":"wxCalendarCtrl.html#setHoliday/2","title":"wxCalendarCtrl.setHoliday/2","type":"function"},{"doc":"Sets the colours to be used for the holidays highlighting. This method is only implemented in the generic version of the control and does nothing in the native ones. It should also only be called if the window style includes wxCAL_SHOW_HOLIDAYS flag or enableHolidayDisplay/2 had been called.","ref":"wxCalendarCtrl.html#setHolidayColours/3","title":"wxCalendarCtrl.setHolidayColours/3","type":"function"},{"doc":"","ref":"wxCalendarCtrl.html#t:wxCalendarCtrl/0","title":"wxCalendarCtrl.wxCalendarCtrl/0","type":"type"},{"doc":"wxCalendarDateAttr is a custom attributes for a calendar date. The objects of this class are used with wxCalendarCtrl . See: wxCalendarCtrl wxWidgets docs: wxCalendarDateAttr","ref":"wxCalendarDateAttr.html","title":"wxCalendarDateAttr","type":"module"},{"doc":"Destroys the object.","ref":"wxCalendarDateAttr.html#destroy/1","title":"wxCalendarDateAttr.destroy/1","type":"function"},{"doc":"Returns the background colour set for the calendar date.","ref":"wxCalendarDateAttr.html#getBackgroundColour/1","title":"wxCalendarDateAttr.getBackgroundColour/1","type":"function"},{"doc":"Returns the border set for the calendar date.","ref":"wxCalendarDateAttr.html#getBorder/1","title":"wxCalendarDateAttr.getBorder/1","type":"function"},{"doc":"Returns the border colour set for the calendar date.","ref":"wxCalendarDateAttr.html#getBorderColour/1","title":"wxCalendarDateAttr.getBorderColour/1","type":"function"},{"doc":"Returns the font set for the calendar date.","ref":"wxCalendarDateAttr.html#getFont/1","title":"wxCalendarDateAttr.getFont/1","type":"function"},{"doc":"Returns the text colour set for the calendar date.","ref":"wxCalendarDateAttr.html#getTextColour/1","title":"wxCalendarDateAttr.getTextColour/1","type":"function"},{"doc":"Returns true if a non-default text background colour is set.","ref":"wxCalendarDateAttr.html#hasBackgroundColour/1","title":"wxCalendarDateAttr.hasBackgroundColour/1","type":"function"},{"doc":"Returns true if a non-default (i.e. any) border is set.","ref":"wxCalendarDateAttr.html#hasBorder/1","title":"wxCalendarDateAttr.hasBorder/1","type":"function"},{"doc":"Returns true if a non-default border colour is set.","ref":"wxCalendarDateAttr.html#hasBorderColour/1","title":"wxCalendarDateAttr.hasBorderColour/1","type":"function"},{"doc":"Returns true if a non-default font is set.","ref":"wxCalendarDateAttr.html#hasFont/1","title":"wxCalendarDateAttr.hasFont/1","type":"function"},{"doc":"Returns true if a non-default text foreground colour is set.","ref":"wxCalendarDateAttr.html#hasTextColour/1","title":"wxCalendarDateAttr.hasTextColour/1","type":"function"},{"doc":"Returns true if this calendar day is displayed as a holiday.","ref":"wxCalendarDateAttr.html#isHoliday/1","title":"wxCalendarDateAttr.isHoliday/1","type":"function"},{"doc":"","ref":"wxCalendarDateAttr.html#new/0","title":"wxCalendarDateAttr.new/0","type":"function"},{"doc":"Constructor for specifying all wxCalendarDateAttr properties.","ref":"wxCalendarDateAttr.html#new/1","title":"wxCalendarDateAttr.new/1","type":"function"},{"doc":"Constructor using default properties except the given border.","ref":"wxCalendarDateAttr.html#new/2","title":"wxCalendarDateAttr.new/2","type":"function"},{"doc":"Sets the text background colour to use.","ref":"wxCalendarDateAttr.html#setBackgroundColour/2","title":"wxCalendarDateAttr.setBackgroundColour/2","type":"function"},{"doc":"Sets the border to use.","ref":"wxCalendarDateAttr.html#setBorder/2","title":"wxCalendarDateAttr.setBorder/2","type":"function"},{"doc":"Sets the border colour to use.","ref":"wxCalendarDateAttr.html#setBorderColour/2","title":"wxCalendarDateAttr.setBorderColour/2","type":"function"},{"doc":"Sets the font to use.","ref":"wxCalendarDateAttr.html#setFont/2","title":"wxCalendarDateAttr.setFont/2","type":"function"},{"doc":"If holiday is true, this calendar day will be displayed as a holiday.","ref":"wxCalendarDateAttr.html#setHoliday/2","title":"wxCalendarDateAttr.setHoliday/2","type":"function"},{"doc":"Sets the text (foreground) colour to use.","ref":"wxCalendarDateAttr.html#setTextColour/2","title":"wxCalendarDateAttr.setTextColour/2","type":"function"},{"doc":"","ref":"wxCalendarDateAttr.html#t:wxCalendarDateAttr/0","title":"wxCalendarDateAttr.wxCalendarDateAttr/0","type":"type"},{"doc":"The wxCalendarEvent class is used together with wxCalendarCtrl . See: wxCalendarCtrl This class is derived (and can use functions) from: wxDateEvent wxCommandEvent wxEvent wxWidgets docs: wxCalendarEvent","ref":"wxCalendarEvent.html","title":"wxCalendarEvent","type":"module"},{"doc":"Returns the date.","ref":"wxCalendarEvent.html#getDate/1","title":"wxCalendarEvent.getDate/1","type":"function"},{"doc":"Returns the week day on which the user clicked in EVT_CALENDAR_WEEKDAY_CLICKED handler. It doesn't make sense to call this function in other handlers.","ref":"wxCalendarEvent.html#getWeekDay/1","title":"wxCalendarEvent.getWeekDay/1","type":"function"},{"doc":"","ref":"wxCalendarEvent.html#t:wxCalendar/0","title":"wxCalendarEvent.wxCalendar/0","type":"type"},{"doc":"","ref":"wxCalendarEvent.html#t:wxCalendarEvent/0","title":"wxCalendarEvent.wxCalendarEvent/0","type":"type"},{"doc":"","ref":"wxCalendarEvent.html#t:wxCalendarEventType/0","title":"wxCalendarEvent.wxCalendarEventType/0","type":"type"},{"doc":"A caret is a blinking cursor showing the position where the typed text will appear. Text controls usually have their own caret but wxCaret provides a way to use a caret in other windows. Currently, the caret appears as a rectangle of the given size. In the future, it will be possible to specify a bitmap to be used for the caret shape. A caret is always associated with a window and the current caret can be retrieved using wxWindow:getCaret/1 . The same caret can't be reused in two different windows. wxWidgets docs: wxCaret","ref":"wxCaret.html","title":"wxCaret","type":"module"},{"doc":"","ref":"wxCaret.html#create/3","title":"wxCaret.create/3","type":"function"},{"doc":"Creates a caret with the given size (in pixels) and associates it with the window (same as the equivalent constructors).","ref":"wxCaret.html#create/4","title":"wxCaret.create/4","type":"function"},{"doc":"Destroys the object.","ref":"wxCaret.html#destroy/1","title":"wxCaret.destroy/1","type":"function"},{"doc":"Returns the blink time which is measured in milliseconds and is the time elapsed between 2 inversions of the caret (blink time of the caret is the same for all carets, so this functions is static).","ref":"wxCaret.html#getBlinkTime/0","title":"wxCaret.getBlinkTime/0","type":"function"},{"doc":"","ref":"wxCaret.html#getPosition/1","title":"wxCaret.getPosition/1","type":"function"},{"doc":"","ref":"wxCaret.html#getSize/1","title":"wxCaret.getSize/1","type":"function"},{"doc":"Get the window the caret is associated with.","ref":"wxCaret.html#getWindow/1","title":"wxCaret.getWindow/1","type":"function"},{"doc":"Hides the caret, same as Show(false).","ref":"wxCaret.html#hide/1","title":"wxCaret.hide/1","type":"function"},{"doc":"Returns true if the caret was created successfully.","ref":"wxCaret.html#isOk/1","title":"wxCaret.isOk/1","type":"function"},{"doc":"Returns true if the caret is visible and false if it is permanently hidden (if it is blinking and not shown currently but will be after the next blink, this method still returns true).","ref":"wxCaret.html#isVisible/1","title":"wxCaret.isVisible/1","type":"function"},{"doc":"","ref":"wxCaret.html#move/2","title":"wxCaret.move/2","type":"function"},{"doc":"Move the caret to given position (in logical coordinates).","ref":"wxCaret.html#move/3","title":"wxCaret.move/3","type":"function"},{"doc":"","ref":"wxCaret.html#new/2","title":"wxCaret.new/2","type":"function"},{"doc":"Creates a caret with the given size (in pixels) and associates it with the window .","ref":"wxCaret.html#new/3","title":"wxCaret.new/3","type":"function"},{"doc":"Sets the blink time for all the carets. Warning: Under Windows, this function will change the blink time for all carets permanently (until the next time it is called), even for carets in other applications. See: getBlinkTime/0","ref":"wxCaret.html#setBlinkTime/1","title":"wxCaret.setBlinkTime/1","type":"function"},{"doc":"","ref":"wxCaret.html#setSize/2","title":"wxCaret.setSize/2","type":"function"},{"doc":"Changes the size of the caret.","ref":"wxCaret.html#setSize/3","title":"wxCaret.setSize/3","type":"function"},{"doc":"","ref":"wxCaret.html#show/1","title":"wxCaret.show/1","type":"function"},{"doc":"Shows or hides the caret. Notice that if the caret was hidden N times, it must be shown N times as well to reappear on the screen.","ref":"wxCaret.html#show/2","title":"wxCaret.show/2","type":"function"},{"doc":"","ref":"wxCaret.html#t:wxCaret/0","title":"wxCaret.wxCaret/0","type":"type"},{"doc":"A checkbox is a labelled box which by default is either on (checkmark is visible) or off (no checkmark). Optionally (when the wxCHK_3STATE style flag is set) it can have a third state, called the mixed or undetermined state. Often this is used as a &quot;Does Not Apply&quot; state. Styles This class supports the following styles: See: wxRadioButton , wxCommandEvent This class is derived (and can use functions) from: wxControl wxWindow wxEvtHandler wxWidgets docs: wxCheckBox Events Event types emitted from this class: command_checkbox_clicked","ref":"wxCheckBox.html","title":"wxCheckBox","type":"module"},{"doc":"","ref":"wxCheckBox.html#create/4","title":"wxCheckBox.create/4","type":"function"},{"doc":"Creates the checkbox for two-step construction. See new/4 for details.","ref":"wxCheckBox.html#create/5","title":"wxCheckBox.create/5","type":"function"},{"doc":"Destructor, destroying the checkbox.","ref":"wxCheckBox.html#destroy/1","title":"wxCheckBox.destroy/1","type":"function"},{"doc":"Gets the state of a 3-state checkbox. Asserts when the function is used with a 2-state checkbox.","ref":"wxCheckBox.html#get3StateValue/1","title":"wxCheckBox.get3StateValue/1","type":"function"},{"doc":"Gets the state of a 2-state checkbox. Return: Returns true if it is checked, false otherwise.","ref":"wxCheckBox.html#getValue/1","title":"wxCheckBox.getValue/1","type":"function"},{"doc":"Returns whether or not the checkbox is a 3-state checkbox. Return: true if this checkbox is a 3-state checkbox, false if it's a 2-state checkbox.","ref":"wxCheckBox.html#is3State/1","title":"wxCheckBox.is3State/1","type":"function"},{"doc":"Returns whether or not the user can set the checkbox to the third state. Return: true if the user can set the third state of this checkbox, false if it can only be set programmatically or if it's a 2-state checkbox.","ref":"wxCheckBox.html#is3rdStateAllowedForUser/1","title":"wxCheckBox.is3rdStateAllowedForUser/1","type":"function"},{"doc":"This is just a maybe more readable synonym for getValue/1 : just as the latter, it returns true if the checkbox is checked and false otherwise.","ref":"wxCheckBox.html#isChecked/1","title":"wxCheckBox.isChecked/1","type":"function"},{"doc":"Default constructor. See: create/5 , wxValidator (not implemented in wx)","ref":"wxCheckBox.html#new/0","title":"wxCheckBox.new/0","type":"function"},{"doc":"","ref":"wxCheckBox.html#new/3","title":"wxCheckBox.new/3","type":"function"},{"doc":"Constructor, creating and showing a checkbox. See: create/5 , wxValidator (not implemented in wx)","ref":"wxCheckBox.html#new/4","title":"wxCheckBox.new/4","type":"function"},{"doc":"Sets the checkbox to the given state. This does not cause a wxEVT_CHECKBOX event to get emitted. Asserts when the checkbox is a 2-state checkbox and setting the state to wxCHK_UNDETERMINED.","ref":"wxCheckBox.html#set3StateValue/2","title":"wxCheckBox.set3StateValue/2","type":"function"},{"doc":"Sets the checkbox to the given state. This does not cause a wxEVT_CHECKBOX event to get emitted.","ref":"wxCheckBox.html#setValue/2","title":"wxCheckBox.setValue/2","type":"function"},{"doc":"","ref":"wxCheckBox.html#t:wxCheckBox/0","title":"wxCheckBox.wxCheckBox/0","type":"type"},{"doc":"A wxCheckListBox is like a wxListBox , but allows items to be checked or unchecked. When using this class under Windows wxWidgets must be compiled with wxUSE_OWNER_DRAWN set to 1. See: wxListBox , wxChoice , wxComboBox , wxListCtrl , wxCommandEvent This class is derived (and can use functions) from: wxListBox wxControlWithItems wxControl wxWindow wxEvtHandler wxWidgets docs: wxCheckListBox Events Event types emitted from this class: command_checklistbox_toggled","ref":"wxCheckListBox.html","title":"wxCheckListBox","type":"module"},{"doc":"","ref":"wxCheckListBox.html#check/2","title":"wxCheckListBox.check/2","type":"function"},{"doc":"Checks the given item. Note that calling this method does not result in a wxEVT_CHECKLISTBOX event being emitted.","ref":"wxCheckListBox.html#check/3","title":"wxCheckListBox.check/3","type":"function"},{"doc":"Destructor, destroying the list box.","ref":"wxCheckListBox.html#destroy/1","title":"wxCheckListBox.destroy/1","type":"function"},{"doc":"Returns true if the given item is checked, false otherwise.","ref":"wxCheckListBox.html#isChecked/2","title":"wxCheckListBox.isChecked/2","type":"function"},{"doc":"Default constructor.","ref":"wxCheckListBox.html#new/0","title":"wxCheckListBox.new/0","type":"function"},{"doc":"","ref":"wxCheckListBox.html#new/2","title":"wxCheckListBox.new/2","type":"function"},{"doc":"Constructor, creating and showing a list box.","ref":"wxCheckListBox.html#new/3","title":"wxCheckListBox.new/3","type":"function"},{"doc":"","ref":"wxCheckListBox.html#t:wxCheckListBox/0","title":"wxCheckListBox.wxCheckListBox/0","type":"type"},{"doc":"A child focus event is sent to a (parent-)window when one of its child windows gains focus, so that the window could restore the focus back to its corresponding child if it loses it now and regains later. Notice that child window is the direct child of the window receiving event. Use wxWindow:findFocus/0 to retrieve the window which is actually getting focus. See: Overview events This class is derived (and can use functions) from: wxCommandEvent wxEvent wxWidgets docs: wxChildFocusEvent Events Use wxEvtHandler:connect/3 with wxChildFocusEventType to subscribe to events of this type.","ref":"wxChildFocusEvent.html","title":"wxChildFocusEvent","type":"module"},{"doc":"Returns the direct child which receives the focus, or a (grand-)parent of the control receiving the focus. To get the actually focused control use wxWindow:findFocus/0 .","ref":"wxChildFocusEvent.html#getWindow/1","title":"wxChildFocusEvent.getWindow/1","type":"function"},{"doc":"","ref":"wxChildFocusEvent.html#t:wxChildFocus/0","title":"wxChildFocusEvent.wxChildFocus/0","type":"type"},{"doc":"","ref":"wxChildFocusEvent.html#t:wxChildFocusEvent/0","title":"wxChildFocusEvent.wxChildFocusEvent/0","type":"type"},{"doc":"","ref":"wxChildFocusEvent.html#t:wxChildFocusEventType/0","title":"wxChildFocusEvent.wxChildFocusEventType/0","type":"type"},{"doc":"A choice item is used to select one of a list of strings. Unlike a wxListBox , only the selection is visible until the user pulls down the menu of choices. Styles This class supports the following styles: See: wxListBox , wxComboBox , wxCommandEvent This class is derived (and can use functions) from: wxControlWithItems wxControl wxWindow wxEvtHandler wxWidgets docs: wxChoice Events Event types emitted from this class: command_choice_selected","ref":"wxChoice.html","title":"wxChoice","type":"module"},{"doc":"","ref":"wxChoice.html#create/6","title":"wxChoice.create/6","type":"function"},{"doc":"","ref":"wxChoice.html#create/7","title":"wxChoice.create/7","type":"function"},{"doc":"Deletes an item from the control. The client data associated with the item will be also deleted if it is owned by the control. Note that it is an error (signalled by an assert failure in debug builds) to remove an item with the index negative or greater or equal than the number of items in the control. If there is a currently selected item below the item being deleted, i.e. if wxControlWithItems:getSelection/1 returns a valid index greater than or equal to n , the selection is invalidated when this function is called. However if the selected item appears before the item being deleted, the selection is preserved unchanged. See: wxControlWithItems:clear/1","ref":"wxChoice.html#delete/2","title":"wxChoice.delete/2","type":"function"},{"doc":"Destructor, destroying the choice item.","ref":"wxChoice.html#destroy/1","title":"wxChoice.destroy/1","type":"function"},{"doc":"Gets the number of columns in this choice item. Remark: This is implemented for GTK and Motif only and always returns 1 for the other platforms.","ref":"wxChoice.html#getColumns/1","title":"wxChoice.getColumns/1","type":"function"},{"doc":"Default constructor. See: create/7 , wxValidator (not implemented in wx)","ref":"wxChoice.html#new/0","title":"wxChoice.new/0","type":"function"},{"doc":"","ref":"wxChoice.html#new/2","title":"wxChoice.new/2","type":"function"},{"doc":"Constructor, creating and showing a choice. See: create/7 , wxValidator (not implemented in wx)","ref":"wxChoice.html#new/3","title":"wxChoice.new/3","type":"function"},{"doc":"","ref":"wxChoice.html#setColumns/1","title":"wxChoice.setColumns/1","type":"function"},{"doc":"Sets the number of columns in this choice item. Remark: This is implemented for GTK and Motif only and doesn’t do anything under other platforms.","ref":"wxChoice.html#setColumns/2","title":"wxChoice.setColumns/2","type":"function"},{"doc":"","ref":"wxChoice.html#t:wxChoice/0","title":"wxChoice.wxChoice/0","type":"type"},{"doc":"wxChoicebook is a class similar to wxNotebook , but uses a wxChoice control to show the labels instead of the tabs. For usage documentation of this class, please refer to the base abstract class wxBookCtrl. You can also use the page_samples_notebook to see wxChoicebook in action. wxChoicebook allows the use of wxBookCtrlBase::GetControlSizer(), allowing a program to add other controls next to the choice control. This is particularly useful when screen space is restricted, as it often is when wxChoicebook is being employed. Styles This class supports the following styles: See: Overview bookctrl , wxNotebook , Examples This class is derived (and can use functions) from: wxBookCtrlBase wxControl wxWindow wxEvtHandler wxWidgets docs: wxChoicebook Events Event types emitted from this class: choicebook_page_changed , choicebook_page_changing","ref":"wxChoicebook.html","title":"wxChoicebook","type":"module"},{"doc":"","ref":"wxChoicebook.html#addPage/3","title":"wxChoicebook.addPage/3","type":"function"},{"doc":"Adds a new page. The page must have the book control itself as the parent and must not have been added to this control previously. The call to this function will generate the page changing and page changed events if select is true, but not when inserting the very first page (as there is no previous page selection to switch from in this case and so it wouldn't make sense to e.g. veto such event). Return: true if successful, false otherwise. Remark: Do not delete the page, it will be deleted by the book control. See: insertPage/5","ref":"wxChoicebook.html#addPage/4","title":"wxChoicebook.addPage/4","type":"function"},{"doc":"","ref":"wxChoicebook.html#advanceSelection/1","title":"wxChoicebook.advanceSelection/1","type":"function"},{"doc":"Cycles through the tabs. The call to this function generates the page changing events.","ref":"wxChoicebook.html#advanceSelection/2","title":"wxChoicebook.advanceSelection/2","type":"function"},{"doc":"Sets the image list for the page control and takes ownership of the list. See: wxImageList , setImageList/2","ref":"wxChoicebook.html#assignImageList/2","title":"wxChoicebook.assignImageList/2","type":"function"},{"doc":"Changes the selection to the given page, returning the previous selection. This function behaves as setSelection/2 but does not generate the page changing events. See overview_events_prog for more information.","ref":"wxChoicebook.html#changeSelection/2","title":"wxChoicebook.changeSelection/2","type":"function"},{"doc":"","ref":"wxChoicebook.html#create/3","title":"wxChoicebook.create/3","type":"function"},{"doc":"Create the choicebook control that has already been constructed with the default constructor.","ref":"wxChoicebook.html#create/4","title":"wxChoicebook.create/4","type":"function"},{"doc":"Deletes all pages.","ref":"wxChoicebook.html#deleteAllPages/1","title":"wxChoicebook.deleteAllPages/1","type":"function"},{"doc":"Destroys the object.","ref":"wxChoicebook.html#destroy/1","title":"wxChoicebook.destroy/1","type":"function"},{"doc":"Returns the currently selected page or NULL.","ref":"wxChoicebook.html#getCurrentPage/1","title":"wxChoicebook.getCurrentPage/1","type":"function"},{"doc":"Returns the associated image list, may be NULL. See: wxImageList , setImageList/2","ref":"wxChoicebook.html#getImageList/1","title":"wxChoicebook.getImageList/1","type":"function"},{"doc":"Returns the window at the given page position.","ref":"wxChoicebook.html#getPage/2","title":"wxChoicebook.getPage/2","type":"function"},{"doc":"Returns the number of pages in the control.","ref":"wxChoicebook.html#getPageCount/1","title":"wxChoicebook.getPageCount/1","type":"function"},{"doc":"Returns the image index for the given page.","ref":"wxChoicebook.html#getPageImage/2","title":"wxChoicebook.getPageImage/2","type":"function"},{"doc":"Returns the string for the given page.","ref":"wxChoicebook.html#getPageText/2","title":"wxChoicebook.getPageText/2","type":"function"},{"doc":"Returns the currently selected page, or wxNOT_FOUND if none was selected. Note that this method may return either the previously or newly selected page when called from the EVT_BOOKCTRL_PAGE_CHANGED handler depending on the platform and so wxBookCtrlEvent:getSelection/1 should be used instead in this case.","ref":"wxChoicebook.html#getSelection/1","title":"wxChoicebook.getSelection/1","type":"function"},{"doc":"Returns the index of the tab at the specified position or wxNOT_FOUND if none. If flags parameter is non-NULL, the position of the point inside the tab is returned as well. Return: Returns the zero-based tab index or wxNOT_FOUND if there is no tab at the specified position.","ref":"wxChoicebook.html#hitTest/2","title":"wxChoicebook.hitTest/2","type":"function"},{"doc":"","ref":"wxChoicebook.html#insertPage/4","title":"wxChoicebook.insertPage/4","type":"function"},{"doc":"Inserts a new page at the specified position. Return: true if successful, false otherwise. Remark: Do not delete the page, it will be deleted by the book control. See: addPage/4","ref":"wxChoicebook.html#insertPage/5","title":"wxChoicebook.insertPage/5","type":"function"},{"doc":"Constructs a choicebook control.","ref":"wxChoicebook.html#new/0","title":"wxChoicebook.new/0","type":"function"},{"doc":"","ref":"wxChoicebook.html#new/2","title":"wxChoicebook.new/2","type":"function"},{"doc":"","ref":"wxChoicebook.html#new/3","title":"wxChoicebook.new/3","type":"function"},{"doc":"Sets the image list to use. It does not take ownership of the image list, you must delete it yourself. See: wxImageList , assignImageList/2","ref":"wxChoicebook.html#setImageList/2","title":"wxChoicebook.setImageList/2","type":"function"},{"doc":"Sets the image index for the given page. image is an index into the image list which was set with setImageList/2 .","ref":"wxChoicebook.html#setPageImage/3","title":"wxChoicebook.setPageImage/3","type":"function"},{"doc":"Sets the width and height of the pages. Note: This method is currently not implemented for wxGTK.","ref":"wxChoicebook.html#setPageSize/2","title":"wxChoicebook.setPageSize/2","type":"function"},{"doc":"Sets the text for the given page.","ref":"wxChoicebook.html#setPageText/3","title":"wxChoicebook.setPageText/3","type":"function"},{"doc":"Sets the selection to the given page, returning the previous selection. Notice that the call to this function generates the page changing events, use the changeSelection/2 function if you don't want these events to be generated. See: getSelection/1","ref":"wxChoicebook.html#setSelection/2","title":"wxChoicebook.setSelection/2","type":"function"},{"doc":"","ref":"wxChoicebook.html#t:wxChoicebook/0","title":"wxChoicebook.wxChoicebook/0","type":"type"},{"doc":"wxClientDC is primarily useful for obtaining information about the window from outside EVT_PAINT() handler. Typical use of this class is to obtain the extent of some text string in order to allocate enough size for a window, e.g. Note: While wxClientDC may also be used for drawing on the client area of a window from outside an EVT_PAINT() handler in some ports, this does not work on all platforms (neither wxOSX nor wxGTK with GTK 3 Wayland backend support this, so drawing using wxClientDC simply doesn't have any effect there) and the only portable way of drawing is via wxPaintDC . To redraw a small part of the window, use wxWindow:refreshRect/3 to invalidate just this part and check wxWindow:getUpdateRegion/1 in the paint event handler to redraw this part only. wxClientDC objects should normally be constructed as temporary stack objects, i.e. don't store a wxClientDC object. A wxClientDC object is initialized to use the same font and colours as the window it is associated with. See: wxDC , wxMemoryDC , wxPaintDC , wxWindowDC , wxScreenDC This class is derived (and can use functions) from: wxWindowDC wxDC wxWidgets docs: wxClientDC","ref":"wxClientDC.html","title":"wxClientDC","type":"module"},{"doc":"Destroys the object.","ref":"wxClientDC.html#destroy/1","title":"wxClientDC.destroy/1","type":"function"},{"doc":"Constructor. Pass a pointer to the window on which you wish to paint.","ref":"wxClientDC.html#new/1","title":"wxClientDC.new/1","type":"function"},{"doc":"","ref":"wxClientDC.html#t:wxClientDC/0","title":"wxClientDC.wxClientDC/0","type":"type"},{"doc":"A class for manipulating the clipboard. To use the clipboard, you call member functions of the global ?wxTheClipboard object. See the overview_dataobject for further information. Call open/1 to get ownership of the clipboard. If this operation returns true, you now own the clipboard. Call setData/2 to put data on the clipboard, or getData/2 to retrieve data from the clipboard. Call close/1 to close the clipboard and relinquish ownership. You should keep the clipboard open only momentarily. For example: Note: On GTK, the clipboard behavior can vary depending on the configuration of the end-user's machine. In order for the clipboard data to persist after the window closes, a clipboard manager must be installed. Some clipboard managers will automatically flush the clipboard after each new piece of data is added, while others will not. The @Flush() function will force the clipboard manager to flush the data. See: Overview dnd , Overview dataobject , wxDataObject wxWidgets docs: wxClipboard","ref":"wxClipboard.html","title":"wxClipboard","type":"module"},{"doc":"Call this function to add the data object to the clipboard. This is an obsolete synonym for setData/2 .","ref":"wxClipboard.html#addData/2","title":"wxClipboard.addData/2","type":"function"},{"doc":"Clears the global clipboard object and the system's clipboard if possible.","ref":"wxClipboard.html#clear/1","title":"wxClipboard.clear/1","type":"function"},{"doc":"Call this function to close the clipboard, having opened it with open/1 .","ref":"wxClipboard.html#close/1","title":"wxClipboard.close/1","type":"function"},{"doc":"Destructor.","ref":"wxClipboard.html#destroy/1","title":"wxClipboard.destroy/1","type":"function"},{"doc":"Flushes the clipboard: this means that the data which is currently on clipboard will stay available even after the application exits (possibly eating memory), otherwise the clipboard will be emptied on exit. Currently this method is implemented in MSW and GTK and always returns false otherwise. Note: On GTK, only the non-primary selection can be flushed. Calling this function when the clipboard is using the primary selection will return false and not make any data available after the program exits. Return: false if the operation is unsuccessful for any reason.","ref":"wxClipboard.html#flush/1","title":"wxClipboard.flush/1","type":"function"},{"doc":"Returns the global instance (wxTheClipboard) of the clipboard object.","ref":"wxClipboard.html#get/0","title":"wxClipboard.get/0","type":"function"},{"doc":"Call this function to fill data with data on the clipboard, if available in the required format. Returns true on success.","ref":"wxClipboard.html#getData/2","title":"wxClipboard.getData/2","type":"function"},{"doc":"Returns true if the clipboard has been opened.","ref":"wxClipboard.html#isOpened/1","title":"wxClipboard.isOpened/1","type":"function"},{"doc":"Returns true if there is data which matches the data format of the given data object currently available on the clipboard.","ref":"wxClipboard.html#isSupported/2","title":"wxClipboard.isSupported/2","type":"function"},{"doc":"Default constructor.","ref":"wxClipboard.html#new/0","title":"wxClipboard.new/0","type":"function"},{"doc":"Call this function to open the clipboard before calling setData/2 and getData/2 . Call close/1 when you have finished with the clipboard. You should keep the clipboard open for only a very short time. Return: true on success. This should be tested (as in the sample shown above).","ref":"wxClipboard.html#open/1","title":"wxClipboard.open/1","type":"function"},{"doc":"Call this function to set the data object to the clipboard. The new data object replaces any previously set one, so if the application wants to provide clipboard data in several different formats, it must use a composite data object supporting all of the formats instead of calling this function several times with different data objects as this would only leave data from the last one in the clipboard. After this function has been called, the clipboard owns the data, so do not delete the data explicitly.","ref":"wxClipboard.html#setData/2","title":"wxClipboard.setData/2","type":"function"},{"doc":"","ref":"wxClipboard.html#usePrimarySelection/1","title":"wxClipboard.usePrimarySelection/1","type":"function"},{"doc":"On platforms supporting it (all X11-based ports), wxClipboard uses the CLIPBOARD X11 selection by default. When this function is called with true, all subsequent clipboard operations will use PRIMARY selection until this function is called again with false. On the other platforms, there is no PRIMARY selection and so all clipboard operations will fail. This allows implementing the standard X11 handling of the clipboard which consists in copying data to the CLIPBOARD selection only when the user explicitly requests it (i.e. by selecting the &quot;Copy&quot; menu command) but putting the currently selected text into the PRIMARY selection automatically, without overwriting the normal clipboard contents with the currently selected text on the other platforms.","ref":"wxClipboard.html#usePrimarySelection/2","title":"wxClipboard.usePrimarySelection/2","type":"function"},{"doc":"","ref":"wxClipboard.html#t:wxClipboard/0","title":"wxClipboard.wxClipboard/0","type":"type"},{"doc":"This class represents the events generated by a control (typically a wxTextCtrl but other windows can generate these events as well) when its content gets copied or cut to, or pasted from the clipboard. There are three types of corresponding events wxEVT_TEXT_COPY , wxEVT_TEXT_CUT and wxEVT_TEXT_PASTE . If any of these events is processed (without being skipped) by an event handler, the corresponding operation doesn't take place which allows preventing the text from being copied from or pasted to a control. It is also possible to examine the clipboard contents in the PASTE event handler and transform it in some way before inserting in a control - for example, changing its case or removing invalid characters. Finally notice that a CUT event is always preceded by the COPY event which makes it possible to only process the latter if it doesn't matter if the text was copied or cut. Note: These events are currently only generated by wxTextCtrl in wxGTK and wxOSX but are also generated by wxComboBox without wxCB_READONLY style in wxMSW. See: wxClipboard This class is derived (and can use functions) from: wxCommandEvent wxEvent wxWidgets docs: wxClipboardTextEvent Events Use wxEvtHandler:connect/3 with wxClipboardTextEventType to subscribe to events of this type.","ref":"wxClipboardTextEvent.html","title":"wxClipboardTextEvent","type":"module"},{"doc":"","ref":"wxClipboardTextEvent.html#t:wxClipboardText/0","title":"wxClipboardTextEvent.wxClipboardText/0","type":"type"},{"doc":"","ref":"wxClipboardTextEvent.html#t:wxClipboardTextEvent/0","title":"wxClipboardTextEvent.wxClipboardTextEvent/0","type":"type"},{"doc":"","ref":"wxClipboardTextEvent.html#t:wxClipboardTextEventType/0","title":"wxClipboardTextEvent.wxClipboardTextEventType/0","type":"type"},{"doc":"This event class contains information about window and session close events. The handler function for EVT_CLOSE is called when the user has tried to close a a frame or dialog box using the window manager (X) or system menu (Windows). It can also be invoked by the application itself programmatically, for example by calling the wxWindow:close/2 function. You should check whether the application is forcing the deletion of the window using canVeto/1 . If this is false, you must destroy the window using wxWindow:'Destroy'/1 . If the return value is true, it is up to you whether you respond by destroying the window. If you don't destroy the window, you should call veto/2 to let the calling code know that you did not destroy the window. This allows the wxWindow:close/2 function to return true or false depending on whether the close instruction was honoured or not. Example of a wxCloseEvent handler: The EVT_END_SESSION event is slightly different as it is sent by the system when the user session is ending (e.g. because of log out or shutdown) and so all windows are being forcefully closed. At least under MSW, after the handler for this event is executed the program is simply killed by the system. Because of this, the default handler for this event provided by wxWidgets calls all the usual cleanup code (including wxApp::OnExit() (not implemented in wx)) so that it could still be executed and exit()s the process itself, without waiting for being killed. If this behaviour is for some reason undesirable, make sure that you define a handler for this event in your wxApp-derived class and do not call event.Skip() in it (but be aware that the system will still kill your application). See: wxWindow:close/2 , Overview windowdeletion This class is derived (and can use functions) from: wxEvent wxWidgets docs: wxCloseEvent Events Use wxEvtHandler:connect/3 with wxCloseEventType to subscribe to events of this type.","ref":"wxCloseEvent.html","title":"wxCloseEvent","type":"module"},{"doc":"Returns true if you can veto a system shutdown or a window close event. Vetoing a window close event is not possible if the calling code wishes to force the application to exit, and so this function must be called to check this.","ref":"wxCloseEvent.html#canVeto/1","title":"wxCloseEvent.canVeto/1","type":"function"},{"doc":"Returns true if the user is just logging off or false if the system is shutting down. This method can only be called for end session and query end session events, it doesn't make sense for close window event.","ref":"wxCloseEvent.html#getLoggingOff/1","title":"wxCloseEvent.getLoggingOff/1","type":"function"},{"doc":"Sets the 'can veto' flag.","ref":"wxCloseEvent.html#setCanVeto/2","title":"wxCloseEvent.setCanVeto/2","type":"function"},{"doc":"Sets the 'logging off' flag.","ref":"wxCloseEvent.html#setLoggingOff/2","title":"wxCloseEvent.setLoggingOff/2","type":"function"},{"doc":"","ref":"wxCloseEvent.html#veto/1","title":"wxCloseEvent.veto/1","type":"function"},{"doc":"Call this from your event handler to veto a system shutdown or to signal to the calling application that a window close did not happen. You can only veto a shutdown if canVeto/1 returns true.","ref":"wxCloseEvent.html#veto/2","title":"wxCloseEvent.veto/2","type":"function"},{"doc":"","ref":"wxCloseEvent.html#t:wxClose/0","title":"wxCloseEvent.wxClose/0","type":"type"},{"doc":"","ref":"wxCloseEvent.html#t:wxCloseEvent/0","title":"wxCloseEvent.wxCloseEvent/0","type":"type"},{"doc":"","ref":"wxCloseEvent.html#t:wxCloseEventType/0","title":"wxCloseEvent.wxCloseEventType/0","type":"type"},{"doc":"This class holds a variety of information related to colour dialogs. See: wx_color() , wxColourDialog , Overview cmndlg wxWidgets docs: wxColourData","ref":"wxColourData.html","title":"wxColourData","type":"module"},{"doc":"Destructor.","ref":"wxColourData.html#destroy/1","title":"wxColourData.destroy/1","type":"function"},{"doc":"Under Windows, determines whether the Windows colour dialog will display the full dialog with custom colour selection controls. Has no meaning under other platforms. The default value is true.","ref":"wxColourData.html#getChooseFull/1","title":"wxColourData.getChooseFull/1","type":"function"},{"doc":"Gets the current colour associated with the colour dialog. The default colour is black.","ref":"wxColourData.html#getColour/1","title":"wxColourData.getColour/1","type":"function"},{"doc":"Returns custom colours associated with the colour dialog.","ref":"wxColourData.html#getCustomColour/2","title":"wxColourData.getCustomColour/2","type":"function"},{"doc":"Constructor. Initializes the custom colours to wxNullColour , the data colour setting to black, and the choose full setting to true.","ref":"wxColourData.html#new/0","title":"wxColourData.new/0","type":"function"},{"doc":"Under Windows, tells the Windows colour dialog to display the full dialog with custom colour selection controls. Under other platforms, has no effect. The default value is true.","ref":"wxColourData.html#setChooseFull/2","title":"wxColourData.setChooseFull/2","type":"function"},{"doc":"Sets the default colour for the colour dialog. The default colour is black.","ref":"wxColourData.html#setColour/2","title":"wxColourData.setColour/2","type":"function"},{"doc":"Sets custom colours for the colour dialog.","ref":"wxColourData.html#setCustomColour/3","title":"wxColourData.setCustomColour/3","type":"function"},{"doc":"","ref":"wxColourData.html#t:wxColourData/0","title":"wxColourData.wxColourData/0","type":"type"},{"doc":"This class represents the colour chooser dialog. Starting from wxWidgets 3.1.3 and currently in the MSW port only, this dialog generates wxEVT_COLOUR_CHANGED events while it is being shown, i.e. from inside its wxDialog:showModal/1 method, that notify the program about the change of the currently selected colour and allow it to e.g. preview the effect of selecting this colour. Note that if you react to this event, you should also correctly revert to the previously selected colour if the dialog is cancelled by the user. Example of using this class with dynamic feedback for the selected colour: See: Overview cmndlg , wx_color() , wxColourData , wxColourDialogEvent (not implemented in wx), ?wxGetColourFromUser() This class is derived (and can use functions) from: wxDialog wxTopLevelWindow wxWindow wxEvtHandler wxWidgets docs: wxColourDialog","ref":"wxColourDialog.html","title":"wxColourDialog","type":"module"},{"doc":"","ref":"wxColourDialog.html#create/2","title":"wxColourDialog.create/2","type":"function"},{"doc":"Same as new/2 .","ref":"wxColourDialog.html#create/3","title":"wxColourDialog.create/3","type":"function"},{"doc":"Destructor.","ref":"wxColourDialog.html#destroy/1","title":"wxColourDialog.destroy/1","type":"function"},{"doc":"Returns the colour data associated with the colour dialog.","ref":"wxColourDialog.html#getColourData/1","title":"wxColourDialog.getColourData/1","type":"function"},{"doc":"","ref":"wxColourDialog.html#new/0","title":"wxColourDialog.new/0","type":"function"},{"doc":"","ref":"wxColourDialog.html#new/1","title":"wxColourDialog.new/1","type":"function"},{"doc":"Constructor. Pass a parent window, and optionally a pointer to a block of colour data, which will be copied to the colour dialog's colour data. Custom colours from colour data object will be used in the dialog's colour palette. Invalid entries in custom colours list will be ignored on some platforms(GTK) or replaced with white colour on platforms where custom colours palette has fixed size (MSW). See: wxColourData","ref":"wxColourDialog.html#new/2","title":"wxColourDialog.new/2","type":"function"},{"doc":"","ref":"wxColourDialog.html#t:wxColourDialog/0","title":"wxColourDialog.wxColourDialog/0","type":"type"},{"doc":"This control allows the user to select a colour. The generic implementation is a button which brings up a wxColourDialog when clicked. Native implementation may differ but this is usually a (small) widget which give access to the colour-chooser dialog. It is only available if wxUSE_COLOURPICKERCTRL is set to 1 (the default). Styles This class supports the following styles: See: wxColourDialog , wxColourPickerEvent This class is derived (and can use functions) from: wxPickerBase wxControl wxWindow wxEvtHandler wxWidgets docs: wxColourPickerCtrl Events Event types emitted from this class: command_colourpicker_changed","ref":"wxColourPickerCtrl.html","title":"wxColourPickerCtrl","type":"module"},{"doc":"","ref":"wxColourPickerCtrl.html#create/3","title":"wxColourPickerCtrl.create/3","type":"function"},{"doc":"Creates a colour picker with the given arguments. Return: true if the control was successfully created or false if creation failed.","ref":"wxColourPickerCtrl.html#create/4","title":"wxColourPickerCtrl.create/4","type":"function"},{"doc":"Destroys the object.","ref":"wxColourPickerCtrl.html#destroy/1","title":"wxColourPickerCtrl.destroy/1","type":"function"},{"doc":"Returns the currently selected colour.","ref":"wxColourPickerCtrl.html#getColour/1","title":"wxColourPickerCtrl.getColour/1","type":"function"},{"doc":"","ref":"wxColourPickerCtrl.html#new/0","title":"wxColourPickerCtrl.new/0","type":"function"},{"doc":"","ref":"wxColourPickerCtrl.html#new/2","title":"wxColourPickerCtrl.new/2","type":"function"},{"doc":"Initializes the object and calls create/4 with all the parameters.","ref":"wxColourPickerCtrl.html#new/3","title":"wxColourPickerCtrl.new/3","type":"function"},{"doc":"Sets the currently selected colour. See wxColour::Set() (not implemented in wx).","ref":"wxColourPickerCtrl.html#setColour/2","title":"wxColourPickerCtrl.setColour/2","type":"function"},{"doc":"","ref":"wxColourPickerCtrl.html#t:wxColourPickerCtrl/0","title":"wxColourPickerCtrl.wxColourPickerCtrl/0","type":"type"},{"doc":"This event class is used for the events generated by wxColourPickerCtrl . See: wxColourPickerCtrl This class is derived (and can use functions) from: wxCommandEvent wxEvent wxWidgets docs: wxColourPickerEvent Events Use wxEvtHandler:connect/3 with wxColourPickerEventType to subscribe to events of this type.","ref":"wxColourPickerEvent.html","title":"wxColourPickerEvent","type":"module"},{"doc":"Retrieve the colour the user has just selected.","ref":"wxColourPickerEvent.html#getColour/1","title":"wxColourPickerEvent.getColour/1","type":"function"},{"doc":"","ref":"wxColourPickerEvent.html#t:wxColourPicker/0","title":"wxColourPickerEvent.wxColourPicker/0","type":"type"},{"doc":"","ref":"wxColourPickerEvent.html#t:wxColourPickerEvent/0","title":"wxColourPickerEvent.wxColourPickerEvent/0","type":"type"},{"doc":"","ref":"wxColourPickerEvent.html#t:wxColourPickerEventType/0","title":"wxColourPickerEvent.wxColourPickerEventType/0","type":"type"},{"doc":"A combobox is like a combination of an edit control and a listbox. It can be displayed as static list with editable or read-only text field; or a drop-down list with text field; or a drop-down list without a text field depending on the platform and presence of wxCB_READONLY style. A combobox permits a single selection only. Combobox items are numbered from zero. If you need a customized combobox, have a look at wxComboCtrl (not implemented in wx), wxOwnerDrawnComboBox (not implemented in wx), wxComboPopup (not implemented in wx) and the ready-to-use wxBitmapComboBox (not implemented in wx). Please refer to wxTextEntry (not implemented in wx) documentation for the description of methods operating with the text entry part of the combobox and to wxItemContainer (not implemented in wx) for the methods operating with the list of strings. Notice that at least under MSW wxComboBox doesn't behave correctly if it contains strings differing in case only so portable programs should avoid adding such strings to this control. Styles This class supports the following styles: See: wxListBox , wxTextCtrl , wxChoice , wxCommandEvent This class is derived (and can use functions) from: wxControlWithItems wxControl wxWindow wxEvtHandler wxWidgets docs: wxComboBox Events Event types emitted from this class: command_combobox_selected , command_text_updated , command_text_enter , combobox_dropdown , combobox_closeup","ref":"wxComboBox.html","title":"wxComboBox","type":"module"},{"doc":"Returns true if the selection can be copied to the clipboard.","ref":"wxComboBox.html#canCopy/1","title":"wxComboBox.canCopy/1","type":"function"},{"doc":"Returns true if the selection can be cut to the clipboard.","ref":"wxComboBox.html#canCut/1","title":"wxComboBox.canCut/1","type":"function"},{"doc":"Returns true if the contents of the clipboard can be pasted into the text control. On some platforms (Motif, GTK) this is an approximation and returns true if the control is editable, false otherwise.","ref":"wxComboBox.html#canPaste/1","title":"wxComboBox.canPaste/1","type":"function"},{"doc":"Returns true if there is a redo facility available and the last operation can be redone.","ref":"wxComboBox.html#canRedo/1","title":"wxComboBox.canRedo/1","type":"function"},{"doc":"Returns true if there is an undo facility available and the last operation can be undone.","ref":"wxComboBox.html#canUndo/1","title":"wxComboBox.canUndo/1","type":"function"},{"doc":"Copies the selected text to the clipboard.","ref":"wxComboBox.html#copy/1","title":"wxComboBox.copy/1","type":"function"},{"doc":"","ref":"wxComboBox.html#create/7","title":"wxComboBox.create/7","type":"function"},{"doc":"","ref":"wxComboBox.html#create/8","title":"wxComboBox.create/8","type":"function"},{"doc":"Copies the selected text to the clipboard and removes it from the control.","ref":"wxComboBox.html#cut/1","title":"wxComboBox.cut/1","type":"function"},{"doc":"Destructor, destroying the combobox.","ref":"wxComboBox.html#destroy/1","title":"wxComboBox.destroy/1","type":"function"},{"doc":"Same as wxTextCtrl:getInsertionPoint/1 . Note: Under wxMSW, this function always returns 0 if the combobox doesn't have the focus.","ref":"wxComboBox.html#getInsertionPoint/1","title":"wxComboBox.getInsertionPoint/1","type":"function"},{"doc":"Returns the zero based index of the last position in the text control, which is equal to the number of characters in the control.","ref":"wxComboBox.html#getLastPosition/1","title":"wxComboBox.getLastPosition/1","type":"function"},{"doc":"Gets the contents of the control. Notice that for a multiline text control, the lines will be separated by (Unix-style) \\n characters, even under Windows where they are separated by a \\r\\n sequence in the native control.","ref":"wxComboBox.html#getValue/1","title":"wxComboBox.getValue/1","type":"function"},{"doc":"Default constructor.","ref":"wxComboBox.html#new/0","title":"wxComboBox.new/0","type":"function"},{"doc":"","ref":"wxComboBox.html#new/2","title":"wxComboBox.new/2","type":"function"},{"doc":"Constructor, creating and showing a combobox. See: create/8 , wxValidator (not implemented in wx)","ref":"wxComboBox.html#new/3","title":"wxComboBox.new/3","type":"function"},{"doc":"Pastes text from the clipboard to the text item.","ref":"wxComboBox.html#paste/1","title":"wxComboBox.paste/1","type":"function"},{"doc":"If there is a redo facility and the last operation can be redone, redoes the last operation. Does nothing if there is no redo facility.","ref":"wxComboBox.html#redo/1","title":"wxComboBox.redo/1","type":"function"},{"doc":"Removes the text starting at the first given position up to (but not including) the character at the last position. This function puts the current insertion point position at to as a side effect.","ref":"wxComboBox.html#remove/3","title":"wxComboBox.remove/3","type":"function"},{"doc":"Replaces the text starting at the first position up to (but not including) the character at the last position with the given text. This function puts the current insertion point position at to as a side effect.","ref":"wxComboBox.html#replace/4","title":"wxComboBox.replace/4","type":"function"},{"doc":"Sets the insertion point at the given position.","ref":"wxComboBox.html#setInsertionPoint/2","title":"wxComboBox.setInsertionPoint/2","type":"function"},{"doc":"Sets the insertion point at the end of the text control. This is equivalent to calling setInsertionPoint/2 with getLastPosition/1 argument.","ref":"wxComboBox.html#setInsertionPointEnd/1","title":"wxComboBox.setInsertionPointEnd/1","type":"function"},{"doc":"Sets the selection to the given item n or removes the selection entirely if n == wxNOT_FOUND . Note that this does not cause any command events to be emitted nor does it deselect any other items in the controls which support multiple selections. See: wxControlWithItems:setString/3 , wxControlWithItems:setStringSelection/2","ref":"wxComboBox.html#setSelection/2","title":"wxComboBox.setSelection/2","type":"function"},{"doc":"Same as wxTextCtrl:setSelection/3 .","ref":"wxComboBox.html#setSelection/3","title":"wxComboBox.setSelection/3","type":"function"},{"doc":"Sets the text for the combobox text field. For normal, editable comboboxes with a text entry field calling this method will generate a wxEVT_TEXT event, consistently with wxTextCtrl:setValue/2 behaviour, use wxTextCtrl:changeValue/2 if this is undesirable. For controls with wxCB_READONLY style the method behaves somewhat differently: the string must be in the combobox choices list (the check for this is case-insensitive) and wxEVT_TEXT is not generated in this case.","ref":"wxComboBox.html#setValue/2","title":"wxComboBox.setValue/2","type":"function"},{"doc":"If there is an undo facility and the last operation can be undone, undoes the last operation. Does nothing if there is no undo facility.","ref":"wxComboBox.html#undo/1","title":"wxComboBox.undo/1","type":"function"},{"doc":"","ref":"wxComboBox.html#t:wxComboBox/0","title":"wxComboBox.wxComboBox/0","type":"type"},{"doc":"This event class contains information about command events, which originate from a variety of simple controls. Note that wxCommandEvents and wxCommandEvent-derived event classes by default and unlike other wxEvent-derived classes propagate upward from the source window (the window which emits the event) up to the first parent which processes the event. Be sure to read overview_events_propagation. More complex controls, such as wxTreeCtrl , have separate command event classes. This class is derived (and can use functions) from: wxEvent wxWidgets docs: wxCommandEvent Events Use wxEvtHandler:connect/3 with wxCommandEventType to subscribe to events of this type.","ref":"wxCommandEvent.html","title":"wxCommandEvent","type":"module"},{"doc":"Returns client object pointer for a listbox or choice selection event (not valid for a deselection).","ref":"wxCommandEvent.html#getClientData/1","title":"wxCommandEvent.getClientData/1","type":"function"},{"doc":"Returns extra information dependent on the event objects type. If the event comes from a listbox selection, it is a boolean determining whether the event was a selection (true) or a deselection (false). A listbox deselection only occurs for multiple-selection boxes, and in this case the index and string values are indeterminate and the listbox must be examined by the application.","ref":"wxCommandEvent.html#getExtraLong/1","title":"wxCommandEvent.getExtraLong/1","type":"function"},{"doc":"Returns the integer identifier corresponding to a listbox, choice or radiobox selection (only if the event was a selection, not a deselection), or a boolean value representing the value of a checkbox. For a menu item, this method returns -1 if the item is not checkable or a boolean value (true or false) for checkable items indicating the new state of the item.","ref":"wxCommandEvent.html#getInt/1","title":"wxCommandEvent.getInt/1","type":"function"},{"doc":"Returns item index for a listbox or choice selection event (not valid for a deselection).","ref":"wxCommandEvent.html#getSelection/1","title":"wxCommandEvent.getSelection/1","type":"function"},{"doc":"Returns item string for a listbox or choice selection event. If one or several items have been deselected, returns the index of the first deselected item. If some items have been selected and others deselected at the same time, it will return the index of the first selected item.","ref":"wxCommandEvent.html#getString/1","title":"wxCommandEvent.getString/1","type":"function"},{"doc":"This method can be used with checkbox and menu events: for the checkboxes, the method returns true for a selection event and false for a deselection one. For the menu events, this method indicates if the menu item just has become checked or unchecked (and thus only makes sense for checkable menu items). Notice that this method cannot be used with wxCheckListBox currently.","ref":"wxCommandEvent.html#isChecked/1","title":"wxCommandEvent.isChecked/1","type":"function"},{"doc":"For a listbox or similar event, returns true if it is a selection, false if it is a deselection. If some items have been selected and others deselected at the same time, it will return true.","ref":"wxCommandEvent.html#isSelection/1","title":"wxCommandEvent.isSelection/1","type":"function"},{"doc":"Sets the m_commandInt member.","ref":"wxCommandEvent.html#setInt/2","title":"wxCommandEvent.setInt/2","type":"function"},{"doc":"Sets the m_commandString member.","ref":"wxCommandEvent.html#setString/2","title":"wxCommandEvent.setString/2","type":"function"},{"doc":"","ref":"wxCommandEvent.html#t:wxCommand/0","title":"wxCommandEvent.wxCommand/0","type":"type"},{"doc":"","ref":"wxCommandEvent.html#t:wxCommandEvent/0","title":"wxCommandEvent.wxCommandEvent/0","type":"type"},{"doc":"","ref":"wxCommandEvent.html#t:wxCommandEventType/0","title":"wxCommandEvent.wxCommandEventType/0","type":"type"},{"doc":"This class is used for context menu events, sent to give the application a chance to show a context (popup) menu for a wxWindow . Note that if getPosition/1 returns wxDefaultPosition, this means that the event originated from a keyboard context button event, and you should compute a suitable position yourself, for example by calling wx_misc:getMousePosition/0 . Notice that the exact sequence of mouse events is different across the platforms. For example, under MSW the context menu event is generated after EVT_RIGHT_UP event and only if it was not handled but under GTK the context menu event is generated after EVT_RIGHT_DOWN event. This is correct in the sense that it ensures that the context menu is shown according to the current platform UI conventions and also means that you must not handle (or call wxEvent:skip/2 in your handler if you do have one) neither right mouse down nor right mouse up event if you plan on handling EVT_CONTEXT_MENU event. See: wxCommandEvent , Overview events This class is derived (and can use functions) from: wxCommandEvent wxEvent wxWidgets docs: wxContextMenuEvent Events Use wxEvtHandler:connect/3 with wxContextMenuEventType to subscribe to events of this type.","ref":"wxContextMenuEvent.html","title":"wxContextMenuEvent","type":"module"},{"doc":"Returns the position in screen coordinates at which the menu should be shown. Use wxWindow:screenToClient/2 to convert to client coordinates. You can also omit a position from wxWindow:popupMenu/4 in order to use the current mouse pointer position. If the event originated from a keyboard event, the value returned from this function will be wxDefaultPosition.","ref":"wxContextMenuEvent.html#getPosition/1","title":"wxContextMenuEvent.getPosition/1","type":"function"},{"doc":"Sets the position at which the menu should be shown.","ref":"wxContextMenuEvent.html#setPosition/2","title":"wxContextMenuEvent.setPosition/2","type":"function"},{"doc":"","ref":"wxContextMenuEvent.html#t:wxContextMenu/0","title":"wxContextMenuEvent.wxContextMenu/0","type":"type"},{"doc":"","ref":"wxContextMenuEvent.html#t:wxContextMenuEvent/0","title":"wxContextMenuEvent.wxContextMenuEvent/0","type":"type"},{"doc":"","ref":"wxContextMenuEvent.html#t:wxContextMenuEventType/0","title":"wxContextMenuEvent.wxContextMenuEventType/0","type":"type"},{"doc":"This is the base class for a control or &quot;widget&quot;. A control is generally a small window which processes user input and/or displays one or more item of data. See: wxValidator (not implemented in wx) This class is derived (and can use functions) from: wxWindow wxEvtHandler wxWidgets docs: wxControl Events Event types emitted from this class: command_text_copy , command_text_cut , command_text_paste","ref":"wxControl.html","title":"wxControl","type":"module"},{"doc":"Returns the control's label, as it was passed to setLabel/2 . Note that the returned string may contains mnemonics (&quot;&amp;&quot; characters) if they were passed to the setLabel/2 function; use GetLabelText() (not implemented in wx) if they are undesired. Also note that the returned string is always the string which was passed to setLabel/2 but may be different from the string passed to SetLabelText() (not implemented in wx) (since this last one escapes mnemonic characters).","ref":"wxControl.html#getLabel/1","title":"wxControl.getLabel/1","type":"function"},{"doc":"Sets the control's label. All &quot;&amp;&quot; characters in the label are special and indicate that the following character is a mnemonic for this control and can be used to activate it from the keyboard (typically by using Alt key in combination with it). To insert a literal ampersand character, you need to double it, i.e. use &quot;&amp;&amp;&quot;. If this behaviour is undesirable, use SetLabelText() (not implemented in wx) instead.","ref":"wxControl.html#setLabel/2","title":"wxControl.setLabel/2","type":"function"},{"doc":"","ref":"wxControl.html#t:wxControl/0","title":"wxControl.wxControl/0","type":"type"},{"doc":"This is convenience class that derives from both wxControl and wxItemContainer (not implemented in wx). It is used as basis for some wxWidgets controls ( wxChoice and wxListBox ). See: wxItemContainer (not implemented in wx), wxItemContainerImmutable (not implemented in wx) This class is derived (and can use functions) from: wxControl wxWindow wxEvtHandler wxWidgets docs: wxControlWithItems","ref":"wxControlWithItems.html","title":"wxControlWithItems","type":"module"},{"doc":"Appends item into the control. Return: The return value is the index of the newly inserted item. Note that this may be different from the last one if the control is sorted (e.g. has wxLB_SORT or wxCB_SORT style).","ref":"wxControlWithItems.html#append/2","title":"wxControlWithItems.append/2","type":"function"},{"doc":"Appends item into the control. Return: The return value is the index of the newly inserted item. Note that this may be different from the last one if the control is sorted (e.g. has wxLB_SORT or wxCB_SORT style).","ref":"wxControlWithItems.html#append/3","title":"wxControlWithItems.append/3","type":"function"},{"doc":"Appends several items at once into the control. Notice that calling this method is usually much faster than appending them one by one if you need to add a lot of items.","ref":"wxControlWithItems.html#appendStrings/2","title":"wxControlWithItems.appendStrings/2","type":"function"},{"doc":"Appends several items at once into the control. Notice that calling this method is usually much faster than appending them one by one if you need to add a lot of items.","ref":"wxControlWithItems.html#appendStrings/3","title":"wxControlWithItems.appendStrings/3","type":"function"},{"doc":"Removes all items from the control. clear/1 also deletes the client data of the existing items if it is owned by the control.","ref":"wxControlWithItems.html#clear/1","title":"wxControlWithItems.clear/1","type":"function"},{"doc":"Deletes an item from the control. The client data associated with the item will be also deleted if it is owned by the control. Note that it is an error (signalled by an assert failure in debug builds) to remove an item with the index negative or greater or equal than the number of items in the control. If there is a currently selected item below the item being deleted, i.e. if getSelection/1 returns a valid index greater than or equal to n , the selection is invalidated when this function is called. However if the selected item appears before the item being deleted, the selection is preserved unchanged. See: clear/1","ref":"wxControlWithItems.html#delete/2","title":"wxControlWithItems.delete/2","type":"function"},{"doc":"","ref":"wxControlWithItems.html#findString/2","title":"wxControlWithItems.findString/2","type":"function"},{"doc":"Finds an item whose label matches the given string. Return: The zero-based position of the item, or wxNOT_FOUND if the string was not found.","ref":"wxControlWithItems.html#findString/3","title":"wxControlWithItems.findString/3","type":"function"},{"doc":"Returns a pointer to the client data associated with the given item (if any). It is an error to call this function for a control which doesn't have typed client data at all although it is OK to call it even if the given item doesn't have any client data associated with it (but other items do). Notice that the returned pointer is still owned by the control and will be deleted by it, use DetachClientObject() (not implemented in wx) if you want to remove the pointer from the control. Return: A pointer to the client data, or NULL if not present.","ref":"wxControlWithItems.html#getClientData/2","title":"wxControlWithItems.getClientData/2","type":"function"},{"doc":"Returns the number of items in the control. See: isEmpty/1","ref":"wxControlWithItems.html#getCount/1","title":"wxControlWithItems.getCount/1","type":"function"},{"doc":"Returns the index of the selected item or wxNOT_FOUND if no item is selected. Return: The position of the current selection. Remark: This method can be used with single selection list boxes only, you should use wxListBox:getSelections/1 for the list boxes with wxLB_MULTIPLE style. See: setSelection/2 , getStringSelection/1","ref":"wxControlWithItems.html#getSelection/1","title":"wxControlWithItems.getSelection/1","type":"function"},{"doc":"Returns the label of the item with the given index. Return: The label of the item or an empty string if the position was invalid.","ref":"wxControlWithItems.html#getString/2","title":"wxControlWithItems.getString/2","type":"function"},{"doc":"Returns the label of the selected item or an empty string if no item is selected. See: getSelection/1","ref":"wxControlWithItems.html#getStringSelection/1","title":"wxControlWithItems.getStringSelection/1","type":"function"},{"doc":"Inserts item into the control. Return: The return value is the index of the newly inserted item. If the insertion failed for some reason, -1 is returned.","ref":"wxControlWithItems.html#insert/3","title":"wxControlWithItems.insert/3","type":"function"},{"doc":"Inserts item into the control. Return: The return value is the index of the newly inserted item. If the insertion failed for some reason, -1 is returned.","ref":"wxControlWithItems.html#insert/4","title":"wxControlWithItems.insert/4","type":"function"},{"doc":"Inserts several items at once into the control. Notice that calling this method is usually much faster than inserting them one by one if you need to insert a lot of items. Return: The return value is the index of the last inserted item. If the insertion failed for some reason, -1 is returned.","ref":"wxControlWithItems.html#insertStrings/3","title":"wxControlWithItems.insertStrings/3","type":"function"},{"doc":"Inserts several items at once into the control. Notice that calling this method is usually much faster than inserting them one by one if you need to insert a lot of items. Return: The return value is the index of the last inserted item. If the insertion failed for some reason, -1 is returned.","ref":"wxControlWithItems.html#insertStrings/4","title":"wxControlWithItems.insertStrings/4","type":"function"},{"doc":"Returns true if the control is empty or false if it has some items. See: getCount/1","ref":"wxControlWithItems.html#isEmpty/1","title":"wxControlWithItems.isEmpty/1","type":"function"},{"doc":"This is the same as setSelection/2 and exists only because it is slightly more natural for controls which support multiple selection.","ref":"wxControlWithItems.html#select/2","title":"wxControlWithItems.select/2","type":"function"},{"doc":"Associates the given typed client data pointer with the given item: the data object will be deleted when the item is deleted (either explicitly by using delete/2 or implicitly when the control itself is destroyed). Note that it is an error to call this function if any untyped client data pointers had been associated with the control items before.","ref":"wxControlWithItems.html#setClientData/3","title":"wxControlWithItems.setClientData/3","type":"function"},{"doc":"Sets the selection to the given item n or removes the selection entirely if n == wxNOT_FOUND . Note that this does not cause any command events to be emitted nor does it deselect any other items in the controls which support multiple selections. See: setString/3 , setStringSelection/2","ref":"wxControlWithItems.html#setSelection/2","title":"wxControlWithItems.setSelection/2","type":"function"},{"doc":"Sets the label for the given item.","ref":"wxControlWithItems.html#setString/3","title":"wxControlWithItems.setString/3","type":"function"},{"doc":"Selects the item with the specified string in the control. This method doesn't cause any command events to be emitted. Notice that this method is case-insensitive, i.e. the string is compared with all the elements of the control case-insensitively and the first matching entry is selected, even if it doesn't have exactly the same case as this string and there is an exact match afterwards. Return: true if the specified string has been selected, false if it wasn't found in the control.","ref":"wxControlWithItems.html#setStringSelection/2","title":"wxControlWithItems.setStringSelection/2","type":"function"},{"doc":"","ref":"wxControlWithItems.html#t:wxControlWithItems/0","title":"wxControlWithItems.wxControlWithItems/0","type":"type"},{"doc":"A cursor is a small bitmap usually used for denoting where the mouse pointer is, with a picture that might indicate the interpretation of a mouse click. As with icons, cursors in X and MS Windows are created in a different manner. Therefore, separate cursors will be created for the different environments. Platform-specific methods for creating a wxCursor object are catered for, and this is an occasion where conditional compilation will probably be required (see wxIcon for an example). A single cursor object may be used in many windows (any subwindow type). The wxWidgets convention is to set the cursor for a window, as in X, rather than to set it globally as in MS Windows, although a global wx_misc:setCursor/1 function is also available for MS Windows use. Creating a Custom Cursor The following is an example of creating a cursor from 32x32 bitmap data (down_bits) and a mask (down_mask) where 1 is black and 0 is white for the bits, and 1 is opaque and 0 is transparent for the mask. It works on Windows and GTK+. Predefined objects (include wx.hrl): See: wxBitmap , wxIcon , wxWindow:setCursor/2 , wx_misc:setCursor/1 , ?wxStockCursor This class is derived (and can use functions) from: wxBitmap wxWidgets docs: wxCursor","ref":"wxCursor.html","title":"wxCursor","type":"module"},{"doc":"Destroys the cursor. See reference-counted object destruction for more info. A cursor can be reused for more than one window, and does not get destroyed when the window is destroyed. wxWidgets destroys all cursors on application exit, although it is best to clean them up explicitly.","ref":"wxCursor.html#destroy/1","title":"wxCursor.destroy/1","type":"function"},{"doc":"Returns true if cursor data is present.","ref":"wxCursor.html#isOk/1","title":"wxCursor.isOk/1","type":"function"},{"doc":"Default constructor.","ref":"wxCursor.html#new/0","title":"wxCursor.new/0","type":"function"},{"doc":"Constructs a cursor using a cursor identifier.","ref":"wxCursor.html#new/1","title":"wxCursor.new/1","type":"function"},{"doc":"Constructs a cursor by passing a string resource name or filename. The arguments hotSpotX and hotSpotY are only used when there's no hotspot info in the resource/image-file to load (e.g. when using wxBITMAP_TYPE_ICO under wxMSW or wxBITMAP_TYPE_XPM under wxGTK).","ref":"wxCursor.html#new/2","title":"wxCursor.new/2","type":"function"},{"doc":"See: isOk/1 .","ref":"wxCursor.html#ok/1","title":"wxCursor.ok/1","type":"function"},{"doc":"","ref":"wxCursor.html#t:wxCursor/0","title":"wxCursor.wxCursor/0","type":"type"},{"doc":"A wxDC is a &quot;device context&quot; onto which graphics and text can be drawn. It is intended to represent different output devices and offers a common abstract API for drawing on any of them. wxWidgets offers an alternative drawing API based on the modern drawing backends GDI+, CoreGraphics, Cairo and Direct2D. See wxGraphicsContext , wxGraphicsRenderer and related classes. There is also a wxGCDC linking the APIs by offering the wxDC API on top of a wxGraphicsContext . wxDC is an abstract base class and cannot be created directly. Use wxPaintDC , wxClientDC , wxWindowDC , wxScreenDC , wxMemoryDC or wxPrinterDC (not implemented in wx). Notice that device contexts which are associated with windows (i.e. wxClientDC , wxWindowDC and wxPaintDC ) use the window font and colours by default (starting with wxWidgets 2.9.0) but the other device context classes use system-default values so you always must set the appropriate fonts and colours before using them. In addition to the versions of the methods documented below, there are also versions which accept single {X,Y} parameter instead of the two wxCoord ones or {X,Y} and {Width,Height} instead of the four wxCoord parameters. Beginning with wxWidgets 2.9.0 the entire wxDC code has been reorganized. All platform dependent code (actually all drawing code) has been moved into backend classes which derive from a common wxDCImpl class. The user-visible classes such as wxClientDC and wxPaintDC merely forward all calls to the backend implementation. Device and logical units In the wxDC context there is a distinction between logical units and device units. Device units are the units native to the particular device; e.g. for a screen, a device unit is a pixel . For a printer, the device unit is defined by the resolution of the printer (usually given in DPI: dot-per-inch). All wxDC functions use instead logical units, unless where explicitly stated. Logical units are arbitrary units mapped to device units using the current mapping mode (see setMapMode/2 ). This mechanism allows reusing the same code which prints on e.g. a window on the screen to print on e.g. a paper. Support for Transparency / Alpha Channel In general wxDC methods don't support alpha transparency and the alpha component of wx_color() is simply ignored and you need to use wxGraphicsContext for full transparency support. There are, however, a few exceptions: first, under macOS and GTK+ 3 colours with alpha channel are supported in all the normal wxDC-derived classes as they use wxGraphicsContext internally. Second, under all platforms wxSVGFileDC (not implemented in wx) also fully supports alpha channel. In both of these cases the instances of wxPen or wxBrush that are built from wx_color() use the colour's alpha values when stroking or filling. Support for Transformation Matrix On some platforms (currently under MSW, GTK+ 3, macOS) wxDC has support for applying an arbitrary affine transformation matrix to its coordinate system (since 3.1.1 this feature is also supported by wxGCDC in all ports). Call CanUseTransformMatrix() (not implemented in wx) to check if this support is available and then call SetTransformMatrix() (not implemented in wx) if it is. If the transformation matrix is not supported, SetTransformMatrix() (not implemented in wx) always simply returns false and doesn't do anything. This feature is only available when wxUSE_DC_TRANSFORM_MATRIX build option is enabled. See: Overview dc , wxGraphicsContext , wxDCFontChanger (not implemented in wx), wxDCTextColourChanger (not implemented in wx), wxDCPenChanger (not implemented in wx), wxDCBrushChanger (not implemented in wx), wxDCClipper (not implemented in wx) wxWidgets docs: wxDC","ref":"wxDC.html","title":"wxDC","type":"module"},{"doc":"","ref":"wxDC.html#blit/5","title":"wxDC.blit/5","type":"function"},{"doc":"Copy from a source DC to this DC. With this method you can specify the destination coordinates and the size of area to copy which will be the same for both the source and target DCs. If you need to apply scaling while copying, use StretchBlit() (not implemented in wx). Notice that source DC coordinates xsrc and ysrc are interpreted using the current source DC coordinate system, i.e. the scale, origin position and axis directions are taken into account when transforming them to physical (pixel) coordinates. Remark: There is partial support for blit/6 in wxPostScriptDC , under X. See: StretchBlit() (not implemented in wx), wxMemoryDC , wxBitmap , wxMask","ref":"wxDC.html#blit/6","title":"wxDC.blit/6","type":"function"},{"doc":"Adds the specified point to the bounding box which can be retrieved with minX/1 , maxX/1 and minY/1 , maxY/1 functions. See: resetBoundingBox/1","ref":"wxDC.html#calcBoundingBox/3","title":"wxDC.calcBoundingBox/3","type":"function"},{"doc":"Clears the device context using the current background brush. Note that setBackground/2 method must be used to set the brush used by clear/1 , the brush used for filling the shapes set by setBrush/2 is ignored by it. If no background brush was set, solid white brush is used to clear the device context.","ref":"wxDC.html#clear/1","title":"wxDC.clear/1","type":"function"},{"doc":"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.","ref":"wxDC.html#crossHair/2","title":"wxDC.crossHair/2","type":"function"},{"doc":"Destroys the current clipping region so that none of the DC is clipped. See: setClippingRegion/3","ref":"wxDC.html#destroyClippingRegion/1","title":"wxDC.destroyClippingRegion/1","type":"function"},{"doc":"Convert device X coordinate to logical coordinate, using the current mapping mode, user scale factor, device origin and axis orientation.","ref":"wxDC.html#deviceToLogicalX/2","title":"wxDC.deviceToLogicalX/2","type":"function"},{"doc":"Convert device X coordinate to relative logical coordinate, using the current mapping mode and user scale factor but ignoring the axis orientation. Use this for converting a width, for example.","ref":"wxDC.html#deviceToLogicalXRel/2","title":"wxDC.deviceToLogicalXRel/2","type":"function"},{"doc":"Converts device Y coordinate to logical coordinate, using the current mapping mode, user scale factor, device origin and axis orientation.","ref":"wxDC.html#deviceToLogicalY/2","title":"wxDC.deviceToLogicalY/2","type":"function"},{"doc":"Convert device Y coordinate to relative logical coordinate, using the current mapping mode and user scale factor but ignoring the axis orientation. Use this for converting a height, for example.","ref":"wxDC.html#deviceToLogicalYRel/2","title":"wxDC.deviceToLogicalYRel/2","type":"function"},{"doc":"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.","ref":"wxDC.html#drawArc/4","title":"wxDC.drawArc/4","type":"function"},{"doc":"","ref":"wxDC.html#drawBitmap/3","title":"wxDC.drawBitmap/3","type":"function"},{"doc":"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.","ref":"wxDC.html#drawBitmap/4","title":"wxDC.drawBitmap/4","type":"function"},{"doc":"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.","ref":"wxDC.html#drawCheckMark/2","title":"wxDC.drawCheckMark/2","type":"function"},{"doc":"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.","ref":"wxDC.html#drawCircle/3","title":"wxDC.drawCircle/3","type":"function"},{"doc":"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.","ref":"wxDC.html#drawEllipse/2","title":"wxDC.drawEllipse/2","type":"function"},{"doc":"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.","ref":"wxDC.html#drawEllipse/3","title":"wxDC.drawEllipse/3","type":"function"},{"doc":"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.","ref":"wxDC.html#drawEllipticArc/5","title":"wxDC.drawEllipticArc/5","type":"function"},{"doc":"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.","ref":"wxDC.html#drawIcon/3","title":"wxDC.drawIcon/3","type":"function"},{"doc":"","ref":"wxDC.html#drawLabel/3","title":"wxDC.drawLabel/3","type":"function"},{"doc":"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.","ref":"wxDC.html#drawLabel/4","title":"wxDC.drawLabel/4","type":"function"},{"doc":"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.","ref":"wxDC.html#drawLine/3","title":"wxDC.drawLine/3","type":"function"},{"doc":"","ref":"wxDC.html#drawLines/2","title":"wxDC.drawLines/2","type":"function"},{"doc":"Draws lines using an array of points of size n adding the optional offset coordinate. The current pen is used for drawing the lines.","ref":"wxDC.html#drawLines/3","title":"wxDC.drawLines/3","type":"function"},{"doc":"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.","ref":"wxDC.html#drawPoint/2","title":"wxDC.drawPoint/2","type":"function"},{"doc":"","ref":"wxDC.html#drawPolygon/2","title":"wxDC.drawPolygon/2","type":"function"},{"doc":"Draws a filled polygon using an array of points of size n , adding the optional offset coordinate. The first and last points are automatically closed. The last argument specifies the fill rule: wxODDEVEN_RULE (the default) or wxWINDING_RULE . The current pen is used for drawing the outline, and the current brush for filling the shape. Using a transparent brush suppresses filling.","ref":"wxDC.html#drawPolygon/3","title":"wxDC.drawPolygon/3","type":"function"},{"doc":"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.","ref":"wxDC.html#drawRectangle/2","title":"wxDC.drawRectangle/2","type":"function"},{"doc":"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.","ref":"wxDC.html#drawRectangle/3","title":"wxDC.drawRectangle/3","type":"function"},{"doc":"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.","ref":"wxDC.html#drawRotatedText/4","title":"wxDC.drawRotatedText/4","type":"function"},{"doc":"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.","ref":"wxDC.html#drawRoundedRectangle/3","title":"wxDC.drawRoundedRectangle/3","type":"function"},{"doc":"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.","ref":"wxDC.html#drawRoundedRectangle/4","title":"wxDC.drawRoundedRectangle/4","type":"function"},{"doc":"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.","ref":"wxDC.html#drawText/3","title":"wxDC.drawText/3","type":"function"},{"doc":"Ends a document (only relevant when outputting to a printer).","ref":"wxDC.html#endDoc/1","title":"wxDC.endDoc/1","type":"function"},{"doc":"Ends a document page (only relevant when outputting to a printer).","ref":"wxDC.html#endPage/1","title":"wxDC.endPage/1","type":"function"},{"doc":"","ref":"wxDC.html#floodFill/3","title":"wxDC.floodFill/3","type":"function"},{"doc":"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.","ref":"wxDC.html#floodFill/4","title":"wxDC.floodFill/4","type":"function"},{"doc":"Gets the brush used for painting the background. See: setBackground/2","ref":"wxDC.html#getBackground/1","title":"wxDC.getBackground/1","type":"function"},{"doc":"Returns the current background mode: wxPENSTYLE_SOLID or wxPENSTYLE_TRANSPARENT . See: setBackgroundMode/2","ref":"wxDC.html#getBackgroundMode/1","title":"wxDC.getBackgroundMode/1","type":"function"},{"doc":"Gets the current brush. See: setBrush/2","ref":"wxDC.html#getBrush/1","title":"wxDC.getBrush/1","type":"function"},{"doc":"Gets the character height of the currently set font.","ref":"wxDC.html#getCharHeight/1","title":"wxDC.getCharHeight/1","type":"function"},{"doc":"Gets the average character width of the currently set font.","ref":"wxDC.html#getCharWidth/1","title":"wxDC.getCharWidth/1","type":"function"},{"doc":"Gets the rectangle surrounding the current clipping region. If no clipping region is set this function returns the extent of the device context. @remarks Clipping region is given in logical coordinates. @param x If non-&lt;span class='literal'&gt;NULL&lt;/span&gt;, filled in with the logical horizontal coordinate of the top left corner of the clipping region if the function returns true or 0 otherwise. @param y If non-&lt;span class='literal'&gt;NULL&lt;/span&gt;, filled in with the logical vertical coordinate of the top left corner of the clipping region if the function returns true or 0 otherwise. @param width If non-&lt;span class='literal'&gt;NULL&lt;/span&gt;, filled in with the width of the clipping region if the function returns true or the device context width otherwise. @param height If non-&lt;span class='literal'&gt;NULL&lt;/span&gt;, filled in with the height of the clipping region if the function returns true or the device context height otherwise. Return: true if there is a clipping region or false if there is no active clipping region (note that this return value is available only since wxWidgets 3.1.2, this function didn't return anything in the previous versions).","ref":"wxDC.html#getClippingBox/1","title":"wxDC.getClippingBox/1","type":"function"},{"doc":"Gets the current font. Notice that even although each device context object has some default font after creation, this method would return a ?wxNullFont initially and only after calling setFont/2 a valid font is returned.","ref":"wxDC.html#getFont/1","title":"wxDC.getFont/1","type":"function"},{"doc":"Gets the current layout direction of the device context. On platforms where RTL layout is supported, the return value will either be wxLayout_LeftToRight or wxLayout_RightToLeft . If RTL layout is not supported, the return value will be wxLayout_Default . See: setLayoutDirection/2","ref":"wxDC.html#getLayoutDirection/1","title":"wxDC.getLayoutDirection/1","type":"function"},{"doc":"Gets the current logical function. See: setLogicalFunction/2","ref":"wxDC.html#getLogicalFunction/1","title":"wxDC.getLogicalFunction/1","type":"function"},{"doc":"Gets the current mapping mode for the device context. See: setMapMode/2","ref":"wxDC.html#getMapMode/1","title":"wxDC.getMapMode/1","type":"function"},{"doc":"Gets the dimensions of the string using the currently selected font. string is the text string to measure. Return: The text extent as a {Width,Height} object. Note: This function works with both single-line and multi-line strings. See: wxFont , setFont/2 , getPartialTextExtents/2 , getTextExtent/3","ref":"wxDC.html#getMultiLineTextExtent/2","title":"wxDC.getMultiLineTextExtent/2","type":"function"},{"doc":"Gets the dimensions of the string using the currently selected font. string is the text string to measure, heightLine , if non NULL, is where to store the height of a single line. The text extent is set in the given w and h pointers. If the optional parameter font is specified and valid, then it is used for the text extent calculation, otherwise the currently selected font is used. If string is empty, its horizontal extent is 0 but, for convenience when using this function for allocating enough space for a possibly multi-line string, its vertical extent is the same as the height of an empty line of text. Please note that this behaviour differs from that of getTextExtent/3 . Note: This function works with both single-line and multi-line strings. See: wxFont , setFont/2 , getPartialTextExtents/2 , getTextExtent/3","ref":"wxDC.html#getMultiLineTextExtent/3","title":"wxDC.getMultiLineTextExtent/3","type":"function"},{"doc":"Returns the resolution of the device in pixels per inch.","ref":"wxDC.html#getPPI/1","title":"wxDC.getPPI/1","type":"function"},{"doc":"Fills the widths array with the widths from the beginning of text to the corresponding character of text . The generic version simply builds a running total of the widths of each character using getTextExtent/3 , however if the various platforms have a native API function that is faster or more accurate than the generic implementation then it should be used instead. See: getMultiLineTextExtent/3 , getTextExtent/3","ref":"wxDC.html#getPartialTextExtents/2","title":"wxDC.getPartialTextExtents/2","type":"function"},{"doc":"Gets the current pen. See: setPen/2","ref":"wxDC.html#getPen/1","title":"wxDC.getPen/1","type":"function"},{"doc":"Gets in colour the colour at the specified location. This method isn't available for wxPostScriptDC or wxMetafileDC (not implemented in wx) nor for any DC in wxOSX port and simply returns false there. Note: Setting a pixel can be done using drawPoint/2 . Note: This method shouldn't be used with wxPaintDC as accessing the DC while drawing can result in unexpected results, notably in wxGTK.","ref":"wxDC.html#getPixel/2","title":"wxDC.getPixel/2","type":"function"},{"doc":"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.","ref":"wxDC.html#getSize/1","title":"wxDC.getSize/1","type":"function"},{"doc":"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.","ref":"wxDC.html#getSizeMM/1","title":"wxDC.getSizeMM/1","type":"function"},{"doc":"Gets the current text background colour. See: setTextBackground/2","ref":"wxDC.html#getTextBackground/1","title":"wxDC.getTextBackground/1","type":"function"},{"doc":"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.","ref":"wxDC.html#getTextExtent/2","title":"wxDC.getTextExtent/2","type":"function"},{"doc":"Gets the dimensions of the string using the currently selected font. string is the text string to measure, descent is the dimension from the baseline of the font to the bottom of the descender, and externalLeading is any extra vertical space added to the font by the font designer (usually is zero). The text extent is returned in w and h pointers or as a {Width,Height} object depending on which version of this function is used. If the optional parameter font is specified and valid, then it is used for the text extent calculation. Otherwise the currently selected font is. If string is empty, its extent is 0 in both directions, as expected. Note: This function only works with single-line strings. See: wxFont , setFont/2 , getPartialTextExtents/2 , getMultiLineTextExtent/3","ref":"wxDC.html#getTextExtent/3","title":"wxDC.getTextExtent/3","type":"function"},{"doc":"Gets the current text foreground colour. See: setTextForeground/2","ref":"wxDC.html#getTextForeground/1","title":"wxDC.getTextForeground/1","type":"function"},{"doc":"Gets the current user scale factor. See: setUserScale/3","ref":"wxDC.html#getUserScale/1","title":"wxDC.getUserScale/1","type":"function"},{"doc":"Fill the area specified by rect with a radial gradient, starting from initialColour at the centre of the circle and fading to destColour on the circle outside. The circle is placed at the centre of rect . Note: Currently this function is very slow, don't use it for real-time drawing.","ref":"wxDC.html#gradientFillConcentric/4","title":"wxDC.gradientFillConcentric/4","type":"function"},{"doc":"Fill the area specified by rect with a radial gradient, starting from initialColour at the centre of the circle and fading to destColour on the circle outside. circleCenter are the relative coordinates of centre of the circle in the specified rect . Note: Currently this function is very slow, don't use it for real-time drawing.","ref":"wxDC.html#gradientFillConcentric/5","title":"wxDC.gradientFillConcentric/5","type":"function"},{"doc":"","ref":"wxDC.html#gradientFillLinear/4","title":"wxDC.gradientFillLinear/4","type":"function"},{"doc":"Fill the area specified by rect with a linear gradient, starting from initialColour and eventually fading to destColour . The nDirection specifies the direction of the colour change, default is to use initialColour on the left part of the rectangle and destColour on the right one.","ref":"wxDC.html#gradientFillLinear/5","title":"wxDC.gradientFillLinear/5","type":"function"},{"doc":"Returns true if the DC is ok to use.","ref":"wxDC.html#isOk/1","title":"wxDC.isOk/1","type":"function"},{"doc":"Converts logical X coordinate to device coordinate, using the current mapping mode, user scale factor, device origin and axis orientation.","ref":"wxDC.html#logicalToDeviceX/2","title":"wxDC.logicalToDeviceX/2","type":"function"},{"doc":"Converts logical X coordinate to relative device coordinate, using the current mapping mode and user scale factor but ignoring the axis orientation. Use this for converting a width, for example.","ref":"wxDC.html#logicalToDeviceXRel/2","title":"wxDC.logicalToDeviceXRel/2","type":"function"},{"doc":"Converts logical Y coordinate to device coordinate, using the current mapping mode, user scale factor, device origin and axis orientation.","ref":"wxDC.html#logicalToDeviceY/2","title":"wxDC.logicalToDeviceY/2","type":"function"},{"doc":"Converts logical Y coordinate to relative device coordinate, using the current mapping mode and user scale factor but ignoring the axis orientation. Use this for converting a height, for example.","ref":"wxDC.html#logicalToDeviceYRel/2","title":"wxDC.logicalToDeviceYRel/2","type":"function"},{"doc":"Gets the maximum horizontal extent used in drawing commands so far.","ref":"wxDC.html#maxX/1","title":"wxDC.maxX/1","type":"function"},{"doc":"Gets the maximum vertical extent used in drawing commands so far.","ref":"wxDC.html#maxY/1","title":"wxDC.maxY/1","type":"function"},{"doc":"Gets the minimum horizontal extent used in drawing commands so far.","ref":"wxDC.html#minX/1","title":"wxDC.minX/1","type":"function"},{"doc":"Gets the minimum vertical extent used in drawing commands so far.","ref":"wxDC.html#minY/1","title":"wxDC.minY/1","type":"function"},{"doc":"Resets the bounding box: after a call to this function, the bounding box doesn't contain anything. See: calcBoundingBox/3","ref":"wxDC.html#resetBoundingBox/1","title":"wxDC.resetBoundingBox/1","type":"function"},{"doc":"Sets the x and y axis orientation (i.e. the direction from lowest to highest values on the axis). The default orientation is x axis from left to right and y axis from top down.","ref":"wxDC.html#setAxisOrientation/3","title":"wxDC.setAxisOrientation/3","type":"function"},{"doc":"Sets the current background brush for the DC.","ref":"wxDC.html#setBackground/2","title":"wxDC.setBackground/2","type":"function"},{"doc":"mode may be one of wxPENSTYLE_SOLID and wxPENSTYLE_TRANSPARENT . This setting determines whether text will be drawn with a background colour or not.","ref":"wxDC.html#setBackgroundMode/2","title":"wxDC.setBackgroundMode/2","type":"function"},{"doc":"Sets the current brush for the DC. If the argument is ?wxNullBrush (or another invalid brush; see wxBrush:isOk/1 ), the current brush is selected out of the device context (leaving wxDC without any valid brush), allowing the current brush to be destroyed safely. See: wxBrush , wxMemoryDC , (for the interpretation of colours when drawing into a monochrome bitmap)","ref":"wxDC.html#setBrush/2","title":"wxDC.setBrush/2","type":"function"},{"doc":"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.","ref":"wxDC.html#setClippingRegion/2","title":"wxDC.setClippingRegion/2","type":"function"},{"doc":"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.","ref":"wxDC.html#setClippingRegion/3","title":"wxDC.setClippingRegion/3","type":"function"},{"doc":"Sets the device origin (i.e. the origin in pixels after scaling has been applied). This function may be useful in Windows printing operations for placing a graphic on a page.","ref":"wxDC.html#setDeviceOrigin/3","title":"wxDC.setDeviceOrigin/3","type":"function"},{"doc":"Sets the current font for the DC. If the argument is ?wxNullFont (or another invalid font; see wxFont:isOk/1 ), the current font is selected out of the device context (leaving wxDC without any valid font), allowing the current font to be destroyed safely. See: wxFont","ref":"wxDC.html#setFont/2","title":"wxDC.setFont/2","type":"function"},{"doc":"Sets the current layout direction for the device context. See: getLayoutDirection/1","ref":"wxDC.html#setLayoutDirection/2","title":"wxDC.setLayoutDirection/2","type":"function"},{"doc":"Sets the current logical function for the device context. Note: This function is not fully supported in all ports, due to the limitations of the underlying drawing model. Notably, wxINVERT which was commonly used for drawing rubber bands or other moving outlines in the past, is not, and will not, be supported by wxGTK3 and wxMac. The suggested alternative is to draw temporarily objects normally and refresh the (affected part of the) window to remove them later. It determines how a source pixel (from a pen or brush colour, or source device context if using blit/6 ) combines with a destination pixel in the current device context. Text drawing is not affected by this function. See ?wxRasterOperationMode enumeration values for more info. The default is wxCOPY , which simply draws with the current colour. The others combine the current colour and the background using a logical operation.","ref":"wxDC.html#setLogicalFunction/2","title":"wxDC.setLogicalFunction/2","type":"function"},{"doc":"The mapping mode of the device context defines the unit of measurement used to convert logical units to device units. Note that in X, text drawing isn't handled consistently with the mapping mode; a font is always specified in point size. However, setting the user scale (see setUserScale/3 ) scales the text appropriately. In Windows, scalable TrueType fonts are always used; in X, results depend on availability of fonts, but usually a reasonable match is found. The coordinate origin is always at the top left of the screen/printer. Drawing to a Windows printer device context uses the current mapping mode, but mapping mode is currently ignored for PostScript output.","ref":"wxDC.html#setMapMode/2","title":"wxDC.setMapMode/2","type":"function"},{"doc":"If this is a window DC or memory DC, assigns the given palette to the window or bitmap associated with the DC. If the argument is ?wxNullPalette, the current palette is selected out of the device context, and the original palette restored. See: wxPalette","ref":"wxDC.html#setPalette/2","title":"wxDC.setPalette/2","type":"function"},{"doc":"Sets the current pen for the DC. If the argument is ?wxNullPen (or another invalid pen; see wxPen:isOk/1 ), the current pen is selected out of the device context (leaving wxDC without any valid pen), allowing the current pen to be destroyed safely. See: wxMemoryDC , for the interpretation of colours when drawing into a monochrome bitmap","ref":"wxDC.html#setPen/2","title":"wxDC.setPen/2","type":"function"},{"doc":"Sets the current text background colour for the DC.","ref":"wxDC.html#setTextBackground/2","title":"wxDC.setTextBackground/2","type":"function"},{"doc":"Sets the current text foreground colour for the DC. See: wxMemoryDC , for the interpretation of colours when drawing into a monochrome bitmap","ref":"wxDC.html#setTextForeground/2","title":"wxDC.setTextForeground/2","type":"function"},{"doc":"Sets the user scaling factor, useful for applications which require 'zooming'.","ref":"wxDC.html#setUserScale/3","title":"wxDC.setUserScale/3","type":"function"},{"doc":"Starts a document (only relevant when outputting to a printer). message is a message to show while printing.","ref":"wxDC.html#startDoc/2","title":"wxDC.startDoc/2","type":"function"},{"doc":"Starts a document page (only relevant when outputting to a printer).","ref":"wxDC.html#startPage/1","title":"wxDC.startPage/1","type":"function"},{"doc":"","ref":"wxDC.html#t:wxDC/0","title":"wxDC.wxDC/0","type":"type"},{"doc":"Connects an overlay with a drawing DC. See: wxOverlay , wxDC wxWidgets docs: wxDCOverlay","ref":"wxDCOverlay.html","title":"wxDCOverlay","type":"module"},{"doc":"Clears the layer, restoring the state at the last init.","ref":"wxDCOverlay.html#clear/1","title":"wxDCOverlay.clear/1","type":"function"},{"doc":"Removes the connection between the overlay and the dc.","ref":"wxDCOverlay.html#destroy/1","title":"wxDCOverlay.destroy/1","type":"function"},{"doc":"Convenience wrapper that behaves the same using the entire area of the dc.","ref":"wxDCOverlay.html#new/2","title":"wxDCOverlay.new/2","type":"function"},{"doc":"Connects this overlay to the corresponding drawing dc, if the overlay is not initialized yet this call will do so.","ref":"wxDCOverlay.html#new/6","title":"wxDCOverlay.new/6","type":"function"},{"doc":"","ref":"wxDCOverlay.html#t:wxDCOverlay/0","title":"wxDCOverlay.wxDCOverlay/0","type":"type"},{"doc":"A wxDataObject represents data that can be copied to or from the clipboard, or dragged and dropped. The important thing about wxDataObject is that this is a 'smart' piece of data unlike 'dumb' data containers such as memory buffers or files. Being 'smart' here means that the data object itself should know what data formats it supports and how to render itself in each of its supported formats. A supported format, incidentally, is exactly the format in which the data can be requested from a data object or from which the data object may be set. In the general case, an object may support different formats on 'input' and 'output', i.e. it may be able to render itself in a given format but not be created from data on this format or vice versa. wxDataObject defines the wxDataObject::Direction (not implemented in wx) enumeration type which distinguishes between them. See wxDataFormat (not implemented in wx) documentation for more about formats. Not surprisingly, being 'smart' comes at a price of added complexity. This is reasonable for the situations when you really need to support multiple formats, but may be annoying if you only want to do something simple like cut and paste text. To provide a solution for both cases, wxWidgets has two predefined classes which derive from wxDataObject : wxDataObjectSimple (not implemented in wx) and wxDataObjectComposite (not implemented in wx). wxDataObjectSimple (not implemented in wx) is the simplest wxDataObject possible and only holds data in a single format (such as HTML or text) and wxDataObjectComposite (not implemented in wx) is the simplest way to implement a wxDataObject that does support multiple formats because it achieves this by simply holding several wxDataObjectSimple (not implemented in wx) objects. So, you have several solutions when you need a wxDataObject class (and you need one as soon as you want to transfer data via the clipboard or drag and drop): Please note that the easiest way to use drag and drop and the clipboard with multiple formats is by using wxDataObjectComposite (not implemented in wx), but it is not the most efficient one as each wxDataObjectSimple (not implemented in wx) would contain the whole data in its respective formats. Now imagine that you want to paste 200 pages of text in your proprietary format, as well as Word, RTF, HTML, Unicode and plain text to the clipboard and even today's computers are in trouble. For this case, you will have to derive from wxDataObject directly and make it enumerate its formats and provide the data in the requested format on demand. Note that neither the GTK+ data transfer mechanisms for clipboard and drag and drop, nor OLE data transfer, copies any data until another application actually requests the data. This is in contrast to the 'feel' offered to the user of a program who would normally think that the data resides in the clipboard after having pressed 'Copy' - in reality it is only declared to be available . You may also derive your own data object classes from wxCustomDataObject (not implemented in wx) for user-defined types. The format of user-defined data is given as a mime-type string literal, such as &quot;application/word&quot; or &quot;image/png&quot;. These strings are used as they are under Unix (so far only GTK+) to identify a format and are translated into their Windows equivalent under Win32 (using the OLE IDataObject for data exchange to and from the clipboard and for drag and drop). Note that the format string translation under Windows is not yet finished. Each class derived directly from wxDataObject must override and implement all of its functions which are pure virtual in the base class. The data objects which only render their data or only set it (i.e. work in only one direction), should return 0 from GetFormatCount() (not implemented in wx). See: Overview dnd , Examples , wxFileDataObject , wxTextDataObject , wxBitmapDataObject , wxCustomDataObject (not implemented in wx), wxDropTarget (not implemented in wx), wxDropSource (not implemented in wx), wxTextDropTarget (not implemented in wx), wxFileDropTarget (not implemented in wx) wxWidgets docs: wxDataObject","ref":"wxDataObject.html","title":"wxDataObject","type":"module"},{"doc":"","ref":"wxDataObject.html#t:wxDataObject/0","title":"wxDataObject.wxDataObject/0","type":"type"},{"doc":"This event class holds information about a date change and is used together with wxDatePickerCtrl . It also serves as a base class for wxCalendarEvent . This class is derived (and can use functions) from: wxCommandEvent wxEvent wxWidgets docs: wxDateEvent","ref":"wxDateEvent.html","title":"wxDateEvent","type":"module"},{"doc":"Returns the date.","ref":"wxDateEvent.html#getDate/1","title":"wxDateEvent.getDate/1","type":"function"},{"doc":"","ref":"wxDateEvent.html#t:wxDate/0","title":"wxDateEvent.wxDate/0","type":"type"},{"doc":"","ref":"wxDateEvent.html#t:wxDateEvent/0","title":"wxDateEvent.wxDateEvent/0","type":"type"},{"doc":"","ref":"wxDateEvent.html#t:wxDateEventType/0","title":"wxDateEvent.wxDateEventType/0","type":"type"},{"doc":"This control allows the user to select a date. Unlike wxCalendarCtrl , which is a relatively big control, wxDatePickerCtrl is implemented as a small window showing the currently selected date. The control can be edited using the keyboard, and can also display a popup window for more user-friendly date selection, depending on the styles used and the platform. It is only available if wxUSE_DATEPICKCTRL is set to 1. Styles This class supports the following styles: See: wxTimePickerCtrl (not implemented in wx), wxCalendarCtrl , wxDateEvent This class is derived (and can use functions) from: wxPickerBase wxControl wxWindow wxEvtHandler wxWidgets docs: wxDatePickerCtrl Events Event types emitted from this class: date_changed","ref":"wxDatePickerCtrl.html","title":"wxDatePickerCtrl","type":"module"},{"doc":"Destroys the object.","ref":"wxDatePickerCtrl.html#destroy/1","title":"wxDatePickerCtrl.destroy/1","type":"function"},{"doc":"If the control had been previously limited to a range of dates using setRange/3 , returns the lower and upper bounds of this range. If no range is set (or only one of the bounds is set), dt1 and/or dt2 are set to be invalid. Notice that when using a native MSW implementation of this control the lower range is always set, even if setRange/3 hadn't been called explicitly, as the native control only supports dates later than year 1601. Return: false if no range limits are currently set, true if at least one bound is set.","ref":"wxDatePickerCtrl.html#getRange/3","title":"wxDatePickerCtrl.getRange/3","type":"function"},{"doc":"Returns the currently entered date. For a control with wxDP_ALLOWNONE style the returned value may be invalid if no date is entered, otherwise it is always valid.","ref":"wxDatePickerCtrl.html#getValue/1","title":"wxDatePickerCtrl.getValue/1","type":"function"},{"doc":"Default constructor.","ref":"wxDatePickerCtrl.html#new/0","title":"wxDatePickerCtrl.new/0","type":"function"},{"doc":"","ref":"wxDatePickerCtrl.html#new/2","title":"wxDatePickerCtrl.new/2","type":"function"},{"doc":"Initializes the object and calls Create() (not implemented in wx) with all the parameters.","ref":"wxDatePickerCtrl.html#new/3","title":"wxDatePickerCtrl.new/3","type":"function"},{"doc":"Sets the valid range for the date selection. If dt1 is valid, it becomes the earliest date (inclusive) accepted by the control. If dt2 is valid, it becomes the latest possible date. Notice that if the current value is not inside the new range, it will be adjusted to lie inside it, i.e. calling this method can change the control value, however no events are generated by it. Remark: If the current value of the control is outside of the newly set range bounds, the behaviour is undefined.","ref":"wxDatePickerCtrl.html#setRange/3","title":"wxDatePickerCtrl.setRange/3","type":"function"},{"doc":"Changes the current value of the control. The date should be valid unless the control was created with wxDP_ALLOWNONE style and included in the currently selected range, if any. Calling this method does not result in a date change event.","ref":"wxDatePickerCtrl.html#setValue/2","title":"wxDatePickerCtrl.setValue/2","type":"function"},{"doc":"","ref":"wxDatePickerCtrl.html#t:wxDatePickerCtrl/0","title":"wxDatePickerCtrl.wxDatePickerCtrl/0","type":"type"},{"doc":"A dialog box is a window with a title bar and sometimes a system menu, which can be moved around the screen. It can contain controls and other windows and is often used to allow the user to make some choice or to answer a question. Dialogs can be made scrollable, automatically, for computers with low resolution screens: please see overview_dialog_autoscrolling for further details. Dialogs usually contain either a single button allowing to close the dialog or two buttons, one accepting the changes and the other one discarding them (such button, if present, is automatically activated if the user presses the &quot;Esc&quot; key). By default, buttons with the standard wxID_OK and wxID_CANCEL identifiers behave as expected. Starting with wxWidgets 2.7 it is also possible to use a button with a different identifier instead, see setAffirmativeId/2 and SetEscapeId() (not implemented in wx). Also notice that the createButtonSizer/2 should be used to create the buttons appropriate for the current platform and positioned correctly (including their order which is platform-dependent). Modal and Modeless There are two kinds of dialog, modal and modeless. A modal dialog blocks program flow and user input on other windows until it is dismissed, whereas a modeless dialog behaves more like a frame in that program flow continues, and input in other windows is still possible. To show a modal dialog you should use the showModal/1 method while to show a dialog modelessly you simply use show/2 , just as with frames. Note that the modal dialog is one of the very few examples of wxWindow-derived objects which may be created on the stack and not on the heap. In other words, while most windows would be created like this: You can achieve the same result with dialogs by using simpler code: An application can define a wxCloseEvent handler for the dialog to respond to system close events. Styles This class supports the following styles: See: Overview dialog , wxFrame , Overview validator This class is derived (and can use functions) from: wxTopLevelWindow wxWindow wxEvtHandler wxWidgets docs: wxDialog Events Event types emitted from this class: close_window , init_dialog","ref":"wxDialog.html","title":"wxDialog","type":"module"},{"doc":"","ref":"wxDialog.html#create/4","title":"wxDialog.create/4","type":"function"},{"doc":"Used for two-step dialog box construction. See: new/4","ref":"wxDialog.html#create/5","title":"wxDialog.create/5","type":"function"},{"doc":"Creates a sizer with standard buttons. flags is a bit list of the following flags: wxOK, wxCANCEL, wxYES, wxNO, wxAPPLY, wxCLOSE, wxHELP, wxNO_DEFAULT. The sizer lays out the buttons in a manner appropriate to the platform. This function uses createStdDialogButtonSizer/2 internally for most platforms but doesn't create the sizer at all for the platforms with hardware buttons (such as smartphones) for which it sets up the hardware buttons appropriately and returns NULL, so don't forget to test that the return value is valid before using it.","ref":"wxDialog.html#createButtonSizer/2","title":"wxDialog.createButtonSizer/2","type":"function"},{"doc":"Creates a wxStdDialogButtonSizer with standard buttons. flags is a bit list of the following flags: wxOK, wxCANCEL, wxYES, wxNO, wxAPPLY, wxCLOSE, wxHELP, wxNO_DEFAULT. The sizer lays out the buttons in a manner appropriate to the platform.","ref":"wxDialog.html#createStdDialogButtonSizer/2","title":"wxDialog.createStdDialogButtonSizer/2","type":"function"},{"doc":"Destructor. Deletes any child windows before deleting the physical window. See overview_windowdeletion for more info.","ref":"wxDialog.html#destroy/1","title":"wxDialog.destroy/1","type":"function"},{"doc":"Ends a modal dialog, passing a value to be returned from the showModal/1 invocation. See: showModal/1 , getReturnCode/1 , setReturnCode/2","ref":"wxDialog.html#endModal/2","title":"wxDialog.endModal/2","type":"function"},{"doc":"Gets the identifier of the button which works like standard OK button in this dialog. See: setAffirmativeId/2","ref":"wxDialog.html#getAffirmativeId/1","title":"wxDialog.getAffirmativeId/1","type":"function"},{"doc":"Gets the return code for this window. Remark: A return code is normally associated with a modal dialog, where showModal/1 returns a code to the application. See: setReturnCode/2 , showModal/1 , endModal/2","ref":"wxDialog.html#getReturnCode/1","title":"wxDialog.getReturnCode/1","type":"function"},{"doc":"Returns true if the dialog box is modal, false otherwise.","ref":"wxDialog.html#isModal/1","title":"wxDialog.isModal/1","type":"function"},{"doc":"Default constructor.","ref":"wxDialog.html#new/0","title":"wxDialog.new/0","type":"function"},{"doc":"","ref":"wxDialog.html#new/3","title":"wxDialog.new/3","type":"function"},{"doc":"Constructor. See: create/5","ref":"wxDialog.html#new/4","title":"wxDialog.new/4","type":"function"},{"doc":"Sets the identifier to be used as OK button. When the button with this identifier is pressed, the dialog calls wxWindow:validate/1 and wxWindow:transferDataFromWindow/1 and, if they both return true, closes the dialog with the affirmative id return code. Also, when the user presses a hardware OK button on the devices having one or the special OK button in the PocketPC title bar, an event with this id is generated. By default, the affirmative id is wxID_OK. See: getAffirmativeId/1 , SetEscapeId() (not implemented in wx)","ref":"wxDialog.html#setAffirmativeId/2","title":"wxDialog.setAffirmativeId/2","type":"function"},{"doc":"Sets the return code for this window. A return code is normally associated with a modal dialog, where showModal/1 returns a code to the application. The function endModal/2 calls setReturnCode/2 . See: getReturnCode/1 , showModal/1 , endModal/2","ref":"wxDialog.html#setReturnCode/2","title":"wxDialog.setReturnCode/2","type":"function"},{"doc":"","ref":"wxDialog.html#show/1","title":"wxDialog.show/1","type":"function"},{"doc":"Hides or shows the dialog. The preferred way of dismissing a modal dialog is to use endModal/2 .","ref":"wxDialog.html#show/2","title":"wxDialog.show/2","type":"function"},{"doc":"Shows an application-modal dialog. Program flow does not return until the dialog has been dismissed with endModal/2 . Notice that it is possible to call showModal/1 for a dialog which had been previously shown with show/2 , this allows making an existing modeless dialog modal. However showModal/1 can't be called twice without intervening endModal/2 calls. Note that this function creates a temporary event loop which takes precedence over the application's main event loop (see wxEventLoopBase (not implemented in wx)) and which is destroyed when the dialog is dismissed. This also results in a call to wxApp::ProcessPendingEvents() (not implemented in wx). Return: The value set with setReturnCode/2 . See: ShowWindowModal() (not implemented in wx), ShowWindowModalThenDo() (not implemented in wx), endModal/2 , getReturnCode/1 , setReturnCode/2","ref":"wxDialog.html#showModal/1","title":"wxDialog.showModal/1","type":"function"},{"doc":"","ref":"wxDialog.html#t:wxDialog/0","title":"wxDialog.wxDialog/0","type":"type"},{"doc":"This class represents the directory chooser dialog. Styles This class supports the following styles: Note: This flag cannot be used with the wxDD_MULTIPLE style. Remark: MacOS 10.11+ does not display a title bar on the dialog. Use setMessage/2 to change the string displayed to the user at the top of the dialog after creation. The wxTopLevelWindow:setTitle/2 method is provided for compatibility with pre-10.11 MacOS versions that do still support displaying the title bar. See: Overview cmndlg , wxFileDialog This class is derived (and can use functions) from: wxDialog wxTopLevelWindow wxWindow wxEvtHandler wxWidgets docs: wxDirDialog","ref":"wxDirDialog.html","title":"wxDirDialog","type":"module"},{"doc":"Destructor.","ref":"wxDirDialog.html#destroy/1","title":"wxDirDialog.destroy/1","type":"function"},{"doc":"Returns the message that will be displayed on the dialog.","ref":"wxDirDialog.html#getMessage/1","title":"wxDirDialog.getMessage/1","type":"function"},{"doc":"Returns the default or user-selected path. Note: This function can't be used with dialogs which have the wxDD_MULTIPLE style, use GetPaths() (not implemented in wx) instead.","ref":"wxDirDialog.html#getPath/1","title":"wxDirDialog.getPath/1","type":"function"},{"doc":"","ref":"wxDirDialog.html#new/1","title":"wxDirDialog.new/1","type":"function"},{"doc":"Constructor. Use wxDialog:showModal/1 to show the dialog.","ref":"wxDirDialog.html#new/2","title":"wxDirDialog.new/2","type":"function"},{"doc":"Sets the message that will be displayed on the dialog.","ref":"wxDirDialog.html#setMessage/2","title":"wxDirDialog.setMessage/2","type":"function"},{"doc":"Sets the default path.","ref":"wxDirDialog.html#setPath/2","title":"wxDirDialog.setPath/2","type":"function"},{"doc":"","ref":"wxDirDialog.html#t:wxDirDialog/0","title":"wxDirDialog.wxDirDialog/0","type":"type"},{"doc":"This control allows the user to select a directory. The generic implementation is a button which brings up a wxDirDialog when clicked. Native implementation may differ but this is usually a (small) widget which give access to the dir-chooser dialog. It is only available if wxUSE_DIRPICKERCTRL is set to 1 (the default). Styles This class supports the following styles: See: wxDirDialog , wxFileDirPickerEvent This class is derived (and can use functions) from: wxPickerBase wxControl wxWindow wxEvtHandler wxWidgets docs: wxDirPickerCtrl Events Event types emitted from this class: command_dirpicker_changed","ref":"wxDirPickerCtrl.html","title":"wxDirPickerCtrl","type":"module"},{"doc":"","ref":"wxDirPickerCtrl.html#create/3","title":"wxDirPickerCtrl.create/3","type":"function"},{"doc":"Creates the widgets with the given parameters. Return: true if the control was successfully created or false if creation failed.","ref":"wxDirPickerCtrl.html#create/4","title":"wxDirPickerCtrl.create/4","type":"function"},{"doc":"Destroys the object.","ref":"wxDirPickerCtrl.html#destroy/1","title":"wxDirPickerCtrl.destroy/1","type":"function"},{"doc":"Returns the absolute path of the currently selected directory.","ref":"wxDirPickerCtrl.html#getPath/1","title":"wxDirPickerCtrl.getPath/1","type":"function"},{"doc":"","ref":"wxDirPickerCtrl.html#new/0","title":"wxDirPickerCtrl.new/0","type":"function"},{"doc":"","ref":"wxDirPickerCtrl.html#new/2","title":"wxDirPickerCtrl.new/2","type":"function"},{"doc":"Initializes the object and calls create/4 with all the parameters.","ref":"wxDirPickerCtrl.html#new/3","title":"wxDirPickerCtrl.new/3","type":"function"},{"doc":"Sets the absolute path of the currently selected directory. If the control uses wxDIRP_DIR_MUST_EXIST and does not use wxDIRP_USE_TEXTCTRL style, the dirname must be a name of an existing directory and will be simply ignored by the native wxGTK implementation if this is not the case.","ref":"wxDirPickerCtrl.html#setPath/2","title":"wxDirPickerCtrl.setPath/2","type":"function"},{"doc":"","ref":"wxDirPickerCtrl.html#t:wxDirPickerCtrl/0","title":"wxDirPickerCtrl.wxDirPickerCtrl/0","type":"type"},{"doc":"Determines the sizes and locations of displays connected to the system. wxWidgets docs: wxDisplay","ref":"wxDisplay.html","title":"wxDisplay","type":"module"},{"doc":"Destructor.","ref":"wxDisplay.html#destroy/1","title":"wxDisplay.destroy/1","type":"function"},{"doc":"Returns the client area of the display. The client area is the part of the display available for the normal (non full screen) windows, usually it is the same as getGeometry/1 but it could be less if there is a taskbar (or equivalent) on this display.","ref":"wxDisplay.html#getClientArea/1","title":"wxDisplay.getClientArea/1","type":"function"},{"doc":"Returns the number of connected displays.","ref":"wxDisplay.html#getCount/0","title":"wxDisplay.getCount/0","type":"function"},{"doc":"Returns the index of the display on which the given point lies, or wxNOT_FOUND if the point is not on any connected display.","ref":"wxDisplay.html#getFromPoint/1","title":"wxDisplay.getFromPoint/1","type":"function"},{"doc":"Returns the index of the display on which the given window lies. If the window is on more than one display it gets the display that overlaps the window the most. Returns wxNOT_FOUND if the window is not on any connected display.","ref":"wxDisplay.html#getFromWindow/1","title":"wxDisplay.getFromWindow/1","type":"function"},{"doc":"Returns the bounding rectangle of the display whose index was passed to the constructor. See: getClientArea/1 , wx_misc:displaySize/0","ref":"wxDisplay.html#getGeometry/1","title":"wxDisplay.getGeometry/1","type":"function"},{"doc":"Returns the display's name. The returned value is currently an empty string under all platforms except MSW.","ref":"wxDisplay.html#getName/1","title":"wxDisplay.getName/1","type":"function"},{"doc":"Returns display resolution in pixels per inch. Horizontal and vertical resolution are returned in x and y components of the {Width,Height} object respectively. If the resolution information is not available, returns. Since: 3.1.2","ref":"wxDisplay.html#getPPI/1","title":"wxDisplay.getPPI/1","type":"function"},{"doc":"Returns true if the object was initialized successfully.","ref":"wxDisplay.html#isOk/1","title":"wxDisplay.isOk/1","type":"function"},{"doc":"Returns true if the display is the primary display. The primary display is the one whose index is 0.","ref":"wxDisplay.html#isPrimary/1","title":"wxDisplay.isPrimary/1","type":"function"},{"doc":"Default constructor creating wxDisplay object representing the primary display.","ref":"wxDisplay.html#new/0","title":"wxDisplay.new/0","type":"function"},{"doc":"Constructor creating the display object associated with the given window. This is the most convenient way of finding the display on which the given window is shown while falling back to the default display if it is not shown at all or positioned outside of any display. See: getFromWindow/1 Since: 3.1.2","ref":"wxDisplay.html#new/1","title":"wxDisplay.new/1","type":"function"},{"doc":"","ref":"wxDisplay.html#t:wxDisplay/0","title":"wxDisplay.wxDisplay/0","type":"type"},{"doc":"A display changed event is sent to top-level windows when the display resolution has changed. This event is currently emitted under Windows only. Only for:wxmsw See: wxDisplay This class is derived (and can use functions) from: wxEvent wxWidgets docs: wxDisplayChangedEvent Events Use wxEvtHandler:connect/3 with wxDisplayChangedEventType to subscribe to events of this type.","ref":"wxDisplayChangedEvent.html","title":"wxDisplayChangedEvent","type":"module"},{"doc":"","ref":"wxDisplayChangedEvent.html#t:wxDisplayChanged/0","title":"wxDisplayChangedEvent.wxDisplayChanged/0","type":"type"},{"doc":"","ref":"wxDisplayChangedEvent.html#t:wxDisplayChangedEvent/0","title":"wxDisplayChangedEvent.wxDisplayChangedEvent/0","type":"type"},{"doc":"","ref":"wxDisplayChangedEvent.html#t:wxDisplayChangedEventType/0","title":"wxDisplayChangedEvent.wxDisplayChangedEventType/0","type":"type"},{"doc":"This class is used for drop files events, that is, when files have been dropped onto the window. The window must have previously been enabled for dropping by calling wxWindow:dragAcceptFiles/2 . Important note: this is a separate implementation to the more general drag and drop implementation documented in the overview_dnd. It uses the older, Windows message-based approach of dropping files. Remark: Windows only until version 2.8.9, available on all platforms since 2.8.10. See: Overview events , wxWindow:dragAcceptFiles/2 This class is derived (and can use functions) from: wxEvent wxWidgets docs: wxDropFilesEvent Events Use wxEvtHandler:connect/3 with wxDropFilesEventType to subscribe to events of this type.","ref":"wxDropFilesEvent.html","title":"wxDropFilesEvent","type":"module"},{"doc":"Returns an array of filenames.","ref":"wxDropFilesEvent.html#getFiles/1","title":"wxDropFilesEvent.getFiles/1","type":"function"},{"doc":"Returns the number of files dropped.","ref":"wxDropFilesEvent.html#getNumberOfFiles/1","title":"wxDropFilesEvent.getNumberOfFiles/1","type":"function"},{"doc":"Returns the position at which the files were dropped. Returns an array of filenames.","ref":"wxDropFilesEvent.html#getPosition/1","title":"wxDropFilesEvent.getPosition/1","type":"function"},{"doc":"","ref":"wxDropFilesEvent.html#t:wxDropFiles/0","title":"wxDropFilesEvent.wxDropFiles/0","type":"type"},{"doc":"","ref":"wxDropFilesEvent.html#t:wxDropFilesEvent/0","title":"wxDropFilesEvent.wxDropFilesEvent/0","type":"type"},{"doc":"","ref":"wxDropFilesEvent.html#t:wxDropFilesEventType/0","title":"wxDropFilesEvent.wxDropFilesEventType/0","type":"type"},{"doc":"An erase event is sent when a window's background needs to be repainted. On some platforms, such as GTK+, this event is simulated (simply generated just before the paint event) and may cause flicker. It is therefore recommended that you set the text background colour explicitly in order to prevent flicker. The default background colour under GTK+ is grey. To intercept this event, use the EVT_ERASE_BACKGROUND macro in an event table definition. You must use the device context returned by getDC/1 to draw on, don't create a wxPaintDC in the event handler. See: Overview events This class is derived (and can use functions) from: wxEvent wxWidgets docs: wxEraseEvent Events Use wxEvtHandler:connect/3 with wxEraseEventType to subscribe to events of this type.","ref":"wxEraseEvent.html","title":"wxEraseEvent","type":"module"},{"doc":"Returns the device context associated with the erase event to draw on. The returned pointer is never NULL.","ref":"wxEraseEvent.html#getDC/1","title":"wxEraseEvent.getDC/1","type":"function"},{"doc":"","ref":"wxEraseEvent.html#t:wxErase/0","title":"wxEraseEvent.wxErase/0","type":"type"},{"doc":"","ref":"wxEraseEvent.html#t:wxEraseEvent/0","title":"wxEraseEvent.wxEraseEvent/0","type":"type"},{"doc":"","ref":"wxEraseEvent.html#t:wxEraseEventType/0","title":"wxEraseEvent.wxEraseEventType/0","type":"type"},{"doc":"An event is a structure holding information about an event passed to a callback or member function. wxEvent used to be a multipurpose event object, and is an abstract base class for other event classes (see below). For more information about events, see the overview_events overview. See: wxCommandEvent , wxMouseEvent wxWidgets docs: wxEvent","ref":"wxEvent.html","title":"wxEvent","type":"module"},{"doc":"Returns the identifier associated with this event, such as a button command id.","ref":"wxEvent.html#getId/1","title":"wxEvent.getId/1","type":"function"},{"doc":"Returns true if the event handler should be skipped, false otherwise.","ref":"wxEvent.html#getSkipped/1","title":"wxEvent.getSkipped/1","type":"function"},{"doc":"Gets the timestamp for the event. The timestamp is the time in milliseconds since some fixed moment (not necessarily the standard Unix Epoch, so only differences between the timestamps and not their absolute values usually make sense). Warning: wxWidgets returns a non-NULL timestamp only for mouse and key events (see wxMouseEvent and wxKeyEvent ).","ref":"wxEvent.html#getTimestamp/1","title":"wxEvent.getTimestamp/1","type":"function"},{"doc":"Returns true if the event is or is derived from wxCommandEvent else it returns false. Note: exists only for optimization purposes.","ref":"wxEvent.html#isCommandEvent/1","title":"wxEvent.isCommandEvent/1","type":"function"},{"doc":"Sets the propagation level to the given value (for example returned from an earlier call to stopPropagation/1 ).","ref":"wxEvent.html#resumePropagation/2","title":"wxEvent.resumePropagation/2","type":"function"},{"doc":"Test if this event should be propagated or not, i.e. if the propagation level is currently greater than 0.","ref":"wxEvent.html#shouldPropagate/1","title":"wxEvent.shouldPropagate/1","type":"function"},{"doc":"","ref":"wxEvent.html#skip/1","title":"wxEvent.skip/1","type":"function"},{"doc":"This method can be used inside an event handler to control whether further event handlers bound to this event will be called after the current one returns. Without skip/2 (or equivalently if Skip(false) is used), the event will not be processed any more. If Skip(true) is called, the event processing system continues searching for a further handler function for this event, even though it has been processed already in the current handler. In general, it is recommended to skip all non-command events to allow the default handling to take place. The command events are, however, normally not skipped as usually a single command such as a button click or menu item selection must only be processed by one handler.","ref":"wxEvent.html#skip/2","title":"wxEvent.skip/2","type":"function"},{"doc":"Stop the event from propagating to its parent window. Returns the old propagation level value which may be later passed to resumePropagation/2 to allow propagating the event again.","ref":"wxEvent.html#stopPropagation/1","title":"wxEvent.stopPropagation/1","type":"function"},{"doc":"","ref":"wxEvent.html#t:wxEvent/0","title":"wxEvent.wxEvent/0","type":"type"},{"doc":"A class that can handle events from the windowing system. wxWindow is (and therefore all window classes are) derived from this class. To get events from wxwidgets objects you subscribe to them by calling connect/3 . If the callback option is not supplied events are sent as messages. These messages will be #wx{} where EventRecord is a record that depends on the wxEventType . The records are defined in: wx/include/wx.hrl . If a callback was supplied to connect, the callback will be invoked (in another process) to handle the event. The callback should be of arity 2. fun Callback (EventRecord::wx(), EventObject::wxObject()). Note: The callback will be in executed in new process each time. See: Overview events wxWidgets docs: wxEvtHandler","ref":"wxEvtHandler.html","title":"wxEvtHandler","type":"module"},{"doc":"","ref":"wxEvtHandler.html#connect/2","title":"wxEvtHandler.connect/2","type":"function"},{"doc":"This function subscribes to events. Subscribes to events of type EventType , in the range id , lastId . The events will be received as messages if no callback is supplied. Options id: {id, integer()} The identifier (or first of the identifier range) to be associated with this event handler. Default is ?wxID_ANY lastid: {lastId,integer()} The second part of the identifier range. If used 'id' must be set as the starting identifier range. Default is ?wxID_ANY skip: {skip,boolean()} If skip is true further event_handlers will be called. This is not used if the 'callback' option is used. Default is false . callback: {callback,function()} Use a callback fun(EventRecord::wx(),EventObject::wxObject()) to process the event. Default not specfied i.e. a message will be delivered to the process calling this function. userData: {userData,term()} An erlang term that will be sent with the event. Default: [].","ref":"wxEvtHandler.html#connect/3","title":"wxEvtHandler.connect/3","type":"function"},{"doc":"","ref":"wxEvtHandler.html#disconnect/1","title":"wxEvtHandler.disconnect/1","type":"function"},{"doc":"","ref":"wxEvtHandler.html#disconnect/2","title":"wxEvtHandler.disconnect/2","type":"function"},{"doc":"This function unsubscribes the process or callback fun from the event handler. EventType may be the atom 'null' to match any eventtype. Notice that the options skip and userdata is not used to match the eventhandler.","ref":"wxEvtHandler.html#disconnect/3","title":"wxEvtHandler.disconnect/3","type":"function"},{"doc":"","ref":"wxEvtHandler.html#t:event/0","title":"wxEvtHandler.event/0","type":"type"},{"doc":"","ref":"wxEvtHandler.html#t:wx/0","title":"wxEvtHandler.wx/0","type":"type"},{"doc":"","ref":"wxEvtHandler.html#t:wxEventType/0","title":"wxEvtHandler.wxEventType/0","type":"type"},{"doc":"","ref":"wxEvtHandler.html#t:wxEvtHandler/0","title":"wxEvtHandler.wxEvtHandler/0","type":"type"},{"doc":"wxFileDataObject is a specialization of wxDataObject for file names. The program works with it just as if it were a list of absolute file names, but internally it uses the same format as Explorer and other compatible programs under Windows or GNOME/KDE file manager under Unix which makes it possible to receive files from them using this class. See: wxDataObject , wxDataObjectSimple (not implemented in wx), wxTextDataObject , wxBitmapDataObject , wxDataObject This class is derived (and can use functions) from: wxDataObject wxWidgets docs: wxFileDataObject","ref":"wxFileDataObject.html","title":"wxFileDataObject","type":"module"},{"doc":"Adds a file to the file list represented by this data object (Windows only).","ref":"wxFileDataObject.html#addFile/2","title":"wxFileDataObject.addFile/2","type":"function"},{"doc":"Destroys the object.","ref":"wxFileDataObject.html#destroy/1","title":"wxFileDataObject.destroy/1","type":"function"},{"doc":"Returns the array of file names.","ref":"wxFileDataObject.html#getFilenames/1","title":"wxFileDataObject.getFilenames/1","type":"function"},{"doc":"Constructor.","ref":"wxFileDataObject.html#new/0","title":"wxFileDataObject.new/0","type":"function"},{"doc":"","ref":"wxFileDataObject.html#t:wxFileDataObject/0","title":"wxFileDataObject.wxFileDataObject/0","type":"type"},{"doc":"This class represents the file chooser dialog. The path and filename are distinct elements of a full file pathname. If path is ?wxEmptyString, the current directory will be used. If filename is ?wxEmptyString, no default filename will be supplied. The wildcard determines what files are displayed in the file selector, and file extension supplies a type extension for the required filename. The typical usage for the open file dialog is: The typical usage for the save file dialog is instead somewhat simpler: Remark: All implementations of the wxFileDialog provide a wildcard filter. Typing a filename containing wildcards (*, ?) in the filename text item, and clicking on Ok, will result in only those files matching the pattern being displayed. The wildcard may be a specification for multiple types of file with a description for each, such as: It must be noted that wildcard support in the native Motif file dialog is quite limited: only one file type is supported, and it is displayed without the descriptive test; &quot;BMP files (*.bmp)|*.bmp&quot; is displayed as &quot;*.bmp&quot;, and both &quot;BMP files (*.bmp)|*.bmp|GIF files (*.gif)|*.gif&quot; and &quot;Image files|*.bmp;*.gif&quot; are errors. On Mac macOS in the open file dialog the filter choice box is not shown by default. Instead all given wildcards are appplied at the same time: So in the above example all bmp, gif and png files are displayed. To enforce the display of the filter choice set the corresponding wxSystemOptions before calling the file open dialog: But in contrast to Windows and Unix, where the file type choice filters only the selected files, on Mac macOS even in this case the dialog shows all files matching all file types. The files which does not match the currently selected file type are greyed out and are not selectable. Styles This class supports the following styles: See: Overview cmndlg , ?wxFileSelector() This class is derived (and can use functions) from: wxDialog wxTopLevelWindow wxWindow wxEvtHandler wxWidgets docs: wxFileDialog","ref":"wxFileDialog.html","title":"wxFileDialog","type":"module"},{"doc":"Destructor.","ref":"wxFileDialog.html#destroy/1","title":"wxFileDialog.destroy/1","type":"function"},{"doc":"Returns the default directory.","ref":"wxFileDialog.html#getDirectory/1","title":"wxFileDialog.getDirectory/1","type":"function"},{"doc":"Returns the default filename. Note: This function can't be used with dialogs which have the wxFD_MULTIPLE style, use getFilenames/1 instead.","ref":"wxFileDialog.html#getFilename/1","title":"wxFileDialog.getFilename/1","type":"function"},{"doc":"Fills the array filenames with the names of the files chosen. This function should only be used with the dialogs which have wxFD_MULTIPLE style, use getFilename/1 for the others. Note that under Windows, if the user selects shortcuts, the filenames include paths, since the application cannot determine the full path of each referenced file by appending the directory containing the shortcuts to the filename.","ref":"wxFileDialog.html#getFilenames/1","title":"wxFileDialog.getFilenames/1","type":"function"},{"doc":"Returns the index into the list of filters supplied, optionally, in the wildcard parameter. Before the dialog is shown, this is the index which will be used when the dialog is first displayed. After the dialog is shown, this is the index selected by the user.","ref":"wxFileDialog.html#getFilterIndex/1","title":"wxFileDialog.getFilterIndex/1","type":"function"},{"doc":"Returns the message that will be displayed on the dialog.","ref":"wxFileDialog.html#getMessage/1","title":"wxFileDialog.getMessage/1","type":"function"},{"doc":"Returns the full path (directory and filename) of the selected file. Note: This function can't be used with dialogs which have the wxFD_MULTIPLE style, use getPaths/1 instead.","ref":"wxFileDialog.html#getPath/1","title":"wxFileDialog.getPath/1","type":"function"},{"doc":"Fills the array paths with the full paths of the files chosen. This function should only be used with the dialogs which have wxFD_MULTIPLE style, use getPath/1 for the others.","ref":"wxFileDialog.html#getPaths/1","title":"wxFileDialog.getPaths/1","type":"function"},{"doc":"Returns the file dialog wildcard.","ref":"wxFileDialog.html#getWildcard/1","title":"wxFileDialog.getWildcard/1","type":"function"},{"doc":"","ref":"wxFileDialog.html#new/1","title":"wxFileDialog.new/1","type":"function"},{"doc":"Constructor. Use wxDialog:showModal/1 to show the dialog.","ref":"wxFileDialog.html#new/2","title":"wxFileDialog.new/2","type":"function"},{"doc":"Sets the default directory.","ref":"wxFileDialog.html#setDirectory/2","title":"wxFileDialog.setDirectory/2","type":"function"},{"doc":"Sets the default filename. In wxGTK this will have little effect unless a default directory has previously been set.","ref":"wxFileDialog.html#setFilename/2","title":"wxFileDialog.setFilename/2","type":"function"},{"doc":"Sets the default filter index, starting from zero.","ref":"wxFileDialog.html#setFilterIndex/2","title":"wxFileDialog.setFilterIndex/2","type":"function"},{"doc":"Sets the message that will be displayed on the dialog.","ref":"wxFileDialog.html#setMessage/2","title":"wxFileDialog.setMessage/2","type":"function"},{"doc":"Sets the path (the combined directory and filename that will be returned when the dialog is dismissed).","ref":"wxFileDialog.html#setPath/2","title":"wxFileDialog.setPath/2","type":"function"},{"doc":"Sets the wildcard, which can contain multiple file types, for example: &quot;BMP files (*.bmp)|*.bmp|GIF files (*.gif)|*.gif&quot;. Note that the native Motif dialog has some limitations with respect to wildcards; see the Remarks section above.","ref":"wxFileDialog.html#setWildcard/2","title":"wxFileDialog.setWildcard/2","type":"function"},{"doc":"","ref":"wxFileDialog.html#t:wxFileDialog/0","title":"wxFileDialog.wxFileDialog/0","type":"type"},{"doc":"This event class is used for the events generated by wxFilePickerCtrl and by wxDirPickerCtrl . See: wxFilePickerCtrl , wxDirPickerCtrl This class is derived (and can use functions) from: wxCommandEvent wxEvent wxWidgets docs: wxFileDirPickerEvent Events Use wxEvtHandler:connect/3 with wxFileDirPickerEventType to subscribe to events of this type.","ref":"wxFileDirPickerEvent.html","title":"wxFileDirPickerEvent","type":"module"},{"doc":"Retrieve the absolute path of the file/directory the user has just selected.","ref":"wxFileDirPickerEvent.html#getPath/1","title":"wxFileDirPickerEvent.getPath/1","type":"function"},{"doc":"","ref":"wxFileDirPickerEvent.html#t:wxFileDirPicker/0","title":"wxFileDirPickerEvent.wxFileDirPicker/0","type":"type"},{"doc":"","ref":"wxFileDirPickerEvent.html#t:wxFileDirPickerEvent/0","title":"wxFileDirPickerEvent.wxFileDirPickerEvent/0","type":"type"},{"doc":"","ref":"wxFileDirPickerEvent.html#t:wxFileDirPickerEventType/0","title":"wxFileDirPickerEvent.wxFileDirPickerEventType/0","type":"type"},{"doc":"This control allows the user to select a file. The generic implementation is a button which brings up a wxFileDialog when clicked. Native implementation may differ but this is usually a (small) widget which give access to the file-chooser dialog. It is only available if wxUSE_FILEPICKERCTRL is set to 1 (the default). Styles This class supports the following styles: See: wxFileDialog , wxFileDirPickerEvent This class is derived (and can use functions) from: wxPickerBase wxControl wxWindow wxEvtHandler wxWidgets docs: wxFilePickerCtrl Events Event types emitted from this class: command_filepicker_changed","ref":"wxFilePickerCtrl.html","title":"wxFilePickerCtrl","type":"module"},{"doc":"","ref":"wxFilePickerCtrl.html#create/3","title":"wxFilePickerCtrl.create/3","type":"function"},{"doc":"Creates this widget with the given parameters. Return: true if the control was successfully created or false if creation failed.","ref":"wxFilePickerCtrl.html#create/4","title":"wxFilePickerCtrl.create/4","type":"function"},{"doc":"Destroys the object.","ref":"wxFilePickerCtrl.html#destroy/1","title":"wxFilePickerCtrl.destroy/1","type":"function"},{"doc":"Returns the absolute path of the currently selected file.","ref":"wxFilePickerCtrl.html#getPath/1","title":"wxFilePickerCtrl.getPath/1","type":"function"},{"doc":"","ref":"wxFilePickerCtrl.html#new/0","title":"wxFilePickerCtrl.new/0","type":"function"},{"doc":"","ref":"wxFilePickerCtrl.html#new/2","title":"wxFilePickerCtrl.new/2","type":"function"},{"doc":"Initializes the object and calls create/4 with all the parameters.","ref":"wxFilePickerCtrl.html#new/3","title":"wxFilePickerCtrl.new/3","type":"function"},{"doc":"Sets the absolute path of the currently selected file. If the control uses wxFLP_FILE_MUST_EXIST and does not use wxFLP_USE_TEXTCTRL style, the filename must be a name of an existing file and will be simply ignored by the native wxGTK implementation if this is not the case (the generic implementation used under the other platforms accepts even invalid file names currently, but this is subject to change in the future, don't rely on being able to use non-existent paths with it).","ref":"wxFilePickerCtrl.html#setPath/2","title":"wxFilePickerCtrl.setPath/2","type":"function"},{"doc":"","ref":"wxFilePickerCtrl.html#t:wxFilePickerCtrl/0","title":"wxFilePickerCtrl.wxFilePickerCtrl/0","type":"type"},{"doc":"wxFindReplaceData holds the data for wxFindReplaceDialog . It is used to initialize the dialog with the default values and will keep the last values from the dialog when it is closed. It is also updated each time a wxFindDialogEvent (not implemented in wx) is generated so instead of using the wxFindDialogEvent (not implemented in wx) methods you can also directly query this object. Note that all SetXXX() methods may only be called before showing the dialog and calling them has no effect later. wxWidgets docs: wxFindReplaceData","ref":"wxFindReplaceData.html","title":"wxFindReplaceData","type":"module"},{"doc":"Destroys the object.","ref":"wxFindReplaceData.html#destroy/1","title":"wxFindReplaceData.destroy/1","type":"function"},{"doc":"Get the string to find.","ref":"wxFindReplaceData.html#getFindString/1","title":"wxFindReplaceData.getFindString/1","type":"function"},{"doc":"Get the combination of wxFindReplaceFlags values.","ref":"wxFindReplaceData.html#getFlags/1","title":"wxFindReplaceData.getFlags/1","type":"function"},{"doc":"Get the replacement string.","ref":"wxFindReplaceData.html#getReplaceString/1","title":"wxFindReplaceData.getReplaceString/1","type":"function"},{"doc":"","ref":"wxFindReplaceData.html#new/0","title":"wxFindReplaceData.new/0","type":"function"},{"doc":"Constructor initializes the flags to default value (0).","ref":"wxFindReplaceData.html#new/1","title":"wxFindReplaceData.new/1","type":"function"},{"doc":"Set the string to find (used as initial value by the dialog).","ref":"wxFindReplaceData.html#setFindString/2","title":"wxFindReplaceData.setFindString/2","type":"function"},{"doc":"Set the flags to use to initialize the controls of the dialog.","ref":"wxFindReplaceData.html#setFlags/2","title":"wxFindReplaceData.setFlags/2","type":"function"},{"doc":"Set the replacement string (used as initial value by the dialog).","ref":"wxFindReplaceData.html#setReplaceString/2","title":"wxFindReplaceData.setReplaceString/2","type":"function"},{"doc":"","ref":"wxFindReplaceData.html#t:wxFindReplaceData/0","title":"wxFindReplaceData.wxFindReplaceData/0","type":"type"},{"doc":"wxFindReplaceDialog is a standard modeless dialog which is used to allow the user to search for some text (and possibly replace it with something else). The actual searching is supposed to be done in the owner window which is the parent of this dialog. Note that it means that unlike for the other standard dialogs this one must have a parent window. Also note that there is no way to use this dialog in a modal way; it is always, by design and implementation, modeless. Please see the page_samples_dialogs sample for an example of using it. This class is derived (and can use functions) from: wxDialog wxTopLevelWindow wxWindow wxEvtHandler wxWidgets docs: wxFindReplaceDialog","ref":"wxFindReplaceDialog.html","title":"wxFindReplaceDialog","type":"module"},{"doc":"","ref":"wxFindReplaceDialog.html#create/4","title":"wxFindReplaceDialog.create/4","type":"function"},{"doc":"Creates the dialog; use wxWindow:show/2 to show it on screen. The parent and data parameters must be non-NULL.","ref":"wxFindReplaceDialog.html#create/5","title":"wxFindReplaceDialog.create/5","type":"function"},{"doc":"Destructor.","ref":"wxFindReplaceDialog.html#destroy/1","title":"wxFindReplaceDialog.destroy/1","type":"function"},{"doc":"Get the wxFindReplaceData object used by this dialog.","ref":"wxFindReplaceDialog.html#getData/1","title":"wxFindReplaceDialog.getData/1","type":"function"},{"doc":"","ref":"wxFindReplaceDialog.html#new/0","title":"wxFindReplaceDialog.new/0","type":"function"},{"doc":"","ref":"wxFindReplaceDialog.html#new/3","title":"wxFindReplaceDialog.new/3","type":"function"},{"doc":"After using default constructor create/5 must be called. The parent and data parameters must be non-NULL.","ref":"wxFindReplaceDialog.html#new/4","title":"wxFindReplaceDialog.new/4","type":"function"},{"doc":"","ref":"wxFindReplaceDialog.html#t:wxFindReplaceDialog/0","title":"wxFindReplaceDialog.wxFindReplaceDialog/0","type":"type"},{"doc":"A flex grid sizer is a sizer which lays out its children in a two-dimensional table with all table fields in one row having the same height and all fields in one column having the same width, but all rows or all columns are not necessarily the same height or width as in the wxGridSizer . Since wxWidgets 2.5.0, wxFlexGridSizer can also size items equally in one direction but unequally (&quot;flexibly&quot;) in the other. If the sizer is only flexible in one direction (this can be changed using setFlexibleDirection/2 ), it needs to be decided how the sizer should grow in the other (&quot;non-flexible&quot;) direction in order to fill the available space. The setNonFlexibleGrowMode/2 method serves this purpose. See: wxSizer , Overview sizer This class is derived (and can use functions) from: wxGridSizer wxSizer wxWidgets docs: wxFlexGridSizer","ref":"wxFlexGridSizer.html","title":"wxFlexGridSizer","type":"module"},{"doc":"","ref":"wxFlexGridSizer.html#addGrowableCol/2","title":"wxFlexGridSizer.addGrowableCol/2","type":"function"},{"doc":"Specifies that column idx (starting from zero) should be grown if there is extra space available to the sizer. The proportion parameter has the same meaning as the stretch factor for the sizers (see wxBoxSizer ) except that if all proportions are 0, then all columns are resized equally (instead of not being resized at all). Notice that the column must not be already growable, if you need to change the proportion you must call removeGrowableCol/2 first and then make it growable (with a different proportion) again. You can use IsColGrowable() (not implemented in wx) to check whether a column is already growable.","ref":"wxFlexGridSizer.html#addGrowableCol/3","title":"wxFlexGridSizer.addGrowableCol/3","type":"function"},{"doc":"","ref":"wxFlexGridSizer.html#addGrowableRow/2","title":"wxFlexGridSizer.addGrowableRow/2","type":"function"},{"doc":"Specifies that row idx (starting from zero) should be grown if there is extra space available to the sizer. This is identical to addGrowableCol/3 except that it works with rows and not columns.","ref":"wxFlexGridSizer.html#addGrowableRow/3","title":"wxFlexGridSizer.addGrowableRow/3","type":"function"},{"doc":"Destroys the object.","ref":"wxFlexGridSizer.html#destroy/1","title":"wxFlexGridSizer.destroy/1","type":"function"},{"doc":"Returns a ?wxOrientation value that specifies whether the sizer flexibly resizes its columns, rows, or both (default). Return: One of the following values: See: setFlexibleDirection/2","ref":"wxFlexGridSizer.html#getFlexibleDirection/1","title":"wxFlexGridSizer.getFlexibleDirection/1","type":"function"},{"doc":"Returns the value that specifies how the sizer grows in the &quot;non-flexible&quot; direction if there is one. The behaviour of the elements in the flexible direction (i.e. both rows and columns by default, or rows only if getFlexibleDirection/1 is wxVERTICAL or columns only if it is wxHORIZONTAL ) is always governed by their proportion as specified in the call to addGrowableRow/3 or addGrowableCol/3 . What happens in the other direction depends on the value of returned by this function as described below. Return: One of the following values: See: setFlexibleDirection/2 , setNonFlexibleGrowMode/2","ref":"wxFlexGridSizer.html#getNonFlexibleGrowMode/1","title":"wxFlexGridSizer.getNonFlexibleGrowMode/1","type":"function"},{"doc":"","ref":"wxFlexGridSizer.html#new/1","title":"wxFlexGridSizer.new/1","type":"function"},{"doc":"","ref":"wxFlexGridSizer.html#new/2","title":"wxFlexGridSizer.new/2","type":"function"},{"doc":"","ref":"wxFlexGridSizer.html#new/3","title":"wxFlexGridSizer.new/3","type":"function"},{"doc":"","ref":"wxFlexGridSizer.html#new/4","title":"wxFlexGridSizer.new/4","type":"function"},{"doc":"Specifies that the idx column index is no longer growable.","ref":"wxFlexGridSizer.html#removeGrowableCol/2","title":"wxFlexGridSizer.removeGrowableCol/2","type":"function"},{"doc":"Specifies that the idx row index is no longer growable.","ref":"wxFlexGridSizer.html#removeGrowableRow/2","title":"wxFlexGridSizer.removeGrowableRow/2","type":"function"},{"doc":"Specifies whether the sizer should flexibly resize its columns, rows, or both. Argument direction can be wxVERTICAL , wxHORIZONTAL or wxBOTH (which is the default value). Any other value is ignored. See getFlexibleDirection/1 for the explanation of these values. Note that this method does not trigger relayout.","ref":"wxFlexGridSizer.html#setFlexibleDirection/2","title":"wxFlexGridSizer.setFlexibleDirection/2","type":"function"},{"doc":"Specifies how the sizer should grow in the non-flexible direction if there is one (so setFlexibleDirection/2 must have been called previously). Argument mode can be one of those documented in getNonFlexibleGrowMode/1 , please see there for their explanation. Note that this method does not trigger relayout.","ref":"wxFlexGridSizer.html#setNonFlexibleGrowMode/2","title":"wxFlexGridSizer.setNonFlexibleGrowMode/2","type":"function"},{"doc":"","ref":"wxFlexGridSizer.html#t:wxFlexGridSizer/0","title":"wxFlexGridSizer.wxFlexGridSizer/0","type":"type"},{"doc":"A focus event is sent when a window's focus changes. The window losing focus receives a &quot;kill focus&quot; event while the window gaining it gets a &quot;set focus&quot; one. Notice that the set focus event happens both when the user gives focus to the window (whether using the mouse or keyboard) and when it is done from the program itself using wxWindow:setFocus/1 . The focus event handlers should almost invariably call wxEvent:skip/2 on their event argument to allow the default handling to take place. Failure to do this may result in incorrect behaviour of the native controls. Also note that wxEVT_KILL_FOCUS handler must not call wxWindow:setFocus/1 as this, again, is not supported by all native controls. If you need to do this, consider using the Delayed Action Mechanism (not implemented in wx) described in wxIdleEvent documentation. See: Overview events This class is derived (and can use functions) from: wxEvent wxWidgets docs: wxFocusEvent Events Use wxEvtHandler:connect/3 with wxFocusEventType to subscribe to events of this type.","ref":"wxFocusEvent.html","title":"wxFocusEvent","type":"module"},{"doc":"Returns the window associated with this event, that is the window which had the focus before for the wxEVT_SET_FOCUS event and the window which is going to receive focus for the wxEVT_KILL_FOCUS one. Warning: the window pointer may be NULL!","ref":"wxFocusEvent.html#getWindow/1","title":"wxFocusEvent.getWindow/1","type":"function"},{"doc":"","ref":"wxFocusEvent.html#t:wxFocus/0","title":"wxFocusEvent.wxFocus/0","type":"type"},{"doc":"","ref":"wxFocusEvent.html#t:wxFocusEvent/0","title":"wxFocusEvent.wxFocusEvent/0","type":"type"},{"doc":"","ref":"wxFocusEvent.html#t:wxFocusEventType/0","title":"wxFocusEvent.wxFocusEventType/0","type":"type"},{"doc":"A font is an object which determines the appearance of text. Fonts are used for drawing text to a device context, and setting the appearance of a window's text, see wxDC:setFont/2 and wxWindow:setFont/2 . The easiest way to create a custom font is to use wxFontInfo (not implemented in wx) object to specify the font attributes and then use new/5 constructor. Alternatively, you could start with one of the pre-defined fonts or use wxWindow:getFont/1 and modify the font, e.g. by increasing its size using MakeLarger() (not implemented in wx) or changing its weight using MakeBold() (not implemented in wx). This class uses reference counting and copy-on-write internally so that assignments between two instances of this class are very cheap. You can therefore use actual objects instead of pointers without efficiency problems. If an instance of this class is changed it will create its own data internally so that other instances, which previously shared the data using the reference counting, are not affected. You can retrieve the current system font settings with wxSystemSettings . Predefined objects (include wx.hrl): ?wxNullFont, ?wxNORMAL_FONT, ?wxSMALL_FONT, ?wxITALIC_FONT, ?wxSWISS_FONT See: Overview font , wxDC:setFont/2 , wxDC:drawText/3 , wxDC:getTextExtent/3 , wxFontDialog , wxSystemSettings wxWidgets docs: wxFont","ref":"wxFont.html","title":"wxFont","type":"module"},{"doc":"Destructor. See reference-counted object destruction for more info. Remark: Although all remaining fonts are deleted when the application exits, the application should try to clean up all fonts itself. This is because wxWidgets cannot know if a pointer to the font object is stored in an application data structure, and there is a risk of double deletion.","ref":"wxFont.html#destroy/1","title":"wxFont.destroy/1","type":"function"},{"doc":"Returns the current application's default encoding. See: Overview fontencoding , setDefaultEncoding/1","ref":"wxFont.html#getDefaultEncoding/0","title":"wxFont.getDefaultEncoding/0","type":"function"},{"doc":"Returns the face name associated with the font, or the empty string if there is no face information. See: setFaceName/2","ref":"wxFont.html#getFaceName/1","title":"wxFont.getFaceName/1","type":"function"},{"doc":"Gets the font family if possible. As described in ?wxFontFamily docs the returned value acts as a rough, basic classification of the main font properties (look, spacing). If the current font face name is not recognized by wxFont or by the underlying system, wxFONTFAMILY_DEFAULT is returned. Note that currently this function is not very precise and so not particularly useful. Font families mostly make sense only for font creation, see setFamily/2 . See: setFamily/2","ref":"wxFont.html#getFamily/1","title":"wxFont.getFamily/1","type":"function"},{"doc":"Returns the platform-dependent string completely describing this font. Returned string is always non-empty unless the font is invalid (in which case an assert is triggered). Note that the returned string is not meant to be shown or edited by the user: a typical use of this function is for serializing in string-form a wxFont object. See: SetNativeFontInfo() (not implemented in wx), getNativeFontInfoUserDesc/1","ref":"wxFont.html#getNativeFontInfoDesc/1","title":"wxFont.getNativeFontInfoDesc/1","type":"function"},{"doc":"Returns a user-friendly string for this font object. Returned string is always non-empty unless the font is invalid (in which case an assert is triggered). The string does not encode all wxFont infos under all platforms; e.g. under wxMSW the font family is not present in the returned string. Some examples of the formats of returned strings (which are platform-dependent) are in SetNativeFontInfoUserDesc() (not implemented in wx). See: SetNativeFontInfoUserDesc() (not implemented in wx), getNativeFontInfoDesc/1","ref":"wxFont.html#getNativeFontInfoUserDesc/1","title":"wxFont.getNativeFontInfoUserDesc/1","type":"function"},{"doc":"Gets the point size as an integer number. This function is kept for compatibility reasons. New code should use GetFractionalPointSize() (not implemented in wx) and support fractional point sizes. See: setPointSize/2 See: GetFractionalPointSize() (not implemented in wx)","ref":"wxFont.html#getPointSize/1","title":"wxFont.getPointSize/1","type":"function"},{"doc":"Gets the font style. See ?wxFontStyle for a list of valid styles. See: setStyle/2","ref":"wxFont.html#getStyle/1","title":"wxFont.getStyle/1","type":"function"},{"doc":"Returns true if the font is underlined, false otherwise. See: setUnderlined/2","ref":"wxFont.html#getUnderlined/1","title":"wxFont.getUnderlined/1","type":"function"},{"doc":"Gets the font weight. See ?wxFontWeight for a list of valid weight identifiers. See: setWeight/2","ref":"wxFont.html#getWeight/1","title":"wxFont.getWeight/1","type":"function"},{"doc":"Returns true if the font is a fixed width (or monospaced) font, false if it is a proportional one or font is invalid. Note that this function under some platforms is different from just testing for the font family being equal to wxFONTFAMILY_TELETYPE because native platform-specific functions are used for the check (resulting in a more accurate return value).","ref":"wxFont.html#isFixedWidth/1","title":"wxFont.isFixedWidth/1","type":"function"},{"doc":"Returns true if this object is a valid font, false otherwise.","ref":"wxFont.html#isOk/1","title":"wxFont.isOk/1","type":"function"},{"doc":"Default ctor.","ref":"wxFont.html#new/0","title":"wxFont.new/0","type":"function"},{"doc":"Copy constructor, uses reference counting.","ref":"wxFont.html#new/1","title":"wxFont.new/1","type":"function"},{"doc":"","ref":"wxFont.html#new/4","title":"wxFont.new/4","type":"function"},{"doc":"Creates a font object with the specified attributes and size in pixels. Notice that the use of this constructor is often more verbose and less readable than the use of constructor from wxFontInfo (not implemented in wx), consider using that constructor instead. Remark: If the desired font does not exist, the closest match will be chosen. Under Windows, only scalable TrueType fonts are used.","ref":"wxFont.html#new/5","title":"wxFont.new/5","type":"function"},{"doc":"See: isOk/1 .","ref":"wxFont.html#ok/1","title":"wxFont.ok/1","type":"function"},{"doc":"Sets the default font encoding. See: Overview fontencoding , getDefaultEncoding/0","ref":"wxFont.html#setDefaultEncoding/1","title":"wxFont.setDefaultEncoding/1","type":"function"},{"doc":"Sets the facename for the font. Remark: To avoid portability problems, don't rely on a specific face, but specify the font family instead (see ?wxFontFamily and setFamily/2 ). Return: true if the given face name exists; if the face name doesn't exist in the user's system then the font is invalidated (so that isOk/1 will return false) and false is returned. See: getFaceName/1 , setFamily/2","ref":"wxFont.html#setFaceName/2","title":"wxFont.setFaceName/2","type":"function"},{"doc":"Sets the font family. As described in ?wxFontFamily docs the given family value acts as a rough, basic indication of the main font properties (look, spacing). Note that changing the font family results in changing the font face name. See: getFamily/1 , setFaceName/2","ref":"wxFont.html#setFamily/2","title":"wxFont.setFamily/2","type":"function"},{"doc":"Sets the font size in points to an integer value. This is a legacy version of the function only supporting integer point sizes. It can still be used, but to avoid unnecessarily restricting the font size in points to integer values, consider using the new (added in wxWidgets 3.1.2) SetFractionalPointSize() (not implemented in wx) function instead.","ref":"wxFont.html#setPointSize/2","title":"wxFont.setPointSize/2","type":"function"},{"doc":"Sets the font style. See: getStyle/1","ref":"wxFont.html#setStyle/2","title":"wxFont.setStyle/2","type":"function"},{"doc":"Sets underlining. See: getUnderlined/1","ref":"wxFont.html#setUnderlined/2","title":"wxFont.setUnderlined/2","type":"function"},{"doc":"Sets the font weight. See: getWeight/1","ref":"wxFont.html#setWeight/2","title":"wxFont.setWeight/2","type":"function"},{"doc":"","ref":"wxFont.html#t:wxFont/0","title":"wxFont.wxFont/0","type":"type"},{"doc":"This class holds a variety of information related to font dialogs. See: Overview cmndlg , wxFont , wxFontDialog wxWidgets docs: wxFontData","ref":"wxFontData.html","title":"wxFontData","type":"module"},{"doc":"Destroys the object.","ref":"wxFontData.html#destroy/1","title":"wxFontData.destroy/1","type":"function"},{"doc":"Enables or disables &quot;effects&quot; under Windows or generic only. This refers to the controls for manipulating colour, strikeout and underline properties. The default value is true.","ref":"wxFontData.html#enableEffects/2","title":"wxFontData.enableEffects/2","type":"function"},{"doc":"Under Windows, returns a flag determining whether symbol fonts can be selected. Has no effect on other platforms. The default value is true.","ref":"wxFontData.html#getAllowSymbols/1","title":"wxFontData.getAllowSymbols/1","type":"function"},{"doc":"Gets the font chosen by the user if the user pressed OK ( wxFontDialog::ShowModal() (not implemented in wx) returned wxID_OK).","ref":"wxFontData.html#getChosenFont/1","title":"wxFontData.getChosenFont/1","type":"function"},{"doc":"Gets the colour associated with the font dialog. The default value is black.","ref":"wxFontData.html#getColour/1","title":"wxFontData.getColour/1","type":"function"},{"doc":"Determines whether &quot;effects&quot; are enabled under Windows. This refers to the controls for manipulating colour, strikeout and underline properties. The default value is true.","ref":"wxFontData.html#getEnableEffects/1","title":"wxFontData.getEnableEffects/1","type":"function"},{"doc":"Gets the font that will be initially used by the font dialog. This should have previously been set by the application.","ref":"wxFontData.html#getInitialFont/1","title":"wxFontData.getInitialFont/1","type":"function"},{"doc":"Returns true if the Help button will be shown (Windows only). The default value is false.","ref":"wxFontData.html#getShowHelp/1","title":"wxFontData.getShowHelp/1","type":"function"},{"doc":"Constructor. Initializes fontColour to black, showHelp to false, allowSymbols to true, enableEffects to true, minSize to 0 and maxSize to 0.","ref":"wxFontData.html#new/0","title":"wxFontData.new/0","type":"function"},{"doc":"Copy Constructor.","ref":"wxFontData.html#new/1","title":"wxFontData.new/1","type":"function"},{"doc":"Under Windows, determines whether symbol fonts can be selected. Has no effect on other platforms. The default value is true.","ref":"wxFontData.html#setAllowSymbols/2","title":"wxFontData.setAllowSymbols/2","type":"function"},{"doc":"Sets the font that will be returned to the user (for internal use only).","ref":"wxFontData.html#setChosenFont/2","title":"wxFontData.setChosenFont/2","type":"function"},{"doc":"Sets the colour that will be used for the font foreground colour. The default colour is black.","ref":"wxFontData.html#setColour/2","title":"wxFontData.setColour/2","type":"function"},{"doc":"Sets the font that will be initially used by the font dialog.","ref":"wxFontData.html#setInitialFont/2","title":"wxFontData.setInitialFont/2","type":"function"},{"doc":"Sets the valid range for the font point size (Windows only). The default is 0, 0 (unrestricted range).","ref":"wxFontData.html#setRange/3","title":"wxFontData.setRange/3","type":"function"},{"doc":"Determines whether the Help button will be displayed in the font dialog (Windows only). The default value is false.","ref":"wxFontData.html#setShowHelp/2","title":"wxFontData.setShowHelp/2","type":"function"},{"doc":"","ref":"wxFontData.html#t:wxFontData/0","title":"wxFontData.wxFontData/0","type":"type"},{"doc":"This class represents the font chooser dialog. See: Overview cmndlg , wxFontData , ?wxGetFontFromUser() This class is derived (and can use functions) from: wxDialog wxTopLevelWindow wxWindow wxEvtHandler wxWidgets docs: wxFontDialog","ref":"wxFontDialog.html","title":"wxFontDialog","type":"module"},{"doc":"Creates the dialog if the wxFontDialog object had been initialized using the default constructor. Return: true on success and false if an error occurred.","ref":"wxFontDialog.html#create/3","title":"wxFontDialog.create/3","type":"function"},{"doc":"Destroys the object.","ref":"wxFontDialog.html#destroy/1","title":"wxFontDialog.destroy/1","type":"function"},{"doc":"Returns the wxFontData associated with the font dialog.","ref":"wxFontDialog.html#getFontData/1","title":"wxFontDialog.getFontData/1","type":"function"},{"doc":"Default ctor. create/3 must be called before the dialog can be shown.","ref":"wxFontDialog.html#new/0","title":"wxFontDialog.new/0","type":"function"},{"doc":"Constructor. Pass a parent window, and the wxFontData object to be used to initialize the dialog controls.","ref":"wxFontDialog.html#new/2","title":"wxFontDialog.new/2","type":"function"},{"doc":"","ref":"wxFontDialog.html#t:wxFontDialog/0","title":"wxFontDialog.wxFontDialog/0","type":"type"},{"doc":"This control allows the user to select a font. The generic implementation is a button which brings up a wxFontDialog when clicked. Native implementation may differ but this is usually a (small) widget which give access to the font-chooser dialog. It is only available if wxUSE_FONTPICKERCTRL is set to 1 (the default). Styles This class supports the following styles: See: wxFontDialog , wxFontPickerEvent This class is derived (and can use functions) from: wxPickerBase wxControl wxWindow wxEvtHandler wxWidgets docs: wxFontPickerCtrl Events Event types emitted from this class: command_fontpicker_changed","ref":"wxFontPickerCtrl.html","title":"wxFontPickerCtrl","type":"module"},{"doc":"","ref":"wxFontPickerCtrl.html#create/3","title":"wxFontPickerCtrl.create/3","type":"function"},{"doc":"Creates this widget with given parameters. Return: true if the control was successfully created or false if creation failed.","ref":"wxFontPickerCtrl.html#create/4","title":"wxFontPickerCtrl.create/4","type":"function"},{"doc":"Destroys the object.","ref":"wxFontPickerCtrl.html#destroy/1","title":"wxFontPickerCtrl.destroy/1","type":"function"},{"doc":"Returns the maximum point size value allowed for the user-chosen font.","ref":"wxFontPickerCtrl.html#getMaxPointSize/1","title":"wxFontPickerCtrl.getMaxPointSize/1","type":"function"},{"doc":"Returns the currently selected font. Note that this function is completely different from wxWindow:getFont/1 .","ref":"wxFontPickerCtrl.html#getSelectedFont/1","title":"wxFontPickerCtrl.getSelectedFont/1","type":"function"},{"doc":"","ref":"wxFontPickerCtrl.html#new/0","title":"wxFontPickerCtrl.new/0","type":"function"},{"doc":"","ref":"wxFontPickerCtrl.html#new/2","title":"wxFontPickerCtrl.new/2","type":"function"},{"doc":"Initializes the object and calls create/4 with all the parameters.","ref":"wxFontPickerCtrl.html#new/3","title":"wxFontPickerCtrl.new/3","type":"function"},{"doc":"Sets the maximum point size value allowed for the user-chosen font. The default value is 100. Note that big fonts can require a lot of memory and CPU time both for creation and for rendering; thus, specially because the user has the option to specify the fontsize through a text control (see wxFNTP_USE_TEXTCTRL), it's a good idea to put a limit to the maximum font size when huge fonts do not make much sense.","ref":"wxFontPickerCtrl.html#setMaxPointSize/2","title":"wxFontPickerCtrl.setMaxPointSize/2","type":"function"},{"doc":"Sets the currently selected font. Note that this function is completely different from wxWindow:setFont/2 .","ref":"wxFontPickerCtrl.html#setSelectedFont/2","title":"wxFontPickerCtrl.setSelectedFont/2","type":"function"},{"doc":"","ref":"wxFontPickerCtrl.html#t:wxFontPickerCtrl/0","title":"wxFontPickerCtrl.wxFontPickerCtrl/0","type":"type"},{"doc":"This event class is used for the events generated by wxFontPickerCtrl . See: wxFontPickerCtrl This class is derived (and can use functions) from: wxCommandEvent wxEvent wxWidgets docs: wxFontPickerEvent Events Use wxEvtHandler:connect/3 with wxFontPickerEventType to subscribe to events of this type.","ref":"wxFontPickerEvent.html","title":"wxFontPickerEvent","type":"module"},{"doc":"Retrieve the font the user has just selected.","ref":"wxFontPickerEvent.html#getFont/1","title":"wxFontPickerEvent.getFont/1","type":"function"},{"doc":"","ref":"wxFontPickerEvent.html#t:wxFontPicker/0","title":"wxFontPickerEvent.wxFontPicker/0","type":"type"},{"doc":"","ref":"wxFontPickerEvent.html#t:wxFontPickerEvent/0","title":"wxFontPickerEvent.wxFontPickerEvent/0","type":"type"},{"doc":"","ref":"wxFontPickerEvent.html#t:wxFontPickerEventType/0","title":"wxFontPickerEvent.wxFontPickerEventType/0","type":"type"},{"doc":"A frame is a window whose size and position can (usually) be changed by the user. It usually has thick borders and a title bar, and can optionally contain a menu bar, toolbar and status bar. A frame can contain any window that is not a frame or dialog. A frame that has a status bar and toolbar, created via the createStatusBar/2 and createToolBar/2 functions, manages these windows and adjusts the value returned by wxWindow:getClientSize/1 to reflect the remaining size available to application windows. Remark: An application should normally define an wxCloseEvent handler for the frame to respond to system close events, for example so that related data and subwindows can be cleaned up. Default event processing wxFrame processes the following events: Styles This class supports the following styles: See also the overview_windowstyles. Extra Styles This class supports the following extra styles: See: wxMDIParentFrame , wxMDIChildFrame , wxMiniFrame , wxDialog This class is derived (and can use functions) from: wxTopLevelWindow wxWindow wxEvtHandler wxWidgets docs: wxFrame Events Event types emitted from this class: close_window , iconize , menu_open , menu_close , menu_highlight","ref":"wxFrame.html","title":"wxFrame","type":"module"},{"doc":"","ref":"wxFrame.html#create/4","title":"wxFrame.create/4","type":"function"},{"doc":"Used in two-step frame construction. See new/4 for further details.","ref":"wxFrame.html#create/5","title":"wxFrame.create/5","type":"function"},{"doc":"","ref":"wxFrame.html#createStatusBar/1","title":"wxFrame.createStatusBar/1","type":"function"},{"doc":"Creates a status bar at the bottom of the frame. Return: A pointer to the status bar if it was created successfully, NULL otherwise. Remark: The width of the status bar is the whole width of the frame (adjusted automatically when resizing), and the height and text size are chosen by the host windowing system. See: setStatusText/3 , OnCreateStatusBar() (not implemented in wx), getStatusBar/1","ref":"wxFrame.html#createStatusBar/2","title":"wxFrame.createStatusBar/2","type":"function"},{"doc":"","ref":"wxFrame.html#createToolBar/1","title":"wxFrame.createToolBar/1","type":"function"},{"doc":"Creates a toolbar at the top or left of the frame. Return: A pointer to the toolbar if it was created successfully, NULL otherwise. Remark: By default, the toolbar is an instance of wxToolBar . To use a different class, override OnCreateToolBar() (not implemented in wx). When a toolbar has been created with this function, or made known to the frame with setToolBar/2 , the frame will manage the toolbar position and adjust the return value from wxWindow:getClientSize/1 to reflect the available space for application windows. Under Pocket PC, you should always use this function for creating the toolbar to be managed by the frame, so that wxWidgets can use a combined menubar and toolbar. Where you manage your own toolbars, create a wxToolBar as usual. See: createStatusBar/2 , OnCreateToolBar() (not implemented in wx), setToolBar/2 , getToolBar/1","ref":"wxFrame.html#createToolBar/2","title":"wxFrame.createToolBar/2","type":"function"},{"doc":"Destructor. Destroys all child windows and menu bar if present. See overview_windowdeletion for more info.","ref":"wxFrame.html#destroy/1","title":"wxFrame.destroy/1","type":"function"},{"doc":"Returns the origin of the frame client area (in client coordinates). It may be different from (0, 0) if the frame has a toolbar.","ref":"wxFrame.html#getClientAreaOrigin/1","title":"wxFrame.getClientAreaOrigin/1","type":"function"},{"doc":"Returns a pointer to the menubar currently associated with the frame (if any). See: setMenuBar/2 , wxMenuBar , wxMenu","ref":"wxFrame.html#getMenuBar/1","title":"wxFrame.getMenuBar/1","type":"function"},{"doc":"Returns a pointer to the status bar currently associated with the frame (if any). See: createStatusBar/2 , wxStatusBar","ref":"wxFrame.html#getStatusBar/1","title":"wxFrame.getStatusBar/1","type":"function"},{"doc":"Returns the status bar pane used to display menu and toolbar help. See: setStatusBarPane/2","ref":"wxFrame.html#getStatusBarPane/1","title":"wxFrame.getStatusBarPane/1","type":"function"},{"doc":"Returns a pointer to the toolbar currently associated with the frame (if any). See: createToolBar/2 , wxToolBar , setToolBar/2","ref":"wxFrame.html#getToolBar/1","title":"wxFrame.getToolBar/1","type":"function"},{"doc":"Default constructor.","ref":"wxFrame.html#new/0","title":"wxFrame.new/0","type":"function"},{"doc":"","ref":"wxFrame.html#new/3","title":"wxFrame.new/3","type":"function"},{"doc":"Constructor, creating the window. Remark: For Motif, MWM (the Motif Window Manager) should be running for any window styles to work (otherwise all styles take effect). See: create/5","ref":"wxFrame.html#new/4","title":"wxFrame.new/4","type":"function"},{"doc":"Simulate a menu command.","ref":"wxFrame.html#processCommand/2","title":"wxFrame.processCommand/2","type":"function"},{"doc":"","ref":"wxFrame.html#sendSizeEvent/1","title":"wxFrame.sendSizeEvent/1","type":"function"},{"doc":"This function sends a dummy wxSizeEvent to the window allowing it to re-layout its children positions. It is sometimes useful to call this function after adding or deleting a children after the frame creation or if a child size changes. Note that if the frame is using either sizers or constraints for the children layout, it is enough to call wxWindow:layout/1 directly and this function should not be used in this case. If flags includes wxSEND_EVENT_POST value, this function posts the event, i.e. schedules it for later processing, instead of dispatching it directly. You can also use PostSizeEvent() (not implemented in wx) as a more readable equivalent of calling this function with this flag.","ref":"wxFrame.html#sendSizeEvent/2","title":"wxFrame.sendSizeEvent/2","type":"function"},{"doc":"Tells the frame to show the given menu bar. Remark: If the frame is destroyed, the menu bar and its menus will be destroyed also, so do not delete the menu bar explicitly (except by resetting the frame's menu bar to another frame or NULL). Under Windows, a size event is generated, so be sure to initialize data members properly before calling setMenuBar/2 . Note that on some platforms, it is not possible to call this function twice for the same frame object. See: getMenuBar/1 , wxMenuBar , wxMenu","ref":"wxFrame.html#setMenuBar/2","title":"wxFrame.setMenuBar/2","type":"function"},{"doc":"Associates a status bar with the frame. If statusBar is NULL, then the status bar, if present, is detached from the frame, but not deleted. See: createStatusBar/2 , wxStatusBar , getStatusBar/1","ref":"wxFrame.html#setStatusBar/2","title":"wxFrame.setStatusBar/2","type":"function"},{"doc":"Set the status bar pane used to display menu and toolbar help. Using -1 disables help display.","ref":"wxFrame.html#setStatusBarPane/2","title":"wxFrame.setStatusBarPane/2","type":"function"},{"doc":"","ref":"wxFrame.html#setStatusText/2","title":"wxFrame.setStatusText/2","type":"function"},{"doc":"Sets the status bar text and updates the status bar display. This is a simple wrapper for wxStatusBar:setStatusText/3 which doesn't do anything if the frame has no status bar, i.e. getStatusBar/1 returns NULL. Remark: Use an empty string to clear the status bar. See: createStatusBar/2 , wxStatusBar","ref":"wxFrame.html#setStatusText/3","title":"wxFrame.setStatusText/3","type":"function"},{"doc":"Sets the widths of the fields in the status bar. Remark: The widths of the variable fields are calculated from the total width of all fields, minus the sum of widths of the non-variable fields, divided by the number of variable fields.","ref":"wxFrame.html#setStatusWidths/2","title":"wxFrame.setStatusWidths/2","type":"function"},{"doc":"Associates a toolbar with the frame.","ref":"wxFrame.html#setToolBar/2","title":"wxFrame.setToolBar/2","type":"function"},{"doc":"","ref":"wxFrame.html#t:wxFrame/0","title":"wxFrame.wxFrame/0","type":"type"},{"doc":"The wxGBSizerItem class is used by the wxGridBagSizer for tracking the items in the sizer. It adds grid position and spanning information to the normal wxSizerItem by adding wxGBPosition (not implemented in wx) and wxGBSpan (not implemented in wx) attributes. Most of the time you will not need to use a wxGBSizerItem directly in your code, but there are a couple of cases where it is handy. This class is derived (and can use functions) from: wxSizerItem wxWidgets docs: wxGBSizerItem","ref":"wxGBSizerItem.html","title":"wxGBSizerItem","type":"module"},{"doc":"","ref":"wxGBSizerItem.html#t:wxGBSizerItem/0","title":"wxGBSizerItem.wxGBSizerItem/0","type":"type"},{"doc":"wxGCDC is a device context that draws on a wxGraphicsContext . wxGCDC does its best to implement wxDC API, but the following features are not (fully) implemented because wxGraphicsContext doesn't support them: See: wxDC , wxGraphicsContext This class is derived (and can use functions) from: wxDC wxWidgets docs: wxGCDC","ref":"wxGCDC.html","title":"wxGCDC","type":"module"},{"doc":"","ref":"wxGCDC.html#destroy/1","title":"wxGCDC.destroy/1","type":"function"},{"doc":"Retrieves associated wxGraphicsContext .","ref":"wxGCDC.html#getGraphicsContext/1","title":"wxGCDC.getGraphicsContext/1","type":"function"},{"doc":"","ref":"wxGCDC.html#new/0","title":"wxGCDC.new/0","type":"function"},{"doc":"Constructs a wxGCDC from a wxWindowDC .","ref":"wxGCDC.html#new/1","title":"wxGCDC.new/1","type":"function"},{"doc":"Set the graphics context to be used for this wxGCDC . Note that this object takes ownership of context and will delete it when it is destroyed or when setGraphicsContext/2 is called again. Also, unlike the constructor taking wxGraphicsContext , this method will reapply the current font, pen and brush, so that this object continues to use them, if they had been changed before (which is never the case when constructing wxGCDC directly from wxGraphicsContext ).","ref":"wxGCDC.html#setGraphicsContext/2","title":"wxGCDC.setGraphicsContext/2","type":"function"},{"doc":"","ref":"wxGCDC.html#t:wxGCDC/0","title":"wxGCDC.wxGCDC/0","type":"type"},{"doc":"wxGLCanvas is a class for displaying OpenGL graphics. It is always used in conjunction with wxGLContext as the context can only be made current (i.e. active for the OpenGL commands) when it is associated to a wxGLCanvas . More precisely, you first need to create a wxGLCanvas window and then create an instance of a wxGLContext that is initialized with this wxGLCanvas and then later use either setCurrent/2 with the instance of the wxGLContext or wxGLContext:setCurrent/2 with the instance of the wxGLCanvas (which might be not the same as was used for the creation of the context) to bind the OpenGL state that is represented by the rendering context to the canvas, and then finally call swapBuffers/1 to swap the buffers of the OpenGL canvas and thus show your current output. Please note that wxGLContext always uses physical pixels, even on the platforms where wxWindow uses logical pixels, affected by the coordinate scaling, on high DPI displays. Thus, if you want to set the OpenGL view port to the size of entire window, you must multiply the result returned by wxWindow:getClientSize/1 by wxWindow:getContentScaleFactor/1 before passing it to glViewport() . Same considerations apply to other OpenGL functions and other coordinates, notably those retrieved from wxMouseEvent in the event handlers. Notice that versions of wxWidgets previous to 2.9 used to implicitly create a wxGLContext inside wxGLCanvas itself. This is still supported in the current version but is deprecated now and will be removed in the future, please update your code to create the rendering contexts explicitly. To set up the attributes for the canvas (number of bits for the depth buffer, number of bits for the stencil buffer and so on) you pass them in the constructor using a wxGLAttributes (not implemented in wx) instance. You can still use the way before 3.1.0 (setting up the correct values of the attribList parameter) but it's discouraged. Note: On those platforms which use a configure script (e.g. Linux and macOS) OpenGL support is automatically enabled if the relative headers and libraries are found. To switch it on under the other platforms (e.g. Windows), you need to edit the setup.h file and set wxUSE_GLCANVAS to 1 and then also pass USE_OPENGL=1 to the make utility. You may also need to add opengl32.lib (and glu32.lib for old OpenGL versions) to the list of the libraries your program is linked with. See: wxGLContext , wxGLAttributes (not implemented in wx), wxGLContextAttrs (not implemented in wx) This class is derived (and can use functions) from: wxWindow wxEvtHandler wxWidgets docs: wxGLCanvas","ref":"wxGLCanvas.html","title":"wxGLCanvas","type":"module"},{"doc":"Destroys the object.","ref":"wxGLCanvas.html#destroy/1","title":"wxGLCanvas.destroy/1","type":"function"},{"doc":"","ref":"wxGLCanvas.html#new/1","title":"wxGLCanvas.new/1","type":"function"},{"doc":"This constructor is still available only for compatibility reasons. Please use the constructor with wxGLAttributes (not implemented in wx) instead. If attribList is not specified, wxGLAttributes::PlatformDefaults() (not implemented in wx) is used, plus some other attributes (see below).","ref":"wxGLCanvas.html#new/2","title":"wxGLCanvas.new/2","type":"function"},{"doc":"Makes the OpenGL state that is represented by the OpenGL rendering context context current, i.e. it will be used by all subsequent OpenGL calls. This is equivalent to wxGLContext:setCurrent/2 called with this window as parameter. Note: This function may only be called when the window is shown on screen, in particular it can't usually be called from the constructor as the window isn't yet shown at this moment. Return: false if an error occurred.","ref":"wxGLCanvas.html#setCurrent/2","title":"wxGLCanvas.setCurrent/2","type":"function"},{"doc":"Swaps the double-buffer of this window, making the back-buffer the front-buffer and vice versa, so that the output of the previous OpenGL commands is displayed on the window. Return: false if an error occurred.","ref":"wxGLCanvas.html#swapBuffers/1","title":"wxGLCanvas.swapBuffers/1","type":"function"},{"doc":"","ref":"wxGLCanvas.html#t:wxGLCanvas/0","title":"wxGLCanvas.wxGLCanvas/0","type":"type"},{"doc":"An instance of a wxGLContext represents the state of an OpenGL state machine and the connection between OpenGL and the system. The OpenGL state includes everything that can be set with the OpenGL API: colors, rendering variables, buffer data ids, texture objects, etc. It is possible to have multiple rendering contexts share buffer data and textures. This feature is specially useful when the application use multiple threads for updating data into the memory of the graphics card. Whether one only rendering context is used with or bound to multiple output windows or if each window has its own bound context is a developer decision. It is important to take into account that GPU makers may set different pointers to the same OGL function for different contexts. The way these pointers are retrieved from the OGL driver should be used again for each new context. Binding (making current) a rendering context with another instance of a wxGLCanvas however works only if the both wxGLCanvas instances were created with the same attributes. OpenGL version 3 introduced a new type of specification profile, the modern core profile. The old compatibility profile maintains all legacy features. Since wxWidgets 3.1.0 you can choose the type of context and even ask for a specified OGL version number. However, its advised to use only core profile as the compatibility profile may run a bit slower. OpenGL core profile specification defines several flags at context creation that determine not only the type of context but also some features. Some of these flags can be set in the list of attributes used at wxGLCanvas ctor. But since wxWidgets 3.1.0 it is strongly encouraged to use the new mechanism: setting the context attributes with a wxGLContextAttrs (not implemented in wx) object and the canvas attributes with a wxGLAttributes (not implemented in wx) object. The best way of knowing if your OpenGL environment supports a specific type of context is creating a wxGLContext instance and checking wxGLContext::IsOK() (not implemented in wx). If it returns false, then simply delete that instance and create a new one with other attributes. wxHAS_OPENGL_ES is defined on platforms that only have this implementation available (e.g. the iPhone) and don't support the full specification. See: wxGLCanvas , wxGLContextAttrs (not implemented in wx), wxGLAttributes (not implemented in wx) wxWidgets docs: wxGLContext","ref":"wxGLContext.html","title":"wxGLContext","type":"module"},{"doc":"Destroys the object.","ref":"wxGLContext.html#destroy/1","title":"wxGLContext.destroy/1","type":"function"},{"doc":"","ref":"wxGLContext.html#new/1","title":"wxGLContext.new/1","type":"function"},{"doc":"Constructor.","ref":"wxGLContext.html#new/2","title":"wxGLContext.new/2","type":"function"},{"doc":"Makes the OpenGL state that is represented by this rendering context current with the wxGLCanvas win . Note: win can be a different wxGLCanvas window than the one that was passed to the constructor of this rendering context. If RC is an object of type wxGLContext , the statements &quot;RC.SetCurrent(win);&quot; and &quot;win.SetCurrent(RC);&quot; are equivalent, see wxGLCanvas:setCurrent/2 .","ref":"wxGLContext.html#setCurrent/2","title":"wxGLContext.setCurrent/2","type":"function"},{"doc":"","ref":"wxGLContext.html#t:wxGLContext/0","title":"wxGLContext.wxGLContext/0","type":"type"},{"doc":"A gauge is a horizontal or vertical bar which shows a quantity (often time). wxGauge supports two working modes: determinate and indeterminate progress. The first is the usual working mode (see setValue/2 and setRange/2 ) while the second can be used when the program is doing some processing but you don't know how much progress is being done. In this case, you can periodically call the pulse/1 function to make the progress bar switch to indeterminate mode (graphically it's usually a set of blocks which move or bounce in the bar control). wxGauge supports dynamic switch between these two work modes. There are no user commands for the gauge. Styles This class supports the following styles: See: wxSlider , wxScrollBar This class is derived (and can use functions) from: wxControl wxWindow wxEvtHandler wxWidgets docs: wxGauge","ref":"wxGauge.html","title":"wxGauge","type":"module"},{"doc":"","ref":"wxGauge.html#create/4","title":"wxGauge.create/4","type":"function"},{"doc":"Creates the gauge for two-step construction. See new/4 for further details.","ref":"wxGauge.html#create/5","title":"wxGauge.create/5","type":"function"},{"doc":"Destructor, destroying the gauge.","ref":"wxGauge.html#destroy/1","title":"wxGauge.destroy/1","type":"function"},{"doc":"Returns the maximum position of the gauge. See: setRange/2","ref":"wxGauge.html#getRange/1","title":"wxGauge.getRange/1","type":"function"},{"doc":"Returns the current position of the gauge. See: setValue/2","ref":"wxGauge.html#getValue/1","title":"wxGauge.getValue/1","type":"function"},{"doc":"Returns true if the gauge is vertical (has wxGA_VERTICAL style) and false otherwise.","ref":"wxGauge.html#isVertical/1","title":"wxGauge.isVertical/1","type":"function"},{"doc":"Default constructor.","ref":"wxGauge.html#new/0","title":"wxGauge.new/0","type":"function"},{"doc":"","ref":"wxGauge.html#new/3","title":"wxGauge.new/3","type":"function"},{"doc":"Constructor, creating and showing a gauge. See: create/5","ref":"wxGauge.html#new/4","title":"wxGauge.new/4","type":"function"},{"doc":"Switch the gauge to indeterminate mode (if required) and makes the gauge move a bit to indicate the user that some progress has been made. Note: After calling this function the value returned by getValue/1 is undefined and thus you need to explicitly call setValue/2 if you want to restore the determinate mode.","ref":"wxGauge.html#pulse/1","title":"wxGauge.pulse/1","type":"function"},{"doc":"Sets the range (maximum value) of the gauge. This function makes the gauge switch to determinate mode, if it's not already. When the gauge is in indeterminate mode, under wxMSW the gauge repeatedly goes from zero to range and back; under other ports when in indeterminate mode, the range setting is ignored. See: getRange/1","ref":"wxGauge.html#setRange/2","title":"wxGauge.setRange/2","type":"function"},{"doc":"Sets the position of the gauge. The pos must be between 0 and the gauge range as returned by getRange/1 , inclusive. This function makes the gauge switch to determinate mode, if it was in indeterminate mode before. See: getValue/1","ref":"wxGauge.html#setValue/2","title":"wxGauge.setValue/2","type":"function"},{"doc":"","ref":"wxGauge.html#t:wxGauge/0","title":"wxGauge.wxGauge/0","type":"type"},{"doc":"This control can be used to place a directory listing (with optional files) on an arbitrary window. The control contains a wxTreeCtrl window representing the directory hierarchy, and optionally, a wxChoice window containing a list of filters. Styles This class supports the following styles: This class is derived (and can use functions) from: wxControl wxWindow wxEvtHandler wxWidgets docs: wxGenericDirCtrl Events Event types emitted from this class: dirctrl_selectionchanged , dirctrl_fileactivated","ref":"wxGenericDirCtrl.html","title":"wxGenericDirCtrl","type":"module"},{"doc":"Collapses the entire tree.","ref":"wxGenericDirCtrl.html#collapseTree/1","title":"wxGenericDirCtrl.collapseTree/1","type":"function"},{"doc":"","ref":"wxGenericDirCtrl.html#create/2","title":"wxGenericDirCtrl.create/2","type":"function"},{"doc":"Create function for two-step construction. See new/2 for details.","ref":"wxGenericDirCtrl.html#create/3","title":"wxGenericDirCtrl.create/3","type":"function"},{"doc":"Destructor.","ref":"wxGenericDirCtrl.html#destroy/1","title":"wxGenericDirCtrl.destroy/1","type":"function"},{"doc":"Tries to expand as much of the given path as possible, so that the filename or directory is visible in the tree control.","ref":"wxGenericDirCtrl.html#expandPath/2","title":"wxGenericDirCtrl.expandPath/2","type":"function"},{"doc":"Gets the default path.","ref":"wxGenericDirCtrl.html#getDefaultPath/1","title":"wxGenericDirCtrl.getDefaultPath/1","type":"function"},{"doc":"Gets selected filename path only (else empty string). This function doesn't count a directory as a selection.","ref":"wxGenericDirCtrl.html#getFilePath/1","title":"wxGenericDirCtrl.getFilePath/1","type":"function"},{"doc":"Returns the filter string.","ref":"wxGenericDirCtrl.html#getFilter/1","title":"wxGenericDirCtrl.getFilter/1","type":"function"},{"doc":"Returns the current filter index (zero-based).","ref":"wxGenericDirCtrl.html#getFilterIndex/1","title":"wxGenericDirCtrl.getFilterIndex/1","type":"function"},{"doc":"Gets the currently-selected directory or filename.","ref":"wxGenericDirCtrl.html#getPath/1","title":"wxGenericDirCtrl.getPath/1","type":"function"},{"doc":"Gets the path corresponding to the given tree control item. Since: 2.9.5","ref":"wxGenericDirCtrl.html#getPath/2","title":"wxGenericDirCtrl.getPath/2","type":"function"},{"doc":"Returns the root id for the tree control.","ref":"wxGenericDirCtrl.html#getRootId/1","title":"wxGenericDirCtrl.getRootId/1","type":"function"},{"doc":"Returns a pointer to the tree control.","ref":"wxGenericDirCtrl.html#getTreeCtrl/1","title":"wxGenericDirCtrl.getTreeCtrl/1","type":"function"},{"doc":"Initializes variables.","ref":"wxGenericDirCtrl.html#init/1","title":"wxGenericDirCtrl.init/1","type":"function"},{"doc":"Default constructor.","ref":"wxGenericDirCtrl.html#new/0","title":"wxGenericDirCtrl.new/0","type":"function"},{"doc":"","ref":"wxGenericDirCtrl.html#new/1","title":"wxGenericDirCtrl.new/1","type":"function"},{"doc":"Main constructor.","ref":"wxGenericDirCtrl.html#new/2","title":"wxGenericDirCtrl.new/2","type":"function"},{"doc":"Collapse and expand the tree, thus re-creating it from scratch. May be used to update the displayed directory content.","ref":"wxGenericDirCtrl.html#reCreateTree/1","title":"wxGenericDirCtrl.reCreateTree/1","type":"function"},{"doc":"Sets the default path.","ref":"wxGenericDirCtrl.html#setDefaultPath/2","title":"wxGenericDirCtrl.setDefaultPath/2","type":"function"},{"doc":"Sets the filter string.","ref":"wxGenericDirCtrl.html#setFilter/2","title":"wxGenericDirCtrl.setFilter/2","type":"function"},{"doc":"Sets the current filter index (zero-based).","ref":"wxGenericDirCtrl.html#setFilterIndex/2","title":"wxGenericDirCtrl.setFilterIndex/2","type":"function"},{"doc":"Sets the current path.","ref":"wxGenericDirCtrl.html#setPath/2","title":"wxGenericDirCtrl.setPath/2","type":"function"},{"doc":"","ref":"wxGenericDirCtrl.html#t:wxGenericDirCtrl/0","title":"wxGenericDirCtrl.wxGenericDirCtrl/0","type":"type"},{"doc":"A wxGraphicsBrush is a native representation of a brush. The contents are specific and private to the respective renderer. Instances are ref counted and can therefore be assigned as usual. The only way to get a valid instance is via wxGraphicsContext:createBrush/2 or wxGraphicsRenderer:createBrush/2 . This class is derived (and can use functions) from: wxGraphicsObject wxWidgets docs: wxGraphicsBrush","ref":"wxGraphicsBrush.html","title":"wxGraphicsBrush","type":"module"},{"doc":"","ref":"wxGraphicsBrush.html#t:wxGraphicsBrush/0","title":"wxGraphicsBrush.wxGraphicsBrush/0","type":"type"},{"doc":"A wxGraphicsContext instance is the object that is drawn upon. It is created by a renderer using wxGraphicsRenderer:createContext/2 . This can be either directly using a renderer instance, or indirectly using the static convenience create/1 functions of wxGraphicsContext that always delegate the task to the default renderer. Remark: For some renderers (like Direct2D or Cairo) processing of drawing operations may be deferred (Direct2D render target normally builds up a batch of rendering commands but defers processing of these commands, Cairo operates on a separate surface) so to make drawing results visible you need to update the content of the context by calling wxGraphicsContext::Flush() (not implemented in wx) or by destroying the context. See: wxGraphicsRenderer:createContext/2 , wxGCDC , wxDC This class is derived (and can use functions) from: wxGraphicsObject wxWidgets docs: wxGraphicsContext","ref":"wxGraphicsContext.html","title":"wxGraphicsContext","type":"module"},{"doc":"Sets the clipping region to the intersection of the given region and the previously set clipping region. The clipping region is an area to which drawing is restricted. Remark:","ref":"wxGraphicsContext.html#clip/2","title":"wxGraphicsContext.clip/2","type":"function"},{"doc":"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.","ref":"wxGraphicsContext.html#clip/5","title":"wxGraphicsContext.clip/5","type":"function"},{"doc":"Concatenates the passed in transform with the current transform of this context.","ref":"wxGraphicsContext.html#concatTransform/2","title":"wxGraphicsContext.concatTransform/2","type":"function"},{"doc":"Create a lightweight context that can be used only for measuring text.","ref":"wxGraphicsContext.html#create/0","title":"wxGraphicsContext.create/0","type":"function"},{"doc":"Creates a wxGraphicsContext from a wxWindowDC . See: wxGraphicsRenderer:createContext/2","ref":"wxGraphicsContext.html#create/1","title":"wxGraphicsContext.create/1","type":"function"},{"doc":"Creates a native brush from a wxBrush .","ref":"wxGraphicsContext.html#createBrush/2","title":"wxGraphicsContext.createBrush/2","type":"function"},{"doc":"","ref":"wxGraphicsContext.html#createFont/2","title":"wxGraphicsContext.createFont/2","type":"function"},{"doc":"Creates a native graphics font from a wxFont and a text colour. Remark: For Direct2D graphics fonts can be created from TrueType fonts only.","ref":"wxGraphicsContext.html#createFont/3","title":"wxGraphicsContext.createFont/3","type":"function"},{"doc":"Creates a font object with the specified attributes. The use of overload taking wxFont is preferred, see wxGraphicsRenderer:createFont/4 for more details. Remark: For Direct2D graphics fonts can be created from TrueType fonts only. Since: 2.9.3","ref":"wxGraphicsContext.html#createFont/4","title":"wxGraphicsContext.createFont/4","type":"function"},{"doc":"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.","ref":"wxGraphicsContext.html#createLinearGradientBrush/6","title":"wxGraphicsContext.createLinearGradientBrush/6","type":"function"},{"doc":"Creates a native brush with a linear gradient. The brush starts at (@a x1, @a y1) and ends at (@a x2, @a y2). Either just the start and end gradient colours (@a c1 and @a c2) or full set of gradient @a stops can be specified. The version taking wxGraphicsGradientStops is new in wxWidgets 2.9.1. The matrix parameter was added in wxWidgets 3.1.3","ref":"wxGraphicsContext.html#createLinearGradientBrush/7","title":"wxGraphicsContext.createLinearGradientBrush/7","type":"function"},{"doc":"","ref":"wxGraphicsContext.html#createMatrix/1","title":"wxGraphicsContext.createMatrix/1","type":"function"},{"doc":"Creates a native affine transformation matrix from the passed in values. The default parameters result in an identity matrix.","ref":"wxGraphicsContext.html#createMatrix/2","title":"wxGraphicsContext.createMatrix/2","type":"function"},{"doc":"Creates a native graphics path which is initially empty.","ref":"wxGraphicsContext.html#createPath/1","title":"wxGraphicsContext.createPath/1","type":"function"},{"doc":"Creates a native pen from a wxPen . Prefer to use the overload taking wxGraphicsPenInfo (not implemented in wx) unless you already have a wxPen as constructing one only to pass it to this method is wasteful.","ref":"wxGraphicsContext.html#createPen/2","title":"wxGraphicsContext.createPen/2","type":"function"},{"doc":"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.","ref":"wxGraphicsContext.html#createRadialGradientBrush/7","title":"wxGraphicsContext.createRadialGradientBrush/7","type":"function"},{"doc":"Creates a native brush with a radial gradient. The brush originates at (@a startX, @a startY) and ends on a circle around (@a endX, @a endY) with the given @a radius. The gradient may be specified either by its start and end colours @a oColor and @a cColor or by a full set of gradient @a stops. The version taking wxGraphicsGradientStops is new in wxWidgets 2.9.1. The ability to apply a transformation matrix to the gradient was added in 3.1.3","ref":"wxGraphicsContext.html#createRadialGradientBrush/8","title":"wxGraphicsContext.createRadialGradientBrush/8","type":"function"},{"doc":"Creates a wxGraphicsContext from a wxWindow . See: wxGraphicsRenderer:createContext/2","ref":"wxGraphicsContext.html#destroy/1","title":"wxGraphicsContext.destroy/1","type":"function"},{"doc":"Draws the bitmap. In case of a mono bitmap, this is treated as a mask and the current brushed is used for filling.","ref":"wxGraphicsContext.html#drawBitmap/6","title":"wxGraphicsContext.drawBitmap/6","type":"function"},{"doc":"Draws an ellipse.","ref":"wxGraphicsContext.html#drawEllipse/5","title":"wxGraphicsContext.drawEllipse/5","type":"function"},{"doc":"Draws the icon.","ref":"wxGraphicsContext.html#drawIcon/6","title":"wxGraphicsContext.drawIcon/6","type":"function"},{"doc":"","ref":"wxGraphicsContext.html#drawLines/2","title":"wxGraphicsContext.drawLines/2","type":"function"},{"doc":"Draws a polygon.","ref":"wxGraphicsContext.html#drawLines/3","title":"wxGraphicsContext.drawLines/3","type":"function"},{"doc":"","ref":"wxGraphicsContext.html#drawPath/2","title":"wxGraphicsContext.drawPath/2","type":"function"},{"doc":"Draws the path by first filling and then stroking.","ref":"wxGraphicsContext.html#drawPath/3","title":"wxGraphicsContext.drawPath/3","type":"function"},{"doc":"Draws a rectangle.","ref":"wxGraphicsContext.html#drawRectangle/5","title":"wxGraphicsContext.drawRectangle/5","type":"function"},{"doc":"Draws a rounded rectangle.","ref":"wxGraphicsContext.html#drawRoundedRectangle/6","title":"wxGraphicsContext.drawRoundedRectangle/6","type":"function"},{"doc":"Draws text at the defined position.","ref":"wxGraphicsContext.html#drawText/4","title":"wxGraphicsContext.drawText/4","type":"function"},{"doc":"Draws text at the defined position.","ref":"wxGraphicsContext.html#drawText/5","title":"wxGraphicsContext.drawText/5","type":"function"},{"doc":"Draws text at the defined position.","ref":"wxGraphicsContext.html#drawText/6","title":"wxGraphicsContext.drawText/6","type":"function"},{"doc":"","ref":"wxGraphicsContext.html#fillPath/2","title":"wxGraphicsContext.fillPath/2","type":"function"},{"doc":"Fills the path with the current brush.","ref":"wxGraphicsContext.html#fillPath/3","title":"wxGraphicsContext.fillPath/3","type":"function"},{"doc":"Fills the widths array with the widths from the beginning of text to the corresponding character of text .","ref":"wxGraphicsContext.html#getPartialTextExtents/2","title":"wxGraphicsContext.getPartialTextExtents/2","type":"function"},{"doc":"Gets the dimensions of the string using the currently selected font.","ref":"wxGraphicsContext.html#getTextExtent/2","title":"wxGraphicsContext.getTextExtent/2","type":"function"},{"doc":"Gets the current transformation matrix of this context.","ref":"wxGraphicsContext.html#getTransform/1","title":"wxGraphicsContext.getTransform/1","type":"function"},{"doc":"Resets the clipping to original shape.","ref":"wxGraphicsContext.html#resetClip/1","title":"wxGraphicsContext.resetClip/1","type":"function"},{"doc":"Rotates the current transformation matrix (in radians).","ref":"wxGraphicsContext.html#rotate/2","title":"wxGraphicsContext.rotate/2","type":"function"},{"doc":"Scales the current transformation matrix.","ref":"wxGraphicsContext.html#scale/3","title":"wxGraphicsContext.scale/3","type":"function"},{"doc":"Sets the brush for filling paths.","ref":"wxGraphicsContext.html#setBrush/2","title":"wxGraphicsContext.setBrush/2","type":"function"},{"doc":"Sets the font for drawing text.","ref":"wxGraphicsContext.html#setFont/2","title":"wxGraphicsContext.setFont/2","type":"function"},{"doc":"Sets the font for drawing text. Remark: For Direct2D only TrueType fonts can be used.","ref":"wxGraphicsContext.html#setFont/3","title":"wxGraphicsContext.setFont/3","type":"function"},{"doc":"Sets the pen used for stroking.","ref":"wxGraphicsContext.html#setPen/2","title":"wxGraphicsContext.setPen/2","type":"function"},{"doc":"Sets the current transformation matrix of this context.","ref":"wxGraphicsContext.html#setTransform/2","title":"wxGraphicsContext.setTransform/2","type":"function"},{"doc":"Strokes a single line.","ref":"wxGraphicsContext.html#strokeLine/5","title":"wxGraphicsContext.strokeLine/5","type":"function"},{"doc":"Stroke lines connecting all the points. Unlike the other overload of this function, this method draws a single polyline and not a number of disconnected lines.","ref":"wxGraphicsContext.html#strokeLines/2","title":"wxGraphicsContext.strokeLines/2","type":"function"},{"doc":"Strokes along a path with the current pen.","ref":"wxGraphicsContext.html#strokePath/2","title":"wxGraphicsContext.strokePath/2","type":"function"},{"doc":"Translates the current transformation matrix.","ref":"wxGraphicsContext.html#translate/3","title":"wxGraphicsContext.translate/3","type":"function"},{"doc":"","ref":"wxGraphicsContext.html#t:wxGraphicsContext/0","title":"wxGraphicsContext.wxGraphicsContext/0","type":"type"},{"doc":"A wxGraphicsFont is a native representation of a font. The contents are specific and private to the respective renderer. Instances are ref counted and can therefore be assigned as usual. The only way to get a valid instance is via wxGraphicsContext:createFont/4 or wxGraphicsRenderer:createFont/4 . This class is derived (and can use functions) from: wxGraphicsObject wxWidgets docs: wxGraphicsFont","ref":"wxGraphicsFont.html","title":"wxGraphicsFont","type":"module"},{"doc":"","ref":"wxGraphicsFont.html#t:wxGraphicsFont/0","title":"wxGraphicsFont.wxGraphicsFont/0","type":"type"},{"doc":"The stops are maintained in order of position. If two or more stops are added with the same position then the one(s) added later come later. This can be useful for producing discontinuities in the colour gradient. Notice that this class is write-once, you can't modify the stops once they had been added. Since: 2.9.1 wxWidgets docs: wxGraphicsGradientStops","ref":"wxGraphicsGradientStops.html","title":"wxGraphicsGradientStops","type":"module"},{"doc":"Add a new stop.","ref":"wxGraphicsGradientStops.html#add/3","title":"wxGraphicsGradientStops.add/3","type":"function"},{"doc":"Destroys the object.","ref":"wxGraphicsGradientStops.html#destroy/1","title":"wxGraphicsGradientStops.destroy/1","type":"function"},{"doc":"Returns the number of stops.","ref":"wxGraphicsGradientStops.html#getCount/1","title":"wxGraphicsGradientStops.getCount/1","type":"function"},{"doc":"Returns the end colour.","ref":"wxGraphicsGradientStops.html#getEndColour/1","title":"wxGraphicsGradientStops.getEndColour/1","type":"function"},{"doc":"Returns the start colour.","ref":"wxGraphicsGradientStops.html#getStartColour/1","title":"wxGraphicsGradientStops.getStartColour/1","type":"function"},{"doc":"Returns the stop at the given index.","ref":"wxGraphicsGradientStops.html#item/2","title":"wxGraphicsGradientStops.item/2","type":"function"},{"doc":"","ref":"wxGraphicsGradientStops.html#new/0","title":"wxGraphicsGradientStops.new/0","type":"function"},{"doc":"Initializes the gradient stops with the given boundary colours. Creates a wxGraphicsGradientStops instance with start colour given by startCol and end colour given by endCol .","ref":"wxGraphicsGradientStops.html#new/1","title":"wxGraphicsGradientStops.new/1","type":"function"},{"doc":"Set the end colour to col .","ref":"wxGraphicsGradientStops.html#setEndColour/2","title":"wxGraphicsGradientStops.setEndColour/2","type":"function"},{"doc":"Set the start colour to col .","ref":"wxGraphicsGradientStops.html#setStartColour/2","title":"wxGraphicsGradientStops.setStartColour/2","type":"function"},{"doc":"","ref":"wxGraphicsGradientStops.html#t:wxGraphicsGradientStops/0","title":"wxGraphicsGradientStops.wxGraphicsGradientStops/0","type":"type"},{"doc":"A wxGraphicsMatrix is a native representation of an affine matrix. The contents are specific and private to the respective renderer. Instances are ref counted and can therefore be assigned as usual. The only way to get a valid instance is via wxGraphicsContext:createMatrix/2 or wxGraphicsRenderer:createMatrix/2 . This class is derived (and can use functions) from: wxGraphicsObject wxWidgets docs: wxGraphicsMatrix","ref":"wxGraphicsMatrix.html","title":"wxGraphicsMatrix","type":"module"},{"doc":"Concatenates the matrix passed with the current matrix. The effect of the resulting transformation is to first apply the transformation in t to the coordinates and then apply the transformation in the current matrix to the coordinates.","ref":"wxGraphicsMatrix.html#concat/2","title":"wxGraphicsMatrix.concat/2","type":"function"},{"doc":"Returns the component values of the matrix via the argument pointers.","ref":"wxGraphicsMatrix.html#get/1","title":"wxGraphicsMatrix.get/1","type":"function"},{"doc":"Inverts the matrix.","ref":"wxGraphicsMatrix.html#invert/1","title":"wxGraphicsMatrix.invert/1","type":"function"},{"doc":"Returns true if the elements of the transformation matrix are equal.","ref":"wxGraphicsMatrix.html#isEqual/2","title":"wxGraphicsMatrix.isEqual/2","type":"function"},{"doc":"Return true if this is the identity matrix.","ref":"wxGraphicsMatrix.html#isIdentity/1","title":"wxGraphicsMatrix.isIdentity/1","type":"function"},{"doc":"Rotates this matrix clockwise (in radians).","ref":"wxGraphicsMatrix.html#rotate/2","title":"wxGraphicsMatrix.rotate/2","type":"function"},{"doc":"Scales this matrix.","ref":"wxGraphicsMatrix.html#scale/3","title":"wxGraphicsMatrix.scale/3","type":"function"},{"doc":"","ref":"wxGraphicsMatrix.html#set/1","title":"wxGraphicsMatrix.set/1","type":"function"},{"doc":"Sets the matrix to the respective values (default values are the identity matrix).","ref":"wxGraphicsMatrix.html#set/2","title":"wxGraphicsMatrix.set/2","type":"function"},{"doc":"Applies this matrix to a distance (ie. performs all transforms except translations).","ref":"wxGraphicsMatrix.html#transformDistance/1","title":"wxGraphicsMatrix.transformDistance/1","type":"function"},{"doc":"Applies this matrix to a point.","ref":"wxGraphicsMatrix.html#transformPoint/1","title":"wxGraphicsMatrix.transformPoint/1","type":"function"},{"doc":"Translates this matrix.","ref":"wxGraphicsMatrix.html#translate/3","title":"wxGraphicsMatrix.translate/3","type":"function"},{"doc":"","ref":"wxGraphicsMatrix.html#t:wxGraphicsMatrix/0","title":"wxGraphicsMatrix.wxGraphicsMatrix/0","type":"type"},{"doc":"This class is the superclass of native graphics objects like pens etc. It allows reference counting. Not instantiated by user code. See: wxGraphicsBrush , wxGraphicsPen , wxGraphicsMatrix , wxGraphicsPath wxWidgets docs: wxGraphicsObject","ref":"wxGraphicsObject.html","title":"wxGraphicsObject","type":"module"},{"doc":"","ref":"wxGraphicsObject.html#destroy/1","title":"wxGraphicsObject.destroy/1","type":"function"},{"doc":"Returns the renderer that was used to create this instance, or NULL if it has not been initialized yet.","ref":"wxGraphicsObject.html#getRenderer/1","title":"wxGraphicsObject.getRenderer/1","type":"function"},{"doc":"Return: false if this object is valid, otherwise returns true.","ref":"wxGraphicsObject.html#isNull/1","title":"wxGraphicsObject.isNull/1","type":"function"},{"doc":"","ref":"wxGraphicsObject.html#t:wxGraphicsObject/0","title":"wxGraphicsObject.wxGraphicsObject/0","type":"type"},{"doc":"A wxGraphicsPath is a native representation of a geometric path. The contents are specific and private to the respective renderer. Instances are reference counted and can therefore be assigned as usual. The only way to get a valid instance is by using wxGraphicsContext:createPath/1 or wxGraphicsRenderer:createPath/1 . This class is derived (and can use functions) from: wxGraphicsObject wxWidgets docs: wxGraphicsPath","ref":"wxGraphicsPath.html","title":"wxGraphicsPath","type":"module"},{"doc":"","ref":"wxGraphicsPath.html#addArc/6","title":"wxGraphicsPath.addArc/6","type":"function"},{"doc":"Adds an arc of a circle. The circle is defined by the coordinates of its centre ( x , y ) or c and its radius r . The arc goes from the starting angle startAngle to endAngle either clockwise or counter-clockwise depending on the value of clockwise argument. The angles are measured in radians but, contrary to the usual mathematical convention, are always clockwise from the horizontal axis. If for clockwise arc endAngle is less than startAngle it will be progressively increased by 2*pi until it is greater than startAngle . If for counter-clockwise arc endAngle is greater than startAngle it will be progressively decreased by 2*pi until it is less than startAngle . If there is a current point set, an initial line segment will be added to the path to connect the current point to the beginning of the arc.","ref":"wxGraphicsPath.html#addArc/7","title":"wxGraphicsPath.addArc/7","type":"function"},{"doc":"Adds an arc (of a circle with radius r ) that is tangent to the line connecting current point and ( x1 , y1 ) and to the line connecting ( x1 , y1 ) and ( x2 , y2 ). If the current point and the starting point of the arc are different, a straight line connecting these points is also appended. If there is no current point before the call to addArcToPoint/6 this function will behave as if preceded by a call to MoveToPoint(0, 0). After this call the current point will be at the ending point of the arc.","ref":"wxGraphicsPath.html#addArcToPoint/6","title":"wxGraphicsPath.addArcToPoint/6","type":"function"},{"doc":"Appends a circle around ( x , y ) with radius r as a new closed subpath. After this call the current point will be at (x+ r , y ).","ref":"wxGraphicsPath.html#addCircle/4","title":"wxGraphicsPath.addCircle/4","type":"function"},{"doc":"Adds a cubic bezier curve from the current point, using two control points and an end point. If there is no current point before the call to addCurveToPoint/7 this function will behave as if preceded by a call to MoveToPoint( c1 ).","ref":"wxGraphicsPath.html#addCurveToPoint/4","title":"wxGraphicsPath.addCurveToPoint/4","type":"function"},{"doc":"Adds a cubic bezier curve from the current point, using two control points and an end point. If there is no current point before the call to addCurveToPoint/7 this function will behave as if preceded by a call to MoveToPoint( cx1 , cy1 ).","ref":"wxGraphicsPath.html#addCurveToPoint/7","title":"wxGraphicsPath.addCurveToPoint/7","type":"function"},{"doc":"Appends an ellipse fitting into the passed in rectangle as a new closed subpath. After this call the current point will be at (x+ w , y+ h/2 ).","ref":"wxGraphicsPath.html#addEllipse/5","title":"wxGraphicsPath.addEllipse/5","type":"function"},{"doc":"Adds a straight line from the current point to p . If current point is not yet set before the call to addLineToPoint/3 this function will behave as moveToPoint/3 .","ref":"wxGraphicsPath.html#addLineToPoint/2","title":"wxGraphicsPath.addLineToPoint/2","type":"function"},{"doc":"Adds a straight line from the current point to ( x , y ). If current point is not yet set before the call to addLineToPoint/3 this function will behave as moveToPoint/3 .","ref":"wxGraphicsPath.html#addLineToPoint/3","title":"wxGraphicsPath.addLineToPoint/3","type":"function"},{"doc":"Adds another path onto the current path. After this call the current point will be at the added path's current point. For Direct2D the path being appended shouldn't contain a started non-empty subpath when this function is called.","ref":"wxGraphicsPath.html#addPath/2","title":"wxGraphicsPath.addPath/2","type":"function"},{"doc":"Adds a quadratic bezier curve from the current point, using a control point and an end point. If there is no current point before the call to addQuadCurveToPoint/5 this function will behave as if preceded by a call to MoveToPoint( cx , cy ).","ref":"wxGraphicsPath.html#addQuadCurveToPoint/5","title":"wxGraphicsPath.addQuadCurveToPoint/5","type":"function"},{"doc":"Appends a rectangle as a new closed subpath. After this call the current point will be at ( x , y ).","ref":"wxGraphicsPath.html#addRectangle/5","title":"wxGraphicsPath.addRectangle/5","type":"function"},{"doc":"Appends a rounded rectangle as a new closed subpath. If radius equals 0 this function will behave as addRectangle/5 , otherwise after this call the current point will be at (x+ w , y+ h/2 ).","ref":"wxGraphicsPath.html#addRoundedRectangle/6","title":"wxGraphicsPath.addRoundedRectangle/6","type":"function"},{"doc":"Closes the current sub-path. After this call the current point will be at the joined endpoint of the sub-path.","ref":"wxGraphicsPath.html#closeSubpath/1","title":"wxGraphicsPath.closeSubpath/1","type":"function"},{"doc":"","ref":"wxGraphicsPath.html#contains/2","title":"wxGraphicsPath.contains/2","type":"function"},{"doc":"Return: true if the point is within the path.","ref":"wxGraphicsPath.html#contains/3","title":"wxGraphicsPath.contains/3","type":"function"},{"doc":"Return: true if the point is within the path.","ref":"wxGraphicsPath.html#contains/4","title":"wxGraphicsPath.contains/4","type":"function"},{"doc":"Gets the bounding box enclosing all points (possibly including control points).","ref":"wxGraphicsPath.html#getBox/1","title":"wxGraphicsPath.getBox/1","type":"function"},{"doc":"Gets the last point of the current path, (0,0) if not yet set.","ref":"wxGraphicsPath.html#getCurrentPoint/1","title":"wxGraphicsPath.getCurrentPoint/1","type":"function"},{"doc":"Begins a new subpath at p .","ref":"wxGraphicsPath.html#moveToPoint/2","title":"wxGraphicsPath.moveToPoint/2","type":"function"},{"doc":"Begins a new subpath at ( x , y ).","ref":"wxGraphicsPath.html#moveToPoint/3","title":"wxGraphicsPath.moveToPoint/3","type":"function"},{"doc":"Transforms each point of this path by the matrix. For Direct2D the current path shouldn't contain a started non-empty subpath when this function is called.","ref":"wxGraphicsPath.html#transform/2","title":"wxGraphicsPath.transform/2","type":"function"},{"doc":"","ref":"wxGraphicsPath.html#t:wxGraphicsPath/0","title":"wxGraphicsPath.wxGraphicsPath/0","type":"type"},{"doc":"A wxGraphicsPen is a native representation of a pen. The contents are specific and private to the respective renderer. Instances are ref counted and can therefore be assigned as usual. The only way to get a valid instance is via wxGraphicsContext:createPen/2 or wxGraphicsRenderer::CreatePen() (not implemented in wx). This class is derived (and can use functions) from: wxGraphicsObject wxWidgets docs: wxGraphicsPen","ref":"wxGraphicsPen.html","title":"wxGraphicsPen","type":"module"},{"doc":"","ref":"wxGraphicsPen.html#t:wxGraphicsPen/0","title":"wxGraphicsPen.wxGraphicsPen/0","type":"type"},{"doc":"A wxGraphicsRenderer is the instance corresponding to the rendering engine used. There may be multiple instances on a system, if there are different rendering engines present, but there is always only one instance per engine. This instance is pointed back to by all objects created by it ( wxGraphicsContext , wxGraphicsPath etc.) and can be retrieved through their wxGraphicsObject:getRenderer/1 method. Therefore you can create an additional instance of a path etc. by calling wxGraphicsObject:getRenderer/1 and then using the appropriate CreateXXX() function of that renderer. wxWidgets docs: wxGraphicsRenderer","ref":"wxGraphicsRenderer.html","title":"wxGraphicsRenderer","type":"module"},{"doc":"Creates a native brush from a wxBrush .","ref":"wxGraphicsRenderer.html#createBrush/2","title":"wxGraphicsRenderer.createBrush/2","type":"function"},{"doc":"Creates a wxGraphicsContext from a wxWindowDC .","ref":"wxGraphicsRenderer.html#createContext/2","title":"wxGraphicsRenderer.createContext/2","type":"function"},{"doc":"","ref":"wxGraphicsRenderer.html#createFont/2","title":"wxGraphicsRenderer.createFont/2","type":"function"},{"doc":"Creates a native graphics font from a wxFont and a text colour.","ref":"wxGraphicsRenderer.html#createFont/3","title":"wxGraphicsRenderer.createFont/3","type":"function"},{"doc":"Creates a graphics font with the given characteristics. If possible, the createFont/4 overload taking wxFont should be used instead. The main advantage of this overload is that it can be used without X server connection under Unix when using Cairo. Since: 2.9.3","ref":"wxGraphicsRenderer.html#createFont/4","title":"wxGraphicsRenderer.createFont/4","type":"function"},{"doc":"Creates a native brush with a linear gradient. Stops support is new since wxWidgets 2.9.1, previously only the start and end colours could be specified. The ability to apply a transformation matrix to the gradient was added in 3.1.3","ref":"wxGraphicsRenderer.html#createLinearGradientBrush/6","title":"wxGraphicsRenderer.createLinearGradientBrush/6","type":"function"},{"doc":"","ref":"wxGraphicsRenderer.html#createMatrix/1","title":"wxGraphicsRenderer.createMatrix/1","type":"function"},{"doc":"Creates a native affine transformation matrix from the passed in values. The defaults result in an identity matrix.","ref":"wxGraphicsRenderer.html#createMatrix/2","title":"wxGraphicsRenderer.createMatrix/2","type":"function"},{"doc":"Creates a native graphics path which is initially empty.","ref":"wxGraphicsRenderer.html#createPath/1","title":"wxGraphicsRenderer.createPath/1","type":"function"},{"doc":"Creates a native brush with a radial gradient. Stops support is new since wxWidgets 2.9.1, previously only the start and end colours could be specified. The ability to apply a transformation matrix to the gradient was added in 3.1.3","ref":"wxGraphicsRenderer.html#createRadialGradientBrush/7","title":"wxGraphicsRenderer.createRadialGradientBrush/7","type":"function"},{"doc":"Returns the default renderer on this platform. On macOS this is the Core Graphics (a.k.a. Quartz 2D) renderer, on MSW the GDIPlus renderer, and on GTK we currently default to the Cairo renderer.","ref":"wxGraphicsRenderer.html#getDefaultRenderer/0","title":"wxGraphicsRenderer.getDefaultRenderer/0","type":"function"},{"doc":"","ref":"wxGraphicsRenderer.html#t:wxGraphicsRenderer/0","title":"wxGraphicsRenderer.wxGraphicsRenderer/0","type":"type"},{"doc":"wxGrid and its related classes are used for displaying and editing tabular data. They provide a rich set of features for display, editing, and interacting with a variety of data sources. For simple applications, and to help you get started, wxGrid is the only class you need to refer to directly. It will set up default instances of the other classes and manage them for you. For more complex applications you can derive your own classes for custom grid views, grid data tables, cell editors and renderers. The overview_grid has examples of simple and more complex applications, explains the relationship between the various grid classes and has a summary of the keyboard shortcuts and mouse functions provided by wxGrid . A wxGridTableBase (not implemented in wx) class holds the actual data to be displayed by a wxGrid class. One or more wxGrid classes may act as a view for one table class. The default table class is called wxGridStringTable (not implemented in wx) and holds an array of strings. An instance of such a class is created by createGrid/4 . wxGridCellRenderer is the abstract base class for rendering contents in a cell. The following renderers are predefined: The look of a cell can be further defined using wxGridCellAttr . An object of this type may be returned by wxGridTableBase::GetAttr() (not implemented in wx). wxGridCellEditor is the abstract base class for editing the value of a cell. The following editors are predefined: Please see wxGridEvent , wxGridSizeEvent (not implemented in wx), wxGridRangeSelectEvent (not implemented in wx), and wxGridEditorCreatedEvent (not implemented in wx) for the documentation of all event types you can use with wxGrid . See: Overview grid , wxGridUpdateLocker (not implemented in wx) This class is derived (and can use functions) from: wxScrolledWindow wxPanel wxWindow wxEvtHandler wxWidgets docs: wxGrid","ref":"wxGrid.html","title":"wxGrid","type":"module"},{"doc":"","ref":"wxGrid.html#appendCols/1","title":"wxGrid.appendCols/1","type":"function"},{"doc":"Appends one or more new columns to the right of the grid. The updateLabels argument is not used at present. If you are using a derived grid table class you will need to override wxGridTableBase::AppendCols() (not implemented in wx). See insertCols/2 for further information. Return: true on success or false if appending columns failed.","ref":"wxGrid.html#appendCols/2","title":"wxGrid.appendCols/2","type":"function"},{"doc":"","ref":"wxGrid.html#appendRows/1","title":"wxGrid.appendRows/1","type":"function"},{"doc":"Appends one or more new rows to the bottom of the grid. The updateLabels argument is not used at present. If you are using a derived grid table class you will need to override wxGridTableBase::AppendRows() (not implemented in wx). See insertRows/2 for further information. Return: true on success or false if appending rows failed.","ref":"wxGrid.html#appendRows/2","title":"wxGrid.appendRows/2","type":"function"},{"doc":"Automatically sets the height and width of all rows and columns to fit their contents.","ref":"wxGrid.html#autoSize/1","title":"wxGrid.autoSize/1","type":"function"},{"doc":"","ref":"wxGrid.html#autoSizeColumn/2","title":"wxGrid.autoSizeColumn/2","type":"function"},{"doc":"Automatically sizes the column to fit its contents. If setAsMin is true the calculated width will also be set as the minimal width for the column.","ref":"wxGrid.html#autoSizeColumn/3","title":"wxGrid.autoSizeColumn/3","type":"function"},{"doc":"","ref":"wxGrid.html#autoSizeColumns/1","title":"wxGrid.autoSizeColumns/1","type":"function"},{"doc":"Automatically sizes all columns to fit their contents. If setAsMin is true the calculated widths will also be set as the minimal widths for the columns.","ref":"wxGrid.html#autoSizeColumns/2","title":"wxGrid.autoSizeColumns/2","type":"function"},{"doc":"","ref":"wxGrid.html#autoSizeRow/2","title":"wxGrid.autoSizeRow/2","type":"function"},{"doc":"Automatically sizes the row to fit its contents. If setAsMin is true the calculated height will also be set as the minimal height for the row.","ref":"wxGrid.html#autoSizeRow/3","title":"wxGrid.autoSizeRow/3","type":"function"},{"doc":"","ref":"wxGrid.html#autoSizeRows/1","title":"wxGrid.autoSizeRows/1","type":"function"},{"doc":"Automatically sizes all rows to fit their contents. If setAsMin is true the calculated heights will also be set as the minimal heights for the rows.","ref":"wxGrid.html#autoSizeRows/2","title":"wxGrid.autoSizeRows/2","type":"function"},{"doc":"Increments the grid's batch count. When the count is greater than zero repainting of the grid is suppressed. Each call to BeginBatch must be matched by a later call to endBatch/1 . Code that does a lot of grid modification can be enclosed between beginBatch/1 and endBatch/1 calls to avoid screen flicker. The final endBatch/1 call will cause the grid to be repainted. Notice that you should use wxGridUpdateLocker (not implemented in wx) which ensures that there is always a matching endBatch/1 call for this beginBatch/1 if possible instead of calling this method directly.","ref":"wxGrid.html#beginBatch/1","title":"wxGrid.beginBatch/1","type":"function"},{"doc":"Convert grid cell coordinates to grid window pixel coordinates. This function returns the rectangle that encloses the block of cells limited by topLeft and bottomRight cell in device coords and clipped to the client size of the grid window. Since: 3.1.3 Parameter gridWindow has been added. See: cellToRect/3","ref":"wxGrid.html#blockToDeviceRect/3","title":"wxGrid.blockToDeviceRect/3","type":"function"},{"doc":"Return true if the dragging of cells is enabled or false otherwise.","ref":"wxGrid.html#canDragCell/1","title":"wxGrid.canDragCell/1","type":"function"},{"doc":"Returns true if columns can be moved by dragging with the mouse. Columns can be moved by dragging on their labels.","ref":"wxGrid.html#canDragColMove/1","title":"wxGrid.canDragColMove/1","type":"function"},{"doc":"Returns true if the given column can be resized by dragging with the mouse. This function returns true if resizing the columns interactively is globally enabled, i.e. if disableDragColSize/1 hadn't been called, and if this column wasn't explicitly marked as non-resizable with DisableColResize() (not implemented in wx).","ref":"wxGrid.html#canDragColSize/2","title":"wxGrid.canDragColSize/2","type":"function"},{"doc":"Return true if row edges inside the grid can be dragged to resize the rows. See: canDragGridSize/1 , canDragRowSize/2 Since: 3.1.4","ref":"wxGrid.html#canDragGridRowEdges/1","title":"wxGrid.canDragGridRowEdges/1","type":"function"},{"doc":"Return true if the dragging of grid lines to resize rows and columns is enabled or false otherwise.","ref":"wxGrid.html#canDragGridSize/1","title":"wxGrid.canDragGridSize/1","type":"function"},{"doc":"Returns true if the given row can be resized by dragging with the mouse. This is the same as canDragColSize/2 but for rows.","ref":"wxGrid.html#canDragRowSize/2","title":"wxGrid.canDragRowSize/2","type":"function"},{"doc":"Returns true if the in-place edit control for the current grid cell can be used and false otherwise. This function always returns false for the read-only cells.","ref":"wxGrid.html#canEnableCellControl/1","title":"wxGrid.canEnableCellControl/1","type":"function"},{"doc":"Return the rectangle corresponding to the grid cell's size and position in logical coordinates. See: blockToDeviceRect/3","ref":"wxGrid.html#cellToRect/2","title":"wxGrid.cellToRect/2","type":"function"},{"doc":"Return the rectangle corresponding to the grid cell's size and position in logical coordinates. See: blockToDeviceRect/3","ref":"wxGrid.html#cellToRect/3","title":"wxGrid.cellToRect/3","type":"function"},{"doc":"Clears all data in the underlying grid table and repaints the grid. The table is not deleted by this function. If you are using a derived table class then you need to override wxGridTableBase::Clear() (not implemented in wx) for this function to have any effect.","ref":"wxGrid.html#clearGrid/1","title":"wxGrid.clearGrid/1","type":"function"},{"doc":"Deselects all cells that are currently selected.","ref":"wxGrid.html#clearSelection/1","title":"wxGrid.clearSelection/1","type":"function"},{"doc":"","ref":"wxGrid.html#createGrid/3","title":"wxGrid.createGrid/3","type":"function"},{"doc":"Creates a grid with the specified initial number of rows and columns. Call this directly after the grid constructor. When you use this function wxGrid will create and manage a simple table of string values for you. All of the grid data will be stored in memory. For applications with more complex data types or relationships, or for dealing with very large datasets, you should derive your own grid table class and pass a table object to the grid with SetTable() (not implemented in wx) or AssignTable() (not implemented in wx).","ref":"wxGrid.html#createGrid/4","title":"wxGrid.createGrid/4","type":"function"},{"doc":"","ref":"wxGrid.html#deleteCols/1","title":"wxGrid.deleteCols/1","type":"function"},{"doc":"Deletes one or more columns from a grid starting at the specified position. The updateLabels argument is not used at present. If you are using a derived grid table class you will need to override wxGridTableBase::DeleteCols() (not implemented in wx). See insertCols/2 for further information. Return: true on success or false if deleting columns failed.","ref":"wxGrid.html#deleteCols/2","title":"wxGrid.deleteCols/2","type":"function"},{"doc":"","ref":"wxGrid.html#deleteRows/1","title":"wxGrid.deleteRows/1","type":"function"},{"doc":"Deletes one or more rows from a grid starting at the specified position. The updateLabels argument is not used at present. If you are using a derived grid table class you will need to override wxGridTableBase::DeleteRows() (not implemented in wx). See insertRows/2 for further information. Return: true on success or false if deleting rows failed.","ref":"wxGrid.html#deleteRows/2","title":"wxGrid.deleteRows/2","type":"function"},{"doc":"Destructor. This will also destroy the associated grid table unless you passed a table object to the grid and specified that the grid should not take ownership of the table (see SetTable() (not implemented in wx)).","ref":"wxGrid.html#destroy/1","title":"wxGrid.destroy/1","type":"function"},{"doc":"Disables in-place editing of grid cells. Equivalent to calling EnableCellEditControl(false).","ref":"wxGrid.html#disableCellEditControl/1","title":"wxGrid.disableCellEditControl/1","type":"function"},{"doc":"Disables column sizing by dragging with the mouse. Equivalent to passing false to enableDragColSize/2 .","ref":"wxGrid.html#disableDragColSize/1","title":"wxGrid.disableDragColSize/1","type":"function"},{"doc":"Disable mouse dragging of grid lines to resize rows and columns. Equivalent to passing false to enableDragGridSize/2","ref":"wxGrid.html#disableDragGridSize/1","title":"wxGrid.disableDragGridSize/1","type":"function"},{"doc":"Disables row sizing by dragging with the mouse. Equivalent to passing false to enableDragRowSize/2 .","ref":"wxGrid.html#disableDragRowSize/1","title":"wxGrid.disableDragRowSize/1","type":"function"},{"doc":"","ref":"wxGrid.html#enableCellEditControl/1","title":"wxGrid.enableCellEditControl/1","type":"function"},{"doc":"Enables or disables in-place editing of grid cell data. Enabling in-place editing generates wxEVT_GRID_EDITOR_SHOWN and, if it isn't vetoed by the application, shows the in-place editor which allows the user to change the cell value. Disabling in-place editing does nothing if the in-place editor isn't currently shown, otherwise the wxEVT_GRID_EDITOR_HIDDEN event is generated but, unlike the &quot;shown&quot; event, it can't be vetoed and the in-place editor is dismissed unconditionally. Note that it is an error to call this function if the current cell is read-only, use canEnableCellControl/1 to check for this precondition.","ref":"wxGrid.html#enableCellEditControl/2","title":"wxGrid.enableCellEditControl/2","type":"function"},{"doc":"","ref":"wxGrid.html#enableDragColSize/1","title":"wxGrid.enableDragColSize/1","type":"function"},{"doc":"Enables or disables column sizing by dragging with the mouse. See: DisableColResize() (not implemented in wx)","ref":"wxGrid.html#enableDragColSize/2","title":"wxGrid.enableDragColSize/2","type":"function"},{"doc":"","ref":"wxGrid.html#enableDragGridSize/1","title":"wxGrid.enableDragGridSize/1","type":"function"},{"doc":"Enables or disables row and column resizing by dragging gridlines with the mouse.","ref":"wxGrid.html#enableDragGridSize/2","title":"wxGrid.enableDragGridSize/2","type":"function"},{"doc":"","ref":"wxGrid.html#enableDragRowSize/1","title":"wxGrid.enableDragRowSize/1","type":"function"},{"doc":"Enables or disables row sizing by dragging with the mouse. See: DisableRowResize() (not implemented in wx)","ref":"wxGrid.html#enableDragRowSize/2","title":"wxGrid.enableDragRowSize/2","type":"function"},{"doc":"Makes the grid globally editable or read-only. If the edit argument is false this function sets the whole grid as read-only. If the argument is true the grid is set to the default state where cells may be editable. In the default state you can set single grid cells and whole rows and columns to be editable or read-only via wxGridCellAttr:setReadOnly/2 . For single cells you can also use the shortcut function setReadOnly/4 . For more information about controlling grid cell attributes see the wxGridCellAttr class and the overview_grid.","ref":"wxGrid.html#enableEditing/2","title":"wxGrid.enableEditing/2","type":"function"},{"doc":"","ref":"wxGrid.html#enableGridLines/1","title":"wxGrid.enableGridLines/1","type":"function"},{"doc":"Turns the drawing of grid lines on or off.","ref":"wxGrid.html#enableGridLines/2","title":"wxGrid.enableGridLines/2","type":"function"},{"doc":"Decrements the grid's batch count. When the count is greater than zero repainting of the grid is suppressed. Each previous call to beginBatch/1 must be matched by a later call to endBatch/1 . Code that does a lot of grid modification can be enclosed between beginBatch/1 and endBatch/1 calls to avoid screen flicker. The final endBatch/1 will cause the grid to be repainted. See: wxGridUpdateLocker (not implemented in wx)","ref":"wxGrid.html#endBatch/1","title":"wxGrid.endBatch/1","type":"function"},{"doc":"Overridden wxWindow method.","ref":"wxGrid.html#fit/1","title":"wxGrid.fit/1","type":"function"},{"doc":"Causes immediate repainting of the grid. Use this instead of the usual wxWindow:refresh/2 .","ref":"wxGrid.html#forceRefresh/1","title":"wxGrid.forceRefresh/1","type":"function"},{"doc":"Returns the number of times that beginBatch/1 has been called without (yet) matching calls to endBatch/1 . While the grid's batch count is greater than zero the display will not be updated.","ref":"wxGrid.html#getBatchCount/1","title":"wxGrid.getBatchCount/1","type":"function"},{"doc":"Sets the arguments to the horizontal and vertical text alignment values for the grid cell at the specified location. Horizontal alignment will be one of wxALIGN_LEFT , wxALIGN_CENTRE or wxALIGN_RIGHT . Vertical alignment will be one of wxALIGN_TOP , wxALIGN_CENTRE or wxALIGN_BOTTOM .","ref":"wxGrid.html#getCellAlignment/3","title":"wxGrid.getCellAlignment/3","type":"function"},{"doc":"Returns the background colour of the cell at the specified location.","ref":"wxGrid.html#getCellBackgroundColour/3","title":"wxGrid.getCellBackgroundColour/3","type":"function"},{"doc":"Returns a pointer to the editor for the cell at the specified location. See wxGridCellEditor and the overview_grid for more information about cell editors and renderers. The caller must call DecRef() on the returned pointer.","ref":"wxGrid.html#getCellEditor/3","title":"wxGrid.getCellEditor/3","type":"function"},{"doc":"Returns the font for text in the grid cell at the specified location.","ref":"wxGrid.html#getCellFont/3","title":"wxGrid.getCellFont/3","type":"function"},{"doc":"Returns a pointer to the renderer for the grid cell at the specified location. See wxGridCellRenderer and the overview_grid for more information about cell editors and renderers. The caller must call DecRef() on the returned pointer.","ref":"wxGrid.html#getCellRenderer/3","title":"wxGrid.getCellRenderer/3","type":"function"},{"doc":"Returns the text colour for the grid cell at the specified location.","ref":"wxGrid.html#getCellTextColour/3","title":"wxGrid.getCellTextColour/3","type":"function"},{"doc":"Returns the string contained in the cell at the specified location. For simple applications where a grid object automatically uses a default grid table of string values you use this function together with setCellValue/4 to access cell values. For more complex applications where you have derived your own grid table class that contains various data types (e.g. numeric, boolean or user-defined custom types) then you only use this function for those cells that contain string values. See wxGridTableBase::CanGetValueAs() (not implemented in wx) and the overview_grid for more information.","ref":"wxGrid.html#getCellValue/2","title":"wxGrid.getCellValue/2","type":"function"},{"doc":"Returns the string contained in the cell at the specified location. For simple applications where a grid object automatically uses a default grid table of string values you use this function together with setCellValue/4 to access cell values. For more complex applications where you have derived your own grid table class that contains various data types (e.g. numeric, boolean or user-defined custom types) then you only use this function for those cells that contain string values. See wxGridTableBase::CanGetValueAs() (not implemented in wx) and the overview_grid for more information.","ref":"wxGrid.html#getCellValue/3","title":"wxGrid.getCellValue/3","type":"function"},{"doc":"Sets the arguments to the current column label alignment values. Horizontal alignment will be one of wxALIGN_LEFT , wxALIGN_CENTRE or wxALIGN_RIGHT . Vertical alignment will be one of wxALIGN_TOP , wxALIGN_CENTRE or wxALIGN_BOTTOM .","ref":"wxGrid.html#getColLabelAlignment/1","title":"wxGrid.getColLabelAlignment/1","type":"function"},{"doc":"Returns the current height of the column labels.","ref":"wxGrid.html#getColLabelSize/1","title":"wxGrid.getColLabelSize/1","type":"function"},{"doc":"Returns the specified column label. The default grid table class provides column labels of the form A,B...Z,AA,AB...ZZ,AAA... If you are using a custom grid table you can override wxGridTableBase::GetColLabelValue() (not implemented in wx) to provide your own labels.","ref":"wxGrid.html#getColLabelValue/2","title":"wxGrid.getColLabelValue/2","type":"function"},{"doc":"Returns the minimal width to which a column may be resized. Use setColMinimalAcceptableWidth/2 to change this value globally or setColMinimalWidth/3 to do it for individual columns. See: getRowMinimalAcceptableHeight/1","ref":"wxGrid.html#getColMinimalAcceptableWidth/1","title":"wxGrid.getColMinimalAcceptableWidth/1","type":"function"},{"doc":"Returns the default cell alignment. Horizontal alignment will be one of wxALIGN_LEFT , wxALIGN_CENTRE or wxALIGN_RIGHT . Vertical alignment will be one of wxALIGN_TOP , wxALIGN_CENTRE or wxALIGN_BOTTOM . See: setDefaultCellAlignment/3","ref":"wxGrid.html#getDefaultCellAlignment/1","title":"wxGrid.getDefaultCellAlignment/1","type":"function"},{"doc":"Returns the current default background colour for grid cells.","ref":"wxGrid.html#getDefaultCellBackgroundColour/1","title":"wxGrid.getDefaultCellBackgroundColour/1","type":"function"},{"doc":"Returns the current default font for grid cell text.","ref":"wxGrid.html#getDefaultCellFont/1","title":"wxGrid.getDefaultCellFont/1","type":"function"},{"doc":"Returns the current default colour for grid cell text.","ref":"wxGrid.html#getDefaultCellTextColour/1","title":"wxGrid.getDefaultCellTextColour/1","type":"function"},{"doc":"Returns the default height for column labels.","ref":"wxGrid.html#getDefaultColLabelSize/1","title":"wxGrid.getDefaultColLabelSize/1","type":"function"},{"doc":"Returns the current default width for grid columns.","ref":"wxGrid.html#getDefaultColSize/1","title":"wxGrid.getDefaultColSize/1","type":"function"},{"doc":"Returns a pointer to the current default grid cell editor. See wxGridCellEditor and the overview_grid for more information about cell editors and renderers.","ref":"wxGrid.html#getDefaultEditor/1","title":"wxGrid.getDefaultEditor/1","type":"function"},{"doc":"Returns the default editor for the specified cell. The base class version returns the editor appropriate for the current cell type but this method may be overridden in the derived classes to use custom editors for some cells by default. Notice that the same may be achieved in a usually simpler way by associating a custom editor with the given cell or cells. The caller must call DecRef() on the returned pointer.","ref":"wxGrid.html#getDefaultEditorForCell/2","title":"wxGrid.getDefaultEditorForCell/2","type":"function"},{"doc":"Returns the default editor for the specified cell. The base class version returns the editor appropriate for the current cell type but this method may be overridden in the derived classes to use custom editors for some cells by default. Notice that the same may be achieved in a usually simpler way by associating a custom editor with the given cell or cells. The caller must call DecRef() on the returned pointer.","ref":"wxGrid.html#getDefaultEditorForCell/3","title":"wxGrid.getDefaultEditorForCell/3","type":"function"},{"doc":"Returns the default editor for the cells containing values of the given type. The base class version returns the editor which was associated with the specified typeName when it was registered registerDataType/4 but this function may be overridden to return something different. This allows overriding an editor used for one of the standard types. The caller must call DecRef() on the returned pointer.","ref":"wxGrid.html#getDefaultEditorForType/2","title":"wxGrid.getDefaultEditorForType/2","type":"function"},{"doc":"Returns a pointer to the current default grid cell renderer. See wxGridCellRenderer and the overview_grid for more information about cell editors and renderers. The caller must call DecRef() on the returned pointer.","ref":"wxGrid.html#getDefaultRenderer/1","title":"wxGrid.getDefaultRenderer/1","type":"function"},{"doc":"Returns the default renderer for the given cell. The base class version returns the renderer appropriate for the current cell type but this method may be overridden in the derived classes to use custom renderers for some cells by default. The caller must call DecRef() on the returned pointer.","ref":"wxGrid.html#getDefaultRendererForCell/3","title":"wxGrid.getDefaultRendererForCell/3","type":"function"},{"doc":"Returns the default renderer for the cell containing values of the given type. See: getDefaultEditorForType/2","ref":"wxGrid.html#getDefaultRendererForType/2","title":"wxGrid.getDefaultRendererForType/2","type":"function"},{"doc":"Returns the default width for the row labels.","ref":"wxGrid.html#getDefaultRowLabelSize/1","title":"wxGrid.getDefaultRowLabelSize/1","type":"function"},{"doc":"Returns the current default height for grid rows.","ref":"wxGrid.html#getDefaultRowSize/1","title":"wxGrid.getDefaultRowSize/1","type":"function"},{"doc":"Return the column labels window. This window is not shown if the columns labels were hidden using HideColLabels() (not implemented in wx). Depending on whether UseNativeColHeader() (not implemented in wx) was called or not this can be either a wxHeaderCtrl (not implemented in wx) or a plain wxWindow . This function returns a valid window pointer in either case but in the former case you can also use GetGridColHeader() (not implemented in wx) to access it if you need wxHeaderCtrl-specific functionality.","ref":"wxGrid.html#getGridColLabelWindow/1","title":"wxGrid.getGridColLabelWindow/1","type":"function"},{"doc":"Return the window in the top left grid corner. This window is shown only of both columns and row labels are shown and normally doesn't contain anything. Clicking on it is handled by wxGrid however and can be used to select the entire grid.","ref":"wxGrid.html#getGridCornerLabelWindow/1","title":"wxGrid.getGridCornerLabelWindow/1","type":"function"},{"doc":"Returns the current grid cell column position. See: GetGridCursorCoords() (not implemented in wx)","ref":"wxGrid.html#getGridCursorCol/1","title":"wxGrid.getGridCursorCol/1","type":"function"},{"doc":"Returns the current grid cell row position. See: GetGridCursorCoords() (not implemented in wx)","ref":"wxGrid.html#getGridCursorRow/1","title":"wxGrid.getGridCursorRow/1","type":"function"},{"doc":"Returns the colour used for grid lines. See: GetDefaultGridLinePen() (not implemented in wx)","ref":"wxGrid.html#getGridLineColour/1","title":"wxGrid.getGridLineColour/1","type":"function"},{"doc":"Return the row labels window. This window is not shown if the row labels were hidden using HideRowLabels() (not implemented in wx).","ref":"wxGrid.html#getGridRowLabelWindow/1","title":"wxGrid.getGridRowLabelWindow/1","type":"function"},{"doc":"Return the main grid window containing the grid cells. This window is always shown.","ref":"wxGrid.html#getGridWindow/1","title":"wxGrid.getGridWindow/1","type":"function"},{"doc":"Returns the colour used for the background of row and column labels.","ref":"wxGrid.html#getLabelBackgroundColour/1","title":"wxGrid.getLabelBackgroundColour/1","type":"function"},{"doc":"Returns the font used for row and column labels.","ref":"wxGrid.html#getLabelFont/1","title":"wxGrid.getLabelFont/1","type":"function"},{"doc":"Returns the colour used for row and column label text.","ref":"wxGrid.html#getLabelTextColour/1","title":"wxGrid.getLabelTextColour/1","type":"function"},{"doc":"Returns the total number of grid columns. This is the same as the number of columns in the underlying grid table.","ref":"wxGrid.html#getNumberCols/1","title":"wxGrid.getNumberCols/1","type":"function"},{"doc":"Returns the total number of grid rows. This is the same as the number of rows in the underlying grid table.","ref":"wxGrid.html#getNumberRows/1","title":"wxGrid.getNumberRows/1","type":"function"},{"doc":"Returns the attribute for the given cell creating one if necessary. If the cell already has an attribute, it is returned. Otherwise a new attribute is created, associated with the cell and returned. In any case the caller must call DecRef() on the returned pointer. Prefer to use GetOrCreateCellAttrPtr() (not implemented in wx) to avoid the need to call DecRef() on the returned pointer. This function may only be called if CanHaveAttributes() (not implemented in wx) returns true.","ref":"wxGrid.html#getOrCreateCellAttr/3","title":"wxGrid.getOrCreateCellAttr/3","type":"function"},{"doc":"Returns the alignment used for row labels. Horizontal alignment will be one of wxALIGN_LEFT , wxALIGN_CENTRE or wxALIGN_RIGHT . Vertical alignment will be one of wxALIGN_TOP , wxALIGN_CENTRE or wxALIGN_BOTTOM .","ref":"wxGrid.html#getRowLabelAlignment/1","title":"wxGrid.getRowLabelAlignment/1","type":"function"},{"doc":"Returns the current width of the row labels.","ref":"wxGrid.html#getRowLabelSize/1","title":"wxGrid.getRowLabelSize/1","type":"function"},{"doc":"Returns the specified row label. The default grid table class provides numeric row labels. If you are using a custom grid table you can override wxGridTableBase::GetRowLabelValue() (not implemented in wx) to provide your own labels.","ref":"wxGrid.html#getRowLabelValue/2","title":"wxGrid.getRowLabelValue/2","type":"function"},{"doc":"Returns the minimal size to which rows can be resized. Use setRowMinimalAcceptableHeight/2 to change this value globally or setRowMinimalHeight/3 to do it for individual cells. See: getColMinimalAcceptableWidth/1","ref":"wxGrid.html#getRowMinimalAcceptableHeight/1","title":"wxGrid.getRowMinimalAcceptableHeight/1","type":"function"},{"doc":"Returns the height of the specified row.","ref":"wxGrid.html#getRowSize/2","title":"wxGrid.getRowSize/2","type":"function"},{"doc":"Returns the number of pixels per horizontal scroll increment. The default is 15. See: getScrollLineY/1 , setScrollLineX/2 , setScrollLineY/2","ref":"wxGrid.html#getScrollLineX/1","title":"wxGrid.getScrollLineX/1","type":"function"},{"doc":"Returns the number of pixels per vertical scroll increment. The default is 15. See: getScrollLineX/1 , setScrollLineX/2 , setScrollLineY/2","ref":"wxGrid.html#getScrollLineY/1","title":"wxGrid.getScrollLineY/1","type":"function"},{"doc":"Returns an array of individually selected cells. Notice that this array does not contain all the selected cells in general as it doesn't include the cells selected as part of column, row or block selection. You must use this method, getSelectedCols/1 , getSelectedRows/1 and getSelectionBlockTopLeft/1 and getSelectionBlockBottomRight/1 methods to obtain the entire selection in general. Please notice this behaviour is by design and is needed in order to support grids of arbitrary size (when an entire column is selected in a grid with a million of columns, we don't want to create an array with a million of entries in this function, instead it returns an empty array and getSelectedCols/1 returns an array containing one element). The function can be slow for the big grids, use GetSelectedBlocks() (not implemented in wx) in the new code.","ref":"wxGrid.html#getSelectedCells/1","title":"wxGrid.getSelectedCells/1","type":"function"},{"doc":"Returns an array of selected columns. Please notice that this method alone is not sufficient to find all the selected columns as it contains only the columns which were individually selected but not those being part of the block selection or being selected in virtue of all of their cells being selected individually, please see getSelectedCells/1 for more details. The function can be slow for the big grids, use GetSelectedBlocks() (not implemented in wx) in the new code.","ref":"wxGrid.html#getSelectedCols/1","title":"wxGrid.getSelectedCols/1","type":"function"},{"doc":"Returns an array of selected rows. Please notice that this method alone is not sufficient to find all the selected rows as it contains only the rows which were individually selected but not those being part of the block selection or being selected in virtue of all of their cells being selected individually, please see getSelectedCells/1 for more details. The function can be slow for the big grids, use GetSelectedBlocks() (not implemented in wx) in the new code.","ref":"wxGrid.html#getSelectedRows/1","title":"wxGrid.getSelectedRows/1","type":"function"},{"doc":"Returns the colour used for drawing the selection background.","ref":"wxGrid.html#getSelectionBackground/1","title":"wxGrid.getSelectionBackground/1","type":"function"},{"doc":"Returns an array of the bottom right corners of blocks of selected cells. Please see getSelectedCells/1 for more information about the selection representation in wxGrid . The function can be slow for the big grids, use GetSelectedBlocks() (not implemented in wx) in the new code. See: getSelectionBlockTopLeft/1","ref":"wxGrid.html#getSelectionBlockBottomRight/1","title":"wxGrid.getSelectionBlockBottomRight/1","type":"function"},{"doc":"Returns an array of the top left corners of blocks of selected cells. Please see getSelectedCells/1 for more information about the selection representation in wxGrid . The function can be slow for the big grids, use GetSelectedBlocks() (not implemented in wx) in the new code. See: getSelectionBlockBottomRight/1","ref":"wxGrid.html#getSelectionBlockTopLeft/1","title":"wxGrid.getSelectionBlockTopLeft/1","type":"function"},{"doc":"Returns the colour used for drawing the selection foreground.","ref":"wxGrid.html#getSelectionForeground/1","title":"wxGrid.getSelectionForeground/1","type":"function"},{"doc":"Returns true if drawing of grid lines is turned on, false otherwise.","ref":"wxGrid.html#gridLinesEnabled/1","title":"wxGrid.gridLinesEnabled/1","type":"function"},{"doc":"Hides the in-place cell edit control.","ref":"wxGrid.html#hideCellEditControl/1","title":"wxGrid.hideCellEditControl/1","type":"function"},{"doc":"","ref":"wxGrid.html#insertCols/1","title":"wxGrid.insertCols/1","type":"function"},{"doc":"Inserts one or more new columns into a grid with the first new column at the specified position. Notice that inserting the columns in the grid requires grid table cooperation: when this method is called, grid object begins by requesting the underlying grid table to insert new columns. If this is successful the table notifies the grid and the grid updates the display. For a default grid (one where you have called createGrid/4 ) this process is automatic. If you are using a custom grid table (specified with SetTable() (not implemented in wx) or AssignTable() (not implemented in wx)) then you must override wxGridTableBase::InsertCols() (not implemented in wx) in your derived table class. Return: true if the columns were successfully inserted, false if an error occurred (most likely the table couldn't be updated).","ref":"wxGrid.html#insertCols/2","title":"wxGrid.insertCols/2","type":"function"},{"doc":"","ref":"wxGrid.html#insertRows/1","title":"wxGrid.insertRows/1","type":"function"},{"doc":"Inserts one or more new rows into a grid with the first new row at the specified position. Notice that you must implement wxGridTableBase::InsertRows() (not implemented in wx) if you use a grid with a custom table, please see insertCols/2 for more information. Return: true if the rows were successfully inserted, false if an error occurred (most likely the table couldn't be updated).","ref":"wxGrid.html#insertRows/2","title":"wxGrid.insertRows/2","type":"function"},{"doc":"Returns true if the in-place edit control is currently enabled.","ref":"wxGrid.html#isCellEditControlEnabled/1","title":"wxGrid.isCellEditControlEnabled/1","type":"function"},{"doc":"Returns true if the current cell is read-only. See: setReadOnly/4 , isReadOnly/3","ref":"wxGrid.html#isCurrentCellReadOnly/1","title":"wxGrid.isCurrentCellReadOnly/1","type":"function"},{"doc":"Returns false if the whole grid has been set as read-only or true otherwise. See enableEditing/2 for more information about controlling the editing status of grid cells.","ref":"wxGrid.html#isEditable/1","title":"wxGrid.isEditable/1","type":"function"},{"doc":"Returns true if the given cell is selected.","ref":"wxGrid.html#isInSelection/2","title":"wxGrid.isInSelection/2","type":"function"},{"doc":"Returns true if the given cell is selected.","ref":"wxGrid.html#isInSelection/3","title":"wxGrid.isInSelection/3","type":"function"},{"doc":"Returns true if the cell at the specified location can't be edited. See: setReadOnly/4 , isCurrentCellReadOnly/1","ref":"wxGrid.html#isReadOnly/3","title":"wxGrid.isReadOnly/3","type":"function"},{"doc":"Returns true if there are currently any selected cells, rows, columns or blocks.","ref":"wxGrid.html#isSelection/1","title":"wxGrid.isSelection/1","type":"function"},{"doc":"","ref":"wxGrid.html#isVisible/2","title":"wxGrid.isVisible/2","type":"function"},{"doc":"Returns true if a cell is either entirely or at least partially visible in the grid window. By default, the cell must be entirely visible for this function to return true but if wholeCellVisible is false, the function returns true even if the cell is only partially visible.","ref":"wxGrid.html#isVisible/3","title":"wxGrid.isVisible/3","type":"function"},{"doc":"Returns true if a cell is either entirely or at least partially visible in the grid window. By default, the cell must be entirely visible for this function to return true but if wholeCellVisible is false, the function returns true even if the cell is only partially visible.","ref":"wxGrid.html#isVisible/4","title":"wxGrid.isVisible/4","type":"function"},{"doc":"Brings the specified cell into the visible grid cell area with minimal scrolling. Does nothing if the cell is already visible.","ref":"wxGrid.html#makeCellVisible/2","title":"wxGrid.makeCellVisible/2","type":"function"},{"doc":"Brings the specified cell into the visible grid cell area with minimal scrolling. Does nothing if the cell is already visible.","ref":"wxGrid.html#makeCellVisible/3","title":"wxGrid.makeCellVisible/3","type":"function"},{"doc":"Moves the grid cursor down by one row. If a block of cells was previously selected it will expand if the argument is true or be cleared if the argument is false.","ref":"wxGrid.html#moveCursorDown/2","title":"wxGrid.moveCursorDown/2","type":"function"},{"doc":"Moves the grid cursor down in the current column such that it skips to the beginning or end of a block of non-empty cells. If a block of cells was previously selected it will expand if the argument is true or be cleared if the argument is false.","ref":"wxGrid.html#moveCursorDownBlock/2","title":"wxGrid.moveCursorDownBlock/2","type":"function"},{"doc":"Moves the grid cursor left by one column. If a block of cells was previously selected it will expand if the argument is true or be cleared if the argument is false.","ref":"wxGrid.html#moveCursorLeft/2","title":"wxGrid.moveCursorLeft/2","type":"function"},{"doc":"Moves the grid cursor left in the current row such that it skips to the beginning or end of a block of non-empty cells. If a block of cells was previously selected it will expand if the argument is true or be cleared if the argument is false.","ref":"wxGrid.html#moveCursorLeftBlock/2","title":"wxGrid.moveCursorLeftBlock/2","type":"function"},{"doc":"Moves the grid cursor right by one column. If a block of cells was previously selected it will expand if the argument is true or be cleared if the argument is false.","ref":"wxGrid.html#moveCursorRight/2","title":"wxGrid.moveCursorRight/2","type":"function"},{"doc":"Moves the grid cursor right in the current row such that it skips to the beginning or end of a block of non-empty cells. If a block of cells was previously selected it will expand if the argument is true or be cleared if the argument is false.","ref":"wxGrid.html#moveCursorRightBlock/2","title":"wxGrid.moveCursorRightBlock/2","type":"function"},{"doc":"Moves the grid cursor up by one row. If a block of cells was previously selected it will expand if the argument is true or be cleared if the argument is false.","ref":"wxGrid.html#moveCursorUp/2","title":"wxGrid.moveCursorUp/2","type":"function"},{"doc":"Moves the grid cursor up in the current column such that it skips to the beginning or end of a block of non-empty cells. If a block of cells was previously selected it will expand if the argument is true or be cleared if the argument is false.","ref":"wxGrid.html#moveCursorUpBlock/2","title":"wxGrid.moveCursorUpBlock/2","type":"function"},{"doc":"Moves the grid cursor down by some number of rows so that the previous bottom visible row becomes the top visible row.","ref":"wxGrid.html#movePageDown/1","title":"wxGrid.movePageDown/1","type":"function"},{"doc":"Moves the grid cursor up by some number of rows so that the previous top visible row becomes the bottom visible row.","ref":"wxGrid.html#movePageUp/1","title":"wxGrid.movePageUp/1","type":"function"},{"doc":"Default constructor. You must call Create() (not implemented in wx) to really create the grid window and also call createGrid/4 or SetTable() (not implemented in wx) or AssignTable() (not implemented in wx) to initialize its contents.","ref":"wxGrid.html#new/0","title":"wxGrid.new/0","type":"function"},{"doc":"","ref":"wxGrid.html#new/2","title":"wxGrid.new/2","type":"function"},{"doc":"Constructor creating the grid window. You must call either createGrid/4 or SetTable() (not implemented in wx) or AssignTable() (not implemented in wx) to initialize the grid contents before using it.","ref":"wxGrid.html#new/3","title":"wxGrid.new/3","type":"function"},{"doc":"Register a new data type. The data types allow to naturally associate specific renderers and editors to the cells containing values of the given type. For example, the grid automatically registers a data type with the name wxGRID_VALUE_STRING which uses wxGridCellStringRenderer and wxGridCellTextEditor as its renderer and editor respectively - this is the data type used by all the cells of the default wxGridStringTable (not implemented in wx), so this renderer and editor are used by default for all grid cells. However if a custom table returns wxGRID_VALUE_BOOL from its wxGridTableBase::GetTypeName() (not implemented in wx) method, then wxGridCellBoolRenderer and wxGridCellBoolEditor are used for it because the grid also registers a boolean data type with this name. And as this mechanism is completely generic, you may register your own data types using your own custom renderers and editors. Just remember that the table must identify a cell as being of the given type for them to be used for this cell.","ref":"wxGrid.html#registerDataType/4","title":"wxGrid.registerDataType/4","type":"function"},{"doc":"Sets the value of the current grid cell to the current in-place edit control value. This is called automatically when the grid cursor moves from the current cell to a new cell. It is also a good idea to call this function when closing a grid since any edits to the final cell location will not be saved otherwise.","ref":"wxGrid.html#saveEditControlValue/1","title":"wxGrid.saveEditControlValue/1","type":"function"},{"doc":"Selects all cells in the grid.","ref":"wxGrid.html#selectAll/1","title":"wxGrid.selectAll/1","type":"function"},{"doc":"","ref":"wxGrid.html#selectBlock/3","title":"wxGrid.selectBlock/3","type":"function"},{"doc":"Selects a rectangular block of cells. If addToSelected is false then any existing selection will be deselected; if true the column will be added to the existing selection.","ref":"wxGrid.html#selectBlock/4","title":"wxGrid.selectBlock/4","type":"function"},{"doc":"","ref":"wxGrid.html#selectBlock/5","title":"wxGrid.selectBlock/5","type":"function"},{"doc":"Selects a rectangular block of cells. If addToSelected is false then any existing selection will be deselected; if true the column will be added to the existing selection.","ref":"wxGrid.html#selectBlock/6","title":"wxGrid.selectBlock/6","type":"function"},{"doc":"","ref":"wxGrid.html#selectCol/2","title":"wxGrid.selectCol/2","type":"function"},{"doc":"Selects the specified column. If addToSelected is false then any existing selection will be deselected; if true the column will be added to the existing selection. This method won't select anything if the current selection mode is wxGridSelectRows.","ref":"wxGrid.html#selectCol/3","title":"wxGrid.selectCol/3","type":"function"},{"doc":"","ref":"wxGrid.html#selectRow/2","title":"wxGrid.selectRow/2","type":"function"},{"doc":"Selects the specified row. If addToSelected is false then any existing selection will be deselected; if true the row will be added to the existing selection. This method won't select anything if the current selection mode is wxGridSelectColumns.","ref":"wxGrid.html#selectRow/3","title":"wxGrid.selectRow/3","type":"function"},{"doc":"Sets the horizontal and vertical alignment for grid cell text at the specified location. Horizontal alignment should be one of wxALIGN_LEFT , wxALIGN_CENTRE or wxALIGN_RIGHT . Vertical alignment should be one of wxALIGN_TOP , wxALIGN_CENTRE or wxALIGN_BOTTOM .","ref":"wxGrid.html#setCellAlignment/5","title":"wxGrid.setCellAlignment/5","type":"function"},{"doc":"Set the background colour for the given cell or all cells by default.","ref":"wxGrid.html#setCellBackgroundColour/4","title":"wxGrid.setCellBackgroundColour/4","type":"function"},{"doc":"Sets the editor for the grid cell at the specified location. The grid will take ownership of the pointer. See wxGridCellEditor and the overview_grid for more information about cell editors and renderers.","ref":"wxGrid.html#setCellEditor/4","title":"wxGrid.setCellEditor/4","type":"function"},{"doc":"Sets the font for text in the grid cell at the specified location.","ref":"wxGrid.html#setCellFont/4","title":"wxGrid.setCellFont/4","type":"function"},{"doc":"Sets the renderer for the grid cell at the specified location. The grid will take ownership of the pointer. See wxGridCellRenderer and the overview_grid for more information about cell editors and renderers.","ref":"wxGrid.html#setCellRenderer/4","title":"wxGrid.setCellRenderer/4","type":"function"},{"doc":"Sets the text colour for the given cell.","ref":"wxGrid.html#setCellTextColour/4","title":"wxGrid.setCellTextColour/4","type":"function"},{"doc":"Sets the string value for the cell at the specified location. For simple applications where a grid object automatically uses a default grid table of string values you use this function together with getCellValue/3 to access cell values. For more complex applications where you have derived your own grid table class that contains various data types (e.g. numeric, boolean or user-defined custom types) then you only use this function for those cells that contain string values. See wxGridTableBase::CanSetValueAs() (not implemented in wx) and the overview_grid for more information.","ref":"wxGrid.html#setCellValue/3","title":"wxGrid.setCellValue/3","type":"function"},{"doc":"Sets the string value for the cell at the specified location. For simple applications where a grid object automatically uses a default grid table of string values you use this function together with getCellValue/3 to access cell values. For more complex applications where you have derived your own grid table class that contains various data types (e.g. numeric, boolean or user-defined custom types) then you only use this function for those cells that contain string values. See wxGridTableBase::CanSetValueAs() (not implemented in wx) and the overview_grid for more information.","ref":"wxGrid.html#setCellValue/4","title":"wxGrid.setCellValue/4","type":"function"},{"doc":"Sets the cell attributes for all cells in the specified column. For more information about controlling grid cell attributes see the wxGridCellAttr cell attribute class and the overview_grid.","ref":"wxGrid.html#setColAttr/3","title":"wxGrid.setColAttr/3","type":"function"},{"doc":"Sets the specified column to display boolean values. See: setColFormatCustom/3","ref":"wxGrid.html#setColFormatBool/2","title":"wxGrid.setColFormatBool/2","type":"function"},{"doc":"Sets the specified column to display data in a custom format. This method provides an alternative to defining a custom grid table which would return typeName from its GetTypeName() method for the cells in this column: while it doesn't really change the type of the cells in this column, it does associate the renderer and editor used for the cells of the specified type with them. See the overview_grid for more information on working with custom data types.","ref":"wxGrid.html#setColFormatCustom/3","title":"wxGrid.setColFormatCustom/3","type":"function"},{"doc":"","ref":"wxGrid.html#setColFormatFloat/2","title":"wxGrid.setColFormatFloat/2","type":"function"},{"doc":"Sets the specified column to display floating point values with the given width and precision. See: setColFormatCustom/3","ref":"wxGrid.html#setColFormatFloat/3","title":"wxGrid.setColFormatFloat/3","type":"function"},{"doc":"Sets the specified column to display integer values. See: setColFormatCustom/3","ref":"wxGrid.html#setColFormatNumber/2","title":"wxGrid.setColFormatNumber/2","type":"function"},{"doc":"Sets the horizontal and vertical alignment of column label text. Horizontal alignment should be one of wxALIGN_LEFT , wxALIGN_CENTRE or wxALIGN_RIGHT . Vertical alignment should be one of wxALIGN_TOP , wxALIGN_CENTRE or wxALIGN_BOTTOM .","ref":"wxGrid.html#setColLabelAlignment/3","title":"wxGrid.setColLabelAlignment/3","type":"function"},{"doc":"Sets the height of the column labels. If height equals to wxGRID_AUTOSIZE then height is calculated automatically so that no label is truncated. Note that this could be slow for a large table.","ref":"wxGrid.html#setColLabelSize/2","title":"wxGrid.setColLabelSize/2","type":"function"},{"doc":"Set the value for the given column label. If you are using a custom grid table you must override wxGridTableBase::SetColLabelValue() (not implemented in wx) for this to have any effect.","ref":"wxGrid.html#setColLabelValue/3","title":"wxGrid.setColLabelValue/3","type":"function"},{"doc":"Sets the minimal width to which the user can resize columns. See: getColMinimalAcceptableWidth/1","ref":"wxGrid.html#setColMinimalAcceptableWidth/2","title":"wxGrid.setColMinimalAcceptableWidth/2","type":"function"},{"doc":"Sets the minimal width for the specified column col . It is usually best to call this method during grid creation as calling it later will not resize the column to the given minimal width even if it is currently narrower than it. width must be greater than the minimal acceptable column width as returned by getColMinimalAcceptableWidth/1 .","ref":"wxGrid.html#setColMinimalWidth/3","title":"wxGrid.setColMinimalWidth/3","type":"function"},{"doc":"Sets the width of the specified column.","ref":"wxGrid.html#setColSize/3","title":"wxGrid.setColSize/3","type":"function"},{"doc":"Sets the default horizontal and vertical alignment for grid cell text. Horizontal alignment should be one of wxALIGN_LEFT , wxALIGN_CENTRE or wxALIGN_RIGHT . Vertical alignment should be one of wxALIGN_TOP , wxALIGN_CENTRE or wxALIGN_BOTTOM .","ref":"wxGrid.html#setDefaultCellAlignment/3","title":"wxGrid.setDefaultCellAlignment/3","type":"function"},{"doc":"Sets the default background colour for grid cells.","ref":"wxGrid.html#setDefaultCellBackgroundColour/2","title":"wxGrid.setDefaultCellBackgroundColour/2","type":"function"},{"doc":"Sets the default font to be used for grid cell text.","ref":"wxGrid.html#setDefaultCellFont/2","title":"wxGrid.setDefaultCellFont/2","type":"function"},{"doc":"Sets the current default colour for grid cell text.","ref":"wxGrid.html#setDefaultCellTextColour/2","title":"wxGrid.setDefaultCellTextColour/2","type":"function"},{"doc":"","ref":"wxGrid.html#setDefaultColSize/2","title":"wxGrid.setDefaultColSize/2","type":"function"},{"doc":"Sets the default width for columns in the grid. This will only affect columns subsequently added to the grid unless resizeExistingCols is true. If width is less than getColMinimalAcceptableWidth/1 , then the minimal acceptable width is used instead of it.","ref":"wxGrid.html#setDefaultColSize/3","title":"wxGrid.setDefaultColSize/3","type":"function"},{"doc":"Sets the default editor for grid cells. The grid will take ownership of the pointer. See wxGridCellEditor and the overview_grid for more information about cell editors and renderers.","ref":"wxGrid.html#setDefaultEditor/2","title":"wxGrid.setDefaultEditor/2","type":"function"},{"doc":"Sets the default renderer for grid cells. The grid will take ownership of the pointer. See wxGridCellRenderer and the overview_grid for more information about cell editors and renderers.","ref":"wxGrid.html#setDefaultRenderer/2","title":"wxGrid.setDefaultRenderer/2","type":"function"},{"doc":"","ref":"wxGrid.html#setDefaultRowSize/2","title":"wxGrid.setDefaultRowSize/2","type":"function"},{"doc":"Sets the default height for rows in the grid. This will only affect rows subsequently added to the grid unless resizeExistingRows is true. If height is less than getRowMinimalAcceptableHeight/1 , then the minimal acceptable height is used instead of it.","ref":"wxGrid.html#setDefaultRowSize/3","title":"wxGrid.setDefaultRowSize/3","type":"function"},{"doc":"Set the grid cursor to the specified cell. The grid cursor indicates the current cell and can be moved by the user using the arrow keys or the mouse. Calling this function generates a wxEVT_GRID_SELECT_CELL event and if the event handler vetoes this event, the cursor is not moved. This function doesn't make the target call visible, use GoToCell() (not implemented in wx) to do this.","ref":"wxGrid.html#setGridCursor/2","title":"wxGrid.setGridCursor/2","type":"function"},{"doc":"Set the grid cursor to the specified cell. The grid cursor indicates the current cell and can be moved by the user using the arrow keys or the mouse. Calling this function generates a wxEVT_GRID_SELECT_CELL event and if the event handler vetoes this event, the cursor is not moved. This function doesn't make the target call visible, use GoToCell() (not implemented in wx) to do this.","ref":"wxGrid.html#setGridCursor/3","title":"wxGrid.setGridCursor/3","type":"function"},{"doc":"Sets the colour used to draw grid lines.","ref":"wxGrid.html#setGridLineColour/2","title":"wxGrid.setGridLineColour/2","type":"function"},{"doc":"Sets the background colour for row and column labels.","ref":"wxGrid.html#setLabelBackgroundColour/2","title":"wxGrid.setLabelBackgroundColour/2","type":"function"},{"doc":"Sets the font for row and column labels.","ref":"wxGrid.html#setLabelFont/2","title":"wxGrid.setLabelFont/2","type":"function"},{"doc":"Sets the colour for row and column label text.","ref":"wxGrid.html#setLabelTextColour/2","title":"wxGrid.setLabelTextColour/2","type":"function"},{"doc":"Sets the extra margins used around the grid area. A grid may occupy more space than needed for its data display and this function allows setting how big this extra space is","ref":"wxGrid.html#setMargins/3","title":"wxGrid.setMargins/3","type":"function"},{"doc":"","ref":"wxGrid.html#setReadOnly/3","title":"wxGrid.setReadOnly/3","type":"function"},{"doc":"Makes the cell at the specified location read-only or editable. See: isReadOnly/3","ref":"wxGrid.html#setReadOnly/4","title":"wxGrid.setReadOnly/4","type":"function"},{"doc":"Sets the cell attributes for all cells in the specified row. The grid takes ownership of the attribute pointer. See the wxGridCellAttr class for more information about controlling cell attributes.","ref":"wxGrid.html#setRowAttr/3","title":"wxGrid.setRowAttr/3","type":"function"},{"doc":"Sets the horizontal and vertical alignment of row label text. Horizontal alignment should be one of wxALIGN_LEFT , wxALIGN_CENTRE or wxALIGN_RIGHT . Vertical alignment should be one of wxALIGN_TOP , wxALIGN_CENTRE or wxALIGN_BOTTOM .","ref":"wxGrid.html#setRowLabelAlignment/3","title":"wxGrid.setRowLabelAlignment/3","type":"function"},{"doc":"Sets the width of the row labels. If width equals wxGRID_AUTOSIZE then width is calculated automatically so that no label is truncated. Note that this could be slow for a large table.","ref":"wxGrid.html#setRowLabelSize/2","title":"wxGrid.setRowLabelSize/2","type":"function"},{"doc":"Sets the value for the given row label. If you are using a derived grid table you must override wxGridTableBase::SetRowLabelValue() (not implemented in wx) for this to have any effect.","ref":"wxGrid.html#setRowLabelValue/3","title":"wxGrid.setRowLabelValue/3","type":"function"},{"doc":"Sets the minimal row height used by default. See setColMinimalAcceptableWidth/2 for more information.","ref":"wxGrid.html#setRowMinimalAcceptableHeight/2","title":"wxGrid.setRowMinimalAcceptableHeight/2","type":"function"},{"doc":"Sets the minimal height for the specified row . See setColMinimalWidth/3 for more information.","ref":"wxGrid.html#setRowMinimalHeight/3","title":"wxGrid.setRowMinimalHeight/3","type":"function"},{"doc":"Sets the height of the specified row. See setColSize/3 for more information.","ref":"wxGrid.html#setRowSize/3","title":"wxGrid.setRowSize/3","type":"function"},{"doc":"Sets the number of pixels per horizontal scroll increment. The default is 15. See: getScrollLineX/1 , getScrollLineY/1 , setScrollLineY/2","ref":"wxGrid.html#setScrollLineX/2","title":"wxGrid.setScrollLineX/2","type":"function"},{"doc":"Sets the number of pixels per vertical scroll increment. The default is 15. See: getScrollLineX/1 , getScrollLineY/1 , setScrollLineX/2","ref":"wxGrid.html#setScrollLineY/2","title":"wxGrid.setScrollLineY/2","type":"function"},{"doc":"Set the colour to be used for drawing the selection background.","ref":"wxGrid.html#setSelectionBackground/2","title":"wxGrid.setSelectionBackground/2","type":"function"},{"doc":"Set the colour to be used for drawing the selection foreground.","ref":"wxGrid.html#setSelectionForeground/2","title":"wxGrid.setSelectionForeground/2","type":"function"},{"doc":"Set the selection behaviour of the grid. The existing selection is converted to conform to the new mode if possible and discarded otherwise (e.g. any individual selected cells are deselected if the new mode allows only the selection of the entire rows or columns).","ref":"wxGrid.html#setSelectionMode/2","title":"wxGrid.setSelectionMode/2","type":"function"},{"doc":"Displays the active in-place cell edit control for the current cell after it was hidden. This method should only be called after calling hideCellEditControl/1 , to start editing the current grid cell use enableCellEditControl/2 instead.","ref":"wxGrid.html#showCellEditControl/1","title":"wxGrid.showCellEditControl/1","type":"function"},{"doc":"","ref":"wxGrid.html#xToCol/2","title":"wxGrid.xToCol/2","type":"function"},{"doc":"Returns the column at the given pixel position depending on the window. Return: The column index or wxNOT_FOUND .","ref":"wxGrid.html#xToCol/3","title":"wxGrid.xToCol/3","type":"function"},{"doc":"Returns the column whose right hand edge is close to the given logical x position. If no column edge is near to this position wxNOT_FOUND is returned.","ref":"wxGrid.html#xToEdgeOfCol/2","title":"wxGrid.xToEdgeOfCol/2","type":"function"},{"doc":"Returns the row whose bottom edge is close to the given logical y position. If no row edge is near to this position wxNOT_FOUND is returned.","ref":"wxGrid.html#yToEdgeOfRow/2","title":"wxGrid.yToEdgeOfRow/2","type":"function"},{"doc":"","ref":"wxGrid.html#yToRow/2","title":"wxGrid.yToRow/2","type":"function"},{"doc":"Returns the grid row that corresponds to the logical y coordinate. The parameter gridWindow is new since wxWidgets 3.1.3. If it is specified, i.e. non-NULL, only the cells of this window are considered, i.e. the function returns wxNOT_FOUND if y is out of bounds. If gridWindow is NULL, the function returns wxNOT_FOUND only if there is no row at all at the y position.","ref":"wxGrid.html#yToRow/3","title":"wxGrid.yToRow/3","type":"function"},{"doc":"","ref":"wxGrid.html#t:wxGrid/0","title":"wxGrid.wxGrid/0","type":"type"},{"doc":"A wxSizer that can lay out items in a virtual grid like a wxFlexGridSizer but in this case explicit positioning of the items is allowed using wxGBPosition (not implemented in wx), and items can optionally span more than one row and/or column using wxGBSpan (not implemented in wx). This class is derived (and can use functions) from: wxFlexGridSizer wxGridSizer wxSizer wxWidgets docs: wxGridBagSizer","ref":"wxGridBagSizer.html","title":"wxGridBagSizer","type":"module"},{"doc":"","ref":"wxGridBagSizer.html#add/2","title":"wxGridBagSizer.add/2","type":"function"},{"doc":"","ref":"wxGridBagSizer.html#add/3","title":"wxGridBagSizer.add/3","type":"function"},{"doc":"Adds the given item to the given position. Return: A valid pointer if the item was successfully placed at the given position, or NULL if something was already there.","ref":"wxGridBagSizer.html#add/4","title":"wxGridBagSizer.add/4","type":"function"},{"doc":"Adds a spacer to the given position. width and height specify the dimension of the spacer to be added. Return: A valid pointer if the spacer was successfully placed at the given position, or NULL if something was already there.","ref":"wxGridBagSizer.html#add/5","title":"wxGridBagSizer.add/5","type":"function"},{"doc":"Called when the managed size of the sizer is needed or when layout needs done.","ref":"wxGridBagSizer.html#calcMin/1","title":"wxGridBagSizer.calcMin/1","type":"function"},{"doc":"","ref":"wxGridBagSizer.html#checkForIntersection/2","title":"wxGridBagSizer.checkForIntersection/2","type":"function"},{"doc":"Look at all items and see if any intersect (or would overlap) the given item. Returns true if so, false if there would be no overlap. If an excludeItem is given then it will not be checked for intersection, for example it may be the item we are checking the position of.","ref":"wxGridBagSizer.html#checkForIntersection/3","title":"wxGridBagSizer.checkForIntersection/3","type":"function"},{"doc":"","ref":"wxGridBagSizer.html#checkForIntersection/4","title":"wxGridBagSizer.checkForIntersection/4","type":"function"},{"doc":"Destroys the object.","ref":"wxGridBagSizer.html#destroy/1","title":"wxGridBagSizer.destroy/1","type":"function"},{"doc":"Find the sizer item for the given window or subsizer, returns NULL if not found. (non-recursive)","ref":"wxGridBagSizer.html#findItem/2","title":"wxGridBagSizer.findItem/2","type":"function"},{"doc":"Return the sizer item located at the point given in pt, or NULL if there is no item at that point. The (x,y) coordinates in pt correspond to the client coordinates of the window using the sizer for layout. (non-recursive)","ref":"wxGridBagSizer.html#findItemAtPoint/2","title":"wxGridBagSizer.findItemAtPoint/2","type":"function"},{"doc":"Return the sizer item for the given grid cell, or NULL if there is no item at that position. (non-recursive)","ref":"wxGridBagSizer.html#findItemAtPosition/2","title":"wxGridBagSizer.findItemAtPosition/2","type":"function"},{"doc":"Return the sizer item that has a matching user data (it only compares pointer values) or NULL if not found. (non-recursive)","ref":"wxGridBagSizer.html#findItemWithData/2","title":"wxGridBagSizer.findItemWithData/2","type":"function"},{"doc":"Get the size of the specified cell, including hgap and vgap. Only valid after window layout has been performed.","ref":"wxGridBagSizer.html#getCellSize/3","title":"wxGridBagSizer.getCellSize/3","type":"function"},{"doc":"Get the size used for cells in the grid with no item.","ref":"wxGridBagSizer.html#getEmptyCellSize/1","title":"wxGridBagSizer.getEmptyCellSize/1","type":"function"},{"doc":"","ref":"wxGridBagSizer.html#getItemPosition/2","title":"wxGridBagSizer.getItemPosition/2","type":"function"},{"doc":"","ref":"wxGridBagSizer.html#getItemSpan/2","title":"wxGridBagSizer.getItemSpan/2","type":"function"},{"doc":"","ref":"wxGridBagSizer.html#new/0","title":"wxGridBagSizer.new/0","type":"function"},{"doc":"Constructor, with optional parameters to specify the gap between the rows and columns.","ref":"wxGridBagSizer.html#new/1","title":"wxGridBagSizer.new/1","type":"function"},{"doc":"Set the size used for cells in the grid with no item.","ref":"wxGridBagSizer.html#setEmptyCellSize/2","title":"wxGridBagSizer.setEmptyCellSize/2","type":"function"},{"doc":"","ref":"wxGridBagSizer.html#setItemPosition/3","title":"wxGridBagSizer.setItemPosition/3","type":"function"},{"doc":"","ref":"wxGridBagSizer.html#setItemSpan/3","title":"wxGridBagSizer.setItemSpan/3","type":"function"},{"doc":"","ref":"wxGridBagSizer.html#t:wxGridBagSizer/0","title":"wxGridBagSizer.wxGridBagSizer/0","type":"type"},{"doc":"This class can be used to alter the cells' appearance in the grid by changing their attributes from the defaults. An object of this class may be returned by wxGridTableBase::GetAttr() (not implemented in wx). Note that objects of this class are reference-counted and it's recommended to use wxGridCellAttrPtr smart pointer class when working with them to avoid memory leaks. wxWidgets docs: wxGridCellAttr","ref":"wxGridCellAttr.html","title":"wxGridCellAttr","type":"module"},{"doc":"Get the alignment to use for the cell with the given attribute. If this attribute doesn't specify any alignment, the default attribute alignment is used (which can be changed using wxGrid:setDefaultCellAlignment/3 but is left and top by default). Notice that hAlign and vAlign values are always overwritten by this function, use GetNonDefaultAlignment() (not implemented in wx) if this is not desirable.","ref":"wxGridCellAttr.html#getAlignment/1","title":"wxGridCellAttr.getAlignment/1","type":"function"},{"doc":"Returns the background colour.","ref":"wxGridCellAttr.html#getBackgroundColour/1","title":"wxGridCellAttr.getBackgroundColour/1","type":"function"},{"doc":"Returns the cell editor. The caller is responsible for calling DecRef() (not implemented in wx) on the returned pointer, use GetEditorPtr() (not implemented in wx) to do it automatically.","ref":"wxGridCellAttr.html#getEditor/4","title":"wxGridCellAttr.getEditor/4","type":"function"},{"doc":"Returns the font.","ref":"wxGridCellAttr.html#getFont/1","title":"wxGridCellAttr.getFont/1","type":"function"},{"doc":"Returns the cell renderer. The caller is responsible for calling DecRef() (not implemented in wx) on the returned pointer, use GetRendererPtr() (not implemented in wx) to do it automatically.","ref":"wxGridCellAttr.html#getRenderer/4","title":"wxGridCellAttr.getRenderer/4","type":"function"},{"doc":"Returns the text colour.","ref":"wxGridCellAttr.html#getTextColour/1","title":"wxGridCellAttr.getTextColour/1","type":"function"},{"doc":"Returns true if this attribute has a valid alignment set.","ref":"wxGridCellAttr.html#hasAlignment/1","title":"wxGridCellAttr.hasAlignment/1","type":"function"},{"doc":"Returns true if this attribute has a valid background colour set.","ref":"wxGridCellAttr.html#hasBackgroundColour/1","title":"wxGridCellAttr.hasBackgroundColour/1","type":"function"},{"doc":"Returns true if this attribute has a valid cell editor set.","ref":"wxGridCellAttr.html#hasEditor/1","title":"wxGridCellAttr.hasEditor/1","type":"function"},{"doc":"Returns true if this attribute has a valid font set.","ref":"wxGridCellAttr.html#hasFont/1","title":"wxGridCellAttr.hasFont/1","type":"function"},{"doc":"Returns true if this attribute has a valid cell renderer set.","ref":"wxGridCellAttr.html#hasRenderer/1","title":"wxGridCellAttr.hasRenderer/1","type":"function"},{"doc":"Returns true if this attribute has a valid text colour set.","ref":"wxGridCellAttr.html#hasTextColour/1","title":"wxGridCellAttr.hasTextColour/1","type":"function"},{"doc":"Returns true if this cell is set as read-only.","ref":"wxGridCellAttr.html#isReadOnly/1","title":"wxGridCellAttr.isReadOnly/1","type":"function"},{"doc":"Sets the alignment. hAlign can be one of wxALIGN_LEFT , wxALIGN_CENTRE or wxALIGN_RIGHT and vAlign can be one of wxALIGN_TOP , wxALIGN_CENTRE or wxALIGN_BOTTOM .","ref":"wxGridCellAttr.html#setAlignment/3","title":"wxGridCellAttr.setAlignment/3","type":"function"},{"doc":"Sets the background colour.","ref":"wxGridCellAttr.html#setBackgroundColour/2","title":"wxGridCellAttr.setBackgroundColour/2","type":"function"},{"doc":"","ref":"wxGridCellAttr.html#setDefAttr/2","title":"wxGridCellAttr.setDefAttr/2","type":"function"},{"doc":"Sets the editor to be used with the cells with this attribute.","ref":"wxGridCellAttr.html#setEditor/2","title":"wxGridCellAttr.setEditor/2","type":"function"},{"doc":"Sets the font.","ref":"wxGridCellAttr.html#setFont/2","title":"wxGridCellAttr.setFont/2","type":"function"},{"doc":"","ref":"wxGridCellAttr.html#setReadOnly/1","title":"wxGridCellAttr.setReadOnly/1","type":"function"},{"doc":"Sets the cell as read-only.","ref":"wxGridCellAttr.html#setReadOnly/2","title":"wxGridCellAttr.setReadOnly/2","type":"function"},{"doc":"Sets the renderer to be used for cells with this attribute. Takes ownership of the pointer.","ref":"wxGridCellAttr.html#setRenderer/2","title":"wxGridCellAttr.setRenderer/2","type":"function"},{"doc":"Sets the text colour.","ref":"wxGridCellAttr.html#setTextColour/2","title":"wxGridCellAttr.setTextColour/2","type":"function"},{"doc":"","ref":"wxGridCellAttr.html#t:wxGridCellAttr/0","title":"wxGridCellAttr.wxGridCellAttr/0","type":"type"},{"doc":"Grid cell editor for boolean data. See: wxGridCellEditor , wxGridCellAutoWrapStringEditor (not implemented in wx), wxGridCellChoiceEditor , wxGridCellEnumEditor (not implemented in wx), wxGridCellFloatEditor , wxGridCellNumberEditor , wxGridCellTextEditor , wxGridCellDateEditor (not implemented in wx) This class is derived (and can use functions) from: wxGridCellEditor wxWidgets docs: wxGridCellBoolEditor","ref":"wxGridCellBoolEditor.html","title":"wxGridCellBoolEditor","type":"module"},{"doc":"Destroys the object.","ref":"wxGridCellBoolEditor.html#destroy/1","title":"wxGridCellBoolEditor.destroy/1","type":"function"},{"doc":"Returns true if the given value is equal to the string representation of the truth value we currently use (see useStringValues/1 ).","ref":"wxGridCellBoolEditor.html#isTrueValue/1","title":"wxGridCellBoolEditor.isTrueValue/1","type":"function"},{"doc":"Default constructor.","ref":"wxGridCellBoolEditor.html#new/0","title":"wxGridCellBoolEditor.new/0","type":"function"},{"doc":"","ref":"wxGridCellBoolEditor.html#useStringValues/0","title":"wxGridCellBoolEditor.useStringValues/0","type":"function"},{"doc":"This method allows you to customize the values returned by wxGridCellNumberEditor:getValue/1 for the cell using this editor. By default, the default values of the arguments are used, i.e. &quot;1&quot; is returned if the cell is checked and an empty string otherwise.","ref":"wxGridCellBoolEditor.html#useStringValues/1","title":"wxGridCellBoolEditor.useStringValues/1","type":"function"},{"doc":"","ref":"wxGridCellBoolEditor.html#t:wxGridCellBoolEditor/0","title":"wxGridCellBoolEditor.wxGridCellBoolEditor/0","type":"type"},{"doc":"This class may be used to format boolean data in a cell. See: wxGridCellRenderer , wxGridCellAutoWrapStringRenderer (not implemented in wx), wxGridCellDateTimeRenderer (not implemented in wx), wxGridCellEnumRenderer (not implemented in wx), wxGridCellFloatRenderer , wxGridCellNumberRenderer , wxGridCellStringRenderer This class is derived (and can use functions) from: wxGridCellRenderer wxWidgets docs: wxGridCellBoolRenderer","ref":"wxGridCellBoolRenderer.html","title":"wxGridCellBoolRenderer","type":"module"},{"doc":"Destroys the object.","ref":"wxGridCellBoolRenderer.html#destroy/1","title":"wxGridCellBoolRenderer.destroy/1","type":"function"},{"doc":"","ref":"wxGridCellBoolRenderer.html#new/0","title":"wxGridCellBoolRenderer.new/0","type":"function"},{"doc":"","ref":"wxGridCellBoolRenderer.html#t:wxGridCellBoolRenderer/0","title":"wxGridCellBoolRenderer.wxGridCellBoolRenderer/0","type":"type"},{"doc":"Grid cell editor for string data providing the user a choice from a list of strings. See: wxGridCellEditor , wxGridCellAutoWrapStringEditor (not implemented in wx), wxGridCellBoolEditor , wxGridCellEnumEditor (not implemented in wx), wxGridCellFloatEditor , wxGridCellNumberEditor , wxGridCellTextEditor , wxGridCellDateEditor (not implemented in wx) This class is derived (and can use functions) from: wxGridCellEditor wxWidgets docs: wxGridCellChoiceEditor","ref":"wxGridCellChoiceEditor.html","title":"wxGridCellChoiceEditor","type":"module"},{"doc":"Destroys the object.","ref":"wxGridCellChoiceEditor.html#destroy/1","title":"wxGridCellChoiceEditor.destroy/1","type":"function"},{"doc":"","ref":"wxGridCellChoiceEditor.html#new/1","title":"wxGridCellChoiceEditor.new/1","type":"function"},{"doc":"Choice cell renderer ctor.","ref":"wxGridCellChoiceEditor.html#new/2","title":"wxGridCellChoiceEditor.new/2","type":"function"},{"doc":"Parameters string format is &quot;item1[,item2[...,itemN]]&quot;. This method can be called before the editor is used for the first time, or later, in which case it replaces the previously specified strings with the new ones.","ref":"wxGridCellChoiceEditor.html#setParameters/2","title":"wxGridCellChoiceEditor.setParameters/2","type":"function"},{"doc":"","ref":"wxGridCellChoiceEditor.html#t:wxGridCellChoiceEditor/0","title":"wxGridCellChoiceEditor.wxGridCellChoiceEditor/0","type":"type"},{"doc":"This class is responsible for providing and manipulating the in-place edit controls for the grid. Instances of wxGridCellEditor (actually, instances of derived classes since it is an abstract class) can be associated with the cell attributes for individual cells, rows, columns, or even for the entire grid. Normally wxGridCellEditor shows some UI control allowing the user to edit the cell, but starting with wxWidgets 3.1.4 it's also possible to define &quot;activatable&quot; cell editors, that change the value of the cell directly when it's activated (typically by pressing Space key or clicking on it), see TryActivate() (not implemented in wx) method. Note that when implementing an editor which is always activatable, i.e. never shows any in-place editor, it is more convenient to derive its class from wxGridCellActivatableEditor (not implemented in wx) than from wxGridCellEditor itself. See: wxGridCellAutoWrapStringEditor (not implemented in wx), wxGridCellBoolEditor , wxGridCellChoiceEditor , wxGridCellEnumEditor (not implemented in wx), wxGridCellFloatEditor , wxGridCellNumberEditor , wxGridCellTextEditor , wxGridCellDateEditor (not implemented in wx) wxWidgets docs: wxGridCellEditor","ref":"wxGridCellEditor.html","title":"wxGridCellEditor","type":"module"},{"doc":"Creates the actual edit control.","ref":"wxGridCellEditor.html#create/4","title":"wxGridCellEditor.create/4","type":"function"},{"doc":"Some types of controls on some platforms may need some help with the Return key.","ref":"wxGridCellEditor.html#handleReturn/2","title":"wxGridCellEditor.handleReturn/2","type":"function"},{"doc":"Returns true if the edit control has been created.","ref":"wxGridCellEditor.html#isCreated/1","title":"wxGridCellEditor.isCreated/1","type":"function"},{"doc":"Reset the value in the control back to its starting value.","ref":"wxGridCellEditor.html#reset/1","title":"wxGridCellEditor.reset/1","type":"function"},{"doc":"Size and position the edit control.","ref":"wxGridCellEditor.html#setSize/2","title":"wxGridCellEditor.setSize/2","type":"function"},{"doc":"","ref":"wxGridCellEditor.html#show/2","title":"wxGridCellEditor.show/2","type":"function"},{"doc":"Show or hide the edit control, use the specified attributes to set colours/fonts for it.","ref":"wxGridCellEditor.html#show/3","title":"wxGridCellEditor.show/3","type":"function"},{"doc":"If the editor is enabled by clicking on the cell, this method will be called.","ref":"wxGridCellEditor.html#startingClick/1","title":"wxGridCellEditor.startingClick/1","type":"function"},{"doc":"If the editor is enabled by pressing keys on the grid, this will be called to let the editor do something about that first key if desired.","ref":"wxGridCellEditor.html#startingKey/2","title":"wxGridCellEditor.startingKey/2","type":"function"},{"doc":"","ref":"wxGridCellEditor.html#t:wxGridCellEditor/0","title":"wxGridCellEditor.wxGridCellEditor/0","type":"type"},{"doc":"The editor for floating point numbers data. See: wxGridCellEditor , wxGridCellAutoWrapStringEditor (not implemented in wx), wxGridCellBoolEditor , wxGridCellChoiceEditor , wxGridCellEnumEditor (not implemented in wx), wxGridCellNumberEditor , wxGridCellTextEditor , wxGridCellDateEditor (not implemented in wx) This class is derived (and can use functions) from: wxGridCellEditor wxWidgets docs: wxGridCellFloatEditor","ref":"wxGridCellFloatEditor.html","title":"wxGridCellFloatEditor","type":"module"},{"doc":"Destroys the object.","ref":"wxGridCellFloatEditor.html#destroy/1","title":"wxGridCellFloatEditor.destroy/1","type":"function"},{"doc":"","ref":"wxGridCellFloatEditor.html#new/0","title":"wxGridCellFloatEditor.new/0","type":"function"},{"doc":"Float cell editor ctor.","ref":"wxGridCellFloatEditor.html#new/1","title":"wxGridCellFloatEditor.new/1","type":"function"},{"doc":"The parameters string format is &quot;width[,precision[,format]]&quot; where format should be chosen between f|e|g|E|G (f is used by default)","ref":"wxGridCellFloatEditor.html#setParameters/2","title":"wxGridCellFloatEditor.setParameters/2","type":"function"},{"doc":"","ref":"wxGridCellFloatEditor.html#t:wxGridCellFloatEditor/0","title":"wxGridCellFloatEditor.wxGridCellFloatEditor/0","type":"type"},{"doc":"This class may be used to format floating point data in a cell. See: wxGridCellRenderer , wxGridCellAutoWrapStringRenderer (not implemented in wx), wxGridCellBoolRenderer , wxGridCellDateTimeRenderer (not implemented in wx), wxGridCellEnumRenderer (not implemented in wx), wxGridCellNumberRenderer , wxGridCellStringRenderer This class is derived (and can use functions) from: wxGridCellStringRenderer wxGridCellRenderer wxWidgets docs: wxGridCellFloatRenderer","ref":"wxGridCellFloatRenderer.html","title":"wxGridCellFloatRenderer","type":"module"},{"doc":"Destroys the object.","ref":"wxGridCellFloatRenderer.html#destroy/1","title":"wxGridCellFloatRenderer.destroy/1","type":"function"},{"doc":"Returns the precision.","ref":"wxGridCellFloatRenderer.html#getPrecision/1","title":"wxGridCellFloatRenderer.getPrecision/1","type":"function"},{"doc":"Returns the width.","ref":"wxGridCellFloatRenderer.html#getWidth/1","title":"wxGridCellFloatRenderer.getWidth/1","type":"function"},{"doc":"","ref":"wxGridCellFloatRenderer.html#new/0","title":"wxGridCellFloatRenderer.new/0","type":"function"},{"doc":"Float cell renderer ctor.","ref":"wxGridCellFloatRenderer.html#new/1","title":"wxGridCellFloatRenderer.new/1","type":"function"},{"doc":"The parameters string format is &quot;width[,precision[,format]]&quot; where format should be chosen between f|e|g|E|G (f is used by default)","ref":"wxGridCellFloatRenderer.html#setParameters/2","title":"wxGridCellFloatRenderer.setParameters/2","type":"function"},{"doc":"Sets the precision.","ref":"wxGridCellFloatRenderer.html#setPrecision/2","title":"wxGridCellFloatRenderer.setPrecision/2","type":"function"},{"doc":"Sets the width.","ref":"wxGridCellFloatRenderer.html#setWidth/2","title":"wxGridCellFloatRenderer.setWidth/2","type":"function"},{"doc":"","ref":"wxGridCellFloatRenderer.html#t:wxGridCellFloatRenderer/0","title":"wxGridCellFloatRenderer.wxGridCellFloatRenderer/0","type":"type"},{"doc":"Grid cell editor for numeric integer data. See: wxGridCellEditor , wxGridCellAutoWrapStringEditor (not implemented in wx), wxGridCellBoolEditor , wxGridCellChoiceEditor , wxGridCellEnumEditor (not implemented in wx), wxGridCellFloatEditor , wxGridCellTextEditor , wxGridCellDateEditor (not implemented in wx) This class is derived (and can use functions) from: wxGridCellTextEditor wxGridCellEditor wxWidgets docs: wxGridCellNumberEditor","ref":"wxGridCellNumberEditor.html","title":"wxGridCellNumberEditor","type":"module"},{"doc":"Destroys the object.","ref":"wxGridCellNumberEditor.html#destroy/1","title":"wxGridCellNumberEditor.destroy/1","type":"function"},{"doc":"Returns the value currently in the editor control.","ref":"wxGridCellNumberEditor.html#getValue/1","title":"wxGridCellNumberEditor.getValue/1","type":"function"},{"doc":"","ref":"wxGridCellNumberEditor.html#new/0","title":"wxGridCellNumberEditor.new/0","type":"function"},{"doc":"Allows you to specify the range for acceptable data. Values equal to -1 for both min and max indicate that no range checking should be done.","ref":"wxGridCellNumberEditor.html#new/1","title":"wxGridCellNumberEditor.new/1","type":"function"},{"doc":"Parameters string format is &quot;min,max&quot;.","ref":"wxGridCellNumberEditor.html#setParameters/2","title":"wxGridCellNumberEditor.setParameters/2","type":"function"},{"doc":"","ref":"wxGridCellNumberEditor.html#t:wxGridCellNumberEditor/0","title":"wxGridCellNumberEditor.wxGridCellNumberEditor/0","type":"type"},{"doc":"This class may be used to format integer data in a cell. See: wxGridCellRenderer , wxGridCellAutoWrapStringRenderer (not implemented in wx), wxGridCellBoolRenderer , wxGridCellDateTimeRenderer (not implemented in wx), wxGridCellEnumRenderer (not implemented in wx), wxGridCellFloatRenderer , wxGridCellStringRenderer This class is derived (and can use functions) from: wxGridCellStringRenderer wxGridCellRenderer wxWidgets docs: wxGridCellNumberRenderer","ref":"wxGridCellNumberRenderer.html","title":"wxGridCellNumberRenderer","type":"module"},{"doc":"Destroys the object.","ref":"wxGridCellNumberRenderer.html#destroy/1","title":"wxGridCellNumberRenderer.destroy/1","type":"function"},{"doc":"Default constructor.","ref":"wxGridCellNumberRenderer.html#new/0","title":"wxGridCellNumberRenderer.new/0","type":"function"},{"doc":"","ref":"wxGridCellNumberRenderer.html#t:wxGridCellNumberRenderer/0","title":"wxGridCellNumberRenderer.wxGridCellNumberRenderer/0","type":"type"},{"doc":"This class is responsible for actually drawing the cell in the grid. You may pass it to the wxGridCellAttr (below) to change the format of one given cell or to wxGrid:setDefaultRenderer/2 to change the view of all cells. This is an abstract class, and you will normally use one of the predefined derived classes or derive your own class from it. See: wxGridCellAutoWrapStringRenderer (not implemented in wx), wxGridCellBoolRenderer , wxGridCellDateTimeRenderer (not implemented in wx), wxGridCellEnumRenderer (not implemented in wx), wxGridCellFloatRenderer , wxGridCellNumberRenderer , wxGridCellStringRenderer wxWidgets docs: wxGridCellRenderer","ref":"wxGridCellRenderer.html","title":"wxGridCellRenderer","type":"module"},{"doc":"Draw the given cell on the provided DC inside the given rectangle using the style specified by the attribute and the default or selected state corresponding to the isSelected value. This pure virtual function has a default implementation which will prepare the DC using the given attribute: it will draw the rectangle with the background colour from attr and set the text colour and font.","ref":"wxGridCellRenderer.html#draw/8","title":"wxGridCellRenderer.draw/8","type":"function"},{"doc":"Get the preferred size of the cell for its contents. This method must be overridden in the derived classes to return the minimal fitting size for displaying the content of the given grid cell. See: GetBestHeight() (not implemented in wx), GetBestWidth() (not implemented in wx)","ref":"wxGridCellRenderer.html#getBestSize/6","title":"wxGridCellRenderer.getBestSize/6","type":"function"},{"doc":"","ref":"wxGridCellRenderer.html#t:wxGridCellRenderer/0","title":"wxGridCellRenderer.wxGridCellRenderer/0","type":"type"},{"doc":"This class may be used to format string data in a cell; it is the default for string cells. See: wxGridCellRenderer , wxGridCellAutoWrapStringRenderer (not implemented in wx), wxGridCellBoolRenderer , wxGridCellDateTimeRenderer (not implemented in wx), wxGridCellEnumRenderer (not implemented in wx), wxGridCellFloatRenderer , wxGridCellNumberRenderer This class is derived (and can use functions) from: wxGridCellRenderer wxWidgets docs: wxGridCellStringRenderer","ref":"wxGridCellStringRenderer.html","title":"wxGridCellStringRenderer","type":"module"},{"doc":"Destroys the object.","ref":"wxGridCellStringRenderer.html#destroy/1","title":"wxGridCellStringRenderer.destroy/1","type":"function"},{"doc":"","ref":"wxGridCellStringRenderer.html#new/0","title":"wxGridCellStringRenderer.new/0","type":"function"},{"doc":"","ref":"wxGridCellStringRenderer.html#t:wxGridCellStringRenderer/0","title":"wxGridCellStringRenderer.wxGridCellStringRenderer/0","type":"type"},{"doc":"Grid cell editor for string/text data. See: wxGridCellEditor , wxGridCellAutoWrapStringEditor (not implemented in wx), wxGridCellBoolEditor , wxGridCellChoiceEditor , wxGridCellEnumEditor (not implemented in wx), wxGridCellFloatEditor , wxGridCellNumberEditor , wxGridCellDateEditor (not implemented in wx) This class is derived (and can use functions) from: wxGridCellEditor wxWidgets docs: wxGridCellTextEditor","ref":"wxGridCellTextEditor.html","title":"wxGridCellTextEditor","type":"module"},{"doc":"Destroys the object.","ref":"wxGridCellTextEditor.html#destroy/1","title":"wxGridCellTextEditor.destroy/1","type":"function"},{"doc":"","ref":"wxGridCellTextEditor.html#new/0","title":"wxGridCellTextEditor.new/0","type":"function"},{"doc":"Text cell editor constructor.","ref":"wxGridCellTextEditor.html#new/1","title":"wxGridCellTextEditor.new/1","type":"function"},{"doc":"The parameters string format is &quot;n&quot; where n is a number representing the maximum width.","ref":"wxGridCellTextEditor.html#setParameters/2","title":"wxGridCellTextEditor.setParameters/2","type":"function"},{"doc":"","ref":"wxGridCellTextEditor.html#t:wxGridCellTextEditor/0","title":"wxGridCellTextEditor.wxGridCellTextEditor/0","type":"type"},{"doc":"This event class contains information about various grid events. Notice that all grid event table macros are available in two versions: EVT_GRID_XXX and EVT_GRID_CMD_XXX . The only difference between the two is that the former doesn't allow to specify the grid window identifier and so takes a single parameter, the event handler, but is not suitable if there is more than one grid control in the window where the event table is used (as it would catch the events from all the grids). The version with CMD takes the id as first argument and the event handler as the second one and so can be used with multiple grids as well. Otherwise there are no difference between the two and only the versions without the id are documented below for brevity. This class is derived (and can use functions) from: wxNotifyEvent wxCommandEvent wxEvent wxWidgets docs: wxGridEvent Events Use wxEvtHandler:connect/3 with wxGridEventType to subscribe to events of this type.","ref":"wxGridEvent.html","title":"wxGridEvent","type":"module"},{"doc":"Returns true if the Alt key was down at the time of the event.","ref":"wxGridEvent.html#altDown/1","title":"wxGridEvent.altDown/1","type":"function"},{"doc":"Returns true if the Control key was down at the time of the event.","ref":"wxGridEvent.html#controlDown/1","title":"wxGridEvent.controlDown/1","type":"function"},{"doc":"Column at which the event occurred. Notice that for a wxEVT_GRID_SELECT_CELL event this column is the column of the newly selected cell while the previously selected cell can be retrieved using wxGrid:getGridCursorCol/1 .","ref":"wxGridEvent.html#getCol/1","title":"wxGridEvent.getCol/1","type":"function"},{"doc":"Position in pixels at which the event occurred.","ref":"wxGridEvent.html#getPosition/1","title":"wxGridEvent.getPosition/1","type":"function"},{"doc":"Row at which the event occurred. Notice that for a wxEVT_GRID_SELECT_CELL event this row is the row of the newly selected cell while the previously selected cell can be retrieved using wxGrid:getGridCursorRow/1 .","ref":"wxGridEvent.html#getRow/1","title":"wxGridEvent.getRow/1","type":"function"},{"doc":"Returns true if the Meta key was down at the time of the event.","ref":"wxGridEvent.html#metaDown/1","title":"wxGridEvent.metaDown/1","type":"function"},{"doc":"Returns true if the user is selecting grid cells, or false if deselecting.","ref":"wxGridEvent.html#selecting/1","title":"wxGridEvent.selecting/1","type":"function"},{"doc":"Returns true if the Shift key was down at the time of the event.","ref":"wxGridEvent.html#shiftDown/1","title":"wxGridEvent.shiftDown/1","type":"function"},{"doc":"","ref":"wxGridEvent.html#t:wxGrid/0","title":"wxGridEvent.wxGrid/0","type":"type"},{"doc":"","ref":"wxGridEvent.html#t:wxGridEvent/0","title":"wxGridEvent.wxGridEvent/0","type":"type"},{"doc":"","ref":"wxGridEvent.html#t:wxGridEventType/0","title":"wxGridEvent.wxGridEventType/0","type":"type"},{"doc":"A grid sizer is a sizer which lays out its children in a two-dimensional table with all table fields having the same size, i.e. the width of each field is the width of the widest child, the height of each field is the height of the tallest child. See: wxSizer , Overview sizer This class is derived (and can use functions) from: wxSizer wxWidgets docs: wxGridSizer","ref":"wxGridSizer.html","title":"wxGridSizer","type":"module"},{"doc":"Destroys the object.","ref":"wxGridSizer.html#destroy/1","title":"wxGridSizer.destroy/1","type":"function"},{"doc":"Returns the number of columns that has been specified for the sizer. Returns zero if the sizer is automatically adjusting the number of columns depending on number of its children. To get the effective number of columns or rows being currently used, see GetEffectiveColsCount() (not implemented in wx)","ref":"wxGridSizer.html#getCols/1","title":"wxGridSizer.getCols/1","type":"function"},{"doc":"Returns the horizontal gap (in pixels) between cells in the sizer.","ref":"wxGridSizer.html#getHGap/1","title":"wxGridSizer.getHGap/1","type":"function"},{"doc":"Returns the number of rows that has been specified for the sizer. Returns zero if the sizer is automatically adjusting the number of rows depending on number of its children. To get the effective number of columns or rows being currently used, see GetEffectiveRowsCount() (not implemented in wx).","ref":"wxGridSizer.html#getRows/1","title":"wxGridSizer.getRows/1","type":"function"},{"doc":"Returns the vertical gap (in pixels) between the cells in the sizer.","ref":"wxGridSizer.html#getVGap/1","title":"wxGridSizer.getVGap/1","type":"function"},{"doc":"","ref":"wxGridSizer.html#new/1","title":"wxGridSizer.new/1","type":"function"},{"doc":"","ref":"wxGridSizer.html#new/2","title":"wxGridSizer.new/2","type":"function"},{"doc":"","ref":"wxGridSizer.html#new/3","title":"wxGridSizer.new/3","type":"function"},{"doc":"","ref":"wxGridSizer.html#new/4","title":"wxGridSizer.new/4","type":"function"},{"doc":"Sets the number of columns in the sizer.","ref":"wxGridSizer.html#setCols/2","title":"wxGridSizer.setCols/2","type":"function"},{"doc":"Sets the horizontal gap (in pixels) between cells in the sizer.","ref":"wxGridSizer.html#setHGap/2","title":"wxGridSizer.setHGap/2","type":"function"},{"doc":"Sets the number of rows in the sizer.","ref":"wxGridSizer.html#setRows/2","title":"wxGridSizer.setRows/2","type":"function"},{"doc":"Sets the vertical gap (in pixels) between the cells in the sizer.","ref":"wxGridSizer.html#setVGap/2","title":"wxGridSizer.setVGap/2","type":"function"},{"doc":"","ref":"wxGridSizer.html#t:wxGridSizer/0","title":"wxGridSizer.wxGridSizer/0","type":"type"},{"doc":"A help event is sent when the user has requested context-sensitive help. This can either be caused by the application requesting context-sensitive help mode via wxContextHelp (not implemented in wx), or (on MS Windows) by the system generating a WM_HELP message when the user pressed F1 or clicked on the query button in a dialog caption. A help event is sent to the window that the user clicked on, and is propagated up the window hierarchy until the event is processed or there are no more event handlers. The application should call wxEvent:getId/1 to check the identity of the clicked-on window, and then either show some suitable help or call wxEvent:skip/2 if the identifier is unrecognised. Calling Skip is important because it allows wxWidgets to generate further events for ancestors of the clicked-on window. Otherwise it would be impossible to show help for container windows, since processing would stop after the first window found. See: wxContextHelp (not implemented in wx), wxDialog , Overview events This class is derived (and can use functions) from: wxEvent wxWidgets docs: wxHelpEvent Events Use wxEvtHandler:connect/3 with wxHelpEventType to subscribe to events of this type.","ref":"wxHelpEvent.html","title":"wxHelpEvent","type":"module"},{"doc":"Returns the origin of the help event which is one of the wxHelpEvent::Origin (not implemented in wx) values. The application may handle events generated using the keyboard or mouse differently, e.g. by using wx_misc:getMousePosition/0 for the mouse events. See: setOrigin/2","ref":"wxHelpEvent.html#getOrigin/1","title":"wxHelpEvent.getOrigin/1","type":"function"},{"doc":"Returns the left-click position of the mouse, in screen coordinates. This allows the application to position the help appropriately.","ref":"wxHelpEvent.html#getPosition/1","title":"wxHelpEvent.getPosition/1","type":"function"},{"doc":"Set the help event origin, only used internally by wxWidgets normally. See: getOrigin/1","ref":"wxHelpEvent.html#setOrigin/2","title":"wxHelpEvent.setOrigin/2","type":"function"},{"doc":"Sets the left-click position of the mouse, in screen coordinates.","ref":"wxHelpEvent.html#setPosition/2","title":"wxHelpEvent.setPosition/2","type":"function"},{"doc":"","ref":"wxHelpEvent.html#t:wxHelp/0","title":"wxHelpEvent.wxHelp/0","type":"type"},{"doc":"","ref":"wxHelpEvent.html#t:wxHelpEvent/0","title":"wxHelpEvent.wxHelpEvent/0","type":"type"},{"doc":"","ref":"wxHelpEvent.html#t:wxHelpEventType/0","title":"wxHelpEvent.wxHelpEventType/0","type":"type"},{"doc":"This class provides very simple interface to printing architecture. It allows you to print HTML documents using only a few commands. Note: Do not create this class on the stack only. You should create an instance on app startup and use this instance for all printing operations. The reason is that this class stores various settings in it. wxWidgets docs: wxHtmlEasyPrinting","ref":"wxHtmlEasyPrinting.html","title":"wxHtmlEasyPrinting","type":"module"},{"doc":"Destroys the object.","ref":"wxHtmlEasyPrinting.html#destroy/1","title":"wxHtmlEasyPrinting.destroy/1","type":"function"},{"doc":"Returns a pointer to wxPageSetupDialogData instance used by this class. You can set its parameters (via SetXXXX methods).","ref":"wxHtmlEasyPrinting.html#getPageSetupData/1","title":"wxHtmlEasyPrinting.getPageSetupData/1","type":"function"},{"doc":"Returns pointer to wxPrintData instance used by this class. You can set its parameters (via SetXXXX methods).","ref":"wxHtmlEasyPrinting.html#getPrintData/1","title":"wxHtmlEasyPrinting.getPrintData/1","type":"function"},{"doc":"","ref":"wxHtmlEasyPrinting.html#new/0","title":"wxHtmlEasyPrinting.new/0","type":"function"},{"doc":"Constructor.","ref":"wxHtmlEasyPrinting.html#new/1","title":"wxHtmlEasyPrinting.new/1","type":"function"},{"doc":"Display page setup dialog and allows the user to modify settings.","ref":"wxHtmlEasyPrinting.html#pageSetup/1","title":"wxHtmlEasyPrinting.pageSetup/1","type":"function"},{"doc":"Preview HTML file. Returns false in case of error - call wxPrinter:getLastError/0 to get detailed information about the kind of the error.","ref":"wxHtmlEasyPrinting.html#previewFile/2","title":"wxHtmlEasyPrinting.previewFile/2","type":"function"},{"doc":"","ref":"wxHtmlEasyPrinting.html#previewText/2","title":"wxHtmlEasyPrinting.previewText/2","type":"function"},{"doc":"Preview HTML text (not file!). Returns false in case of error - call wxPrinter:getLastError/0 to get detailed information about the kind of the error.","ref":"wxHtmlEasyPrinting.html#previewText/3","title":"wxHtmlEasyPrinting.previewText/3","type":"function"},{"doc":"Print HTML file. Returns false in case of error - call wxPrinter:getLastError/0 to get detailed information about the kind of the error.","ref":"wxHtmlEasyPrinting.html#printFile/2","title":"wxHtmlEasyPrinting.printFile/2","type":"function"},{"doc":"","ref":"wxHtmlEasyPrinting.html#printText/2","title":"wxHtmlEasyPrinting.printText/2","type":"function"},{"doc":"Print HTML text (not file!). Returns false in case of error - call wxPrinter:getLastError/0 to get detailed information about the kind of the error.","ref":"wxHtmlEasyPrinting.html#printText/3","title":"wxHtmlEasyPrinting.printText/3","type":"function"},{"doc":"","ref":"wxHtmlEasyPrinting.html#setFonts/3","title":"wxHtmlEasyPrinting.setFonts/3","type":"function"},{"doc":"Sets fonts. See wxHtmlDCRenderer::SetFonts (not implemented in wx) for detailed description.","ref":"wxHtmlEasyPrinting.html#setFonts/4","title":"wxHtmlEasyPrinting.setFonts/4","type":"function"},{"doc":"","ref":"wxHtmlEasyPrinting.html#setFooter/2","title":"wxHtmlEasyPrinting.setFooter/2","type":"function"},{"doc":"Set page footer. The following macros can be used inside it: @DATE@ is replaced by the current date in default format @PAGENUM@ is replaced by page number @PAGESCNT@ is replaced by total number of pages @TIME@ is replaced by the current time in default format @TITLE@ is replaced with the title of the document","ref":"wxHtmlEasyPrinting.html#setFooter/3","title":"wxHtmlEasyPrinting.setFooter/3","type":"function"},{"doc":"","ref":"wxHtmlEasyPrinting.html#setHeader/2","title":"wxHtmlEasyPrinting.setHeader/2","type":"function"},{"doc":"Set page header. The following macros can be used inside it:","ref":"wxHtmlEasyPrinting.html#setHeader/3","title":"wxHtmlEasyPrinting.setHeader/3","type":"function"},{"doc":"","ref":"wxHtmlEasyPrinting.html#t:wxHtmlEasyPrinting/0","title":"wxHtmlEasyPrinting.wxHtmlEasyPrinting/0","type":"type"},{"doc":"This event class is used for the events generated by wxHtmlWindow . This class is derived (and can use functions) from: wxCommandEvent wxEvent wxWidgets docs: wxHtmlLinkEvent Events Use wxEvtHandler:connect/3 with wxHtmlLinkEventType to subscribe to events of this type.","ref":"wxHtmlLinkEvent.html","title":"wxHtmlLinkEvent","type":"module"},{"doc":"Returns the wx_wxHtmlLinkInfo() which contains info about the cell clicked and the hyperlink it contains.","ref":"wxHtmlLinkEvent.html#getLinkInfo/1","title":"wxHtmlLinkEvent.getLinkInfo/1","type":"function"},{"doc":"","ref":"wxHtmlLinkEvent.html#t:wxHtmlLink/0","title":"wxHtmlLinkEvent.wxHtmlLink/0","type":"type"},{"doc":"","ref":"wxHtmlLinkEvent.html#t:wxHtmlLinkEvent/0","title":"wxHtmlLinkEvent.wxHtmlLinkEvent/0","type":"type"},{"doc":"","ref":"wxHtmlLinkEvent.html#t:wxHtmlLinkEventType/0","title":"wxHtmlLinkEvent.wxHtmlLinkEventType/0","type":"type"},{"doc":"wxHtmlWindow is probably the only class you will directly use unless you want to do something special (like adding new tag handlers or MIME filters). The purpose of this class is to display rich content pages (either local file or downloaded via HTTP protocol) in a window based on a subset of the HTML standard. The width of the window is constant, given in the constructor and virtual height is changed dynamically depending on page size. Once the window is created you can set its content by calling setPage/2 with raw HTML, loadPage/2 with a wxFileSystem (not implemented in wx) location or loadFile/2 with a filename. Note: If you want complete HTML/CSS support as well as a Javascript engine, consider using wxWebView instead. wxHtmlWindow uses the wxImage class for displaying images, so you need to initialize the handlers for any image formats you use before loading a page. See ?wxInitAllImageHandlers and wxImage::AddHandler (not implemented in wx). Styles This class supports the following styles: See: wxHtmlLinkEvent , wxHtmlCellEvent (not implemented in wx) This class is derived (and can use functions) from: wxScrolledWindow wxPanel wxWindow wxEvtHandler wxWidgets docs: wxHtmlWindow Events Event types emitted from this class: html_cell_clicked , html_cell_hover , command_html_link_clicked","ref":"wxHtmlWindow.html","title":"wxHtmlWindow","type":"module"},{"doc":"Appends HTML fragment to currently displayed text and refreshes the window. Return: false if an error occurred, true otherwise.","ref":"wxHtmlWindow.html#appendToPage/2","title":"wxHtmlWindow.appendToPage/2","type":"function"},{"doc":"Destroys the object.","ref":"wxHtmlWindow.html#destroy/1","title":"wxHtmlWindow.destroy/1","type":"function"},{"doc":"Returns anchor within currently opened page (see getOpenedPage/1 ). If no page is opened or if the displayed page wasn't produced by call to loadPage/2 , empty string is returned.","ref":"wxHtmlWindow.html#getOpenedAnchor/1","title":"wxHtmlWindow.getOpenedAnchor/1","type":"function"},{"doc":"Returns full location of the opened page. If no page is opened or if the displayed page wasn't produced by call to loadPage/2 , empty string is returned.","ref":"wxHtmlWindow.html#getOpenedPage/1","title":"wxHtmlWindow.getOpenedPage/1","type":"function"},{"doc":"Returns title of the opened page or wxEmptyString if the current page does not contain &lt;TITLE&gt; tag.","ref":"wxHtmlWindow.html#getOpenedPageTitle/1","title":"wxHtmlWindow.getOpenedPageTitle/1","type":"function"},{"doc":"Returns the related frame.","ref":"wxHtmlWindow.html#getRelatedFrame/1","title":"wxHtmlWindow.getRelatedFrame/1","type":"function"},{"doc":"Moves back to the previous page. Only pages displayed using loadPage/2 are stored in history list.","ref":"wxHtmlWindow.html#historyBack/1","title":"wxHtmlWindow.historyBack/1","type":"function"},{"doc":"Returns true if it is possible to go back in the history i.e. historyBack/1 won't fail.","ref":"wxHtmlWindow.html#historyCanBack/1","title":"wxHtmlWindow.historyCanBack/1","type":"function"},{"doc":"Returns true if it is possible to go forward in the history i.e. historyForward/1 won't fail.","ref":"wxHtmlWindow.html#historyCanForward/1","title":"wxHtmlWindow.historyCanForward/1","type":"function"},{"doc":"Clears history.","ref":"wxHtmlWindow.html#historyClear/1","title":"wxHtmlWindow.historyClear/1","type":"function"},{"doc":"Moves to next page in history. Only pages displayed using loadPage/2 are stored in history list.","ref":"wxHtmlWindow.html#historyForward/1","title":"wxHtmlWindow.historyForward/1","type":"function"},{"doc":"Loads an HTML page from a file and displays it. Return: false if an error occurred, true otherwise See: loadPage/2","ref":"wxHtmlWindow.html#loadFile/2","title":"wxHtmlWindow.loadFile/2","type":"function"},{"doc":"Unlike setPage/2 this function first loads the HTML page from location and then displays it. Return: false if an error occurred, true otherwise See: loadFile/2","ref":"wxHtmlWindow.html#loadPage/2","title":"wxHtmlWindow.loadPage/2","type":"function"},{"doc":"Default ctor.","ref":"wxHtmlWindow.html#new/0","title":"wxHtmlWindow.new/0","type":"function"},{"doc":"","ref":"wxHtmlWindow.html#new/1","title":"wxHtmlWindow.new/1","type":"function"},{"doc":"Constructor. The parameters are the same as wxScrolled::wxScrolled() (not implemented in wx) constructor.","ref":"wxHtmlWindow.html#new/2","title":"wxHtmlWindow.new/2","type":"function"},{"doc":"Selects all text in the window. See: selectLine/2 , selectWord/2","ref":"wxHtmlWindow.html#selectAll/1","title":"wxHtmlWindow.selectAll/1","type":"function"},{"doc":"Selects the line of text that pos points at. Note that pos is relative to the top of displayed page, not to window's origin, use wxScrolledWindow:calcUnscrolledPosition/3 to convert physical coordinate. See: selectAll/1 , selectWord/2","ref":"wxHtmlWindow.html#selectLine/2","title":"wxHtmlWindow.selectLine/2","type":"function"},{"doc":"Selects the word at position pos . Note that pos is relative to the top of displayed page, not to window's origin, use wxScrolledWindow:calcUnscrolledPosition/3 to convert physical coordinate. See: selectAll/1 , selectLine/2","ref":"wxHtmlWindow.html#selectWord/2","title":"wxHtmlWindow.selectWord/2","type":"function"},{"doc":"Returns the current selection as plain text. Returns an empty string if no text is currently selected.","ref":"wxHtmlWindow.html#selectionToText/1","title":"wxHtmlWindow.selectionToText/1","type":"function"},{"doc":"This function sets the space between border of window and HTML contents. See image:","ref":"wxHtmlWindow.html#setBorders/2","title":"wxHtmlWindow.setBorders/2","type":"function"},{"doc":"","ref":"wxHtmlWindow.html#setFonts/3","title":"wxHtmlWindow.setFonts/3","type":"function"},{"doc":"This function sets font sizes and faces. See wxHtmlDCRenderer::SetFonts (not implemented in wx) for detailed description. See: SetSize()","ref":"wxHtmlWindow.html#setFonts/4","title":"wxHtmlWindow.setFonts/4","type":"function"},{"doc":"Sets the source of a page and displays it, for example: If you want to load a document from some location use loadPage/2 instead. Return: false if an error occurred, true otherwise.","ref":"wxHtmlWindow.html#setPage/2","title":"wxHtmlWindow.setPage/2","type":"function"},{"doc":"Sets the frame in which page title will be displayed. format is the format of the frame title, e.g. &quot;HtmlHelp : %s&quot;. It must contain exactly one s. This s is substituted with HTML page title.","ref":"wxHtmlWindow.html#setRelatedFrame/3","title":"wxHtmlWindow.setRelatedFrame/3","type":"function"},{"doc":"After calling setRelatedFrame/3 , this sets statusbar slot where messages will be displayed. (Default is -1 = no messages.)","ref":"wxHtmlWindow.html#setRelatedStatusBar/2","title":"wxHtmlWindow.setRelatedStatusBar/2","type":"function"},{"doc":"Sets the associated statusbar where messages will be displayed. Call this instead of setRelatedFrame/3 if you want statusbar updates only, no changing of the frame title. Since: 2.9.0","ref":"wxHtmlWindow.html#setRelatedStatusBar/3","title":"wxHtmlWindow.setRelatedStatusBar/3","type":"function"},{"doc":"Returns content of currently displayed page as plain text.","ref":"wxHtmlWindow.html#toText/1","title":"wxHtmlWindow.toText/1","type":"function"},{"doc":"","ref":"wxHtmlWindow.html#t:wxHtmlWindow/0","title":"wxHtmlWindow.wxHtmlWindow/0","type":"type"},{"doc":"An icon is a small rectangular bitmap usually used for denoting a minimized application. It differs from a wxBitmap in always having a mask associated with it for transparent drawing. On some platforms, icons and bitmaps are implemented identically, since there is no real distinction between a wxBitmap with a mask and an icon; and there is no specific icon format on some platforms (X-based applications usually standardize on XPMs for small bitmaps and icons). However, some platforms (such as Windows) make the distinction, so a separate class is provided. Remark: It is usually desirable to associate a pertinent icon with a frame. Icons can also be used for other purposes, for example with wxTreeCtrl and wxListCtrl . Icons have different formats on different platforms therefore separate icons will usually be created for the different environments. Platform-specific methods for creating a wxIcon structure are catered for, and this is an occasion where conditional compilation will probably be required. Note that a new icon must be created for every time the icon is to be used for a new window. In Windows, the icon will not be reloaded if it has already been used. An icon allocated to a frame will be deleted when the frame is deleted. For more information please see overview_bitmap. Predefined objects (include wx.hrl): ?wxNullIcon See: Overview bitmap , Overview bitmap , wxIconBundle , wxDC:drawIcon/3 , wxCursor This class is derived (and can use functions) from: wxBitmap wxWidgets docs: wxIcon","ref":"wxIcon.html","title":"wxIcon","type":"module"},{"doc":"Copies bmp bitmap to this icon. Under MS Windows the bitmap must have mask colour set. See: wxBitmap:loadFile/3","ref":"wxIcon.html#copyFromBitmap/2","title":"wxIcon.copyFromBitmap/2","type":"function"},{"doc":"Destructor. See overview_refcount_destruct for more info. If the application omits to delete the icon explicitly, the icon will be destroyed automatically by wxWidgets when the application exits. Warning: Do not delete an icon that is selected into a memory device context.","ref":"wxIcon.html#destroy/1","title":"wxIcon.destroy/1","type":"function"},{"doc":"Default ctor. Constructs an icon object with no data; an assignment or another member function such as wxBitmap:loadFile/3 must be called subsequently.","ref":"wxIcon.html#new/0","title":"wxIcon.new/0","type":"function"},{"doc":"Copy ctor.","ref":"wxIcon.html#new/1","title":"wxIcon.new/1","type":"function"},{"doc":"Loads an icon from a file or resource. See: wxBitmap:loadFile/3","ref":"wxIcon.html#new/2","title":"wxIcon.new/2","type":"function"},{"doc":"","ref":"wxIcon.html#t:wxIcon/0","title":"wxIcon.wxIcon/0","type":"type"},{"doc":"This class contains multiple copies of an icon in different sizes. It is typically used in wxDialog::SetIcons (not implemented in wx) and wxTopLevelWindow:setIcons/2 . Predefined objects (include wx.hrl): ?wxNullIconBundle wxWidgets docs: wxIconBundle","ref":"wxIconBundle.html","title":"wxIconBundle","type":"module"},{"doc":"Adds the icon to the collection; if the collection already contains an icon with the same width and height, it is replaced by the new one.","ref":"wxIconBundle.html#addIcon/2","title":"wxIconBundle.addIcon/2","type":"function"},{"doc":"","ref":"wxIconBundle.html#addIcon/3","title":"wxIconBundle.addIcon/3","type":"function"},{"doc":"Destructor.","ref":"wxIconBundle.html#destroy/1","title":"wxIconBundle.destroy/1","type":"function"},{"doc":"","ref":"wxIconBundle.html#getIcon/1","title":"wxIconBundle.getIcon/1","type":"function"},{"doc":"Same as. .","ref":"wxIconBundle.html#getIcon/2","title":"wxIconBundle.getIcon/2","type":"function"},{"doc":"Returns the icon with the given size. If size is ?wxDefaultSize, it is interpreted as the standard system icon size, i.e. the size returned by wxSystemSettings:getMetric/2 for wxSYS_ICON_X and wxSYS_ICON_Y . If the bundle contains an icon with exactly the requested size, it's always returned. Otherwise, the behaviour depends on the flags. If only wxIconBundle::FALLBACK_NONE (not implemented in wx) is given, the function returns an invalid icon. If wxIconBundle::FALLBACK_SYSTEM (not implemented in wx) is given, it tries to find the icon of standard system size, regardless of the size passed as parameter. Otherwise, or if the icon system size is not found neither, but wxIconBundle::FALLBACK_NEAREST_LARGER (not implemented in wx) flag is specified, the function returns the smallest icon of the size larger than the requested one or, if this fails too, just the icon closest to the specified size. The flags parameter is available only since wxWidgets 2.9.4.","ref":"wxIconBundle.html#getIcon/3","title":"wxIconBundle.getIcon/3","type":"function"},{"doc":"Default ctor.","ref":"wxIconBundle.html#new/0","title":"wxIconBundle.new/0","type":"function"},{"doc":"Initializes the bundle with the icon(s) found in the file.","ref":"wxIconBundle.html#new/1","title":"wxIconBundle.new/1","type":"function"},{"doc":"","ref":"wxIconBundle.html#new/2","title":"wxIconBundle.new/2","type":"function"},{"doc":"","ref":"wxIconBundle.html#t:wxIconBundle/0","title":"wxIconBundle.wxIconBundle/0","type":"type"},{"doc":"An event being sent when the frame is iconized (minimized) or restored. See: Overview events , wxTopLevelWindow:iconize/2 , wxTopLevelWindow:isIconized/1 This class is derived (and can use functions) from: wxEvent wxWidgets docs: wxIconizeEvent Events Use wxEvtHandler:connect/3 with wxIconizeEventType to subscribe to events of this type.","ref":"wxIconizeEvent.html","title":"wxIconizeEvent","type":"module"},{"doc":"Returns true if the frame has been iconized, false if it has been restored.","ref":"wxIconizeEvent.html#isIconized/1","title":"wxIconizeEvent.isIconized/1","type":"function"},{"doc":"","ref":"wxIconizeEvent.html#t:wxIconize/0","title":"wxIconizeEvent.wxIconize/0","type":"type"},{"doc":"","ref":"wxIconizeEvent.html#t:wxIconizeEvent/0","title":"wxIconizeEvent.wxIconizeEvent/0","type":"type"},{"doc":"","ref":"wxIconizeEvent.html#t:wxIconizeEventType/0","title":"wxIconizeEvent.wxIconizeEventType/0","type":"type"},{"doc":"This class is used for idle events, which are generated when the system becomes idle. Note that, unless you do something specifically, the idle events are not sent if the system remains idle once it has become it, e.g. only a single idle event will be generated until something else resulting in more normal events happens and only then is the next idle event sent again. If you need to ensure a continuous stream of idle events, you can either use requestMore/2 method in your handler or call ?wxWakeUpIdle() periodically (for example from a timer event handler), but note that both of these approaches (and especially the first one) increase the system load and so should be avoided if possible. By default, idle events are sent to all windows, including even the hidden ones because they may be shown if some condition is met from their wxEVT_IDLE (or related wxEVT_UPDATE_UI ) handler. The children of hidden windows do not receive idle events however as they can't change their state in any way noticeable by the user. Finally, the global wxApp (not implemented in wx) object also receives these events, as usual, so it can be used for any global idle time processing. If sending idle events to all windows is causing a significant overhead in your application, you can call setMode/1 with the value wxIDLE_PROCESS_SPECIFIED, and set the wxWS_EX_PROCESS_IDLE extra window style for every window which should receive idle events, all the other ones will not receive them in this case. Delayed Action Mechanism wxIdleEvent can be used to perform some action &quot;at slightly later time&quot;. This can be necessary in several circumstances when, for whatever reason, something can't be done in the current event handler. For example, if a mouse event handler is called with the mouse button pressed, the mouse can be currently captured and some operations with it - notably capturing it again - might be impossible or lead to undesirable results. If you still want to capture it, you can do it from wxEVT_IDLE handler when it is called the next time instead of doing it immediately. This can be achieved in two different ways: when using static event tables, you will need a flag indicating to the (always connected) idle event handler whether the desired action should be performed. The originally called handler would then set it to indicate that it should indeed be done and the idle handler itself would reset it to prevent it from doing the same action again. Using dynamically connected event handlers things are even simpler as the original event handler can simply wxEvtHandler::Connect() (not implemented in wx) or wxEvtHandler::Bind() (not implemented in wx) the idle event handler which would only be executed then and could wxEvtHandler::Disconnect() (not implemented in wx) or wxEvtHandler::Unbind() (not implemented in wx) itself. See: Overview events , wxUpdateUIEvent , wxWindow::OnInternalIdle (not implemented in wx) This class is derived (and can use functions) from: wxEvent wxWidgets docs: wxIdleEvent Events Use wxEvtHandler:connect/3 with wxIdleEventType to subscribe to events of this type.","ref":"wxIdleEvent.html","title":"wxIdleEvent","type":"module"},{"doc":"Static function returning a value specifying how wxWidgets will send idle events: to all windows, or only to those which specify that they will process the events. See: setMode/1","ref":"wxIdleEvent.html#getMode/0","title":"wxIdleEvent.getMode/0","type":"function"},{"doc":"Returns true if the OnIdle function processing this event requested more processing time. See: requestMore/2","ref":"wxIdleEvent.html#moreRequested/1","title":"wxIdleEvent.moreRequested/1","type":"function"},{"doc":"","ref":"wxIdleEvent.html#requestMore/1","title":"wxIdleEvent.requestMore/1","type":"function"},{"doc":"Tells wxWidgets that more processing is required. This function can be called by an OnIdle handler for a window or window event handler to indicate that wxApp::OnIdle should forward the OnIdle event once more to the application windows. If no window calls this function during OnIdle, then the application will remain in a passive event loop (not calling OnIdle) until a new event is posted to the application by the windowing system. See: moreRequested/1","ref":"wxIdleEvent.html#requestMore/2","title":"wxIdleEvent.requestMore/2","type":"function"},{"doc":"Static function for specifying how wxWidgets will send idle events: to all windows, or only to those which specify that they will process the events.","ref":"wxIdleEvent.html#setMode/1","title":"wxIdleEvent.setMode/1","type":"function"},{"doc":"","ref":"wxIdleEvent.html#t:wxIdle/0","title":"wxIdleEvent.wxIdle/0","type":"type"},{"doc":"","ref":"wxIdleEvent.html#t:wxIdleEvent/0","title":"wxIdleEvent.wxIdleEvent/0","type":"type"},{"doc":"","ref":"wxIdleEvent.html#t:wxIdleEventType/0","title":"wxIdleEvent.wxIdleEventType/0","type":"type"},{"doc":"This class encapsulates a platform-independent image. An image can be created from data, or using wxBitmap:convertToImage/1 . An image can be loaded from a file in a variety of formats, and is extensible to new formats via image format handlers. Functions are available to set and get image bits, so it can be used for basic image manipulation. A wxImage cannot (currently) be drawn directly to a wxDC . Instead, a platform-specific wxBitmap object must be created from it using the wxBitmap::wxBitmap(wxImage,int depth) constructor. This bitmap can then be drawn in a device context, using wxDC:drawBitmap/4 . More on the difference between wxImage and wxBitmap : wxImage is just a buffer of RGB bytes with an optional buffer for the alpha bytes. It is all generic, platform independent and image file format independent code. It includes generic code for scaling, resizing, clipping, and other manipulations of the image data. OTOH, wxBitmap is intended to be a wrapper of whatever is the native image format that is quickest/easiest to draw to a DC or to be the target of the drawing operations performed on a wxMemoryDC . By splitting the responsibilities between wxImage/wxBitmap like this then it's easier to use generic code shared by all platforms and image types for generic operations and platform specific code where performance or compatibility is needed. One colour value of the image may be used as a mask colour which will lead to the automatic creation of a wxMask object associated to the bitmap object. Alpha channel support Starting from wxWidgets 2.5.0 wxImage supports alpha channel data, that is in addition to a byte for the red, green and blue colour components for each pixel it also stores a byte representing the pixel opacity. An alpha value of 0 corresponds to a transparent pixel (null opacity) while a value of 255 means that the pixel is 100% opaque. The constants ?wxIMAGE_ALPHA_TRANSPARENT and ?wxIMAGE_ALPHA_OPAQUE can be used to indicate those values in a more readable form. While all images have RGB data, not all images have an alpha channel. Before using getAlpha/3 you should check if this image contains an alpha channel with hasAlpha/1 . Currently the BMP, PNG, TGA, and TIFF format handlers have full alpha channel support for loading so if you want to use alpha you have to use one of these formats. If you initialize the image alpha channel yourself using setAlpha/4 , you should save it in either PNG, TGA, or TIFF format to avoid losing it as these are the only handlers that currently support saving with alpha. Available image handlers The following image handlers are available. wxBMPHandler is always installed by default. To use other image formats, install the appropriate handler with wxImage::AddHandler (not implemented in wx) or call ?wxInitAllImageHandlers(). When saving in PCX format, wxPCXHandler (not implemented in wx) will count the number of different colours in the image; if there are 256 or less colours, it will save as 8 bit, else it will save as 24 bit. Loading PNMs only works for ASCII or raw RGB images. When saving in PNM format, wxPNMHandler (not implemented in wx) will always save as raw RGB. Saving GIFs requires images of maximum 8 bpp (see wxQuantize (not implemented in wx)), and the alpha channel converted to a mask (see convertAlphaToMask/5 ). Saving an animated GIF requires images of the same size (see wxGIFHandler::SaveAnimation (not implemented in wx)) Predefined objects (include wx.hrl): ?wxNullImage See: wxBitmap , ?wxInitAllImageHandlers(), wxPixelData (not implemented in wx) wxWidgets docs: wxImage","ref":"wxImage.html","title":"wxImage","type":"module"},{"doc":"Destroys the image data.","ref":"wxImage.html#Destroy/1","title":"wxImage.Destroy/1","type":"function"},{"doc":"Blurs the image in both horizontal and vertical directions by the specified pixel blurRadius . This should not be used when using a single mask colour for transparency. See: blurHorizontal/2 , blurVertical/2","ref":"wxImage.html#blur/2","title":"wxImage.blur/2","type":"function"},{"doc":"Blurs the image in the horizontal direction only. This should not be used when using a single mask colour for transparency. See: blur/2 , blurVertical/2","ref":"wxImage.html#blurHorizontal/2","title":"wxImage.blurHorizontal/2","type":"function"},{"doc":"Blurs the image in the vertical direction only. This should not be used when using a single mask colour for transparency. See: blur/2 , blurHorizontal/2","ref":"wxImage.html#blurVertical/2","title":"wxImage.blurVertical/2","type":"function"},{"doc":"","ref":"wxImage.html#convertAlphaToMask/1","title":"wxImage.convertAlphaToMask/1","type":"function"},{"doc":"If the image has alpha channel, this method converts it to mask. If the image has an alpha channel, all pixels with alpha value less than threshold are replaced with the mask colour and the alpha channel is removed. Otherwise nothing is done. The mask colour is chosen automatically using findFirstUnusedColour/2 , see the overload below if this is not appropriate. Return: Returns true on success, false on error.","ref":"wxImage.html#convertAlphaToMask/2","title":"wxImage.convertAlphaToMask/2","type":"function"},{"doc":"","ref":"wxImage.html#convertAlphaToMask/4","title":"wxImage.convertAlphaToMask/4","type":"function"},{"doc":"If the image has alpha channel, this method converts it to mask using the specified colour as the mask colour. If the image has an alpha channel, all pixels with alpha value less than threshold are replaced with the mask colour and the alpha channel is removed. Otherwise nothing is done. Since: 2.9.0 Return: Returns true on success, false on error.","ref":"wxImage.html#convertAlphaToMask/5","title":"wxImage.convertAlphaToMask/5","type":"function"},{"doc":"Returns a greyscale version of the image. Since: 2.9.0","ref":"wxImage.html#convertToGreyscale/1","title":"wxImage.convertToGreyscale/1","type":"function"},{"doc":"Returns a greyscale version of the image. The returned image uses the luminance component of the original to calculate the greyscale. Defaults to using the standard ITU-T BT.601 when converting to YUV, where every pixel equals (R * weight_r ) + (G * weight_g ) + (B * weight_b ).","ref":"wxImage.html#convertToGreyscale/4","title":"wxImage.convertToGreyscale/4","type":"function"},{"doc":"Returns monochromatic version of the image. The returned image has white colour where the original has (r,g,b) colour and black colour everywhere else.","ref":"wxImage.html#convertToMono/4","title":"wxImage.convertToMono/4","type":"function"},{"doc":"Returns an identical copy of this image.","ref":"wxImage.html#copy/1","title":"wxImage.copy/1","type":"function"},{"doc":"","ref":"wxImage.html#create/2","title":"wxImage.create/2","type":"function"},{"doc":"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.","ref":"wxImage.html#create/3","title":"wxImage.create/3","type":"function"},{"doc":"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.","ref":"wxImage.html#create/4","title":"wxImage.create/4","type":"function"},{"doc":"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.","ref":"wxImage.html#create/5","title":"wxImage.create/5","type":"function"},{"doc":"Creates a fresh image. See new/5 for more info. Return: true if the call succeeded, false otherwise.","ref":"wxImage.html#create/6","title":"wxImage.create/6","type":"function"},{"doc":"Destructor. See reference-counted object destruction for more info.","ref":"wxImage.html#destroy/1","title":"wxImage.destroy/1","type":"function"},{"doc":"","ref":"wxImage.html#findFirstUnusedColour/1","title":"wxImage.findFirstUnusedColour/1","type":"function"},{"doc":"Finds the first colour that is never used in the image. The search begins at given initial colour and continues by increasing R, G and B components (in this order) by 1 until an unused colour is found or the colour space exhausted. The parameters r , g , b are pointers to variables to save the colour. The parameters startR , startG , startB define the initial values of the colour. The returned colour will have RGB values equal to or greater than these. Return: Returns false if there is no unused colour left, true on success. Note: This method involves computing the histogram, which is a computationally intensive operation.","ref":"wxImage.html#findFirstUnusedColour/2","title":"wxImage.findFirstUnusedColour/2","type":"function"},{"doc":"Returns pointer to the array storing the alpha values for this image. This pointer is NULL for the images without the alpha channel. If the image does have it, this pointer may be used to directly manipulate the alpha values which are stored as the RGB ones.","ref":"wxImage.html#getAlpha/1","title":"wxImage.getAlpha/1","type":"function"},{"doc":"Return alpha value at given pixel location.","ref":"wxImage.html#getAlpha/3","title":"wxImage.getAlpha/3","type":"function"},{"doc":"Returns the blue intensity at the given coordinate.","ref":"wxImage.html#getBlue/3","title":"wxImage.getBlue/3","type":"function"},{"doc":"Returns the image data as an array. This is most often used when doing direct image manipulation. The return value points to an array of characters in RGBRGBRGB... format in the top-to-bottom, left-to-right order, that is the first RGB triplet corresponds to the first pixel of the first row, the second one - to the second pixel of the first row and so on until the end of the first row, with second row following after it and so on. You should not delete the returned pointer nor pass it to setData/5 .","ref":"wxImage.html#getData/1","title":"wxImage.getData/1","type":"function"},{"doc":"Returns the green intensity at the given coordinate.","ref":"wxImage.html#getGreen/3","title":"wxImage.getGreen/3","type":"function"},{"doc":"Gets the height of the image in pixels. See: getWidth/1 , GetSize() (not implemented in wx)","ref":"wxImage.html#getHeight/1","title":"wxImage.getHeight/1","type":"function"},{"doc":"","ref":"wxImage.html#getImageCount/1","title":"wxImage.getImageCount/1","type":"function"},{"doc":"If the image file contains more than one image and the image handler is capable of retrieving these individually, this function will return the number of available images. For the overload taking the parameter filename , that's the name of the file to query. For the overload taking the parameter stream , that's the opened input stream with image data. See wxImageHandler::GetImageCount() (not implemented in wx) for more info. The parameter type may be one of the following values: Return: Number of available images. For most image handlers, this is 1 (exceptions are TIFF and ICO formats as well as animated GIFs for which this function returns the number of frames in the animation).","ref":"wxImage.html#getImageCount/2","title":"wxImage.getImageCount/2","type":"function"},{"doc":"Iterates all registered wxImageHandler (not implemented in wx) objects, and returns a string containing file extension masks suitable for passing to file open/save dialog boxes. Return: The format of the returned string is &quot;(*.ext1;*.ext2)|*.ext1;*.ext2&quot; . It is usually a good idea to prepend a description before passing the result to the dialog. Example: See: wxImageHandler (not implemented in wx)","ref":"wxImage.html#getImageExtWildcard/0","title":"wxImage.getImageExtWildcard/0","type":"function"},{"doc":"Gets the blue value of the mask colour.","ref":"wxImage.html#getMaskBlue/1","title":"wxImage.getMaskBlue/1","type":"function"},{"doc":"Gets the green value of the mask colour.","ref":"wxImage.html#getMaskGreen/1","title":"wxImage.getMaskGreen/1","type":"function"},{"doc":"Gets the red value of the mask colour.","ref":"wxImage.html#getMaskRed/1","title":"wxImage.getMaskRed/1","type":"function"},{"doc":"Gets a user-defined string-valued option. Generic options: Options specific to wxGIFHandler (not implemented in wx): Return: The value of the option or an empty string if not found. Use hasOption/2 if an empty string can be a valid option value. See: setOption/3 , getOptionInt/2 , hasOption/2","ref":"wxImage.html#getOption/2","title":"wxImage.getOption/2","type":"function"},{"doc":"Gets a user-defined integer-valued option. The function is case-insensitive to name . If the given option is not present, the function returns 0. Use hasOption/2 if 0 is a possibly valid value for the option. Generic options: Since: 2.9.3 Options specific to wxPNGHandler (not implemented in wx): Options specific to wxTIFFHandler (not implemented in wx): Options specific to wxGIFHandler (not implemented in wx): Note: Be careful when combining the options wxIMAGE_OPTION_TIFF_SAMPLESPERPIXEL , wxIMAGE_OPTION_TIFF_BITSPERSAMPLE , and wxIMAGE_OPTION_TIFF_PHOTOMETRIC . While some measures are taken to prevent illegal combinations and/or values, it is still easy to abuse them and come up with invalid results in the form of either corrupted images or crashes. Return: The value of the option or 0 if not found. Use hasOption/2 if 0 can be a valid option value. See: setOption/3 , getOption/2","ref":"wxImage.html#getOptionInt/2","title":"wxImage.getOptionInt/2","type":"function"},{"doc":"Get the current mask colour or find a suitable unused colour that could be used as a mask colour. Returns true if the image currently has a mask.","ref":"wxImage.html#getOrFindMaskColour/1","title":"wxImage.getOrFindMaskColour/1","type":"function"},{"doc":"Returns the palette associated with the image. Currently the palette is only used when converting to wxBitmap under Windows. Some of the wxImage handlers have been modified to set the palette if one exists in the image file (usually 256 or less colour images in GIF or PNG format).","ref":"wxImage.html#getPalette/1","title":"wxImage.getPalette/1","type":"function"},{"doc":"Returns the red intensity at the given coordinate.","ref":"wxImage.html#getRed/3","title":"wxImage.getRed/3","type":"function"},{"doc":"Returns a sub image of the current one as long as the rect belongs entirely to the image.","ref":"wxImage.html#getSubImage/2","title":"wxImage.getSubImage/2","type":"function"},{"doc":"Gets the width of the image in pixels. See: getHeight/1 , GetSize() (not implemented in wx)","ref":"wxImage.html#getWidth/1","title":"wxImage.getWidth/1","type":"function"},{"doc":"Returns true if this image has alpha channel, false otherwise. See: getAlpha/3 , setAlpha/4","ref":"wxImage.html#hasAlpha/1","title":"wxImage.hasAlpha/1","type":"function"},{"doc":"Returns true if there is a mask active, false otherwise.","ref":"wxImage.html#hasMask/1","title":"wxImage.hasMask/1","type":"function"},{"doc":"Returns true if the given option is present. The function is case-insensitive to name . The lists of the currently supported options are in getOption/2 and getOptionInt/2 function docs. See: setOption/3 , getOption/2 , getOptionInt/2","ref":"wxImage.html#hasOption/2","title":"wxImage.hasOption/2","type":"function"},{"doc":"Initializes the image alpha channel data. It is an error to call it if the image already has alpha data. If it doesn't, alpha data will be by default initialized to all pixels being fully opaque. But if the image has a mask colour, all mask pixels will be completely transparent.","ref":"wxImage.html#initAlpha/1","title":"wxImage.initAlpha/1","type":"function"},{"doc":"Internal use only. Adds standard image format handlers. It only install wxBMPHandler for the time being, which is used by wxBitmap . This function is called by wxWidgets on startup, and shouldn't be called by the user. See: wxImageHandler (not implemented in wx), ?wxInitAllImageHandlers(), wxQuantize (not implemented in wx)","ref":"wxImage.html#initStandardHandlers/0","title":"wxImage.initStandardHandlers/0","type":"function"},{"doc":"Returns true if image data is present.","ref":"wxImage.html#isOk/1","title":"wxImage.isOk/1","type":"function"},{"doc":"","ref":"wxImage.html#isTransparent/3","title":"wxImage.isTransparent/3","type":"function"},{"doc":"Returns true if the given pixel is transparent, i.e. either has the mask colour if this image has a mask or if this image has alpha channel and alpha value of this pixel is strictly less than threshold .","ref":"wxImage.html#isTransparent/4","title":"wxImage.isTransparent/4","type":"function"},{"doc":"","ref":"wxImage.html#loadFile/2","title":"wxImage.loadFile/2","type":"function"},{"doc":"Loads an image from a file. If no handler type is provided, the library will try to autodetect the format.","ref":"wxImage.html#loadFile/3","title":"wxImage.loadFile/3","type":"function"},{"doc":"Loads an image from a file. If no handler type is provided, the library will try to autodetect the format.","ref":"wxImage.html#loadFile/4","title":"wxImage.loadFile/4","type":"function"},{"doc":"","ref":"wxImage.html#mirror/1","title":"wxImage.mirror/1","type":"function"},{"doc":"Returns a mirrored copy of the image. The parameter horizontally indicates the orientation.","ref":"wxImage.html#mirror/2","title":"wxImage.mirror/2","type":"function"},{"doc":"Creates an empty wxImage object without an alpha channel.","ref":"wxImage.html#new/0","title":"wxImage.new/0","type":"function"},{"doc":"","ref":"wxImage.html#new/1","title":"wxImage.new/1","type":"function"},{"doc":"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.","ref":"wxImage.html#new/2","title":"wxImage.new/2","type":"function"},{"doc":"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.","ref":"wxImage.html#new/3","title":"wxImage.new/3","type":"function"},{"doc":"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.","ref":"wxImage.html#new/4","title":"wxImage.new/4","type":"function"},{"doc":"Creates an image from data in memory. If static_data is false then the wxImage will take ownership of the data and free it afterwards. For this, it has to be allocated with malloc .","ref":"wxImage.html#new/5","title":"wxImage.new/5","type":"function"},{"doc":"See: isOk/1 .","ref":"wxImage.html#ok/1","title":"wxImage.ok/1","type":"function"},{"doc":"Finds the handler with the given name, and removes it. The handler is also deleted. Return: true if the handler was found and removed, false otherwise. See: wxImageHandler (not implemented in wx)","ref":"wxImage.html#removeHandler/1","title":"wxImage.removeHandler/1","type":"function"},{"doc":"Replaces the colour specified by r1 ,g1,b1 by the colour r2 ,g2,b2.","ref":"wxImage.html#replace/7","title":"wxImage.replace/7","type":"function"},{"doc":"","ref":"wxImage.html#rescale/3","title":"wxImage.rescale/3","type":"function"},{"doc":"Changes the size of the image in-place by scaling it: after a call to this function,the image will have the given width and height. For a description of the quality parameter, see the scale/4 function. Returns the (modified) image itself. See: scale/4","ref":"wxImage.html#rescale/4","title":"wxImage.rescale/4","type":"function"},{"doc":"","ref":"wxImage.html#resize/3","title":"wxImage.resize/3","type":"function"},{"doc":"Changes the size of the image in-place without scaling it by adding either a border with the given colour or cropping as necessary. The image is pasted into a new image with the given size and background colour at the position pos relative to the upper left of the new image. If red = green = blue = -1 then use either the current mask colour if set or find, use, and set a suitable mask colour for any newly exposed areas. Return: The (modified) image itself. See: size/4","ref":"wxImage.html#resize/4","title":"wxImage.resize/4","type":"function"},{"doc":"","ref":"wxImage.html#rotate/3","title":"wxImage.rotate/3","type":"function"},{"doc":"Rotates the image about the given point, by angle radians. Passing true to interpolating results in better image quality, but is slower. If the image has a mask, then the mask colour is used for the uncovered pixels in the rotated image background. Else, black (rgb 0, 0, 0) will be used. Returns the rotated image, leaving this image intact.","ref":"wxImage.html#rotate/4","title":"wxImage.rotate/4","type":"function"},{"doc":"","ref":"wxImage.html#rotate90/1","title":"wxImage.rotate90/1","type":"function"},{"doc":"Returns a copy of the image rotated 90 degrees in the direction indicated by clockwise .","ref":"wxImage.html#rotate90/2","title":"wxImage.rotate90/2","type":"function"},{"doc":"Rotates the hue of each pixel in the image by angle , which is a double in the range of -1.0 to +1.0, where -1.0 corresponds to -360 degrees and +1.0 corresponds to +360 degrees.","ref":"wxImage.html#rotateHue/2","title":"wxImage.rotateHue/2","type":"function"},{"doc":"Saves an image in the named file. File type is determined from the extension of the file name. Note that this function may fail if the extension is not recognized! You can use one of the forms above to save images to files with non-standard extensions.","ref":"wxImage.html#saveFile/2","title":"wxImage.saveFile/2","type":"function"},{"doc":"Saves an image in the named file.","ref":"wxImage.html#saveFile/3","title":"wxImage.saveFile/3","type":"function"},{"doc":"","ref":"wxImage.html#scale/3","title":"wxImage.scale/3","type":"function"},{"doc":"Returns a scaled version of the image. This is also useful for scaling bitmaps in general as the only other way to scale bitmaps is to blit a wxMemoryDC into another wxMemoryDC . The parameter quality determines what method to use for resampling the image, see wxImageResizeQuality documentation. It should be noted that although using wxIMAGE_QUALITY_HIGH produces much nicer looking results it is a slower method. Downsampling will use the box averaging method which seems to operate very fast. If you are upsampling larger images using this method you will most likely notice that it is a bit slower and in extreme cases it will be quite substantially slower as the bicubic algorithm has to process a lot of data. It should also be noted that the high quality scaling may not work as expected when using a single mask colour for transparency, as the scaling will blur the image and will therefore remove the mask partially. Using the alpha channel will work. Example: See: rescale/4","ref":"wxImage.html#scale/4","title":"wxImage.scale/4","type":"function"},{"doc":"","ref":"wxImage.html#setAlpha/2","title":"wxImage.setAlpha/2","type":"function"},{"doc":"This function is similar to setData/5 and has similar restrictions. The pointer passed to it may however be NULL in which case the function will allocate the alpha array internally - this is useful to add alpha channel data to an image which doesn't have any. If the pointer is not NULL, it must have one byte for each image pixel and be allocated with malloc(). wxImage takes ownership of the pointer and will free it unless static_data parameter is set to true - in this case the caller should do it.","ref":"wxImage.html#setAlpha/3","title":"wxImage.setAlpha/3","type":"function"},{"doc":"Sets the alpha value for the given pixel. This function should only be called if the image has alpha channel data, use hasAlpha/1 to check for this.","ref":"wxImage.html#setAlpha/4","title":"wxImage.setAlpha/4","type":"function"},{"doc":"","ref":"wxImage.html#setData/2","title":"wxImage.setData/2","type":"function"},{"doc":"Sets the image data without performing checks. The data given must have the size (width*height*3) or results will be unexpected. Don't use this method if you aren't sure you know what you are doing. The data must have been allocated with malloc() , NOT with operator new. If static_data is false, after this call the pointer to the data is owned by the wxImage object, that will be responsible for deleting it. Do not pass to this function a pointer obtained through getData/1 .","ref":"wxImage.html#setData/3","title":"wxImage.setData/3","type":"function"},{"doc":"","ref":"wxImage.html#setData/4","title":"wxImage.setData/4","type":"function"},{"doc":"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.","ref":"wxImage.html#setData/5","title":"wxImage.setData/5","type":"function"},{"doc":"","ref":"wxImage.html#setMask/1","title":"wxImage.setMask/1","type":"function"},{"doc":"Specifies whether there is a mask or not. The area of the mask is determined by the current mask colour.","ref":"wxImage.html#setMask/2","title":"wxImage.setMask/2","type":"function"},{"doc":"Sets the mask colour for this image (and tells the image to use the mask).","ref":"wxImage.html#setMaskColour/4","title":"wxImage.setMaskColour/4","type":"function"},{"doc":"Sets image's mask so that the pixels that have RGB value of mr,mg,mb in mask will be masked in the image. This is done by first finding an unused colour in the image, setting this colour as the mask colour and then using this colour to draw all pixels in the image who corresponding pixel in mask has given RGB value. The parameter mask is the mask image to extract mask shape from. It must have the same dimensions as the image. The parameters mr , mg , mb are the RGB values of the pixels in mask that will be used to create the mask. Return: Returns false if mask does not have same dimensions as the image or if there is no unused colour left. Returns true if the mask was successfully applied. Note: Note that this method involves computing the histogram, which is a computationally intensive operation.","ref":"wxImage.html#setMaskFromImage/5","title":"wxImage.setMaskFromImage/5","type":"function"},{"doc":"Sets a user-defined option. The function is case-insensitive to name . For example, when saving as a JPEG file, the option quality is used, which is a number between 0 and 100 (0 is terrible, 100 is very good). The lists of the currently supported options are in getOption/2 and getOptionInt/2 function docs. See: getOption/2 , getOptionInt/2 , hasOption/2","ref":"wxImage.html#setOption/3","title":"wxImage.setOption/3","type":"function"},{"doc":"Associates a palette with the image. The palette may be used when converting wxImage to wxBitmap (MSW only at present) or in file save operations (none as yet).","ref":"wxImage.html#setPalette/2","title":"wxImage.setPalette/2","type":"function"},{"doc":"Sets the colour of the pixels within the given rectangle. This routine performs bounds-checks for the coordinate so it can be considered a safe way to manipulate the data.","ref":"wxImage.html#setRGB/5","title":"wxImage.setRGB/5","type":"function"},{"doc":"Set the color of the pixel at the given x and y coordinate.","ref":"wxImage.html#setRGB/6","title":"wxImage.setRGB/6","type":"function"},{"doc":"","ref":"wxImage.html#size/3","title":"wxImage.size/3","type":"function"},{"doc":"Returns a resized version of this image without scaling it by adding either a border with the given colour or cropping as necessary. The image is pasted into a new image with the given size and background colour at the position pos relative to the upper left of the new image. If red = green = blue = -1 then the areas of the larger image not covered by this image are made transparent by filling them with the image mask colour (which will be allocated automatically if it isn't currently set). Otherwise, the areas will be filled with the colour with the specified RGB components. See: resize/4","ref":"wxImage.html#size/4","title":"wxImage.size/4","type":"function"},{"doc":"","ref":"wxImage.html#t:wxImage/0","title":"wxImage.wxImage/0","type":"type"},{"doc":"A wxImageList contains a list of images, which are stored in an unspecified form. Images can have masks for transparent drawing, and can be made from a variety of sources including bitmaps and icons. wxImageList is used principally in conjunction with wxTreeCtrl and wxListCtrl classes. See: wxTreeCtrl , wxListCtrl wxWidgets docs: wxImageList","ref":"wxImageList.html","title":"wxImageList","type":"module"},{"doc":"Adds a new image using an icon. Return: The new zero-based image index. Remark: The original bitmap or icon is not affected by the add/3 operation, and can be deleted afterwards. If the bitmap is wider than the images in the list, then the bitmap will automatically be split into smaller images, each matching the dimensions of the image list. This does not apply when adding icons. Only for:wxmsw,wxosx","ref":"wxImageList.html#add/2","title":"wxImageList.add/2","type":"function"},{"doc":"Adds a new image or images using a bitmap and optional mask bitmap. Return: The new zero-based image index. Remark: The original bitmap or icon is not affected by the add/3 operation, and can be deleted afterwards. If the bitmap is wider than the images in the list, then the bitmap will automatically be split into smaller images, each matching the dimensions of the image list. This does not apply when adding icons.","ref":"wxImageList.html#add/3","title":"wxImageList.add/3","type":"function"},{"doc":"","ref":"wxImageList.html#create/3","title":"wxImageList.create/3","type":"function"},{"doc":"Initializes the list. See new/3 for details.","ref":"wxImageList.html#create/4","title":"wxImageList.create/4","type":"function"},{"doc":"Destroys the object.","ref":"wxImageList.html#destroy/1","title":"wxImageList.destroy/1","type":"function"},{"doc":"","ref":"wxImageList.html#draw/5","title":"wxImageList.draw/5","type":"function"},{"doc":"Draws a specified image onto a device context.","ref":"wxImageList.html#draw/6","title":"wxImageList.draw/6","type":"function"},{"doc":"Returns the bitmap corresponding to the given index.","ref":"wxImageList.html#getBitmap/2","title":"wxImageList.getBitmap/2","type":"function"},{"doc":"Returns the icon corresponding to the given index.","ref":"wxImageList.html#getIcon/2","title":"wxImageList.getIcon/2","type":"function"},{"doc":"Returns the number of images in the list.","ref":"wxImageList.html#getImageCount/1","title":"wxImageList.getImageCount/1","type":"function"},{"doc":"Retrieves the size of the images in the list. Currently, the index parameter is ignored as all images in the list have the same size. Return: true if the function succeeded, false if it failed (for example, if the image list was not yet initialized).","ref":"wxImageList.html#getSize/2","title":"wxImageList.getSize/2","type":"function"},{"doc":"Default ctor.","ref":"wxImageList.html#new/0","title":"wxImageList.new/0","type":"function"},{"doc":"","ref":"wxImageList.html#new/2","title":"wxImageList.new/2","type":"function"},{"doc":"Constructor specifying the image size, whether image masks should be created, and the initial size of the list. See: create/4","ref":"wxImageList.html#new/3","title":"wxImageList.new/3","type":"function"},{"doc":"Removes the image at the given position.","ref":"wxImageList.html#remove/2","title":"wxImageList.remove/2","type":"function"},{"doc":"Removes all the images in the list.","ref":"wxImageList.html#removeAll/1","title":"wxImageList.removeAll/1","type":"function"},{"doc":"Replaces the existing image with the new image. Return: true if the replacement was successful, false otherwise. Remark: The original bitmap or icon is not affected by the replace/4 operation, and can be deleted afterwards. Only for:wxmsw,wxosx","ref":"wxImageList.html#replace/3","title":"wxImageList.replace/3","type":"function"},{"doc":"Replaces the existing image with the new image. Windows only. Return: true if the replacement was successful, false otherwise. Remark: The original bitmap or icon is not affected by the replace/4 operation, and can be deleted afterwards.","ref":"wxImageList.html#replace/4","title":"wxImageList.replace/4","type":"function"},{"doc":"","ref":"wxImageList.html#t:wxImageList/0","title":"wxImageList.wxImageList/0","type":"type"},{"doc":"A wxInitDialogEvent is sent as a dialog or panel is being initialised. Handlers for this event can transfer data to the window. The default handler calls wxWindow:transferDataToWindow/1 . See: Overview events This class is derived (and can use functions) from: wxEvent wxWidgets docs: wxInitDialogEvent Events Use wxEvtHandler:connect/3 with wxInitDialogEventType to subscribe to events of this type.","ref":"wxInitDialogEvent.html","title":"wxInitDialogEvent","type":"module"},{"doc":"","ref":"wxInitDialogEvent.html#t:wxInitDialog/0","title":"wxInitDialogEvent.wxInitDialog/0","type":"type"},{"doc":"","ref":"wxInitDialogEvent.html#t:wxInitDialogEvent/0","title":"wxInitDialogEvent.wxInitDialogEvent/0","type":"type"},{"doc":"","ref":"wxInitDialogEvent.html#t:wxInitDialogEventType/0","title":"wxInitDialogEvent.wxInitDialogEventType/0","type":"type"},{"doc":"This event class contains information about joystick events, particularly events received by windows. See: wxJoystick (not implemented in wx) This class is derived (and can use functions) from: wxEvent wxWidgets docs: wxJoystickEvent Events Use wxEvtHandler:connect/3 with wxJoystickEventType to subscribe to events of this type.","ref":"wxJoystickEvent.html","title":"wxJoystickEvent","type":"module"},{"doc":"","ref":"wxJoystickEvent.html#buttonDown/1","title":"wxJoystickEvent.buttonDown/1","type":"function"},{"doc":"Returns true if the event was a down event from the specified button (or any button).","ref":"wxJoystickEvent.html#buttonDown/2","title":"wxJoystickEvent.buttonDown/2","type":"function"},{"doc":"","ref":"wxJoystickEvent.html#buttonIsDown/1","title":"wxJoystickEvent.buttonIsDown/1","type":"function"},{"doc":"Returns true if the specified button (or any button) was in a down state.","ref":"wxJoystickEvent.html#buttonIsDown/2","title":"wxJoystickEvent.buttonIsDown/2","type":"function"},{"doc":"","ref":"wxJoystickEvent.html#buttonUp/1","title":"wxJoystickEvent.buttonUp/1","type":"function"},{"doc":"Returns true if the event was an up event from the specified button (or any button).","ref":"wxJoystickEvent.html#buttonUp/2","title":"wxJoystickEvent.buttonUp/2","type":"function"},{"doc":"Returns the identifier of the button changing state. The return value is where n is the index of the button changing state, which can also be retrieved using GetButtonOrdinal() (not implemented in wx). Note that for n equal to 1, 2, 3 or 4 there are predefined wxJOY_BUTTONn constants which can be used for more clarity, however these constants are not defined for the buttons beyond the first four.","ref":"wxJoystickEvent.html#getButtonChange/1","title":"wxJoystickEvent.getButtonChange/1","type":"function"},{"doc":"Returns the down state of the buttons. This is a wxJOY_BUTTONn identifier, where n is one of 1, 2, 3, 4.","ref":"wxJoystickEvent.html#getButtonState/1","title":"wxJoystickEvent.getButtonState/1","type":"function"},{"doc":"Returns the identifier of the joystick generating the event - one of wxJOYSTICK1 and wxJOYSTICK2.","ref":"wxJoystickEvent.html#getJoystick/1","title":"wxJoystickEvent.getJoystick/1","type":"function"},{"doc":"Returns the x, y position of the joystick event. These coordinates are valid for all the events except wxEVT_JOY_ZMOVE.","ref":"wxJoystickEvent.html#getPosition/1","title":"wxJoystickEvent.getPosition/1","type":"function"},{"doc":"Returns the z position of the joystick event. This method can only be used for wxEVT_JOY_ZMOVE events.","ref":"wxJoystickEvent.html#getZPosition/1","title":"wxJoystickEvent.getZPosition/1","type":"function"},{"doc":"Returns true if this was a button up or down event ( not 'is any button down?').","ref":"wxJoystickEvent.html#isButton/1","title":"wxJoystickEvent.isButton/1","type":"function"},{"doc":"Returns true if this was an x, y move event.","ref":"wxJoystickEvent.html#isMove/1","title":"wxJoystickEvent.isMove/1","type":"function"},{"doc":"Returns true if this was a z move event.","ref":"wxJoystickEvent.html#isZMove/1","title":"wxJoystickEvent.isZMove/1","type":"function"},{"doc":"","ref":"wxJoystickEvent.html#t:wxJoystick/0","title":"wxJoystickEvent.wxJoystick/0","type":"type"},{"doc":"","ref":"wxJoystickEvent.html#t:wxJoystickEvent/0","title":"wxJoystickEvent.wxJoystickEvent/0","type":"type"},{"doc":"","ref":"wxJoystickEvent.html#t:wxJoystickEventType/0","title":"wxJoystickEvent.wxJoystickEventType/0","type":"type"},{"doc":"This event class contains information about key press and release events. The main information carried by this event is the key being pressed or released. It can be accessed using either getKeyCode/1 function or getUnicodeKey/1 . For the printable characters, the latter should be used as it works for any keys, including non-Latin-1 characters that can be entered when using national keyboard layouts. getKeyCode/1 should be used to handle special characters (such as cursor arrows keys or HOME or INS and so on) which correspond to ?wxKeyCode enum elements above the WXK_START constant. While getKeyCode/1 also returns the character code for Latin-1 keys for compatibility, it doesn't work for Unicode characters in general and will return WXK_NONE for any non-Latin-1 ones. For this reason, it's recommended to always use getUnicodeKey/1 and only fall back to getKeyCode/1 if getUnicodeKey/1 returned WXK_NONE meaning that the event corresponds to a non-printable special keys. While both of these functions can be used with the events of wxEVT_KEY_DOWN , wxEVT_KEY_UP and wxEVT_CHAR types, the values returned by them are different for the first two events and the last one. For the latter, the key returned corresponds to the character that would appear in e.g. a text zone if the user pressed the key in it. As such, its value depends on the current state of the Shift key and, for the letters, on the state of Caps Lock modifier. For example, if A key is pressed without Shift being held down, wxKeyEvent of type wxEVT_CHAR generated for this key press will return (from either getKeyCode/1 or getUnicodeKey/1 as their meanings coincide for ASCII characters) key code of 97 corresponding the ASCII value of a . And if the same key is pressed but with Shift being held (or Caps Lock being active), then the key could would be 65, i.e. ASCII value of capital A . However for the key down and up events the returned key code will instead be A independently of the state of the modifier keys i.e. it depends only on physical key being pressed and is not translated to its logical representation using the current keyboard state. Such untranslated key codes are defined as follows: Notice that the first rule applies to all Unicode letters, not just the usual Latin-1 ones. However for non-Latin-1 letters only getUnicodeKey/1 can be used to retrieve the key code as getKeyCode/1 just returns WXK_NONE in this case. To summarize: you should handle wxEVT_CHAR if you need the translated key and wxEVT_KEY_DOWN if you only need the value of the key itself, independent of the current keyboard state. Note: Not all key down events may be generated by the user. As an example, wxEVT_KEY_DOWN with = key code can be generated using the standard US keyboard layout but not using the German one because the = key corresponds to Shift-0 key combination in this layout and the key code for it is 0 , not = . Because of this you should avoid requiring your users to type key events that might be impossible to enter on their keyboard. Another difference between key and char events is that another kind of translation is done for the latter ones when the Control key is pressed: char events for ASCII letters in this case carry codes corresponding to the ASCII value of Ctrl-Latter, i.e. 1 for Ctrl-A, 2 for Ctrl-B and so on until 26 for Ctrl-Z. This is convenient for terminal-like applications and can be completely ignored by all the other ones (if you need to handle Ctrl-A it is probably a better idea to use the key event rather than the char one). Notice that currently no translation is done for the presses of [, \\ , ], ^ and _ keys which might be mapped to ASCII values from 27 to 31. Since version 2.9.2, the enum values WXK_CONTROL_A - WXK_CONTROL_Z can be used instead of the non-descriptive constant values 1-26. Finally, modifier keys only generate key events but no char events at all. The modifiers keys are WXK_SHIFT , WXK_CONTROL , WXK_ALT and various WXK_WINDOWS_XXX from ?wxKeyCode enum. Modifier keys events are special in one additional aspect: usually the keyboard state associated with a key press is well defined, e.g. shiftDown/1 returns true only if the Shift key was held pressed when the key that generated this event itself was pressed. There is an ambiguity for the key press events for Shift key itself however. By convention, it is considered to be already pressed when it is pressed and already released when it is released. In other words, wxEVT_KEY_DOWN event for the Shift key itself will have wxMOD_SHIFT in getModifiers/1 and shiftDown/1 will return true while the wxEVT_KEY_UP event for Shift itself will not have wxMOD_SHIFT in its modifiers and shiftDown/1 will return false. Tip: You may discover the key codes and modifiers generated by all the keys on your system interactively by running the page_samples_keyboard wxWidgets sample and pressing some keys in it. Note: If a key down ( EVT_KEY_DOWN ) event is caught and the event handler does not call event.Skip() then the corresponding char event ( EVT_CHAR ) will not happen. This is by design and enables the programs that handle both types of events to avoid processing the same key twice. As a consequence, if you do not want to suppress the wxEVT_CHAR events for the keys you handle, always call event.Skip() in your wxEVT_KEY_DOWN handler. Not doing may also prevent accelerators defined using this key from working. Note: If a key is maintained in a pressed state, you will typically get a lot of (automatically generated) key down events but only one key up one at the end when the key is released so it is wrong to assume that there is one up event corresponding to each down one. Note: For Windows programmers: The key and char events in wxWidgets are similar to but slightly different from Windows WM_KEYDOWN and WM_CHAR events. In particular, Alt-x combination will generate a char event in wxWidgets (unless it is used as an accelerator) and almost all keys, including ones without ASCII equivalents, generate char events too. See: wxKeyboardState (not implemented in wx) This class is derived (and can use functions) from: wxEvent wxWidgets docs: wxKeyEvent Events Use wxEvtHandler:connect/3 with wxKeyEventType to subscribe to events of this type.","ref":"wxKeyEvent.html","title":"wxKeyEvent","type":"module"},{"doc":"Returns true if the Alt key is pressed. Notice that getModifiers/1 should usually be used instead of this one.","ref":"wxKeyEvent.html#altDown/1","title":"wxKeyEvent.altDown/1","type":"function"},{"doc":"Returns true if the key used for command accelerators is pressed. Same as controlDown/1 . Deprecated. Notice that getModifiers/1 should usually be used instead of this one.","ref":"wxKeyEvent.html#cmdDown/1","title":"wxKeyEvent.cmdDown/1","type":"function"},{"doc":"Returns true if the Control key or Apple/Command key under macOS is pressed. This function doesn't distinguish between right and left control keys. Notice that getModifiers/1 should usually be used instead of this one.","ref":"wxKeyEvent.html#controlDown/1","title":"wxKeyEvent.controlDown/1","type":"function"},{"doc":"Returns the key code of the key that generated this event. ASCII symbols return normal ASCII values, while events from special keys such as &quot;left cursor arrow&quot; ( WXK_LEFT ) return values outside of the ASCII range. See ?wxKeyCode for a full list of the virtual key codes. Note that this method returns a meaningful value only for special non-alphanumeric keys or if the user entered a Latin-1 character (this includes ASCII and the accented letters found in Western European languages but not letters of other alphabets such as e.g. Cyrillic). Otherwise it simply method returns WXK_NONE and getUnicodeKey/1 should be used to obtain the corresponding Unicode character. Using getUnicodeKey/1 is in general the right thing to do if you are interested in the characters typed by the user, getKeyCode/1 should be only used for special keys (for which getUnicodeKey/1 returns WXK_NONE ). To handle both kinds of keys you might write:","ref":"wxKeyEvent.html#getKeyCode/1","title":"wxKeyEvent.getKeyCode/1","type":"function"},{"doc":"Return the bit mask of all pressed modifier keys. The return value is a combination of wxMOD_ALT , wxMOD_CONTROL , wxMOD_SHIFT and wxMOD_META bit masks. Additionally, wxMOD_NONE is defined as 0, i.e. corresponds to no modifiers (see HasAnyModifiers() (not implemented in wx)) and wxMOD_CMD is either wxMOD_CONTROL (MSW and Unix) or wxMOD_META (Mac), see cmdDown/1 . See ?wxKeyModifier for the full list of modifiers. Notice that this function is easier to use correctly than, for example, controlDown/1 because when using the latter you also have to remember to test that none of the other modifiers is pressed: and forgetting to do it can result in serious program bugs (e.g. program not working with European keyboard layout where AltGr key which is seen by the program as combination of CTRL and ALT is used). On the other hand, you can simply write: with this function.","ref":"wxKeyEvent.html#getModifiers/1","title":"wxKeyEvent.getModifiers/1","type":"function"},{"doc":"Obtains the position (in client coordinates) at which the key was pressed. Notice that under most platforms this position is simply the current mouse pointer position and has no special relationship to the key event itself. x and y may be NULL if the corresponding coordinate is not needed.","ref":"wxKeyEvent.html#getPosition/1","title":"wxKeyEvent.getPosition/1","type":"function"},{"doc":"Returns the raw key code for this event. The flags are platform-dependent and should only be used if the functionality provided by other wxKeyEvent methods is insufficient. Under MSW, the raw key code is the value of wParam parameter of the corresponding message. Under GTK, the raw key code is the keyval field of the corresponding GDK event. Under macOS, the raw key code is the keyCode field of the corresponding NSEvent. Note: Currently the raw key codes are not supported by all ports, use #ifdef wxHAS_RAW_KEY_CODES to determine if this feature is available.","ref":"wxKeyEvent.html#getRawKeyCode/1","title":"wxKeyEvent.getRawKeyCode/1","type":"function"},{"doc":"Returns the low level key flags for this event. The flags are platform-dependent and should only be used if the functionality provided by other wxKeyEvent methods is insufficient. Under MSW, the raw flags are just the value of lParam parameter of the corresponding message. Under GTK, the raw flags contain the hardware_keycode field of the corresponding GDK event. Under macOS, the raw flags contain the modifiers state. Note: Currently the raw key flags are not supported by all ports, use #ifdef wxHAS_RAW_KEY_CODES to determine if this feature is available.","ref":"wxKeyEvent.html#getRawKeyFlags/1","title":"wxKeyEvent.getRawKeyFlags/1","type":"function"},{"doc":"Returns the Unicode character corresponding to this key event. If the key pressed doesn't have any character value (e.g. a cursor key) this method will return WXK_NONE . In this case you should use getKeyCode/1 to retrieve the value of the key. This function is only available in Unicode build, i.e. when wxUSE_UNICODE is 1.","ref":"wxKeyEvent.html#getUnicodeKey/1","title":"wxKeyEvent.getUnicodeKey/1","type":"function"},{"doc":"Returns the X position (in client coordinates) of the event. See: getPosition/1","ref":"wxKeyEvent.html#getX/1","title":"wxKeyEvent.getX/1","type":"function"},{"doc":"Returns the Y position (in client coordinates) of the event. See: getPosition/1","ref":"wxKeyEvent.html#getY/1","title":"wxKeyEvent.getY/1","type":"function"},{"doc":"Returns true if Control or Alt are pressed. Checks if Control, Alt or, under macOS only, Command key are pressed (notice that the real Control key is still taken into account under OS X too). This method returns false if only Shift is pressed for compatibility reasons and also because pressing Shift usually doesn't change the interpretation of key events, see HasAnyModifiers() (not implemented in wx) if you want to take Shift into account as well.","ref":"wxKeyEvent.html#hasModifiers/1","title":"wxKeyEvent.hasModifiers/1","type":"function"},{"doc":"Returns true if the Meta/Windows/Apple key is pressed. This function tests the state of the key traditionally called Meta under Unix systems, Windows keys under MSW Notice that getModifiers/1 should usually be used instead of this one. See: cmdDown/1","ref":"wxKeyEvent.html#metaDown/1","title":"wxKeyEvent.metaDown/1","type":"function"},{"doc":"Returns true if the Shift key is pressed. This function doesn't distinguish between right and left shift keys. Notice that getModifiers/1 should usually be used instead of this one.","ref":"wxKeyEvent.html#shiftDown/1","title":"wxKeyEvent.shiftDown/1","type":"function"},{"doc":"","ref":"wxKeyEvent.html#t:wxKey/0","title":"wxKeyEvent.wxKey/0","type":"type"},{"doc":"","ref":"wxKeyEvent.html#t:wxKeyEvent/0","title":"wxKeyEvent.wxKeyEvent/0","type":"type"},{"doc":"","ref":"wxKeyEvent.html#t:wxKeyEventType/0","title":"wxKeyEvent.wxKeyEventType/0","type":"type"},{"doc":"wxLayoutAlgorithm implements layout of subwindows in MDI or SDI frames. It sends a wxCalculateLayoutEvent (not implemented in wx) event to children of the frame, asking them for information about their size. For MDI parent frames, the algorithm allocates the remaining space to the MDI client window (which contains the MDI child frames). For SDI (normal) frames, a 'main' window is specified as taking up the remaining space. Because the event system is used, this technique can be applied to any windows, which are not necessarily 'aware' of the layout classes (no virtual functions in wxWindow refer to wxLayoutAlgorithm or its events). However, you may wish to use wxSashLayoutWindow for your subwindows since this class provides handlers for the required events, and accessors to specify the desired size of the window. The sash behaviour in the base class can be used, optionally, to make the windows user-resizable. wxLayoutAlgorithm is typically used in IDE (integrated development environment) applications, where there are several resizable windows in addition to the MDI client window, or other primary editing window. Resizable windows might include toolbars, a project window, and a window for displaying error and warning messages. When a window receives an OnCalculateLayout event, it should call SetRect in the given event object, to be the old supplied rectangle minus whatever space the window takes up. It should also set its own size accordingly. wxSashLayoutWindow::OnCalculateLayout (not implemented in wx) generates an OnQueryLayoutInfo event which it sends to itself to determine the orientation, alignment and size of the window, which it gets from internal member variables set by the application. The algorithm works by starting off with a rectangle equal to the whole frame client area. It iterates through the frame children, generating wxLayoutAlgorithm::OnCalculateLayout events which subtract the window size and return the remaining rectangle for the next window to process. It is assumed (by wxSashLayoutWindow::OnCalculateLayout (not implemented in wx)) that a window stretches the full dimension of the frame client, according to the orientation it specifies. For example, a horizontal window will stretch the full width of the remaining portion of the frame client area. In the other orientation, the window will be fixed to whatever size was specified by wxLayoutAlgorithm::OnQueryLayoutInfo. An alignment setting will make the window 'stick' to the left, top, right or bottom of the remaining client area. This scheme implies that order of window creation is important. Say you wish to have an extra toolbar at the top of the frame, a project window to the left of the MDI client window, and an output window above the status bar. You should therefore create the windows in this order: toolbar, output window, project window. This ensures that the toolbar and output window take up space at the top and bottom, and then the remaining height in-between is used for the project window. wxLayoutAlgorithm is quite independent of the way in which wxLayoutAlgorithm::OnCalculateLayout chooses to interpret a window's size and alignment. Therefore you could implement a different window class with a new wxLayoutAlgorithm::OnCalculateLayout event handler, that has a more sophisticated way of laying out the windows. It might allow specification of whether stretching occurs in the specified orientation, for example, rather than always assuming stretching. (This could, and probably should, be added to the existing implementation). Note: wxLayoutAlgorithm has nothing to do with wxLayoutConstraints (not implemented in wx). It is an alternative way of specifying layouts for which the normal constraint system is unsuitable. See: wxSashEvent , wxSashLayoutWindow , Overview events wxWidgets docs: wxLayoutAlgorithm","ref":"wxLayoutAlgorithm.html","title":"wxLayoutAlgorithm","type":"module"},{"doc":"Destructor.","ref":"wxLayoutAlgorithm.html#destroy/1","title":"wxLayoutAlgorithm.destroy/1","type":"function"},{"doc":"","ref":"wxLayoutAlgorithm.html#layoutFrame/2","title":"wxLayoutAlgorithm.layoutFrame/2","type":"function"},{"doc":"Lays out the children of a normal frame. mainWindow is set to occupy the remaining space. This function simply calls layoutWindow/3 .","ref":"wxLayoutAlgorithm.html#layoutFrame/3","title":"wxLayoutAlgorithm.layoutFrame/3","type":"function"},{"doc":"","ref":"wxLayoutAlgorithm.html#layoutMDIFrame/2","title":"wxLayoutAlgorithm.layoutMDIFrame/2","type":"function"},{"doc":"Lays out the children of an MDI parent frame. If rect is non-NULL, the given rectangle will be used as a starting point instead of the frame's client area. The MDI client window is set to occupy the remaining space.","ref":"wxLayoutAlgorithm.html#layoutMDIFrame/3","title":"wxLayoutAlgorithm.layoutMDIFrame/3","type":"function"},{"doc":"","ref":"wxLayoutAlgorithm.html#layoutWindow/2","title":"wxLayoutAlgorithm.layoutWindow/2","type":"function"},{"doc":"Lays out the children of a normal frame or other window. mainWindow is set to occupy the remaining space. If this is not specified, then the last window that responds to a calculate layout event in query mode will get the remaining space (that is, a non-query OnCalculateLayout event will not be sent to this window and the window will be set to the remaining size).","ref":"wxLayoutAlgorithm.html#layoutWindow/3","title":"wxLayoutAlgorithm.layoutWindow/3","type":"function"},{"doc":"Default constructor.","ref":"wxLayoutAlgorithm.html#new/0","title":"wxLayoutAlgorithm.new/0","type":"function"},{"doc":"","ref":"wxLayoutAlgorithm.html#t:wxLayoutAlgorithm/0","title":"wxLayoutAlgorithm.wxLayoutAlgorithm/0","type":"type"},{"doc":"A listbox is used to select one or more of a list of strings. The strings are displayed in a scrolling box, with the selected string(s) marked in reverse video. A listbox can be single selection (if an item is selected, the previous selection is removed) or multiple selection (clicking an item toggles the item on or off independently of other selections). List box elements are numbered from zero and while the maximal number of elements is unlimited, it is usually better to use a virtual control, not requiring to add all the items to it at once, such as wxDataViewCtrl (not implemented in wx) or wxListCtrl with wxLC_VIRTUAL style, once more than a few hundreds items need to be displayed because this control is not optimized, neither from performance nor from user interface point of view, for large number of items. Notice that the list box doesn't support control characters other than TAB . Styles This class supports the following styles: See: wxEditableListBox (not implemented in wx), wxChoice , wxComboBox , wxListCtrl , wxCommandEvent This class is derived (and can use functions) from: wxControlWithItems wxControl wxWindow wxEvtHandler wxWidgets docs: wxListBox Events Event types emitted from this class: command_listbox_selected , command_listbox_doubleclicked","ref":"wxListBox.html","title":"wxListBox","type":"module"},{"doc":"","ref":"wxListBox.html#create/6","title":"wxListBox.create/6","type":"function"},{"doc":"","ref":"wxListBox.html#create/7","title":"wxListBox.create/7","type":"function"},{"doc":"Deselects an item in the list box. Remark: This applies to multiple selection listboxes only.","ref":"wxListBox.html#deselect/2","title":"wxListBox.deselect/2","type":"function"},{"doc":"Destructor, destroying the list box.","ref":"wxListBox.html#destroy/1","title":"wxListBox.destroy/1","type":"function"},{"doc":"Fill an array of ints with the positions of the currently selected items. Return: The number of selections. Remark: Use this with a multiple selection listbox. See: wxControlWithItems:getSelection/1 , wxControlWithItems:getStringSelection/1 , wxControlWithItems:setSelection/2","ref":"wxListBox.html#getSelections/1","title":"wxListBox.getSelections/1","type":"function"},{"doc":"Returns the item located at point , or wxNOT_FOUND if there is no item located at point . It is currently implemented for wxMSW, wxMac and wxGTK2 ports. Return: Item located at point, or wxNOT_FOUND if unimplemented or the item does not exist. Since: 2.7.0","ref":"wxListBox.html#hitTest/2","title":"wxListBox.hitTest/2","type":"function"},{"doc":"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.","ref":"wxListBox.html#hitTest/3","title":"wxListBox.hitTest/3","type":"function"},{"doc":"Insert the given number of strings before the specified position.","ref":"wxListBox.html#insertItems/3","title":"wxListBox.insertItems/3","type":"function"},{"doc":"Determines whether an item is selected. Return: true if the given item is selected, false otherwise.","ref":"wxListBox.html#isSelected/2","title":"wxListBox.isSelected/2","type":"function"},{"doc":"Default constructor.","ref":"wxListBox.html#new/0","title":"wxListBox.new/0","type":"function"},{"doc":"","ref":"wxListBox.html#new/2","title":"wxListBox.new/2","type":"function"},{"doc":"Constructor, creating and showing a list box. See the other new/3 constructor; the only difference is that this overload takes a wxArrayString (not implemented in wx) instead of a pointer to an array of wxString (not implemented in wx).","ref":"wxListBox.html#new/3","title":"wxListBox.new/3","type":"function"},{"doc":"Replaces the current control contents with the given items. Notice that calling this method is usually much faster than appending them one by one if you need to add a lot of items.","ref":"wxListBox.html#set/2","title":"wxListBox.set/2","type":"function"},{"doc":"Set the specified item to be the first visible item.","ref":"wxListBox.html#setFirstItem/2","title":"wxListBox.setFirstItem/2","type":"function"},{"doc":"","ref":"wxListBox.html#t:wxListBox/0","title":"wxListBox.wxListBox/0","type":"type"},{"doc":"A list control presents lists in a number of formats: list view, report view, icon view and small icon view. In any case, elements are numbered from zero. For all these modes, the items are stored in the control and must be added to it using insertItem/4 method. A special case of report view quite different from the other modes of the list control is a virtual control in which the items data (including text, images and attributes) is managed by the main program and is requested by the control itself only when needed which allows having controls with millions of items without consuming much memory. To use virtual list control you must use setItemCount/2 first and override at least wxListCtrl::OnGetItemText (not implemented in wx) (and optionally wxListCtrl::OnGetItemImage (not implemented in wx) or wxListCtrl::OnGetItemColumnImage (not implemented in wx) and wxListCtrl::OnGetItemAttr (not implemented in wx)) to return the information about the items when the control requests it. Virtual list control can be used as a normal one except that no operations which can take time proportional to the number of items in the control happen - this is required to allow having a practically infinite number of items. For example, in a multiple selection virtual list control, the selections won't be sent when many items are selected at once because this could mean iterating over all the items. Using many of wxListCtrl features is shown in the corresponding sample. To intercept events from a list control, use the event table macros described in wxListEvent . wxMac Note : Starting with wxWidgets 2.8, wxListCtrl uses a native implementation for report mode, and uses a generic implementation for other modes. You can use the generic implementation for report mode as well by setting the mac.listctrl.always_use_generic system option (see wxSystemOptions ) to 1. Styles This class supports the following styles: Note: Under wxMSW this control uses wxSystemThemedControl (not implemented in wx) for an explorer style appearance by default since wxWidgets 3.1.0. If this is not desired, you can call wxSystemThemedControl::EnableSystemTheme (not implemented in wx) with false argument to disable this. See: Overview listctrl , wxListView , wxListBox , wxTreeCtrl , wxImageList , wxListEvent , wxListItem , wxEditableListBox (not implemented in wx) This class is derived (and can use functions) from: wxControl wxWindow wxEvtHandler wxWidgets docs: wxListCtrl Events Event types emitted from this class: command_list_begin_drag , command_list_begin_rdrag , command_list_begin_label_edit , command_list_end_label_edit , command_list_delete_item , command_list_delete_all_items , command_list_item_selected , command_list_item_deselected , command_list_item_activated , command_list_item_focused , command_list_item_middle_click , command_list_item_right_click , command_list_key_down , command_list_insert_item , command_list_col_click , command_list_col_right_click , command_list_col_begin_drag , command_list_col_dragging , command_list_col_end_drag , command_list_cache_hint","ref":"wxListCtrl.html","title":"wxListCtrl","type":"module"},{"doc":"","ref":"wxListCtrl.html#arrange/1","title":"wxListCtrl.arrange/1","type":"function"},{"doc":"Arranges the items in icon or small icon view. This only has effect on Win32. flag is one of:","ref":"wxListCtrl.html#arrange/2","title":"wxListCtrl.arrange/2","type":"function"},{"doc":"Sets the image list associated with the control and takes ownership of it (i.e. the control will, unlike when using setImageList/3 , delete the list when destroyed). which is one of wxIMAGE_LIST_NORMAL , wxIMAGE_LIST_SMALL , wxIMAGE_LIST_STATE (the last is unimplemented). See: setImageList/3","ref":"wxListCtrl.html#assignImageList/3","title":"wxListCtrl.assignImageList/3","type":"function"},{"doc":"Deletes all items and all columns. Note: This sends an event of type wxEVT_LIST_DELETE_ALL_ITEMS under all platforms.","ref":"wxListCtrl.html#clearAll/1","title":"wxListCtrl.clearAll/1","type":"function"},{"doc":"Creates the list control. See new/2 for further details.","ref":"wxListCtrl.html#create/3","title":"wxListCtrl.create/3","type":"function"},{"doc":"Deletes all items in the list control. This function does not send the wxEVT_LIST_DELETE_ITEM event because deleting many items from the control would be too slow then (unlike deleteItem/2 ) but it does send the special wxEVT_LIST_DELETE_ALL_ITEMS event if the control was not empty. If it was already empty, nothing is done and no event is sent. Return: true if the items were successfully deleted or if the control was already empty, false if an error occurred while deleting the items.","ref":"wxListCtrl.html#deleteAllItems/1","title":"wxListCtrl.deleteAllItems/1","type":"function"},{"doc":"Deletes a column.","ref":"wxListCtrl.html#deleteColumn/2","title":"wxListCtrl.deleteColumn/2","type":"function"},{"doc":"Deletes the specified item. This function sends the wxEVT_LIST_DELETE_ITEM event for the item being deleted. See: deleteAllItems/1","ref":"wxListCtrl.html#deleteItem/2","title":"wxListCtrl.deleteItem/2","type":"function"},{"doc":"Destructor, destroying the list control.","ref":"wxListCtrl.html#destroy/1","title":"wxListCtrl.destroy/1","type":"function"},{"doc":"Starts editing the label of the given item. This function generates a EVT_LIST_BEGIN_LABEL_EDIT event which can be vetoed so that no text control will appear for in-place editing. If the user changed the label (i.e. s/he does not press ESC or leave the text control without changes, a EVT_LIST_END_LABEL_EDIT event will be sent which can be vetoed as well.","ref":"wxListCtrl.html#editLabel/2","title":"wxListCtrl.editLabel/2","type":"function"},{"doc":"Ensures this item is visible.","ref":"wxListCtrl.html#ensureVisible/2","title":"wxListCtrl.ensureVisible/2","type":"function"},{"doc":"","ref":"wxListCtrl.html#findItem/3","title":"wxListCtrl.findItem/3","type":"function"},{"doc":"Find an item nearest this position in the specified direction, starting from start or the beginning if start is -1. Return: The next matching item if any or -1 (wxNOT_FOUND) otherwise.","ref":"wxListCtrl.html#findItem/4","title":"wxListCtrl.findItem/4","type":"function"},{"doc":"Gets information about this column. See setItem/5 for more information.","ref":"wxListCtrl.html#getColumn/3","title":"wxListCtrl.getColumn/3","type":"function"},{"doc":"Returns the number of columns.","ref":"wxListCtrl.html#getColumnCount/1","title":"wxListCtrl.getColumnCount/1","type":"function"},{"doc":"Gets the column width (report view only).","ref":"wxListCtrl.html#getColumnWidth/2","title":"wxListCtrl.getColumnWidth/2","type":"function"},{"doc":"Gets the number of items that can fit vertically in the visible area of the list control (list or report view) or the total number of items in the list control (icon or small icon view).","ref":"wxListCtrl.html#getCountPerPage/1","title":"wxListCtrl.getCountPerPage/1","type":"function"},{"doc":"Returns the edit control being currently used to edit a label. Returns NULL if no label is being edited. Note: It is currently only implemented for wxMSW and the generic version, not for the native macOS version.","ref":"wxListCtrl.html#getEditControl/1","title":"wxListCtrl.getEditControl/1","type":"function"},{"doc":"Returns the specified image list. which may be one of:","ref":"wxListCtrl.html#getImageList/2","title":"wxListCtrl.getImageList/2","type":"function"},{"doc":"Gets information about the item. See setItem/5 for more information. You must call info.SetId() to set the ID of item you're interested in before calling this method, and info.SetMask() with the flags indicating what fields you need to retrieve from info .","ref":"wxListCtrl.html#getItem/2","title":"wxListCtrl.getItem/2","type":"function"},{"doc":"Returns the colour for this item. If the item has no specific colour, returns an invalid colour (and not the default background control of the control itself). See: getItemTextColour/2","ref":"wxListCtrl.html#getItemBackgroundColour/2","title":"wxListCtrl.getItemBackgroundColour/2","type":"function"},{"doc":"Returns the number of items in the list control.","ref":"wxListCtrl.html#getItemCount/1","title":"wxListCtrl.getItemCount/1","type":"function"},{"doc":"Gets the application-defined data associated with this item.","ref":"wxListCtrl.html#getItemData/2","title":"wxListCtrl.getItemData/2","type":"function"},{"doc":"Returns the item's font.","ref":"wxListCtrl.html#getItemFont/2","title":"wxListCtrl.getItemFont/2","type":"function"},{"doc":"Returns the position of the item, in icon or small icon view.","ref":"wxListCtrl.html#getItemPosition/2","title":"wxListCtrl.getItemPosition/2","type":"function"},{"doc":"","ref":"wxListCtrl.html#getItemRect/2","title":"wxListCtrl.getItemRect/2","type":"function"},{"doc":"Returns the rectangle representing the item's size and position, in physical coordinates. code is one of wxLIST_RECT_BOUNDS, wxLIST_RECT_ICON, wxLIST_RECT_LABEL.","ref":"wxListCtrl.html#getItemRect/3","title":"wxListCtrl.getItemRect/3","type":"function"},{"doc":"Retrieves the spacing between icons in pixels: horizontal spacing is returned as x component of the {Width,Height} object and the vertical spacing as its y component.","ref":"wxListCtrl.html#getItemSpacing/1","title":"wxListCtrl.getItemSpacing/1","type":"function"},{"doc":"Gets the item state. For a list of state flags, see setItem/5 . The stateMask indicates which state flags are of interest.","ref":"wxListCtrl.html#getItemState/3","title":"wxListCtrl.getItemState/3","type":"function"},{"doc":"","ref":"wxListCtrl.html#getItemText/2","title":"wxListCtrl.getItemText/2","type":"function"},{"doc":"Gets the item text for this item.","ref":"wxListCtrl.html#getItemText/3","title":"wxListCtrl.getItemText/3","type":"function"},{"doc":"Returns the colour for this item. If the item has no specific colour, returns an invalid colour (and not the default foreground control of the control itself as this wouldn't allow distinguishing between items having the same colour as the current control foreground and items with default colour which, hence, have always the same colour as the control).","ref":"wxListCtrl.html#getItemTextColour/2","title":"wxListCtrl.getItemTextColour/2","type":"function"},{"doc":"","ref":"wxListCtrl.html#getNextItem/2","title":"wxListCtrl.getNextItem/2","type":"function"},{"doc":"Searches for an item with the given geometry or state, starting from item but excluding the item itself. If item is -1, the first item that matches the specified flags will be returned. Returns the first item with given state following item or -1 if no such item found. This function may be used to find all selected items in the control like this: geometry can be one of: Note: this parameter is only supported by wxMSW currently and ignored on other platforms. state can be a bitlist of the following:","ref":"wxListCtrl.html#getNextItem/3","title":"wxListCtrl.getNextItem/3","type":"function"},{"doc":"Returns the number of selected items in the list control.","ref":"wxListCtrl.html#getSelectedItemCount/1","title":"wxListCtrl.getSelectedItemCount/1","type":"function"},{"doc":"Gets the text colour of the list control.","ref":"wxListCtrl.html#getTextColour/1","title":"wxListCtrl.getTextColour/1","type":"function"},{"doc":"Gets the index of the topmost visible item when in list or report view.","ref":"wxListCtrl.html#getTopItem/1","title":"wxListCtrl.getTopItem/1","type":"function"},{"doc":"Returns the rectangle taken by all items in the control. In other words, if the controls client size were equal to the size of this rectangle, no scrollbars would be needed and no free space would be left. Note that this function only works in the icon and small icon views, not in list or report views (this is a limitation of the native Win32 control).","ref":"wxListCtrl.html#getViewRect/1","title":"wxListCtrl.getViewRect/1","type":"function"},{"doc":"Determines which item (if any) is at the specified point, giving details in flags . Returns index of the item or wxNOT_FOUND if no item is at the specified point. flags will be a combination of the following flags: If ptrSubItem is not NULL and the wxListCtrl is in the report mode the subitem (or column) number will also be provided. This feature is only available in version 2.7.0 or higher and is currently only implemented under wxMSW and requires at least comctl32.dll of version 4.70 on the host system or the value stored in ptrSubItem will be always -1. To compile this feature into wxWidgets library you need to have access to commctrl.h of version 4.70 that is provided by Microsoft.","ref":"wxListCtrl.html#hitTest/2","title":"wxListCtrl.hitTest/2","type":"function"},{"doc":"For report view mode (only), inserts a column. For more details, see setItem/5 . Also see insertColumn/4 overload for a usually more convenient alternative to this method and the description of how the item width is interpreted by this method.","ref":"wxListCtrl.html#insertColumn/3","title":"wxListCtrl.insertColumn/3","type":"function"},{"doc":"For report view mode (only), inserts a column. Insert a new column in the list control in report view mode at the given position specifying its most common attributes. Notice that to set the image for the column you need to use insertColumn/4 overload and specify ?wxLIST_MASK_IMAGE in the item mask. Return: The index of the inserted column or -1 if adding it failed.","ref":"wxListCtrl.html#insertColumn/4","title":"wxListCtrl.insertColumn/4","type":"function"},{"doc":"Inserts an item, returning the index of the new item if successful, -1 otherwise.","ref":"wxListCtrl.html#insertItem/2","title":"wxListCtrl.insertItem/2","type":"function"},{"doc":"Insert a string item.","ref":"wxListCtrl.html#insertItem/3","title":"wxListCtrl.insertItem/3","type":"function"},{"doc":"Insert an image/string item.","ref":"wxListCtrl.html#insertItem/4","title":"wxListCtrl.insertItem/4","type":"function"},{"doc":"Default constructor.","ref":"wxListCtrl.html#new/0","title":"wxListCtrl.new/0","type":"function"},{"doc":"Constructor, creating and showing a list control. See: create/3 , wxValidator (not implemented in wx)","ref":"wxListCtrl.html#new/2","title":"wxListCtrl.new/2","type":"function"},{"doc":"Redraws the given item . This is only useful for the virtual list controls as without calling this function the displayed value of the item doesn't change even when the underlying data does change. See: refreshItems/3","ref":"wxListCtrl.html#refreshItem/2","title":"wxListCtrl.refreshItem/2","type":"function"},{"doc":"Redraws the items between itemFrom and itemTo . The starting item must be less than or equal to the ending one. Just as refreshItem/2 this is only useful for virtual list controls.","ref":"wxListCtrl.html#refreshItems/3","title":"wxListCtrl.refreshItems/3","type":"function"},{"doc":"Scrolls the list control. If in icon, small icon or report view mode, dx specifies the number of pixels to scroll. If in list view mode, dx specifies the number of columns to scroll. dy always specifies the number of pixels to scroll vertically. Note: This method is currently only implemented in the Windows version.","ref":"wxListCtrl.html#scrollList/3","title":"wxListCtrl.scrollList/3","type":"function"},{"doc":"Sets the background colour. Note that the wxWindow:getBackgroundColour/1 function of wxWindow base class can be used to retrieve the current background colour.","ref":"wxListCtrl.html#setBackgroundColour/2","title":"wxListCtrl.setBackgroundColour/2","type":"function"},{"doc":"Sets information about this column. See setItem/5 for more information.","ref":"wxListCtrl.html#setColumn/3","title":"wxListCtrl.setColumn/3","type":"function"},{"doc":"Sets the column width. width can be a width in pixels or wxLIST_AUTOSIZE (-1) or wxLIST_AUTOSIZE_USEHEADER (-2). wxLIST_AUTOSIZE will resize the column to the length of its longest item. wxLIST_AUTOSIZE_USEHEADER will resize the column to the length of the header (Win32) or 80 pixels (other platforms). In small or normal icon view, col must be -1, and the column width is set for all columns.","ref":"wxListCtrl.html#setColumnWidth/3","title":"wxListCtrl.setColumnWidth/3","type":"function"},{"doc":"Sets the image list associated with the control. which is one of wxIMAGE_LIST_NORMAL , wxIMAGE_LIST_SMALL , wxIMAGE_LIST_STATE (the last is unimplemented). This method does not take ownership of the image list, you have to delete it yourself. See: assignImageList/3","ref":"wxListCtrl.html#setImageList/3","title":"wxListCtrl.setImageList/3","type":"function"},{"doc":"Sets the data of an item. Using the wxListItem 's mask and state mask, you can change only selected attributes of a wxListCtrl item. Return: true if the item was successfully updated or false if the update failed for some reason (e.g. an invalid item index).","ref":"wxListCtrl.html#setItem/2","title":"wxListCtrl.setItem/2","type":"function"},{"doc":"","ref":"wxListCtrl.html#setItem/4","title":"wxListCtrl.setItem/4","type":"function"},{"doc":"Sets an item string field at a particular column. Return: true if the item was successfully updated or false if the update failed for some reason (e.g. an invalid item index).","ref":"wxListCtrl.html#setItem/5","title":"wxListCtrl.setItem/5","type":"function"},{"doc":"Sets the background colour for this item. This function only works in report view mode. The colour can be retrieved using getItemBackgroundColour/2 .","ref":"wxListCtrl.html#setItemBackgroundColour/3","title":"wxListCtrl.setItemBackgroundColour/3","type":"function"},{"doc":"Sets the image associated with the item. In report view, you can specify the column. The image is an index into the image list associated with the list control.","ref":"wxListCtrl.html#setItemColumnImage/4","title":"wxListCtrl.setItemColumnImage/4","type":"function"},{"doc":"This method can only be used with virtual list controls. It is used to indicate to the control the number of items it contains. After calling it, the main program should be ready to handle calls to various item callbacks (such as wxListCtrl::OnGetItemText (not implemented in wx)) for all items in the range from 0 to count . Notice that the control is not necessarily redrawn after this call as it may be undesirable if an item which is not visible on the screen anyhow was added to or removed from a control displaying many items, if you do need to refresh the display you can just call wxWindow:refresh/2 manually.","ref":"wxListCtrl.html#setItemCount/2","title":"wxListCtrl.setItemCount/2","type":"function"},{"doc":"Associates application-defined data with this item. Notice that this function cannot be used to associate pointers with the control items, use SetItemPtrData() (not implemented in wx) instead.","ref":"wxListCtrl.html#setItemData/3","title":"wxListCtrl.setItemData/3","type":"function"},{"doc":"Sets the item's font.","ref":"wxListCtrl.html#setItemFont/3","title":"wxListCtrl.setItemFont/3","type":"function"},{"doc":"","ref":"wxListCtrl.html#setItemImage/3","title":"wxListCtrl.setItemImage/3","type":"function"},{"doc":"Sets the unselected and selected images associated with the item. The images are indices into the image list associated with the list control.","ref":"wxListCtrl.html#setItemImage/4","title":"wxListCtrl.setItemImage/4","type":"function"},{"doc":"Sets the position of the item, in icon or small icon view. Windows only.","ref":"wxListCtrl.html#setItemPosition/3","title":"wxListCtrl.setItemPosition/3","type":"function"},{"doc":"Sets the item state. The stateMask is a combination of wxLIST_STATE_XXX constants described in wxListItem documentation. For each of the bits specified in stateMask , the corresponding state is set or cleared depending on whether state argument contains the same bit or not. So to select an item you can use while to deselect it you should use Consider using wxListView if possible to avoid dealing with this error-prone and confusing method. Also notice that contrary to the usual rule that only user actions generate events, this method does generate wxEVT_LIST_ITEM_SELECTED event when it is used to select an item.","ref":"wxListCtrl.html#setItemState/4","title":"wxListCtrl.setItemState/4","type":"function"},{"doc":"Sets the item text for this item.","ref":"wxListCtrl.html#setItemText/3","title":"wxListCtrl.setItemText/3","type":"function"},{"doc":"Sets the colour for this item. This function only works in report view. The colour can be retrieved using getItemTextColour/2 .","ref":"wxListCtrl.html#setItemTextColour/3","title":"wxListCtrl.setItemTextColour/3","type":"function"},{"doc":"","ref":"wxListCtrl.html#setSingleStyle/2","title":"wxListCtrl.setSingleStyle/2","type":"function"},{"doc":"Adds or removes a single window style.","ref":"wxListCtrl.html#setSingleStyle/3","title":"wxListCtrl.setSingleStyle/3","type":"function"},{"doc":"Sets the text colour of the list control.","ref":"wxListCtrl.html#setTextColour/2","title":"wxListCtrl.setTextColour/2","type":"function"},{"doc":"Sets the whole window style, deleting all items.","ref":"wxListCtrl.html#setWindowStyleFlag/2","title":"wxListCtrl.setWindowStyleFlag/2","type":"function"},{"doc":"Sort the items in the list control. Sorts the items with supplied SortCallBack fun. SortCallBack receives the client data associated with two items to compare ( NOT the the index), and should return 0 if the items are equal, a negative value if the first item is less than the second one and a positive value if the first item is greater than the second one. Remark: Notice that the control may only be sorted on client data associated with the items, so you must use SetItemData if you want to be able to sort the items in the control. The callback may not call other (wx) processes.","ref":"wxListCtrl.html#sortItems/2","title":"wxListCtrl.sortItems/2","type":"function"},{"doc":"","ref":"wxListCtrl.html#t:wxListCtrl/0","title":"wxListCtrl.wxListCtrl/0","type":"type"},{"doc":"A list event holds information about events associated with wxListCtrl objects. See: wxListCtrl This class is derived (and can use functions) from: wxNotifyEvent wxCommandEvent wxEvent wxWidgets docs: wxListEvent Events Use wxEvtHandler:connect/3 with wxListEventType to subscribe to events of this type.","ref":"wxListEvent.html","title":"wxListEvent","type":"module"},{"doc":"For EVT_LIST_CACHE_HINT event only: return the first item which the list control advises us to cache.","ref":"wxListEvent.html#getCacheFrom/1","title":"wxListEvent.getCacheFrom/1","type":"function"},{"doc":"For EVT_LIST_CACHE_HINT event only: return the last item (inclusive) which the list control advises us to cache.","ref":"wxListEvent.html#getCacheTo/1","title":"wxListEvent.getCacheTo/1","type":"function"},{"doc":"The column position: it is only used with COL events. For the column dragging events, it is the column to the left of the divider being dragged, for the column click events it may be -1 if the user clicked in the list control header outside any column.","ref":"wxListEvent.html#getColumn/1","title":"wxListEvent.getColumn/1","type":"function"},{"doc":"The data.","ref":"wxListEvent.html#getData/1","title":"wxListEvent.getData/1","type":"function"},{"doc":"The image.","ref":"wxListEvent.html#getImage/1","title":"wxListEvent.getImage/1","type":"function"},{"doc":"The item index.","ref":"wxListEvent.html#getIndex/1","title":"wxListEvent.getIndex/1","type":"function"},{"doc":"An item object, used by some events. See also wxListCtrl:setItem/5 .","ref":"wxListEvent.html#getItem/1","title":"wxListEvent.getItem/1","type":"function"},{"doc":"Key code if the event is a keypress event.","ref":"wxListEvent.html#getKeyCode/1","title":"wxListEvent.getKeyCode/1","type":"function"},{"doc":"The (new) item label for EVT_LIST_END_LABEL_EDIT event.","ref":"wxListEvent.html#getLabel/1","title":"wxListEvent.getLabel/1","type":"function"},{"doc":"The mask.","ref":"wxListEvent.html#getMask/1","title":"wxListEvent.getMask/1","type":"function"},{"doc":"The position of the mouse pointer if the event is a drag event.","ref":"wxListEvent.html#getPoint/1","title":"wxListEvent.getPoint/1","type":"function"},{"doc":"The text.","ref":"wxListEvent.html#getText/1","title":"wxListEvent.getText/1","type":"function"},{"doc":"This method only makes sense for EVT_LIST_END_LABEL_EDIT message and returns true if it the label editing has been cancelled by the user ( getLabel/1 returns an empty string in this case but it doesn't allow the application to distinguish between really cancelling the edit and the admittedly rare case when the user wants to rename it to an empty string).","ref":"wxListEvent.html#isEditCancelled/1","title":"wxListEvent.isEditCancelled/1","type":"function"},{"doc":"","ref":"wxListEvent.html#t:wxList/0","title":"wxListEvent.wxList/0","type":"type"},{"doc":"","ref":"wxListEvent.html#t:wxListEvent/0","title":"wxListEvent.wxListEvent/0","type":"type"},{"doc":"","ref":"wxListEvent.html#t:wxListEventType/0","title":"wxListEvent.wxListEventType/0","type":"type"},{"doc":"This class stores information about a wxListCtrl item or column. wxListItem is a class which contains information about: The wxListItem object can also contain item-specific colour and font information: for this you need to call one of setTextColour/2 , setBackgroundColour/2 or setFont/2 functions on it passing it the colour/font to use. If the colour/font is not specified, the default list control colour/font is used. See: wxListCtrl wxWidgets docs: wxListItem","ref":"wxListItem.html","title":"wxListItem","type":"module"},{"doc":"Resets the item state to the default.","ref":"wxListItem.html#clear/1","title":"wxListItem.clear/1","type":"function"},{"doc":"Destroys the object.","ref":"wxListItem.html#destroy/1","title":"wxListItem.destroy/1","type":"function"},{"doc":"Returns the alignment for this item. Can be one of wxLIST_FORMAT_LEFT , wxLIST_FORMAT_RIGHT or wxLIST_FORMAT_CENTRE .","ref":"wxListItem.html#getAlign/1","title":"wxListItem.getAlign/1","type":"function"},{"doc":"Returns the background colour for this item.","ref":"wxListItem.html#getBackgroundColour/1","title":"wxListItem.getBackgroundColour/1","type":"function"},{"doc":"Returns the zero-based column; meaningful only in report mode.","ref":"wxListItem.html#getColumn/1","title":"wxListItem.getColumn/1","type":"function"},{"doc":"Returns the font used to display the item.","ref":"wxListItem.html#getFont/1","title":"wxListItem.getFont/1","type":"function"},{"doc":"Returns the zero-based item position.","ref":"wxListItem.html#getId/1","title":"wxListItem.getId/1","type":"function"},{"doc":"Returns the zero-based index of the image associated with the item into the image list.","ref":"wxListItem.html#getImage/1","title":"wxListItem.getImage/1","type":"function"},{"doc":"Returns a bit mask indicating which fields of the structure are valid. Can be any combination of the following values:","ref":"wxListItem.html#getMask/1","title":"wxListItem.getMask/1","type":"function"},{"doc":"Returns a bit field representing the state of the item. Can be any combination of:","ref":"wxListItem.html#getState/1","title":"wxListItem.getState/1","type":"function"},{"doc":"Returns the label/header text.","ref":"wxListItem.html#getText/1","title":"wxListItem.getText/1","type":"function"},{"doc":"Returns the text colour.","ref":"wxListItem.html#getTextColour/1","title":"wxListItem.getTextColour/1","type":"function"},{"doc":"Meaningful only for column headers in report mode. Returns the column width.","ref":"wxListItem.html#getWidth/1","title":"wxListItem.getWidth/1","type":"function"},{"doc":"Constructor.","ref":"wxListItem.html#new/0","title":"wxListItem.new/0","type":"function"},{"doc":"","ref":"wxListItem.html#new/1","title":"wxListItem.new/1","type":"function"},{"doc":"Sets the alignment for the item. See also getAlign/1","ref":"wxListItem.html#setAlign/2","title":"wxListItem.setAlign/2","type":"function"},{"doc":"Sets the background colour for the item.","ref":"wxListItem.html#setBackgroundColour/2","title":"wxListItem.setBackgroundColour/2","type":"function"},{"doc":"Sets the zero-based column. Meaningful only in report mode.","ref":"wxListItem.html#setColumn/2","title":"wxListItem.setColumn/2","type":"function"},{"doc":"Sets the font for the item.","ref":"wxListItem.html#setFont/2","title":"wxListItem.setFont/2","type":"function"},{"doc":"Sets the zero-based item position.","ref":"wxListItem.html#setId/2","title":"wxListItem.setId/2","type":"function"},{"doc":"Sets the zero-based index of the image associated with the item into the image list.","ref":"wxListItem.html#setImage/2","title":"wxListItem.setImage/2","type":"function"},{"doc":"Sets the mask of valid fields. See getMask/1 .","ref":"wxListItem.html#setMask/2","title":"wxListItem.setMask/2","type":"function"},{"doc":"Sets the item state flags (note that the valid state flags are influenced by the value of the state mask, see setStateMask/2 ). See getState/1 for valid flag values.","ref":"wxListItem.html#setState/2","title":"wxListItem.setState/2","type":"function"},{"doc":"Sets the bitmask that is used to determine which of the state flags are to be set. See also setState/2 .","ref":"wxListItem.html#setStateMask/2","title":"wxListItem.setStateMask/2","type":"function"},{"doc":"Sets the text label for the item.","ref":"wxListItem.html#setText/2","title":"wxListItem.setText/2","type":"function"},{"doc":"Sets the text colour for the item.","ref":"wxListItem.html#setTextColour/2","title":"wxListItem.setTextColour/2","type":"function"},{"doc":"Meaningful only for column headers in report mode. Sets the column width.","ref":"wxListItem.html#setWidth/2","title":"wxListItem.setWidth/2","type":"function"},{"doc":"","ref":"wxListItem.html#t:wxListItem/0","title":"wxListItem.wxListItem/0","type":"type"},{"doc":"wxWidgets docs: wxListItemAttr","ref":"wxListItemAttr.html","title":"wxListItemAttr","type":"module"},{"doc":"Destroys the object.","ref":"wxListItemAttr.html#destroy/1","title":"wxListItemAttr.destroy/1","type":"function"},{"doc":"","ref":"wxListItemAttr.html#getBackgroundColour/1","title":"wxListItemAttr.getBackgroundColour/1","type":"function"},{"doc":"","ref":"wxListItemAttr.html#getFont/1","title":"wxListItemAttr.getFont/1","type":"function"},{"doc":"","ref":"wxListItemAttr.html#getTextColour/1","title":"wxListItemAttr.getTextColour/1","type":"function"},{"doc":"","ref":"wxListItemAttr.html#hasBackgroundColour/1","title":"wxListItemAttr.hasBackgroundColour/1","type":"function"},{"doc":"","ref":"wxListItemAttr.html#hasFont/1","title":"wxListItemAttr.hasFont/1","type":"function"},{"doc":"","ref":"wxListItemAttr.html#hasTextColour/1","title":"wxListItemAttr.hasTextColour/1","type":"function"},{"doc":"","ref":"wxListItemAttr.html#new/0","title":"wxListItemAttr.new/0","type":"function"},{"doc":"","ref":"wxListItemAttr.html#new/3","title":"wxListItemAttr.new/3","type":"function"},{"doc":"","ref":"wxListItemAttr.html#setBackgroundColour/2","title":"wxListItemAttr.setBackgroundColour/2","type":"function"},{"doc":"","ref":"wxListItemAttr.html#setFont/2","title":"wxListItemAttr.setFont/2","type":"function"},{"doc":"","ref":"wxListItemAttr.html#setTextColour/2","title":"wxListItemAttr.setTextColour/2","type":"function"},{"doc":"","ref":"wxListItemAttr.html#t:wxListItemAttr/0","title":"wxListItemAttr.wxListItemAttr/0","type":"type"},{"doc":"This class currently simply presents a simpler to use interface for the wxListCtrl - it can be thought of as a façade for that complicated class. Using it is preferable to using wxListCtrl directly whenever possible because in the future some ports might implement wxListView but not the full set of wxListCtrl features. Other than different interface, this class is identical to wxListCtrl . In particular, it uses the same events, same window styles and so on. See: setColumnImage/3 This class is derived (and can use functions) from: wxControl wxWindow wxEvtHandler wxWidgets docs: wxListView","ref":"wxListView.html","title":"wxListView","type":"module"},{"doc":"Resets the column image - after calling this function, no image will be shown. See: setColumnImage/3","ref":"wxListView.html#clearColumnImage/2","title":"wxListView.clearColumnImage/2","type":"function"},{"doc":"Sets focus to the item with the given index .","ref":"wxListView.html#focus/2","title":"wxListView.focus/2","type":"function"},{"doc":"Returns the first selected item in a (presumably) multiple selection control. Together with getNextSelected/2 it can be used to iterate over all selected items in the control. Return: The first selected item, if any, -1 otherwise.","ref":"wxListView.html#getFirstSelected/1","title":"wxListView.getFirstSelected/1","type":"function"},{"doc":"Returns the currently focused item or -1 if none. See: isSelected/2 , focus/2","ref":"wxListView.html#getFocusedItem/1","title":"wxListView.getFocusedItem/1","type":"function"},{"doc":"Used together with getFirstSelected/1 to iterate over all selected items in the control. Return: Returns the next selected item or -1 if there are no more of them.","ref":"wxListView.html#getNextSelected/2","title":"wxListView.getNextSelected/2","type":"function"},{"doc":"Returns true if the item with the given index is selected, false otherwise. See: getFirstSelected/1 , getNextSelected/2","ref":"wxListView.html#isSelected/2","title":"wxListView.isSelected/2","type":"function"},{"doc":"","ref":"wxListView.html#select/2","title":"wxListView.select/2","type":"function"},{"doc":"Selects or unselects the given item. Notice that this method inherits the unusual behaviour of wxListCtrl:setItemState/4 which sends a wxEVT_LIST_ITEM_SELECTED event when it is used to select an item, contrary to the usual rule that only the user actions result in selection.","ref":"wxListView.html#select/3","title":"wxListView.select/3","type":"function"},{"doc":"Sets the column image for the specified column. To use the column images, the control must have a valid image list with at least one image.","ref":"wxListView.html#setColumnImage/3","title":"wxListView.setColumnImage/3","type":"function"},{"doc":"","ref":"wxListView.html#t:wxListView/0","title":"wxListView.wxListView/0","type":"type"},{"doc":"wxListbook is a class similar to wxNotebook but which uses a wxListCtrl to show the labels instead of the tabs. The underlying wxListCtrl displays page labels in a one-column report view by default. Calling wxBookCtrl::SetImageList will implicitly switch the control to use an icon view. For usage documentation of this class, please refer to the base abstract class wxBookCtrl. You can also use the page_samples_notebook to see wxListbook in action. Styles This class supports the following styles: See: ?wxBookCtrl, wxNotebook , Examples This class is derived (and can use functions) from: wxBookCtrlBase wxControl wxWindow wxEvtHandler wxWidgets docs: wxListbook Events Event types emitted from this class: listbook_page_changed , listbook_page_changing","ref":"wxListbook.html","title":"wxListbook","type":"module"},{"doc":"","ref":"wxListbook.html#addPage/3","title":"wxListbook.addPage/3","type":"function"},{"doc":"Adds a new page. The page must have the book control itself as the parent and must not have been added to this control previously. The call to this function will generate the page changing and page changed events if select is true, but not when inserting the very first page (as there is no previous page selection to switch from in this case and so it wouldn't make sense to e.g. veto such event). Return: true if successful, false otherwise. Remark: Do not delete the page, it will be deleted by the book control. See: insertPage/5","ref":"wxListbook.html#addPage/4","title":"wxListbook.addPage/4","type":"function"},{"doc":"","ref":"wxListbook.html#advanceSelection/1","title":"wxListbook.advanceSelection/1","type":"function"},{"doc":"Cycles through the tabs. The call to this function generates the page changing events.","ref":"wxListbook.html#advanceSelection/2","title":"wxListbook.advanceSelection/2","type":"function"},{"doc":"Sets the image list for the page control and takes ownership of the list. See: wxImageList , setImageList/2","ref":"wxListbook.html#assignImageList/2","title":"wxListbook.assignImageList/2","type":"function"},{"doc":"Changes the selection to the given page, returning the previous selection. This function behaves as setSelection/2 but does not generate the page changing events. See overview_events_prog for more information.","ref":"wxListbook.html#changeSelection/2","title":"wxListbook.changeSelection/2","type":"function"},{"doc":"","ref":"wxListbook.html#create/3","title":"wxListbook.create/3","type":"function"},{"doc":"Create the list book control that has already been constructed with the default constructor.","ref":"wxListbook.html#create/4","title":"wxListbook.create/4","type":"function"},{"doc":"Deletes all pages.","ref":"wxListbook.html#deleteAllPages/1","title":"wxListbook.deleteAllPages/1","type":"function"},{"doc":"Destroys the object.","ref":"wxListbook.html#destroy/1","title":"wxListbook.destroy/1","type":"function"},{"doc":"Returns the currently selected page or NULL.","ref":"wxListbook.html#getCurrentPage/1","title":"wxListbook.getCurrentPage/1","type":"function"},{"doc":"Returns the associated image list, may be NULL. See: wxImageList , setImageList/2","ref":"wxListbook.html#getImageList/1","title":"wxListbook.getImageList/1","type":"function"},{"doc":"Returns the window at the given page position.","ref":"wxListbook.html#getPage/2","title":"wxListbook.getPage/2","type":"function"},{"doc":"Returns the number of pages in the control.","ref":"wxListbook.html#getPageCount/1","title":"wxListbook.getPageCount/1","type":"function"},{"doc":"Returns the image index for the given page.","ref":"wxListbook.html#getPageImage/2","title":"wxListbook.getPageImage/2","type":"function"},{"doc":"Returns the string for the given page.","ref":"wxListbook.html#getPageText/2","title":"wxListbook.getPageText/2","type":"function"},{"doc":"Returns the currently selected page, or wxNOT_FOUND if none was selected. Note that this method may return either the previously or newly selected page when called from the EVT_BOOKCTRL_PAGE_CHANGED handler depending on the platform and so wxBookCtrlEvent:getSelection/1 should be used instead in this case.","ref":"wxListbook.html#getSelection/1","title":"wxListbook.getSelection/1","type":"function"},{"doc":"Returns the index of the tab at the specified position or wxNOT_FOUND if none. If flags parameter is non-NULL, the position of the point inside the tab is returned as well. Return: Returns the zero-based tab index or wxNOT_FOUND if there is no tab at the specified position.","ref":"wxListbook.html#hitTest/2","title":"wxListbook.hitTest/2","type":"function"},{"doc":"","ref":"wxListbook.html#insertPage/4","title":"wxListbook.insertPage/4","type":"function"},{"doc":"Inserts a new page at the specified position. Return: true if successful, false otherwise. Remark: Do not delete the page, it will be deleted by the book control. See: addPage/4","ref":"wxListbook.html#insertPage/5","title":"wxListbook.insertPage/5","type":"function"},{"doc":"Default ctor.","ref":"wxListbook.html#new/0","title":"wxListbook.new/0","type":"function"},{"doc":"","ref":"wxListbook.html#new/2","title":"wxListbook.new/2","type":"function"},{"doc":"Constructs a listbook control.","ref":"wxListbook.html#new/3","title":"wxListbook.new/3","type":"function"},{"doc":"Sets the image list to use. It does not take ownership of the image list, you must delete it yourself. See: wxImageList , assignImageList/2","ref":"wxListbook.html#setImageList/2","title":"wxListbook.setImageList/2","type":"function"},{"doc":"Sets the image index for the given page. image is an index into the image list which was set with setImageList/2 .","ref":"wxListbook.html#setPageImage/3","title":"wxListbook.setPageImage/3","type":"function"},{"doc":"Sets the width and height of the pages. Note: This method is currently not implemented for wxGTK.","ref":"wxListbook.html#setPageSize/2","title":"wxListbook.setPageSize/2","type":"function"},{"doc":"Sets the text for the given page.","ref":"wxListbook.html#setPageText/3","title":"wxListbook.setPageText/3","type":"function"},{"doc":"Sets the selection to the given page, returning the previous selection. Notice that the call to this function generates the page changing events, use the changeSelection/2 function if you don't want these events to be generated. See: getSelection/1","ref":"wxListbook.html#setSelection/2","title":"wxListbook.setSelection/2","type":"function"},{"doc":"","ref":"wxListbook.html#t:wxListbook/0","title":"wxListbook.wxListbook/0","type":"type"},{"doc":"wxLocale class encapsulates all language-dependent settings and is a generalization of the C locale concept. In wxWidgets this class manages current locale. It also initializes and activates wxTranslations (not implemented in wx) object that manages message catalogs. For a list of the supported languages, please see ?wxLanguage enum values. These constants may be used to specify the language in init/3 and are returned by getSystemLanguage/0 . See: Overview i18n , Examples , wxXLocale (not implemented in wx), wxTranslations (not implemented in wx) wxWidgets docs: wxLocale","ref":"wxLocale.html","title":"wxLocale","type":"module"},{"doc":"Calls wxTranslations::AddCatalog(const wxString&amp;).","ref":"wxLocale.html#addCatalog/2","title":"wxLocale.addCatalog/2","type":"function"},{"doc":"Calls wxTranslations::AddCatalog(const wxString&amp;, wxLanguage) (not implemented in wx).","ref":"wxLocale.html#addCatalog/3","title":"wxLocale.addCatalog/3","type":"function"},{"doc":"Calls wxTranslations::AddCatalog(const wxString&amp;, wxLanguage, const wxString&amp;) (not implemented in wx).","ref":"wxLocale.html#addCatalog/4","title":"wxLocale.addCatalog/4","type":"function"},{"doc":"Calls wxFileTranslationsLoader::AddCatalogLookupPathPrefix() (not implemented in wx).","ref":"wxLocale.html#addCatalogLookupPathPrefix/1","title":"wxLocale.addCatalogLookupPathPrefix/1","type":"function"},{"doc":"The destructor, like the constructor, also has global side effects: the previously set locale is restored and so the changes described in init/3 documentation are rolled back.","ref":"wxLocale.html#destroy/1","title":"wxLocale.destroy/1","type":"function"},{"doc":"Returns the canonical form of current locale name. Canonical form is the one that is used on UNIX systems: it is a two- or five-letter string in xx or xx_YY format, where xx is ISO 639 code of language and YY is ISO 3166 code of the country. Examples are &quot;en&quot;, &quot;en_GB&quot;, &quot;en_US&quot; or &quot;fr_FR&quot;. This form is internally used when looking up message catalogs. Compare getSysName/1 .","ref":"wxLocale.html#getCanonicalName/1","title":"wxLocale.getCanonicalName/1","type":"function"},{"doc":"","ref":"wxLocale.html#getHeaderValue/2","title":"wxLocale.getHeaderValue/2","type":"function"},{"doc":"Calls wxTranslations::GetHeaderValue() (not implemented in wx).","ref":"wxLocale.html#getHeaderValue/3","title":"wxLocale.getHeaderValue/3","type":"function"},{"doc":"Returns the ?wxLanguage constant of current language. Note that you can call this function only if you used the form of init/3 that takes ?wxLanguage argument.","ref":"wxLocale.html#getLanguage/1","title":"wxLocale.getLanguage/1","type":"function"},{"doc":"Returns English name of the given language or empty string if this language is unknown. See GetLanguageInfo() (not implemented in wx) for a remark about special meaning of wxLANGUAGE_DEFAULT .","ref":"wxLocale.html#getLanguageName/1","title":"wxLocale.getLanguageName/1","type":"function"},{"doc":"Returns the locale name as passed to the constructor or init/3 . This is a full, human-readable name, e.g. &quot;English&quot; or &quot;French&quot;.","ref":"wxLocale.html#getLocale/1","title":"wxLocale.getLocale/1","type":"function"},{"doc":"Returns the current short name for the locale (as given to the constructor or the init/3 function).","ref":"wxLocale.html#getName/1","title":"wxLocale.getName/1","type":"function"},{"doc":"","ref":"wxLocale.html#getString/2","title":"wxLocale.getString/2","type":"function"},{"doc":"Calls wxGetTranslation(const wxString&amp;, const wxString&amp;).","ref":"wxLocale.html#getString/3","title":"wxLocale.getString/3","type":"function"},{"doc":"","ref":"wxLocale.html#getString/4","title":"wxLocale.getString/4","type":"function"},{"doc":"Calls wxGetTranslation(const wxString&amp;, const wxString&amp;, unsigned, const wxString&amp;).","ref":"wxLocale.html#getString/5","title":"wxLocale.getString/5","type":"function"},{"doc":"Returns current platform-specific locale name as passed to setlocale(). Compare getCanonicalName/1 .","ref":"wxLocale.html#getSysName/1","title":"wxLocale.getSysName/1","type":"function"},{"doc":"Tries to detect the user's default font encoding. Returns ?wxFontEncoding() value or wxFONTENCODING_SYSTEM if it couldn't be determined.","ref":"wxLocale.html#getSystemEncoding/0","title":"wxLocale.getSystemEncoding/0","type":"function"},{"doc":"Tries to detect the name of the user's default font encoding. This string isn't particularly useful for the application as its form is platform-dependent and so you should probably use getSystemEncoding/0 instead. Returns a user-readable string value or an empty string if it couldn't be determined.","ref":"wxLocale.html#getSystemEncodingName/0","title":"wxLocale.getSystemEncodingName/0","type":"function"},{"doc":"Tries to detect the user's default locale setting. Returns the ?wxLanguage value or wxLANGUAGE_UNKNOWN if the language-guessing algorithm failed. Note: This function works with locales and returns the user's default locale. This may be, and usually is, the same as their preferred UI language, but it's not the same thing. Use wxTranslation to obtain language information. See: wxTranslations::GetBestTranslation() (not implemented in wx)","ref":"wxLocale.html#getSystemLanguage/0","title":"wxLocale.getSystemLanguage/0","type":"function"},{"doc":"","ref":"wxLocale.html#init/1","title":"wxLocale.init/1","type":"function"},{"doc":"Initializes the wxLocale instance. The call of this function has several global side effects which you should understand: first of all, the application locale is changed - note that this will affect many of standard C library functions such as printf() or strftime(). Second, this wxLocale object becomes the new current global locale for the application and so all subsequent calls to ?wxGetTranslation() will try to translate the messages using the message catalogs for this locale. Return: true on success or false if the given locale couldn't be set.","ref":"wxLocale.html#init/2","title":"wxLocale.init/2","type":"function"},{"doc":"Deprecated: This form is deprecated, use the other one unless you know what you are doing.","ref":"wxLocale.html#init/3","title":"wxLocale.init/3","type":"function"},{"doc":"Calls wxTranslations::IsLoaded() (not implemented in wx).","ref":"wxLocale.html#isLoaded/2","title":"wxLocale.isLoaded/2","type":"function"},{"doc":"Returns true if the locale could be set successfully.","ref":"wxLocale.html#isOk/1","title":"wxLocale.isOk/1","type":"function"},{"doc":"This is the default constructor and it does nothing to initialize the object: init/3 must be used to do that.","ref":"wxLocale.html#new/0","title":"wxLocale.new/0","type":"function"},{"doc":"","ref":"wxLocale.html#new/1","title":"wxLocale.new/1","type":"function"},{"doc":"See init/3 for parameters description. The call of this function has several global side effects which you should understand: first of all, the application locale is changed - note that this will affect many of standard C library functions such as printf() or strftime(). Second, this wxLocale object becomes the new current global locale for the application and so all subsequent calls to ?wxGetTranslation() will try to translate the messages using the message catalogs for this locale.","ref":"wxLocale.html#new/2","title":"wxLocale.new/2","type":"function"},{"doc":"","ref":"wxLocale.html#t:wxLocale/0","title":"wxLocale.wxLocale/0","type":"type"},{"doc":"This class allows you to temporarily suspend logging. All calls to the log functions during the life time of an object of this class are just ignored. In particular, it can be used to suppress the log messages given by wxWidgets itself but it should be noted that it is rarely the best way to cope with this problem as all log messages are suppressed, even if they indicate a completely different error than the one the programmer wanted to suppress. For instance, the example of the overview: would be better written as: wxWidgets docs: wxLogNull","ref":"wxLogNull.html","title":"wxLogNull","type":"module"},{"doc":"Resumes logging.","ref":"wxLogNull.html#destroy/1","title":"wxLogNull.destroy/1","type":"function"},{"doc":"Suspends logging.","ref":"wxLogNull.html#new/0","title":"wxLogNull.new/0","type":"function"},{"doc":"","ref":"wxLogNull.html#t:wxLogNull/0","title":"wxLogNull.wxLogNull/0","type":"type"},{"doc":"An MDI child frame is a frame that can only exist inside a wxMDIClientWindow , which is itself a child of wxMDIParentFrame . Styles This class supports the following styles: All of the standard wxFrame styles can be used but most of them are ignored by TDI-based MDI implementations. Remark: Although internally an MDI child frame is a child of the MDI client window, in wxWidgets you create it as a child of wxMDIParentFrame . In fact, you can usually forget that the client window exists. MDI child frames are clipped to the area of the MDI client window, and may be iconized on the client window. You can associate a menubar with a child frame as usual, although an MDI child doesn't display its menubar under its own title bar. The MDI parent frame's menubar will be changed to reflect the currently active child frame. If there are currently no children, the parent frame's own menubar will be displayed. See: wxMDIClientWindow , wxMDIParentFrame , wxFrame This class is derived (and can use functions) from: wxFrame wxTopLevelWindow wxWindow wxEvtHandler wxWidgets docs: wxMDIChildFrame","ref":"wxMDIChildFrame.html","title":"wxMDIChildFrame","type":"module"},{"doc":"Activates this MDI child frame. See: maximize/2 , restore/1","ref":"wxMDIChildFrame.html#activate/1","title":"wxMDIChildFrame.activate/1","type":"function"},{"doc":"","ref":"wxMDIChildFrame.html#create/4","title":"wxMDIChildFrame.create/4","type":"function"},{"doc":"Used in two-step frame construction. See new/4 for further details.","ref":"wxMDIChildFrame.html#create/5","title":"wxMDIChildFrame.create/5","type":"function"},{"doc":"Destructor. Destroys all child windows and menu bar if present.","ref":"wxMDIChildFrame.html#destroy/1","title":"wxMDIChildFrame.destroy/1","type":"function"},{"doc":"","ref":"wxMDIChildFrame.html#maximize/1","title":"wxMDIChildFrame.maximize/1","type":"function"},{"doc":"Maximizes this MDI child frame. This function doesn't do anything if IsAlwaysMaximized() (not implemented in wx) returns true. See: activate/1 , restore/1","ref":"wxMDIChildFrame.html#maximize/2","title":"wxMDIChildFrame.maximize/2","type":"function"},{"doc":"Default constructor.","ref":"wxMDIChildFrame.html#new/0","title":"wxMDIChildFrame.new/0","type":"function"},{"doc":"","ref":"wxMDIChildFrame.html#new/3","title":"wxMDIChildFrame.new/3","type":"function"},{"doc":"Constructor, creating the window. See: create/5","ref":"wxMDIChildFrame.html#new/4","title":"wxMDIChildFrame.new/4","type":"function"},{"doc":"Restores this MDI child frame (unmaximizes). This function doesn't do anything if IsAlwaysMaximized() (not implemented in wx) returns true. See: activate/1 , maximize/2","ref":"wxMDIChildFrame.html#restore/1","title":"wxMDIChildFrame.restore/1","type":"function"},{"doc":"","ref":"wxMDIChildFrame.html#t:wxMDIChildFrame/0","title":"wxMDIChildFrame.wxMDIChildFrame/0","type":"type"},{"doc":"An MDI client window is a child of wxMDIParentFrame , and manages zero or more wxMDIChildFrame objects. The client window is the area where MDI child windows exist. It doesn't have to cover the whole parent frame; other windows such as toolbars and a help window might coexist with it. There can be scrollbars on a client window, which are controlled by the parent window style. The wxMDIClientWindow class is usually adequate without further derivation, and it is created automatically when the MDI parent frame is created. If the application needs to derive a new class, the function wxMDIParentFrame::OnCreateClient() (not implemented in wx) must be overridden in order to give an opportunity to use a different class of client window. Under wxMSW, the client window will automatically have a sunken border style when the active child is not maximized, and no border style when a child is maximized. See: wxMDIChildFrame , wxMDIParentFrame , wxFrame This class is derived (and can use functions) from: wxWindow wxEvtHandler wxWidgets docs: wxMDIClientWindow","ref":"wxMDIClientWindow.html","title":"wxMDIClientWindow","type":"module"},{"doc":"","ref":"wxMDIClientWindow.html#createClient/2","title":"wxMDIClientWindow.createClient/2","type":"function"},{"doc":"Called by wxMDIParentFrame immediately after creating the client window. This function may be overridden in the derived class but the base class version must usually be called first to really create the window.","ref":"wxMDIClientWindow.html#createClient/3","title":"wxMDIClientWindow.createClient/3","type":"function"},{"doc":"Destroys the object.","ref":"wxMDIClientWindow.html#destroy/1","title":"wxMDIClientWindow.destroy/1","type":"function"},{"doc":"Default constructor. Objects of this class are only created by wxMDIParentFrame which uses the default constructor and calls createClient/3 immediately afterwards.","ref":"wxMDIClientWindow.html#new/0","title":"wxMDIClientWindow.new/0","type":"function"},{"doc":"","ref":"wxMDIClientWindow.html#t:wxMDIClientWindow/0","title":"wxMDIClientWindow.wxMDIClientWindow/0","type":"type"},{"doc":"An MDI (Multiple Document Interface) parent frame is a window which can contain MDI child frames in its client area which emulates the full desktop. MDI is a user-interface model in which all the window reside inside the single parent window as opposed to being separate from each other. It remains popular despite dire warnings from Microsoft itself (which popularized this model in the first model) that MDI is obsolete. An MDI parent frame always has a wxMDIClientWindow associated with it, which is the parent for MDI child frames. In the simplest case, the client window takes up the entire parent frame area but it is also possible to resize it to be smaller in order to have other windows in the frame, a typical example is using a sidebar along one of the window edges. The appearance of MDI applications differs between different ports. The classic MDI model, with child windows which can be independently moved, resized etc, is only available under MSW, which provides native support for it. In Mac ports, multiple top level windows are used for the MDI children too and the MDI parent frame itself is invisible, to accommodate the native look and feel requirements. In all the other ports, a tab-based MDI implementation (sometimes called TDI) is used and so at most one MDI child is visible at any moment (child frames are always maximized). Although it is possible to have multiple MDI parent frames, a typical MDI application has a single MDI parent frame window inside which multiple MDI child frames, i.e. objects of class wxMDIChildFrame , can be created. Styles This class supports the following styles: There are no special styles for this class, all wxFrame styles apply to it in the usual way. The only exception is that wxHSCROLL and wxVSCROLL styles apply not to the frame itself but to the client window, so that using them enables horizontal and vertical scrollbars for this window and not the frame. See: wxMDIChildFrame , wxMDIClientWindow , wxFrame , wxDialog This class is derived (and can use functions) from: wxFrame wxTopLevelWindow wxWindow wxEvtHandler wxWidgets docs: wxMDIParentFrame","ref":"wxMDIParentFrame.html","title":"wxMDIParentFrame","type":"module"},{"doc":"Activates the MDI child following the currently active one. The MDI children are maintained in an ordered list and this function switches to the next element in this list, wrapping around the end of it if the currently active child is the last one. See: activatePrevious/1","ref":"wxMDIParentFrame.html#activateNext/1","title":"wxMDIParentFrame.activateNext/1","type":"function"},{"doc":"Activates the MDI child preceding the currently active one. See: activateNext/1","ref":"wxMDIParentFrame.html#activatePrevious/1","title":"wxMDIParentFrame.activatePrevious/1","type":"function"},{"doc":"Arranges any iconized (minimized) MDI child windows. This method is only implemented in MSW MDI implementation and does nothing under the other platforms. See: cascade/1 , tile/2","ref":"wxMDIParentFrame.html#arrangeIcons/1","title":"wxMDIParentFrame.arrangeIcons/1","type":"function"},{"doc":"Arranges the MDI child windows in a cascade. This method is only implemented in MSW MDI implementation and does nothing under the other platforms. See: tile/2 , arrangeIcons/1","ref":"wxMDIParentFrame.html#cascade/1","title":"wxMDIParentFrame.cascade/1","type":"function"},{"doc":"","ref":"wxMDIParentFrame.html#create/4","title":"wxMDIParentFrame.create/4","type":"function"},{"doc":"Used in two-step frame construction. See new/4 for further details.","ref":"wxMDIParentFrame.html#create/5","title":"wxMDIParentFrame.create/5","type":"function"},{"doc":"Destructor. Destroys all child windows and menu bar if present.","ref":"wxMDIParentFrame.html#destroy/1","title":"wxMDIParentFrame.destroy/1","type":"function"},{"doc":"Returns a pointer to the active MDI child, if there is one. If there are any children at all this function returns a non-NULL pointer.","ref":"wxMDIParentFrame.html#getActiveChild/1","title":"wxMDIParentFrame.getActiveChild/1","type":"function"},{"doc":"Returns a pointer to the client window. See: OnCreateClient() (not implemented in wx)","ref":"wxMDIParentFrame.html#getClientWindow/1","title":"wxMDIParentFrame.getClientWindow/1","type":"function"},{"doc":"Default constructor. Use create/5 for the objects created using this constructor.","ref":"wxMDIParentFrame.html#new/0","title":"wxMDIParentFrame.new/0","type":"function"},{"doc":"","ref":"wxMDIParentFrame.html#new/3","title":"wxMDIParentFrame.new/3","type":"function"},{"doc":"Constructor, creating the window. Notice that if you override virtual OnCreateClient() (not implemented in wx) method you shouldn't be using this constructor but the default constructor and create/5 as otherwise your overridden method is never going to be called because of the usual C++ virtual call resolution rules. Under wxMSW, the client window will automatically have a sunken border style when the active child is not maximized, and no border style when a child is maximized. See: create/5 , OnCreateClient() (not implemented in wx)","ref":"wxMDIParentFrame.html#new/4","title":"wxMDIParentFrame.new/4","type":"function"},{"doc":"","ref":"wxMDIParentFrame.html#tile/1","title":"wxMDIParentFrame.tile/1","type":"function"},{"doc":"Tiles the MDI child windows either horizontally or vertically depending on whether orient is wxHORIZONTAL or wxVERTICAL . This method is only implemented in MSW MDI implementation and does nothing under the other platforms.","ref":"wxMDIParentFrame.html#tile/2","title":"wxMDIParentFrame.tile/2","type":"function"},{"doc":"","ref":"wxMDIParentFrame.html#t:wxMDIParentFrame/0","title":"wxMDIParentFrame.wxMDIParentFrame/0","type":"type"},{"doc":"This class encapsulates a monochrome mask bitmap, where the masked area is black and the unmasked area is white. When associated with a bitmap and drawn in a device context, the unmasked area of the bitmap will be drawn, and the masked area will not be drawn. Note: A mask can be associated also with a bitmap with an alpha channel but drawing such bitmaps under wxMSW may be slow so using them should be avoided if drawing performance is an important factor. See: wxBitmap , wxDC:blit/6 , wxMemoryDC wxWidgets docs: wxMask","ref":"wxMask.html","title":"wxMask","type":"module"},{"doc":"Constructs a mask from a monochrome bitmap.","ref":"wxMask.html#create/2","title":"wxMask.create/2","type":"function"},{"doc":"Constructs a mask from a bitmap and a colour that indicates the background.","ref":"wxMask.html#create/3","title":"wxMask.create/3","type":"function"},{"doc":"Destroys the wxMask object and the underlying bitmap data.","ref":"wxMask.html#destroy/1","title":"wxMask.destroy/1","type":"function"},{"doc":"Default constructor.","ref":"wxMask.html#new/0","title":"wxMask.new/0","type":"function"},{"doc":"Constructs a mask from a monochrome bitmap.","ref":"wxMask.html#new/1","title":"wxMask.new/1","type":"function"},{"doc":"Constructs a mask from a bitmap and a colour that indicates the background.","ref":"wxMask.html#new/2","title":"wxMask.new/2","type":"function"},{"doc":"","ref":"wxMask.html#t:wxMask/0","title":"wxMask.wxMask/0","type":"type"},{"doc":"An event being sent when a top level window is maximized. Notice that it is not sent when the window is restored to its original size after it had been maximized, only a normal wxSizeEvent is generated in this case. Currently this event is only generated in wxMSW, wxGTK and wxOSX/Cocoa ports so portable programs should only rely on receiving wxEVT_SIZE and not necessarily this event when the window is maximized. See: Overview events , wxTopLevelWindow:maximize/2 , wxTopLevelWindow:isMaximized/1 This class is derived (and can use functions) from: wxEvent wxWidgets docs: wxMaximizeEvent Events Use wxEvtHandler:connect/3 with wxMaximizeEventType to subscribe to events of this type.","ref":"wxMaximizeEvent.html","title":"wxMaximizeEvent","type":"module"},{"doc":"","ref":"wxMaximizeEvent.html#t:wxMaximize/0","title":"wxMaximizeEvent.wxMaximize/0","type":"type"},{"doc":"","ref":"wxMaximizeEvent.html#t:wxMaximizeEvent/0","title":"wxMaximizeEvent.wxMaximizeEvent/0","type":"type"},{"doc":"","ref":"wxMaximizeEvent.html#t:wxMaximizeEventType/0","title":"wxMaximizeEvent.wxMaximizeEventType/0","type":"type"},{"doc":"A memory device context provides a means to draw graphics onto a bitmap. When drawing in to a mono-bitmap, using wxWHITE , wxWHITE_PEN and wxWHITE_BRUSH will draw the background colour (i.e. 0) whereas all other colours will draw the foreground colour (i.e. 1). A bitmap must be selected into the new memory DC before it may be used for anything. Typical usage is as follows: Note that the memory DC must be deleted (or the bitmap selected out of it) before a bitmap can be reselected into another memory DC. And, before performing any other operations on the bitmap data, the bitmap must be selected out of the memory DC: This happens automatically when wxMemoryDC object goes out of scope. See: wxBitmap , wxDC This class is derived (and can use functions) from: wxDC wxWidgets docs: wxMemoryDC","ref":"wxMemoryDC.html","title":"wxMemoryDC","type":"module"},{"doc":"Destroys the object.","ref":"wxMemoryDC.html#destroy/1","title":"wxMemoryDC.destroy/1","type":"function"},{"doc":"Constructs a new memory device context. Use the wxDC:isOk/1 member to test whether the constructor was successful in creating a usable device context. Don't forget to select a bitmap into the DC before drawing on it.","ref":"wxMemoryDC.html#new/0","title":"wxMemoryDC.new/0","type":"function"},{"doc":"Constructs a new memory device context having the same characteristics as the given existing device context. This constructor creates a memory device context compatible with dc in wxMSW, the argument is ignored in the other ports. If dc is NULL, a device context compatible with the screen is created, just as with the default constructor.","ref":"wxMemoryDC.html#new/1","title":"wxMemoryDC.new/1","type":"function"},{"doc":"Works exactly like selectObjectAsSource/2 but this is the function you should use when you select a bitmap because you want to modify it, e.g. drawing on this DC. Using selectObjectAsSource/2 when modifying the bitmap may incur some problems related to wxBitmap being a reference counted object (see overview_refcount). Before using the updated bitmap data, make sure to select it out of context first either by selecting ?wxNullBitmap into the device context or destroying the device context entirely. If the bitmap is already selected in this device context, nothing is done. If it is selected in another context, the function asserts and drawing on the bitmap won't work correctly. See: wxDC:drawBitmap/4","ref":"wxMemoryDC.html#selectObject/2","title":"wxMemoryDC.selectObject/2","type":"function"},{"doc":"Selects the given bitmap into the device context, to use as the memory bitmap. Selecting the bitmap into a memory DC allows you to draw into the DC (and therefore the bitmap) and also to use wxDC:blit/6 to copy the bitmap to a window. For this purpose, you may find wxDC:drawIcon/3 easier to use instead. If the argument is ?wxNullBitmap (or some other uninitialised wxBitmap ) the current bitmap is selected out of the device context, and the original bitmap restored, allowing the current bitmap to be destroyed safely.","ref":"wxMemoryDC.html#selectObjectAsSource/2","title":"wxMemoryDC.selectObjectAsSource/2","type":"function"},{"doc":"","ref":"wxMemoryDC.html#t:wxMemoryDC/0","title":"wxMemoryDC.wxMemoryDC/0","type":"type"},{"doc":"A menu is a popup (or pull down) list of items, one of which may be selected before the menu goes away (clicking elsewhere dismisses the menu). Menus may be used to construct either menu bars or popup menus. A menu item has an integer ID associated with it which can be used to identify the selection, or to change the menu item in some way. A menu item with a special identifier wxID_SEPARATOR is a separator item and doesn't have an associated command but just makes a separator line appear in the menu. Note: Please note that wxID_ABOUT and wxID_EXIT are predefined by wxWidgets and have a special meaning since entries using these IDs will be taken out of the normal menus under macOS and will be inserted into the system menu (following the appropriate macOS interface guideline). Menu items may be either normal items, check items or radio items. Normal items don't have any special properties while the check items have a boolean flag associated to them and they show a checkmark in the menu when the flag is set. wxWidgets automatically toggles the flag value when the item is clicked and its value may be retrieved using either isChecked/2 method of wxMenu or wxMenuBar itself or by using wxEvent::IsChecked when you get the menu notification for the item in question. The radio items are similar to the check items except that all the other items in the same radio group are unchecked when a radio item is checked. The radio group is formed by a contiguous range of radio items, i.e. it starts at the first item of this kind and ends with the first item of a different kind (or the end of the menu). Notice that because the radio groups are defined in terms of the item positions inserting or removing the items in the menu containing the radio items risks to not work correctly. Allocation strategy All menus must be created on the heap because all menus attached to a menubar or to another menu will be deleted by their parent when it is deleted. The only exception to this rule are the popup menus (i.e. menus used with wxWindow:popupMenu/4 ) as wxWidgets does not destroy them to allow reusing the same menu more than once. But the exception applies only to the menus themselves and not to any submenus of popup menus which are still destroyed by wxWidgets as usual and so must be heap-allocated. As the frame menubar is deleted by the frame itself, it means that normally all menus used are deleted automatically. Event handling Event handlers for the commands generated by the menu items can be connected directly to the menu object itself using wxEvtHandler::Bind() (not implemented in wx). If this menu is a submenu of another one, the events from its items can also be processed in the parent menu and so on, recursively. If the menu is part of a menu bar, then events can also be handled in wxMenuBar object. Finally, menu events can also be handled in the associated window, which is either the wxFrame associated with the menu bar this menu belongs to or the window for which wxWindow:popupMenu/4 was called for the popup menus. See overview_events_bind for how to bind event handlers to the various objects. See: wxMenuBar , wxWindow:popupMenu/4 , Overview events , wxFileHistory (not implemented in wx) This class is derived (and can use functions) from: wxEvtHandler wxWidgets docs: wxMenu","ref":"wxMenu.html","title":"wxMenu","type":"module"},{"doc":"Deletes the menu item from the menu. If the item is a submenu, it will be deleted. Use remove/2 if you want to keep the submenu (for example, to reuse it later). See: findItem/2 , delete/2 , remove/2","ref":"wxMenu.html#Destroy/2","title":"wxMenu.Destroy/2","type":"function"},{"doc":"Adds a menu item object. This is the most generic variant of append/5 method because it may be used for both items (including separators) and submenus and because you can also specify various extra properties of a menu item this way, such as bitmaps and fonts. Remark: See the remarks for the other append/5 overloads. See: appendSeparator/1 , appendCheckItem/4 , appendRadioItem/4 , AppendSubMenu() (not implemented in wx), insert/6 , setLabel/3 , getHelpString/2 , setHelpString/3 , wxMenuItem","ref":"wxMenu.html#append/2","title":"wxMenu.append/2","type":"function"},{"doc":"","ref":"wxMenu.html#append/3","title":"wxMenu.append/3","type":"function"},{"doc":"Adds a menu item. Example: or even better for stock menu items (see wxMenuItem:new/1 ): Remark: This command can be used after the menu has been shown, as well as on initial creation of a menu or menubar. See: appendSeparator/1 , appendCheckItem/4 , appendRadioItem/4 , AppendSubMenu() (not implemented in wx), insert/6 , setLabel/3 , getHelpString/2 , setHelpString/3 , wxMenuItem","ref":"wxMenu.html#append/4","title":"wxMenu.append/4","type":"function"},{"doc":"Adds a submenu. Deprecated: This function is deprecated, use AppendSubMenu() (not implemented in wx) instead. See: appendSeparator/1 , appendCheckItem/4 , appendRadioItem/4 , AppendSubMenu() (not implemented in wx), insert/6 , setLabel/3 , getHelpString/2 , setHelpString/3 , wxMenuItem","ref":"wxMenu.html#append/5","title":"wxMenu.append/5","type":"function"},{"doc":"","ref":"wxMenu.html#appendCheckItem/3","title":"wxMenu.appendCheckItem/3","type":"function"},{"doc":"Adds a checkable item to the end of the menu. See: append/5 , insertCheckItem/5","ref":"wxMenu.html#appendCheckItem/4","title":"wxMenu.appendCheckItem/4","type":"function"},{"doc":"","ref":"wxMenu.html#appendRadioItem/3","title":"wxMenu.appendRadioItem/3","type":"function"},{"doc":"Adds a radio item to the end of the menu. All consequent radio items form a group and when an item in the group is checked, all the others are automatically unchecked. Note: Radio items are not supported under wxMotif. See: append/5 , insertRadioItem/5","ref":"wxMenu.html#appendRadioItem/4","title":"wxMenu.appendRadioItem/4","type":"function"},{"doc":"Adds a separator to the end of the menu. See: append/5 , insertSeparator/2","ref":"wxMenu.html#appendSeparator/1","title":"wxMenu.appendSeparator/1","type":"function"},{"doc":"Inserts a break in a menu, causing the next appended item to appear in a new column. This function only actually inserts a break in wxMSW and does nothing under the other platforms.","ref":"wxMenu.html#break/1","title":"wxMenu.break/1","type":"function"},{"doc":"Checks or unchecks the menu item. See: isChecked/2","ref":"wxMenu.html#check/3","title":"wxMenu.check/3","type":"function"},{"doc":"Deletes the menu item from the menu. If the item is a submenu, it will not be deleted. Use 'Destroy'/2 if you want to delete a submenu. See: findItem/2 , 'Destroy'/2 , remove/2","ref":"wxMenu.html#delete/2","title":"wxMenu.delete/2","type":"function"},{"doc":"Destructor, destroying the menu. Note: Under Motif, a popup menu must have a valid parent (the window it was last popped up on) when being destroyed. Therefore, make sure you delete or re-use the popup menu before destroying the parent window. Re-use in this context means popping up the menu on a different window from last time, which causes an implicit destruction and recreation of internal data structures.","ref":"wxMenu.html#destroy/1","title":"wxMenu.destroy/1","type":"function"},{"doc":"Enables or disables (greys out) a menu item. See: isEnabled/2","ref":"wxMenu.html#enable/3","title":"wxMenu.enable/3","type":"function"},{"doc":"Finds the menu id for a menu item string. Return: Menu item identifier, or wxNOT_FOUND if none is found. Remark: Any special menu codes are stripped out of source and target strings before matching.","ref":"wxMenu.html#findItem/2","title":"wxMenu.findItem/2","type":"function"},{"doc":"Returns the wxMenuItem given a position in the menu.","ref":"wxMenu.html#findItemByPosition/2","title":"wxMenu.findItemByPosition/2","type":"function"},{"doc":"Returns the help string associated with a menu item. Return: The help string, or the empty string if there is no help string or the item was not found. See: setHelpString/3 , append/5","ref":"wxMenu.html#getHelpString/2","title":"wxMenu.getHelpString/2","type":"function"},{"doc":"Returns a menu item label. Return: The item label, or the empty string if the item was not found. See: GetLabelText() (not implemented in wx), setLabel/3","ref":"wxMenu.html#getLabel/2","title":"wxMenu.getLabel/2","type":"function"},{"doc":"Returns the number of items in the menu.","ref":"wxMenu.html#getMenuItemCount/1","title":"wxMenu.getMenuItemCount/1","type":"function"},{"doc":"","ref":"wxMenu.html#getMenuItems/1","title":"wxMenu.getMenuItems/1","type":"function"},{"doc":"Returns the title of the menu. See: setTitle/2","ref":"wxMenu.html#getTitle/1","title":"wxMenu.getTitle/1","type":"function"},{"doc":"Inserts the given item before the position pos . Inserting the item at position getMenuItemCount/1 is the same as appending it. See: append/5 , prepend/5","ref":"wxMenu.html#insert/3","title":"wxMenu.insert/3","type":"function"},{"doc":"Inserts the given item before the position pos . Inserting the item at position getMenuItemCount/1 is the same as appending it. See: append/5 , prepend/5","ref":"wxMenu.html#insert/4","title":"wxMenu.insert/4","type":"function"},{"doc":"","ref":"wxMenu.html#insert/5","title":"wxMenu.insert/5","type":"function"},{"doc":"Inserts the given submenu before the position pos . text is the text shown in the menu for it and help is the help string shown in the status bar when the submenu item is selected. See: AppendSubMenu() (not implemented in wx), prepend/5","ref":"wxMenu.html#insert/6","title":"wxMenu.insert/6","type":"function"},{"doc":"","ref":"wxMenu.html#insertCheckItem/4","title":"wxMenu.insertCheckItem/4","type":"function"},{"doc":"Inserts a checkable item at the given position. See: insert/6 , appendCheckItem/4","ref":"wxMenu.html#insertCheckItem/5","title":"wxMenu.insertCheckItem/5","type":"function"},{"doc":"","ref":"wxMenu.html#insertRadioItem/4","title":"wxMenu.insertRadioItem/4","type":"function"},{"doc":"Inserts a radio item at the given position. See: insert/6 , appendRadioItem/4","ref":"wxMenu.html#insertRadioItem/5","title":"wxMenu.insertRadioItem/5","type":"function"},{"doc":"Inserts a separator at the given position. See: insert/6 , appendSeparator/1","ref":"wxMenu.html#insertSeparator/2","title":"wxMenu.insertSeparator/2","type":"function"},{"doc":"Determines whether a menu item is checked. Return: true if the menu item is checked, false otherwise. See: check/3","ref":"wxMenu.html#isChecked/2","title":"wxMenu.isChecked/2","type":"function"},{"doc":"Determines whether a menu item is enabled. Return: true if the menu item is enabled, false otherwise. See: enable/3","ref":"wxMenu.html#isEnabled/2","title":"wxMenu.isEnabled/2","type":"function"},{"doc":"Constructs a wxMenu object.","ref":"wxMenu.html#new/0","title":"wxMenu.new/0","type":"function"},{"doc":"Constructs a wxMenu object.","ref":"wxMenu.html#new/1","title":"wxMenu.new/1","type":"function"},{"doc":"Constructs a wxMenu object with a title.","ref":"wxMenu.html#new/2","title":"wxMenu.new/2","type":"function"},{"doc":"Inserts the given item at position 0, i.e. before all the other existing items. See: append/5 , insert/6","ref":"wxMenu.html#prepend/2","title":"wxMenu.prepend/2","type":"function"},{"doc":"Inserts the given item at position 0, i.e. before all the other existing items. See: append/5 , insert/6","ref":"wxMenu.html#prepend/3","title":"wxMenu.prepend/3","type":"function"},{"doc":"","ref":"wxMenu.html#prepend/4","title":"wxMenu.prepend/4","type":"function"},{"doc":"Inserts the given submenu at position 0. See: AppendSubMenu() (not implemented in wx), insert/6","ref":"wxMenu.html#prepend/5","title":"wxMenu.prepend/5","type":"function"},{"doc":"","ref":"wxMenu.html#prependCheckItem/3","title":"wxMenu.prependCheckItem/3","type":"function"},{"doc":"Inserts a checkable item at position 0. See: prepend/5 , appendCheckItem/4","ref":"wxMenu.html#prependCheckItem/4","title":"wxMenu.prependCheckItem/4","type":"function"},{"doc":"","ref":"wxMenu.html#prependRadioItem/3","title":"wxMenu.prependRadioItem/3","type":"function"},{"doc":"Inserts a radio item at position 0. See: prepend/5 , appendRadioItem/4","ref":"wxMenu.html#prependRadioItem/4","title":"wxMenu.prependRadioItem/4","type":"function"},{"doc":"Inserts a separator at position 0. See: prepend/5 , appendSeparator/1","ref":"wxMenu.html#prependSeparator/1","title":"wxMenu.prependSeparator/1","type":"function"},{"doc":"Removes the menu item from the menu but doesn't delete the associated C++ object. This allows you to reuse the same item later by adding it back to the menu (especially useful with submenus). Return: A pointer to the item which was detached from the menu.","ref":"wxMenu.html#remove/2","title":"wxMenu.remove/2","type":"function"},{"doc":"Sets an item's help string. See: getHelpString/2","ref":"wxMenu.html#setHelpString/3","title":"wxMenu.setHelpString/3","type":"function"},{"doc":"Sets the label of a menu item. See: append/5 , getLabel/2","ref":"wxMenu.html#setLabel/3","title":"wxMenu.setLabel/3","type":"function"},{"doc":"Sets the title of the menu. Remark: Notice that you can only call this method directly for the popup menus, to change the title of a menu that is part of a menu bar you need to use wxMenuBar:setLabelTop/3 . See: getTitle/1","ref":"wxMenu.html#setTitle/2","title":"wxMenu.setTitle/2","type":"function"},{"doc":"","ref":"wxMenu.html#t:wxMenu/0","title":"wxMenu.wxMenu/0","type":"type"},{"doc":"A menu bar is a series of menus accessible from the top of a frame. Remark: To respond to a menu selection, provide a handler for EVT_MENU, in the frame that contains the menu bar. If you have a toolbar which uses the same identifiers as your EVT_MENU entries, events from the toolbar will also be processed by your EVT_MENU event handlers. Tip: under Windows, if you discover that menu shortcuts (for example, Alt-F to show the file menu) are not working, check any EVT_CHAR events you are handling in child windows. If you are not calling event.Skip() for events that you don't process in these event handlers, menu shortcuts may cease to work. See: wxMenu , Overview events This class is derived (and can use functions) from: wxWindow wxEvtHandler wxWidgets docs: wxMenuBar","ref":"wxMenuBar.html","title":"wxMenuBar","type":"module"},{"doc":"Adds the item to the end of the menu bar. Return: true on success, false if an error occurred. See: insert/4","ref":"wxMenuBar.html#append/3","title":"wxMenuBar.append/3","type":"function"},{"doc":"Checks or unchecks a menu item. Remark: Only use this when the menu bar has been associated with a frame; otherwise, use the wxMenu equivalent call.","ref":"wxMenuBar.html#check/3","title":"wxMenuBar.check/3","type":"function"},{"doc":"Destructor, destroying the menu bar and removing it from the parent frame (if any).","ref":"wxMenuBar.html#destroy/1","title":"wxMenuBar.destroy/1","type":"function"},{"doc":"Enables or disables (greys out) a menu item. Remark: Only use this when the menu bar has been associated with a frame; otherwise, use the wxMenu equivalent call.","ref":"wxMenuBar.html#enable/3","title":"wxMenuBar.enable/3","type":"function"},{"doc":"Enables or disables a whole menu. Remark: Only use this when the menu bar has been associated with a frame.","ref":"wxMenuBar.html#enableTop/3","title":"wxMenuBar.enableTop/3","type":"function"},{"doc":"Finds the menu item object associated with the given menu item identifier. Return: The found menu item object, or NULL if one was not found.","ref":"wxMenuBar.html#findItem/2","title":"wxMenuBar.findItem/2","type":"function"},{"doc":"Returns the index of the menu with the given title or wxNOT_FOUND if no such menu exists in this menubar. The title parameter may specify either the menu title (with accelerator characters, i.e. &quot;&amp;File&quot; ) or just the menu label ( &quot;File&quot; ) indifferently.","ref":"wxMenuBar.html#findMenu/2","title":"wxMenuBar.findMenu/2","type":"function"},{"doc":"Finds the menu item id for a menu name/menu item string pair. Return: The menu item identifier, or wxNOT_FOUND if none was found. Remark: Any special menu codes are stripped out of source and target strings before matching.","ref":"wxMenuBar.html#findMenuItem/3","title":"wxMenuBar.findMenuItem/3","type":"function"},{"doc":"","ref":"wxMenuBar.html#getAutoWindowMenu/0","title":"wxMenuBar.getAutoWindowMenu/0","type":"function"},{"doc":"Gets the help string associated with the menu item identifier. Return: The help string, or the empty string if there was no help string or the menu item was not found. See: setHelpString/3","ref":"wxMenuBar.html#getHelpString/2","title":"wxMenuBar.getHelpString/2","type":"function"},{"doc":"Gets the label associated with a menu item. Return: The menu item label, or the empty string if the item was not found. Remark: Use only after the menubar has been associated with a frame.","ref":"wxMenuBar.html#getLabel/2","title":"wxMenuBar.getLabel/2","type":"function"},{"doc":"See: getMenuLabel/2 .","ref":"wxMenuBar.html#getLabelTop/2","title":"wxMenuBar.getLabelTop/2","type":"function"},{"doc":"Returns the menu at menuIndex (zero-based).","ref":"wxMenuBar.html#getMenu/2","title":"wxMenuBar.getMenu/2","type":"function"},{"doc":"Returns the number of menus in this menubar.","ref":"wxMenuBar.html#getMenuCount/1","title":"wxMenuBar.getMenuCount/1","type":"function"},{"doc":"Returns the label of a top-level menu. Note that the returned string includes the accelerator characters that have been specified in the menu title string during its construction. Return: The menu label, or the empty string if the menu was not found. Remark: Use only after the menubar has been associated with a frame. See: getMenuLabelText/2 , setMenuLabel/3","ref":"wxMenuBar.html#getMenuLabel/2","title":"wxMenuBar.getMenuLabel/2","type":"function"},{"doc":"Returns the label of a top-level menu. Note that the returned string does not include any accelerator characters that may have been specified in the menu title string during its construction. Return: The menu label, or the empty string if the menu was not found. Remark: Use only after the menubar has been associated with a frame. See: getMenuLabel/2 , setMenuLabel/3","ref":"wxMenuBar.html#getMenuLabelText/2","title":"wxMenuBar.getMenuLabelText/2","type":"function"},{"doc":"Inserts the menu at the given position into the menu bar. Inserting menu at position 0 will insert it in the very beginning of it, inserting at position getMenuCount/1 is the same as calling append/3 . Return: true on success, false if an error occurred. See: append/3","ref":"wxMenuBar.html#insert/4","title":"wxMenuBar.insert/4","type":"function"},{"doc":"Determines whether an item is checked. Return: true if the item was found and is checked, false otherwise.","ref":"wxMenuBar.html#isChecked/2","title":"wxMenuBar.isChecked/2","type":"function"},{"doc":"Determines whether an item is enabled. Return: true if the item was found and is enabled, false otherwise.","ref":"wxMenuBar.html#isEnabled/2","title":"wxMenuBar.isEnabled/2","type":"function"},{"doc":"Construct an empty menu bar.","ref":"wxMenuBar.html#new/0","title":"wxMenuBar.new/0","type":"function"},{"doc":"","ref":"wxMenuBar.html#new/1","title":"wxMenuBar.new/1","type":"function"},{"doc":"Returns the Apple menu. This is the leftmost menu with application's name as its title. You shouldn't remove any items from it, but it is safe to insert extra menu items or submenus into it. Only for:wxosx Since: 3.0.1","ref":"wxMenuBar.html#oSXGetAppleMenu/1","title":"wxMenuBar.oSXGetAppleMenu/1","type":"function"},{"doc":"Removes the menu from the menu bar and returns the menu object - the caller is responsible for deleting it. This function may be used together with insert/4 to change the menubar dynamically. See: replace/4","ref":"wxMenuBar.html#remove/2","title":"wxMenuBar.remove/2","type":"function"},{"doc":"Replaces the menu at the given position with another one. Return: The menu which was previously at position pos. The caller is responsible for deleting it. See: insert/4 , remove/2","ref":"wxMenuBar.html#replace/4","title":"wxMenuBar.replace/4","type":"function"},{"doc":"","ref":"wxMenuBar.html#setAutoWindowMenu/1","title":"wxMenuBar.setAutoWindowMenu/1","type":"function"},{"doc":"Sets the help string associated with a menu item. See: getHelpString/2","ref":"wxMenuBar.html#setHelpString/3","title":"wxMenuBar.setHelpString/3","type":"function"},{"doc":"Sets the label of a menu item. Remark: Use only after the menubar has been associated with a frame. See: getLabel/2","ref":"wxMenuBar.html#setLabel/3","title":"wxMenuBar.setLabel/3","type":"function"},{"doc":"See: setMenuLabel/3 .","ref":"wxMenuBar.html#setLabelTop/3","title":"wxMenuBar.setLabelTop/3","type":"function"},{"doc":"Sets the label of a top-level menu. Remark: Use only after the menubar has been associated with a frame.","ref":"wxMenuBar.html#setMenuLabel/3","title":"wxMenuBar.setMenuLabel/3","type":"function"},{"doc":"","ref":"wxMenuBar.html#t:wxMenuBar/0","title":"wxMenuBar.wxMenuBar/0","type":"type"},{"doc":"This class is used for a variety of menu-related events. Note that these do not include menu command events, which are handled using wxCommandEvent objects. Events of this class are generated by both menus that are part of a wxMenuBar , attached to wxFrame , and popup menus shown by wxWindow:popupMenu/4 . They are sent to the following objects until one of them handles the event: -# The menu object itself, as returned by GetMenu(), if any. -# The wxMenuBar to which this menu is attached, if any. -# The window associated with the menu, e.g. the one calling PopupMenu() for the popup menus. -# The top level parent of that window if it's different from the window itself. This is similar to command events generated by the menu items, but, unlike them, wxMenuEvent are only sent to the window itself and its top level parent but not any intermediate windows in the hierarchy. The default handler for wxEVT_MENU_HIGHLIGHT in wxFrame displays help text in the status bar, see wxFrame:setStatusBarPane/2 . See: wxCommandEvent , Overview events This class is derived (and can use functions) from: wxEvent wxWidgets docs: wxMenuEvent Events Use wxEvtHandler:connect/3 with wxMenuEventType to subscribe to events of this type.","ref":"wxMenuEvent.html","title":"wxMenuEvent","type":"module"},{"doc":"Returns the menu which is being opened or closed, or the menu containing the highlighted item. Note that the returned value can be NULL if the menu being opened doesn't have a corresponding wxMenu , e.g. this happens when opening the system menu in wxMSW port. Remark: Since 3.1.3 this function can be used with OPEN , CLOSE and HIGHLIGHT events. Before 3.1.3, this method can only be used with the OPEN and CLOSE events.","ref":"wxMenuEvent.html#getMenu/1","title":"wxMenuEvent.getMenu/1","type":"function"},{"doc":"Returns the menu identifier associated with the event. This method should be only used with the HIGHLIGHT events.","ref":"wxMenuEvent.html#getMenuId/1","title":"wxMenuEvent.getMenuId/1","type":"function"},{"doc":"Returns true if the menu which is being opened or closed is a popup menu, false if it is a normal one. This method should only be used with the OPEN and CLOSE events.","ref":"wxMenuEvent.html#isPopup/1","title":"wxMenuEvent.isPopup/1","type":"function"},{"doc":"","ref":"wxMenuEvent.html#t:wxMenu/0","title":"wxMenuEvent.wxMenu/0","type":"type"},{"doc":"","ref":"wxMenuEvent.html#t:wxMenuEvent/0","title":"wxMenuEvent.wxMenuEvent/0","type":"type"},{"doc":"","ref":"wxMenuEvent.html#t:wxMenuEventType/0","title":"wxMenuEvent.wxMenuEventType/0","type":"type"},{"doc":"A menu item represents an item in a menu. Note that you usually don't have to deal with it directly as wxMenu methods usually construct an object of this class for you. Also please note that the methods related to fonts and bitmaps are currently only implemented for Windows, Mac and GTK+. See: wxMenuBar , wxMenu wxWidgets docs: wxMenuItem Events Event types emitted from this class: menu_open , menu_close , menu_highlight","ref":"wxMenuItem.html","title":"wxMenuItem","type":"module"},{"doc":"","ref":"wxMenuItem.html#check/1","title":"wxMenuItem.check/1","type":"function"},{"doc":"Checks or unchecks the menu item. Note that this only works when the item is already appended to a menu.","ref":"wxMenuItem.html#check/2","title":"wxMenuItem.check/2","type":"function"},{"doc":"Destructor.","ref":"wxMenuItem.html#destroy/1","title":"wxMenuItem.destroy/1","type":"function"},{"doc":"","ref":"wxMenuItem.html#enable/1","title":"wxMenuItem.enable/1","type":"function"},{"doc":"Enables or disables the menu item.","ref":"wxMenuItem.html#enable/2","title":"wxMenuItem.enable/2","type":"function"},{"doc":"Returns the checked or unchecked bitmap. Only for:wxmsw","ref":"wxMenuItem.html#getBitmap/1","title":"wxMenuItem.getBitmap/1","type":"function"},{"doc":"Returns the help string associated with the menu item.","ref":"wxMenuItem.html#getHelp/1","title":"wxMenuItem.getHelp/1","type":"function"},{"doc":"Returns the menu item identifier.","ref":"wxMenuItem.html#getId/1","title":"wxMenuItem.getId/1","type":"function"},{"doc":"Returns the text associated with the menu item including any accelerator characters that were passed to the constructor or setItemLabel/2 . See: getItemLabelText/1 , getLabelText/1","ref":"wxMenuItem.html#getItemLabel/1","title":"wxMenuItem.getItemLabel/1","type":"function"},{"doc":"Returns the text associated with the menu item, without any accelerator characters. See: getItemLabel/1 , getLabelText/1","ref":"wxMenuItem.html#getItemLabelText/1","title":"wxMenuItem.getItemLabelText/1","type":"function"},{"doc":"Returns the item kind, one of wxITEM_SEPARATOR , wxITEM_NORMAL , wxITEM_CHECK or wxITEM_RADIO .","ref":"wxMenuItem.html#getKind/1","title":"wxMenuItem.getKind/1","type":"function"},{"doc":"See: getItemLabelText/1 .","ref":"wxMenuItem.html#getLabel/1","title":"wxMenuItem.getLabel/1","type":"function"},{"doc":"See: getLabelText/1 .","ref":"wxMenuItem.html#getLabelFromText/1","title":"wxMenuItem.getLabelFromText/1","type":"function"},{"doc":"Strips all accelerator characters and mnemonics from the given text . For example: will return just &quot;Hello&quot; . See: getItemLabelText/1 , getItemLabel/1","ref":"wxMenuItem.html#getLabelText/1","title":"wxMenuItem.getLabelText/1","type":"function"},{"doc":"Returns the menu this menu item is in, or NULL if this menu item is not attached.","ref":"wxMenuItem.html#getMenu/1","title":"wxMenuItem.getMenu/1","type":"function"},{"doc":"Returns the submenu associated with the menu item, or NULL if there isn't one.","ref":"wxMenuItem.html#getSubMenu/1","title":"wxMenuItem.getSubMenu/1","type":"function"},{"doc":"See: getItemLabel/1 .","ref":"wxMenuItem.html#getText/1","title":"wxMenuItem.getText/1","type":"function"},{"doc":"Returns true if the item is checkable. Notice that the radio buttons are considered to be checkable as well, so this method returns true for them too. Use IsCheck() (not implemented in wx) if you want to test for the check items only.","ref":"wxMenuItem.html#isCheckable/1","title":"wxMenuItem.isCheckable/1","type":"function"},{"doc":"Returns true if the item is checked.","ref":"wxMenuItem.html#isChecked/1","title":"wxMenuItem.isChecked/1","type":"function"},{"doc":"Returns true if the item is enabled.","ref":"wxMenuItem.html#isEnabled/1","title":"wxMenuItem.isEnabled/1","type":"function"},{"doc":"Returns true if the item is a separator.","ref":"wxMenuItem.html#isSeparator/1","title":"wxMenuItem.isSeparator/1","type":"function"},{"doc":"Returns true if the item is a submenu.","ref":"wxMenuItem.html#isSubMenu/1","title":"wxMenuItem.isSubMenu/1","type":"function"},{"doc":"","ref":"wxMenuItem.html#new/0","title":"wxMenuItem.new/0","type":"function"},{"doc":"Constructs a wxMenuItem object. Menu items can be standard, or &quot;stock menu items&quot;, or custom. For the standard menu items (such as commands to open a file, exit the program and so on, see page_stockitems for the full list) it is enough to specify just the stock ID and leave text and help string empty. Some platforms (currently wxGTK only, and see the remark in setBitmap/2 documentation) will also show standard bitmaps for stock menu items. Leaving at least text empty for the stock menu items is actually strongly recommended as they will have appearance and keyboard interface (including standard accelerators) familiar to the user. For the custom (non-stock) menu items, text must be specified and while help string may be left empty, it's recommended to pass the item description (which is automatically shown by the library in the status bar when the menu item is selected) in this parameter. Finally note that you can e.g. use a stock menu label without using its stock help string: that is, stock properties are set independently one from the other.","ref":"wxMenuItem.html#new/1","title":"wxMenuItem.new/1","type":"function"},{"doc":"Sets the bitmap for the menu item. It is equivalent to wxMenuItem::SetBitmaps(bmp, wxNullBitmap) if checked is true (default value) or SetBitmaps(wxNullBitmap, bmp) otherwise. setBitmap/2 must be called before the item is appended to the menu, i.e. appending the item without a bitmap and setting one later is not guaranteed to work. But the bitmap can be changed or reset later if it had been set up initially. Notice that GTK+ uses a global setting called gtk-menu-images to determine if the images should be shown in the menus at all. If it is off (which is the case in e.g. Gnome 2.28 by default), no images will be shown, consistently with the native behaviour. Only for:wxmsw,wxosx,wxgtk","ref":"wxMenuItem.html#setBitmap/2","title":"wxMenuItem.setBitmap/2","type":"function"},{"doc":"Sets the help string.","ref":"wxMenuItem.html#setHelp/2","title":"wxMenuItem.setHelp/2","type":"function"},{"doc":"Sets the label associated with the menu item. Note that if the ID of this menu item corresponds to a stock ID, then it is not necessary to specify a label: wxWidgets will automatically use the stock item label associated with that ID. See the new/1 for more info. The label string for the normal menu items (not separators) may include the accelerator which can be used to activate the menu item from keyboard. An accelerator key can be specified using the ampersand &amp; character. In order to embed an ampersand character in the menu item text, the ampersand must be doubled. Optionally you can specify also an accelerator string appending a tab character \\t followed by a valid key combination (e.g. CTRL+V ). Its general syntax is any combination of &quot;CTRL&quot; , &quot;RAWCTRL&quot; , &quot;ALT&quot; and &quot;SHIFT&quot; strings (case doesn't matter) separated by either '-' or '+' characters and followed by the accelerator itself. Notice that CTRL corresponds to the &quot;Ctrl&quot; key on most platforms but not under macOS where it is mapped to &quot;Cmd&quot; key on Mac keyboard. Usually this is exactly what you want in portable code but if you really need to use the (rarely used for this purpose) &quot;Ctrl&quot; key even under Mac, you may use RAWCTRL to prevent this mapping. Under the other platforms RAWCTRL is the same as plain CTRL . The accelerator may be any alphanumeric character, any function key (from F1 to F12 ), any numpad digit key using KP_ prefix (i.e. from KP_0 to KP_9 ) or one of the special strings listed below (again, case doesn't matter) corresponding to the specified key code: Examples: Note: In wxGTK using &quot;SHIFT&quot; with non-alphabetic characters currently doesn't work, even in combination with other modifiers, due to GTK+ limitation. E.g. Shift+Ctrl+A works but Shift+Ctrl+1 or Shift+/ do not, so avoid using accelerators of this form in portable code. Note: In wxGTk, the left/right/up/down arrow keys do not work as accelerator keys for a menu item unless a modifier key is used. Additionally, the following keycodes are not supported as menu accelerator keys: See: getItemLabel/1 , getItemLabelText/1","ref":"wxMenuItem.html#setItemLabel/2","title":"wxMenuItem.setItemLabel/2","type":"function"},{"doc":"Sets the parent menu which will contain this menu item.","ref":"wxMenuItem.html#setMenu/2","title":"wxMenuItem.setMenu/2","type":"function"},{"doc":"Sets the submenu of this menu item.","ref":"wxMenuItem.html#setSubMenu/2","title":"wxMenuItem.setSubMenu/2","type":"function"},{"doc":"See: setItemLabel/2 .","ref":"wxMenuItem.html#setText/2","title":"wxMenuItem.setText/2","type":"function"},{"doc":"","ref":"wxMenuItem.html#t:wxMenuItem/0","title":"wxMenuItem.wxMenuItem/0","type":"type"},{"doc":"This class represents a dialog that shows a single or multi-line message, with a choice of OK, Yes, No and Cancel buttons. Styles This class supports the following styles: See: Overview cmndlg See: wxRichMessageDialog (not implemented in wx) This class is derived (and can use functions) from: wxDialog wxTopLevelWindow wxWindow wxEvtHandler wxWidgets docs: wxMessageDialog","ref":"wxMessageDialog.html","title":"wxMessageDialog","type":"module"},{"doc":"Destroys the object.","ref":"wxMessageDialog.html#destroy/1","title":"wxMessageDialog.destroy/1","type":"function"},{"doc":"","ref":"wxMessageDialog.html#new/2","title":"wxMessageDialog.new/2","type":"function"},{"doc":"Constructor specifying the message box properties. Use wxDialog:showModal/1 to show the dialog. style may be a bit list of the identifiers described above. Notice that not all styles are compatible: only one of wxOK and wxYES_NO may be specified (and one of them must be specified) and at most one default button style can be used and it is only valid if the corresponding button is shown in the message box.","ref":"wxMessageDialog.html#new/3","title":"wxMessageDialog.new/3","type":"function"},{"doc":"","ref":"wxMessageDialog.html#t:wxMessageDialog/0","title":"wxMessageDialog.wxMessageDialog/0","type":"type"},{"doc":"A miniframe is a frame with a small title bar. It is suitable for floating toolbars that must not take up too much screen area. An example of mini frame can be seen in the page_samples_dialogs using the &quot;Mini frame&quot; command of the &quot;Generic dialogs&quot; submenu. Styles This class supports the following styles: Remark: This class has miniframe functionality under Windows and GTK, i.e. the presence of mini frame will not be noted in the task bar and focus behaviour is different. On other platforms, it behaves like a normal frame. See: wxMDIParentFrame , wxMDIChildFrame , wxFrame , wxDialog This class is derived (and can use functions) from: wxFrame wxTopLevelWindow wxWindow wxEvtHandler wxWidgets docs: wxMiniFrame","ref":"wxMiniFrame.html","title":"wxMiniFrame","type":"module"},{"doc":"","ref":"wxMiniFrame.html#create/4","title":"wxMiniFrame.create/4","type":"function"},{"doc":"Used in two-step frame construction. See new/4 for further details.","ref":"wxMiniFrame.html#create/5","title":"wxMiniFrame.create/5","type":"function"},{"doc":"Destructor. Destroys all child windows and menu bar if present.","ref":"wxMiniFrame.html#destroy/1","title":"wxMiniFrame.destroy/1","type":"function"},{"doc":"Default ctor.","ref":"wxMiniFrame.html#new/0","title":"wxMiniFrame.new/0","type":"function"},{"doc":"","ref":"wxMiniFrame.html#new/3","title":"wxMiniFrame.new/3","type":"function"},{"doc":"Constructor, creating the window. Remark: The frame behaves like a normal frame on non-Windows platforms. See: create/5","ref":"wxMiniFrame.html#new/4","title":"wxMiniFrame.new/4","type":"function"},{"doc":"","ref":"wxMiniFrame.html#t:wxMiniFrame/0","title":"wxMiniFrame.wxMiniFrame/0","type":"type"},{"doc":"wxMirrorDC is a simple wrapper class which is always associated with a real wxDC object and either forwards all of its operations to it without changes (no mirroring takes place) or exchanges x and y coordinates which makes it possible to reuse the same code to draw a figure and its mirror - i.e. reflection related to the diagonal line x == y. Since: 2.5.0 This class is derived (and can use functions) from: wxDC wxWidgets docs: wxMirrorDC","ref":"wxMirrorDC.html","title":"wxMirrorDC","type":"module"},{"doc":"Destroys the object.","ref":"wxMirrorDC.html#destroy/1","title":"wxMirrorDC.destroy/1","type":"function"},{"doc":"Creates a (maybe) mirrored DC associated with the real dc . Everything drawn on wxMirrorDC will appear (and maybe mirrored) on dc . mirror specifies if we do mirror (if it is true) or not (if it is false).","ref":"wxMirrorDC.html#new/2","title":"wxMirrorDC.new/2","type":"function"},{"doc":"","ref":"wxMirrorDC.html#t:wxMirrorDC/0","title":"wxMirrorDC.wxMirrorDC/0","type":"type"},{"doc":"An mouse capture changed event is sent to a window that loses its mouse capture. This is called even if wxWindow:releaseMouse/1 was called by the application code. Handling this event allows an application to cater for unexpected capture releases which might otherwise confuse mouse handling code. Only for:wxmsw See: wxMouseCaptureLostEvent , Overview events , wxWindow:captureMouse/1 , wxWindow:releaseMouse/1 , wxWindow:getCapture/0 This class is derived (and can use functions) from: wxEvent wxWidgets docs: wxMouseCaptureChangedEvent Events Use wxEvtHandler:connect/3 with wxMouseCaptureChangedEventType to subscribe to events of this type.","ref":"wxMouseCaptureChangedEvent.html","title":"wxMouseCaptureChangedEvent","type":"module"},{"doc":"Returns the window that gained the capture, or NULL if it was a non-wxWidgets window.","ref":"wxMouseCaptureChangedEvent.html#getCapturedWindow/1","title":"wxMouseCaptureChangedEvent.getCapturedWindow/1","type":"function"},{"doc":"","ref":"wxMouseCaptureChangedEvent.html#t:wxMouseCaptureChanged/0","title":"wxMouseCaptureChangedEvent.wxMouseCaptureChanged/0","type":"type"},{"doc":"","ref":"wxMouseCaptureChangedEvent.html#t:wxMouseCaptureChangedEvent/0","title":"wxMouseCaptureChangedEvent.wxMouseCaptureChangedEvent/0","type":"type"},{"doc":"","ref":"wxMouseCaptureChangedEvent.html#t:wxMouseCaptureChangedEventType/0","title":"wxMouseCaptureChangedEvent.wxMouseCaptureChangedEventType/0","type":"type"},{"doc":"A mouse capture lost event is sent to a window that had obtained mouse capture, which was subsequently lost due to an &quot;external&quot; event (for example, when a dialog box is shown or if another application captures the mouse). If this happens, this event is sent to all windows that are on the capture stack (i.e. called CaptureMouse, but didn't call ReleaseMouse yet). The event is not sent if the capture changes because of a call to CaptureMouse or ReleaseMouse. This event is currently emitted under Windows only. Only for:wxmsw See: wxMouseCaptureChangedEvent , Overview events , wxWindow:captureMouse/1 , wxWindow:releaseMouse/1 , wxWindow:getCapture/0 This class is derived (and can use functions) from: wxEvent wxWidgets docs: wxMouseCaptureLostEvent Events Use wxEvtHandler:connect/3 with wxMouseCaptureLostEventType to subscribe to events of this type.","ref":"wxMouseCaptureLostEvent.html","title":"wxMouseCaptureLostEvent","type":"module"},{"doc":"","ref":"wxMouseCaptureLostEvent.html#t:wxMouseCaptureLost/0","title":"wxMouseCaptureLostEvent.wxMouseCaptureLost/0","type":"type"},{"doc":"","ref":"wxMouseCaptureLostEvent.html#t:wxMouseCaptureLostEvent/0","title":"wxMouseCaptureLostEvent.wxMouseCaptureLostEvent/0","type":"type"},{"doc":"","ref":"wxMouseCaptureLostEvent.html#t:wxMouseCaptureLostEventType/0","title":"wxMouseCaptureLostEvent.wxMouseCaptureLostEventType/0","type":"type"},{"doc":"This event class contains information about the events generated by the mouse: they include mouse buttons press and release events and mouse move events. All mouse events involving the buttons use wxMOUSE_BTN_LEFT for the left mouse button, wxMOUSE_BTN_MIDDLE for the middle one and wxMOUSE_BTN_RIGHT for the right one. And if the system supports more buttons, the wxMOUSE_BTN_AUX1 and wxMOUSE_BTN_AUX2 events can also be generated. Note that not all mice have even a middle button so a portable application should avoid relying on the events from it (but the right button click can be emulated using the left mouse button with the control key under Mac platforms with a single button mouse). For the wxEVT_ENTER_WINDOW and wxEVT_LEAVE_WINDOW events purposes, the mouse is considered to be inside the window if it is in the window client area and not inside one of its children. In other words, the parent window receives wxEVT_LEAVE_WINDOW event not only when the mouse leaves the window entirely but also when it enters one of its children. The position associated with a mouse event is expressed in the window coordinates of the window which generated the event, you can use wxWindow:clientToScreen/3 to convert it to screen coordinates and possibly call wxWindow:screenToClient/2 next to convert it to window coordinates of another window. Note: Note the difference between methods like leftDown/1 and the inherited leftIsDown/1 : the former returns true when the event corresponds to the left mouse button click while the latter returns true if the left mouse button is currently being pressed. For example, when the user is dragging the mouse you can use leftIsDown/1 to test whether the left mouse button is (still) depressed. Also, by convention, if leftDown/1 returns true, leftIsDown/1 will also return true in wxWidgets whatever the underlying GUI behaviour is (which is platform-dependent). The same applies, of course, to other mouse buttons as well. See: wxKeyEvent This class is derived (and can use functions) from: wxEvent wxWidgets docs: wxMouseEvent Events Use wxEvtHandler:connect/3 with wxMouseEventType to subscribe to events of this type.","ref":"wxMouseEvent.html","title":"wxMouseEvent","type":"module"},{"doc":"Returns true if the Alt key is pressed. Notice that wxKeyEvent:getModifiers/1 should usually be used instead of this one.","ref":"wxMouseEvent.html#altDown/1","title":"wxMouseEvent.altDown/1","type":"function"},{"doc":"Returns true if the event was generated by the specified button. See: wxMouseState::ButtoinIsDown()","ref":"wxMouseEvent.html#button/2","title":"wxMouseEvent.button/2","type":"function"},{"doc":"","ref":"wxMouseEvent.html#buttonDClick/1","title":"wxMouseEvent.buttonDClick/1","type":"function"},{"doc":"If the argument is omitted, this returns true if the event was a mouse double click event. Otherwise the argument specifies which double click event was generated (see button/2 for the possible values).","ref":"wxMouseEvent.html#buttonDClick/2","title":"wxMouseEvent.buttonDClick/2","type":"function"},{"doc":"","ref":"wxMouseEvent.html#buttonDown/1","title":"wxMouseEvent.buttonDown/1","type":"function"},{"doc":"If the argument is omitted, this returns true if the event was a mouse button down event. Otherwise the argument specifies which button-down event was generated (see button/2 for the possible values).","ref":"wxMouseEvent.html#buttonDown/2","title":"wxMouseEvent.buttonDown/2","type":"function"},{"doc":"","ref":"wxMouseEvent.html#buttonUp/1","title":"wxMouseEvent.buttonUp/1","type":"function"},{"doc":"If the argument is omitted, this returns true if the event was a mouse button up event. Otherwise the argument specifies which button-up event was generated (see button/2 for the possible values).","ref":"wxMouseEvent.html#buttonUp/2","title":"wxMouseEvent.buttonUp/2","type":"function"},{"doc":"Returns true if the key used for command accelerators is pressed. Same as controlDown/1 . Deprecated. Notice that wxKeyEvent:getModifiers/1 should usually be used instead of this one.","ref":"wxMouseEvent.html#cmdDown/1","title":"wxMouseEvent.cmdDown/1","type":"function"},{"doc":"Returns true if the Control key or Apple/Command key under macOS is pressed. This function doesn't distinguish between right and left control keys. Notice that wxKeyEvent:getModifiers/1 should usually be used instead of this one.","ref":"wxMouseEvent.html#controlDown/1","title":"wxMouseEvent.controlDown/1","type":"function"},{"doc":"Returns true if this was a dragging event (motion while a button is depressed). See: moving/1","ref":"wxMouseEvent.html#dragging/1","title":"wxMouseEvent.dragging/1","type":"function"},{"doc":"Returns true if the mouse was entering the window. See: leaving/1","ref":"wxMouseEvent.html#entering/1","title":"wxMouseEvent.entering/1","type":"function"},{"doc":"Returns the mouse button which generated this event or wxMOUSE_BTN_NONE if no button is involved (for mouse move, enter or leave event, for example). Otherwise wxMOUSE_BTN_LEFT is returned for the left button down, up and double click events, wxMOUSE_BTN_MIDDLE and wxMOUSE_BTN_RIGHT for the same events for the middle and the right buttons respectively.","ref":"wxMouseEvent.html#getButton/1","title":"wxMouseEvent.getButton/1","type":"function"},{"doc":"Returns the configured number of lines (or whatever) to be scrolled per wheel action. Default value under most platforms is three. See: GetColumnsPerAction() (not implemented in wx)","ref":"wxMouseEvent.html#getLinesPerAction/1","title":"wxMouseEvent.getLinesPerAction/1","type":"function"},{"doc":"Returns the logical mouse position in pixels (i.e. translated according to the translation set for the DC, which usually indicates that the window has been scrolled).","ref":"wxMouseEvent.html#getLogicalPosition/2","title":"wxMouseEvent.getLogicalPosition/2","type":"function"},{"doc":"Returns the physical mouse position.","ref":"wxMouseEvent.html#getPosition/1","title":"wxMouseEvent.getPosition/1","type":"function"},{"doc":"Gets the axis the wheel operation concerns. Usually the mouse wheel is used to scroll vertically so wxMOUSE_WHEEL_VERTICAL is returned but some mice (and most trackpads) also allow to use the wheel to scroll horizontally in which case wxMOUSE_WHEEL_HORIZONTAL is returned. Notice that before wxWidgets 2.9.4 this method returned int .","ref":"wxMouseEvent.html#getWheelAxis/1","title":"wxMouseEvent.getWheelAxis/1","type":"function"},{"doc":"Get wheel delta, normally 120. This is the threshold for action to be taken, and one such action (for example, scrolling one increment) should occur for each delta.","ref":"wxMouseEvent.html#getWheelDelta/1","title":"wxMouseEvent.getWheelDelta/1","type":"function"},{"doc":"Get wheel rotation, positive or negative indicates direction of rotation. Current devices all send an event when rotation is at least +/-WheelDelta, but finer resolution devices can be created in the future. Because of this you shouldn't assume that one event is equal to 1 line, but you should be able to either do partial line scrolling or wait until several events accumulate before scrolling.","ref":"wxMouseEvent.html#getWheelRotation/1","title":"wxMouseEvent.getWheelRotation/1","type":"function"},{"doc":"Returns X coordinate of the physical mouse event position.","ref":"wxMouseEvent.html#getX/1","title":"wxMouseEvent.getX/1","type":"function"},{"doc":"Returns Y coordinate of the physical mouse event position.","ref":"wxMouseEvent.html#getY/1","title":"wxMouseEvent.getY/1","type":"function"},{"doc":"Returns true if the event was a mouse button event (not necessarily a button down event - that may be tested using buttonDown/2 ).","ref":"wxMouseEvent.html#isButton/1","title":"wxMouseEvent.isButton/1","type":"function"},{"doc":"Returns true if the system has been setup to do page scrolling with the mouse wheel instead of line scrolling.","ref":"wxMouseEvent.html#isPageScroll/1","title":"wxMouseEvent.isPageScroll/1","type":"function"},{"doc":"Returns true if the mouse was leaving the window. See: entering/1","ref":"wxMouseEvent.html#leaving/1","title":"wxMouseEvent.leaving/1","type":"function"},{"doc":"Returns true if the event was a left double click.","ref":"wxMouseEvent.html#leftDClick/1","title":"wxMouseEvent.leftDClick/1","type":"function"},{"doc":"Returns true if the left mouse button changed to down.","ref":"wxMouseEvent.html#leftDown/1","title":"wxMouseEvent.leftDown/1","type":"function"},{"doc":"Returns true if the left mouse button is currently down.","ref":"wxMouseEvent.html#leftIsDown/1","title":"wxMouseEvent.leftIsDown/1","type":"function"},{"doc":"Returns true if the left mouse button changed to up.","ref":"wxMouseEvent.html#leftUp/1","title":"wxMouseEvent.leftUp/1","type":"function"},{"doc":"Returns true if the Meta key was down at the time of the event.","ref":"wxMouseEvent.html#metaDown/1","title":"wxMouseEvent.metaDown/1","type":"function"},{"doc":"Returns true if the event was a middle double click.","ref":"wxMouseEvent.html#middleDClick/1","title":"wxMouseEvent.middleDClick/1","type":"function"},{"doc":"Returns true if the middle mouse button changed to down.","ref":"wxMouseEvent.html#middleDown/1","title":"wxMouseEvent.middleDown/1","type":"function"},{"doc":"Returns true if the middle mouse button is currently down.","ref":"wxMouseEvent.html#middleIsDown/1","title":"wxMouseEvent.middleIsDown/1","type":"function"},{"doc":"Returns true if the middle mouse button changed to up.","ref":"wxMouseEvent.html#middleUp/1","title":"wxMouseEvent.middleUp/1","type":"function"},{"doc":"Returns true if this was a motion event and no mouse buttons were pressed. If any mouse button is held pressed, then this method returns false and dragging/1 returns true.","ref":"wxMouseEvent.html#moving/1","title":"wxMouseEvent.moving/1","type":"function"},{"doc":"Returns true if the event was a right double click.","ref":"wxMouseEvent.html#rightDClick/1","title":"wxMouseEvent.rightDClick/1","type":"function"},{"doc":"Returns true if the right mouse button changed to down.","ref":"wxMouseEvent.html#rightDown/1","title":"wxMouseEvent.rightDown/1","type":"function"},{"doc":"Returns true if the right mouse button is currently down.","ref":"wxMouseEvent.html#rightIsDown/1","title":"wxMouseEvent.rightIsDown/1","type":"function"},{"doc":"Returns true if the right mouse button changed to up.","ref":"wxMouseEvent.html#rightUp/1","title":"wxMouseEvent.rightUp/1","type":"function"},{"doc":"Returns true if the Shift key is pressed. This function doesn't distinguish between right and left shift keys. Notice that wxKeyEvent:getModifiers/1 should usually be used instead of this one.","ref":"wxMouseEvent.html#shiftDown/1","title":"wxMouseEvent.shiftDown/1","type":"function"},{"doc":"","ref":"wxMouseEvent.html#t:wxMouse/0","title":"wxMouseEvent.wxMouse/0","type":"type"},{"doc":"","ref":"wxMouseEvent.html#t:wxMouseEvent/0","title":"wxMouseEvent.wxMouseEvent/0","type":"type"},{"doc":"","ref":"wxMouseEvent.html#t:wxMouseEventType/0","title":"wxMouseEvent.wxMouseEventType/0","type":"type"},{"doc":"A move event holds information about window position change. These events are currently generated for top level (see wxTopLevelWindow ) windows in all ports, but are not generated for the child windows in wxGTK. See: {X,Y}, Overview events This class is derived (and can use functions) from: wxEvent wxWidgets docs: wxMoveEvent Events Use wxEvtHandler:connect/3 with wxMoveEventType to subscribe to events of this type.","ref":"wxMoveEvent.html","title":"wxMoveEvent","type":"module"},{"doc":"Returns the position of the window generating the move change event.","ref":"wxMoveEvent.html#getPosition/1","title":"wxMoveEvent.getPosition/1","type":"function"},{"doc":"","ref":"wxMoveEvent.html#getRect/1","title":"wxMoveEvent.getRect/1","type":"function"},{"doc":"","ref":"wxMoveEvent.html#t:wxMove/0","title":"wxMoveEvent.wxMove/0","type":"type"},{"doc":"","ref":"wxMoveEvent.html#t:wxMoveEvent/0","title":"wxMoveEvent.wxMoveEvent/0","type":"type"},{"doc":"","ref":"wxMoveEvent.html#t:wxMoveEventType/0","title":"wxMoveEvent.wxMoveEventType/0","type":"type"},{"doc":"This class represents a dialog that shows a list of strings, and allows the user to select one or more. Styles This class supports the following styles: See: Overview cmndlg , wxSingleChoiceDialog This class is derived (and can use functions) from: wxDialog wxTopLevelWindow wxWindow wxEvtHandler wxWidgets docs: wxMultiChoiceDialog","ref":"wxMultiChoiceDialog.html","title":"wxMultiChoiceDialog","type":"module"},{"doc":"Destroys the object.","ref":"wxMultiChoiceDialog.html#destroy/1","title":"wxMultiChoiceDialog.destroy/1","type":"function"},{"doc":"Returns array with indexes of selected items.","ref":"wxMultiChoiceDialog.html#getSelections/1","title":"wxMultiChoiceDialog.getSelections/1","type":"function"},{"doc":"","ref":"wxMultiChoiceDialog.html#new/4","title":"wxMultiChoiceDialog.new/4","type":"function"},{"doc":"Constructor taking an array of wxString (not implemented in wx) choices. Remark: Use wxDialog:showModal/1 to show the dialog.","ref":"wxMultiChoiceDialog.html#new/5","title":"wxMultiChoiceDialog.new/5","type":"function"},{"doc":"Sets selected items from the array of selected items' indexes.","ref":"wxMultiChoiceDialog.html#setSelections/2","title":"wxMultiChoiceDialog.setSelections/2","type":"function"},{"doc":"","ref":"wxMultiChoiceDialog.html#t:wxMultiChoiceDialog/0","title":"wxMultiChoiceDialog.wxMultiChoiceDialog/0","type":"type"},{"doc":"This event class contains information about navigation events, generated by navigation keys such as tab and page down. This event is mainly used by wxWidgets implementations. A wxNavigationKeyEvent handler is automatically provided by wxWidgets when you enable keyboard navigation inside a window by inheriting it from wxNavigationEnabled&lt;&gt;. See: wxWindow:navigate/2 , wxWindow::NavigateIn (not implemented in wx) This class is derived (and can use functions) from: wxEvent wxWidgets docs: wxNavigationKeyEvent Events Use wxEvtHandler:connect/3 with wxNavigationKeyEventType to subscribe to events of this type.","ref":"wxNavigationKeyEvent.html","title":"wxNavigationKeyEvent","type":"module"},{"doc":"Returns the child that has the focus, or NULL.","ref":"wxNavigationKeyEvent.html#getCurrentFocus/1","title":"wxNavigationKeyEvent.getCurrentFocus/1","type":"function"},{"doc":"Returns true if the navigation was in the forward direction.","ref":"wxNavigationKeyEvent.html#getDirection/1","title":"wxNavigationKeyEvent.getDirection/1","type":"function"},{"doc":"Returns true if the navigation event was from a tab key. This is required for proper navigation over radio buttons.","ref":"wxNavigationKeyEvent.html#isFromTab/1","title":"wxNavigationKeyEvent.isFromTab/1","type":"function"},{"doc":"Returns true if the navigation event represents a window change (for example, from Ctrl-Page Down in a notebook).","ref":"wxNavigationKeyEvent.html#isWindowChange/1","title":"wxNavigationKeyEvent.isWindowChange/1","type":"function"},{"doc":"Sets the current focus window member.","ref":"wxNavigationKeyEvent.html#setCurrentFocus/2","title":"wxNavigationKeyEvent.setCurrentFocus/2","type":"function"},{"doc":"Sets the direction to forward if direction is true, or backward if false.","ref":"wxNavigationKeyEvent.html#setDirection/2","title":"wxNavigationKeyEvent.setDirection/2","type":"function"},{"doc":"Marks the navigation event as from a tab key.","ref":"wxNavigationKeyEvent.html#setFromTab/2","title":"wxNavigationKeyEvent.setFromTab/2","type":"function"},{"doc":"Marks the event as a window change event.","ref":"wxNavigationKeyEvent.html#setWindowChange/2","title":"wxNavigationKeyEvent.setWindowChange/2","type":"function"},{"doc":"","ref":"wxNavigationKeyEvent.html#t:wxNavigationKey/0","title":"wxNavigationKeyEvent.wxNavigationKey/0","type":"type"},{"doc":"","ref":"wxNavigationKeyEvent.html#t:wxNavigationKeyEvent/0","title":"wxNavigationKeyEvent.wxNavigationKeyEvent/0","type":"type"},{"doc":"","ref":"wxNavigationKeyEvent.html#t:wxNavigationKeyEventType/0","title":"wxNavigationKeyEvent.wxNavigationKeyEventType/0","type":"type"},{"doc":"This class represents a notebook control, which manages multiple windows with associated tabs. To use the class, create a wxNotebook object and call wxBookCtrlBase:addPage/4 or wxBookCtrlBase:insertPage/5 , passing a window to be used as the page. Do not explicitly delete the window for a page that is currently managed by wxNotebook . wxNotebookPage is a typedef for wxWindow . Styles This class supports the following styles: Page backgrounds On Windows, the default theme paints a background on the notebook's pages. If you wish to suppress this theme, for aesthetic or performance reasons, there are three ways of doing it. You can use wxNB_NOPAGETHEME to disable themed drawing for a particular notebook, you can call wxSystemOptions:setOption/2 to disable it for the whole application, or you can disable it for individual pages by using wxWindow:setBackgroundColour/2 . To disable themed pages globally: Set the value to 1 to enable it again. To give a single page a solid background that more or less fits in with the overall theme, use: On platforms other than Windows, or if the application is not using Windows themes, getThemeBackgroundColour/1 will return an uninitialised colour object, and the above code will therefore work on all platforms. See: ?wxBookCtrl, wxBookCtrlEvent , wxImageList , Examples This class is derived (and can use functions) from: wxBookCtrlBase wxControl wxWindow wxEvtHandler wxWidgets docs: wxNotebook Events Event types emitted from this class: command_notebook_page_changed , command_notebook_page_changing","ref":"wxNotebook.html","title":"wxNotebook","type":"module"},{"doc":"Sets the image list for the page control and takes ownership of the list. See: wxImageList , setImageList/2","ref":"wxNotebook.html#assignImageList/2","title":"wxNotebook.assignImageList/2","type":"function"},{"doc":"","ref":"wxNotebook.html#create/3","title":"wxNotebook.create/3","type":"function"},{"doc":"Creates a notebook control. See new/3 for a description of the parameters.","ref":"wxNotebook.html#create/4","title":"wxNotebook.create/4","type":"function"},{"doc":"Destroys the wxNotebook object.","ref":"wxNotebook.html#destroy/1","title":"wxNotebook.destroy/1","type":"function"},{"doc":"Returns the associated image list, may be NULL. See: wxImageList , setImageList/2","ref":"wxNotebook.html#getImageList/1","title":"wxNotebook.getImageList/1","type":"function"},{"doc":"Returns the image index for the given page.","ref":"wxNotebook.html#getPageImage/2","title":"wxNotebook.getPageImage/2","type":"function"},{"doc":"Returns the number of rows in the notebook control.","ref":"wxNotebook.html#getRowCount/1","title":"wxNotebook.getRowCount/1","type":"function"},{"doc":"If running under Windows and themes are enabled for the application, this function returns a suitable colour for painting the background of a notebook page, and can be passed to wxWindow:setBackgroundColour/2 . Otherwise, an uninitialised colour will be returned.","ref":"wxNotebook.html#getThemeBackgroundColour/1","title":"wxNotebook.getThemeBackgroundColour/1","type":"function"},{"doc":"Constructs a notebook control.","ref":"wxNotebook.html#new/0","title":"wxNotebook.new/0","type":"function"},{"doc":"","ref":"wxNotebook.html#new/2","title":"wxNotebook.new/2","type":"function"},{"doc":"Constructs a notebook control. Note that sometimes you can reduce flicker by passing the wxCLIP_CHILDREN window style.","ref":"wxNotebook.html#new/3","title":"wxNotebook.new/3","type":"function"},{"doc":"Sets the image list to use. It does not take ownership of the image list, you must delete it yourself. See: wxImageList , assignImageList/2","ref":"wxNotebook.html#setImageList/2","title":"wxNotebook.setImageList/2","type":"function"},{"doc":"Sets the amount of space around each page's icon and label, in pixels. Note: The vertical padding cannot be changed in wxGTK.","ref":"wxNotebook.html#setPadding/2","title":"wxNotebook.setPadding/2","type":"function"},{"doc":"Sets the image index for the given page. image is an index into the image list which was set with setImageList/2 .","ref":"wxNotebook.html#setPageImage/3","title":"wxNotebook.setPageImage/3","type":"function"},{"doc":"Sets the width and height of the pages. Note: This method is currently not implemented for wxGTK.","ref":"wxNotebook.html#setPageSize/2","title":"wxNotebook.setPageSize/2","type":"function"},{"doc":"","ref":"wxNotebook.html#t:wxNotebook/0","title":"wxNotebook.wxNotebook/0","type":"type"},{"doc":"This class allows showing the user a message non intrusively. Currently it is implemented natively for Windows, macOS, GTK and uses generic toast notifications under the other platforms. It's not recommended but wxGenericNotificationMessage can be used instead of the native ones. This might make sense if your application requires features not available in the native implementation. Notice that this class is not a window and so doesn't derive from wxWindow . Platform Notes Par: Up to Windows 8 balloon notifications are displayed from an icon in the notification area of the taskbar. If your application uses a wxTaskBarIcon you should call useTaskBarIcon/1 to ensure that only one icon is shown in the notification area. Windows 10 displays all notifications as popup toasts. To suppress the additional icon in the notification area on Windows 10 and for toast notification support on Windows 8 it is recommended to call mSWUseToasts/1 before showing the first notification message. Par: The macOS implementation uses Notification Center to display native notifications. In order to use actions your notifications must use the alert style. This can be enabled by the user in system settings or by setting the NSUserNotificationAlertStyle value in Info.plist to alert . Please note that the user always has the option to change the notification style. Since: 2.9.0 This class is derived (and can use functions) from: wxEvtHandler wxWidgets docs: wxNotificationMessage Events Event types emitted from this class: notification_message_click , notification_message_dismissed , notification_message_action","ref":"wxNotificationMessage.html","title":"wxNotificationMessage","type":"module"},{"doc":"","ref":"wxNotificationMessage.html#addAction/2","title":"wxNotificationMessage.addAction/2","type":"function"},{"doc":"Add an action to the notification. If supported by the implementation this are usually buttons in the notification selectable by the user. Return: false if the current implementation or OS version does not support actions in notifications. Since: 3.1.0","ref":"wxNotificationMessage.html#addAction/3","title":"wxNotificationMessage.addAction/3","type":"function"},{"doc":"Hides the notification. Returns true if it was hidden or false if it couldn't be done (e.g. on some systems automatically hidden notifications can't be hidden manually).","ref":"wxNotificationMessage.html#close/1","title":"wxNotificationMessage.close/1","type":"function"},{"doc":"Destructor does not hide the notification. The notification can continue to be shown even after the C++ object was destroyed, call close/1 explicitly if it needs to be hidden.","ref":"wxNotificationMessage.html#destroy/1","title":"wxNotificationMessage.destroy/1","type":"function"},{"doc":"","ref":"wxNotificationMessage.html#mSWUseToasts/0","title":"wxNotificationMessage.mSWUseToasts/0","type":"function"},{"doc":"Enables toast notifications available since Windows 8 and suppresses the additional icon in the notification area on Windows 10. Toast notifications require a shortcut to the application in the start menu. The start menu shortcut needs to contain an Application User Model ID. It is recommended that the applications setup creates the shortcut and the application specifies the setup created shortcut in shortcutPath . A call to this method will verify (and if necessary modify) the shortcut before enabling toast notifications. Return: false if toast notifications could not be enabled. Only for:wxmsw See: wxAppConsole::SetAppName() (not implemented in wx), wxAppConsole::SetVendorName() (not implemented in wx) Since: 3.1.0","ref":"wxNotificationMessage.html#mSWUseToasts/1","title":"wxNotificationMessage.mSWUseToasts/1","type":"function"},{"doc":"Default constructor, use setParent/2 , setTitle/2 and setMessage/2 to initialize the object before showing it.","ref":"wxNotificationMessage.html#new/0","title":"wxNotificationMessage.new/0","type":"function"},{"doc":"","ref":"wxNotificationMessage.html#new/1","title":"wxNotificationMessage.new/1","type":"function"},{"doc":"Create a notification object with the given attributes. See setTitle/2 , setMessage/2 , setParent/2 and setFlags/2 for the description of the corresponding parameters.","ref":"wxNotificationMessage.html#new/2","title":"wxNotificationMessage.new/2","type":"function"},{"doc":"This parameter can be currently used to specify the icon to show in the notification. Valid values are wxICON_INFORMATION , wxICON_WARNING and wxICON_ERROR (notice that wxICON_QUESTION is not allowed here). Some implementations of this class may not support the icons. See: setIcon/2","ref":"wxNotificationMessage.html#setFlags/2","title":"wxNotificationMessage.setFlags/2","type":"function"},{"doc":"Specify a custom icon to be displayed in the notification. Some implementations of this class may not support custom icons. See: setFlags/2 Since: 3.1.0","ref":"wxNotificationMessage.html#setIcon/2","title":"wxNotificationMessage.setIcon/2","type":"function"},{"doc":"Set the main text of the notification. This should be a more detailed description than the title but still limited to reasonable length (not more than 256 characters).","ref":"wxNotificationMessage.html#setMessage/2","title":"wxNotificationMessage.setMessage/2","type":"function"},{"doc":"Set the parent for this notification: the notification will be associated with the top level parent of this window or, if this method is not called, with the main application window by default.","ref":"wxNotificationMessage.html#setParent/2","title":"wxNotificationMessage.setParent/2","type":"function"},{"doc":"Set the title, it must be a concise string (not more than 64 characters), use setMessage/2 to give the user more details.","ref":"wxNotificationMessage.html#setTitle/2","title":"wxNotificationMessage.setTitle/2","type":"function"},{"doc":"","ref":"wxNotificationMessage.html#show/1","title":"wxNotificationMessage.show/1","type":"function"},{"doc":"Show the notification to the user and hides it after timeout seconds are elapsed. Special values Timeout_Auto and Timeout_Never can be used here, notice that you shouldn't rely on timeout being exactly respected because the current platform may only support default timeout value and also because the user may be able to close the notification. Note: When using native notifications in wxGTK, the timeout is ignored for the notifications with wxICON_WARNING or wxICON_ERROR flags, they always remain shown unless they're explicitly hidden by the user, i.e. behave as if Timeout_Auto were given. Return: false if an error occurred.","ref":"wxNotificationMessage.html#show/2","title":"wxNotificationMessage.show/2","type":"function"},{"doc":"If the application already uses a wxTaskBarIcon , it should be connected to notifications by using this method. This has no effect if toast notifications are used. Return: the task bar icon which was used previously (may be NULL ) Only for:wxmsw","ref":"wxNotificationMessage.html#useTaskBarIcon/1","title":"wxNotificationMessage.useTaskBarIcon/1","type":"function"},{"doc":"","ref":"wxNotificationMessage.html#t:wxNotificationMessage/0","title":"wxNotificationMessage.wxNotificationMessage/0","type":"type"},{"doc":"This class is not used by the event handlers by itself, but is a base class for other event classes (such as wxBookCtrlEvent ). It (or an object of a derived class) is sent when the controls state is being changed and allows the program to veto/1 this change if it wants to prevent it from happening. See: wxBookCtrlEvent This class is derived (and can use functions) from: wxCommandEvent wxEvent wxWidgets docs: wxNotifyEvent","ref":"wxNotifyEvent.html","title":"wxNotifyEvent","type":"module"},{"doc":"This is the opposite of veto/1 : it explicitly allows the event to be processed. For most events it is not necessary to call this method as the events are allowed anyhow but some are forbidden by default (this will be mentioned in the corresponding event description).","ref":"wxNotifyEvent.html#allow/1","title":"wxNotifyEvent.allow/1","type":"function"},{"doc":"Returns true if the change is allowed ( veto/1 hasn't been called) or false otherwise (if it was).","ref":"wxNotifyEvent.html#isAllowed/1","title":"wxNotifyEvent.isAllowed/1","type":"function"},{"doc":"Prevents the change announced by this event from happening. It is in general a good idea to notify the user about the reasons for vetoing the change because otherwise the applications behaviour (which just refuses to do what the user wants) might be quite surprising.","ref":"wxNotifyEvent.html#veto/1","title":"wxNotifyEvent.veto/1","type":"function"},{"doc":"","ref":"wxNotifyEvent.html#t:wxNotifyEvent/0","title":"wxNotifyEvent.wxNotifyEvent/0","type":"type"},{"doc":"Creates an overlay over an existing window, allowing for manipulations like rubberbanding, etc. On wxOSX the overlay is implemented with native platform APIs, on the other platforms it is simulated using wxMemoryDC . See: wxDCOverlay , wxDC wxWidgets docs: wxOverlay","ref":"wxOverlay.html","title":"wxOverlay","type":"module"},{"doc":"","ref":"wxOverlay.html#destroy/1","title":"wxOverlay.destroy/1","type":"function"},{"doc":"","ref":"wxOverlay.html#new/0","title":"wxOverlay.new/0","type":"function"},{"doc":"Clears the overlay without restoring the former state. To be done, for example, when the window content has been changed and repainted.","ref":"wxOverlay.html#reset/1","title":"wxOverlay.reset/1","type":"function"},{"doc":"","ref":"wxOverlay.html#t:wxOverlay/0","title":"wxOverlay.wxOverlay/0","type":"type"},{"doc":"This class represents the page setup common dialog. The page setup dialog contains controls for paper size (letter, A4, A5 etc.), orientation (landscape or portrait), and, only under Windows currently, controls for setting left, top, right and bottom margin sizes in millimetres. The exact appearance of this dialog varies among the platforms as a native dialog is used when available (currently the case for all major platforms). When the dialog has been closed, you need to query the wxPageSetupDialogData object associated with the dialog. Note that the OK and Cancel buttons do not destroy the dialog; this must be done by the application. See: Overview printing , wxPrintDialog , wxPageSetupDialogData wxWidgets docs: wxPageSetupDialog","ref":"wxPageSetupDialog.html","title":"wxPageSetupDialog","type":"module"},{"doc":"Destructor.","ref":"wxPageSetupDialog.html#destroy/1","title":"wxPageSetupDialog.destroy/1","type":"function"},{"doc":"Returns the wxPageSetupDialogData object associated with the dialog.","ref":"wxPageSetupDialog.html#getPageSetupData/1","title":"wxPageSetupDialog.getPageSetupData/1","type":"function"},{"doc":"","ref":"wxPageSetupDialog.html#new/1","title":"wxPageSetupDialog.new/1","type":"function"},{"doc":"Constructor. Pass a parent window, and optionally a pointer to a block of page setup data, which will be copied to the print dialog's internal data.","ref":"wxPageSetupDialog.html#new/2","title":"wxPageSetupDialog.new/2","type":"function"},{"doc":"Shows the dialog, returning wxID_OK if the user pressed OK, and wxID_CANCEL otherwise.","ref":"wxPageSetupDialog.html#showModal/1","title":"wxPageSetupDialog.showModal/1","type":"function"},{"doc":"","ref":"wxPageSetupDialog.html#t:wxPageSetupDialog/0","title":"wxPageSetupDialog.wxPageSetupDialog/0","type":"type"},{"doc":"This class holds a variety of information related to wxPageSetupDialog . It contains a wxPrintData member which is used to hold basic printer configuration data (as opposed to the user-interface configuration settings stored by wxPageSetupDialogData ). See: Overview printing , wxPageSetupDialog wxWidgets docs: wxPageSetupDialogData","ref":"wxPageSetupDialogData.html","title":"wxPageSetupDialogData","type":"module"},{"doc":"Destructor.","ref":"wxPageSetupDialogData.html#destroy/1","title":"wxPageSetupDialogData.destroy/1","type":"function"},{"doc":"Enables or disables the &quot;Help&quot; button (Windows only).","ref":"wxPageSetupDialogData.html#enableHelp/2","title":"wxPageSetupDialogData.enableHelp/2","type":"function"},{"doc":"Enables or disables the margin controls (Windows only).","ref":"wxPageSetupDialogData.html#enableMargins/2","title":"wxPageSetupDialogData.enableMargins/2","type":"function"},{"doc":"Enables or disables the orientation control (Windows only).","ref":"wxPageSetupDialogData.html#enableOrientation/2","title":"wxPageSetupDialogData.enableOrientation/2","type":"function"},{"doc":"Enables or disables the paper size control (Windows only).","ref":"wxPageSetupDialogData.html#enablePaper/2","title":"wxPageSetupDialogData.enablePaper/2","type":"function"},{"doc":"Enables or disables the &quot;Printer&quot; button, which invokes a printer setup dialog.","ref":"wxPageSetupDialogData.html#enablePrinter/2","title":"wxPageSetupDialogData.enablePrinter/2","type":"function"},{"doc":"Returns true if the dialog will simply return default printer information (such as orientation) instead of showing a dialog (Windows only).","ref":"wxPageSetupDialogData.html#getDefaultInfo/1","title":"wxPageSetupDialogData.getDefaultInfo/1","type":"function"},{"doc":"Returns true if the page setup dialog will take its minimum margin values from the currently selected printer properties (Windows only).","ref":"wxPageSetupDialogData.html#getDefaultMinMargins/1","title":"wxPageSetupDialogData.getDefaultMinMargins/1","type":"function"},{"doc":"Returns true if the printer setup button is enabled.","ref":"wxPageSetupDialogData.html#getEnableHelp/1","title":"wxPageSetupDialogData.getEnableHelp/1","type":"function"},{"doc":"Returns true if the margin controls are enabled (Windows only).","ref":"wxPageSetupDialogData.html#getEnableMargins/1","title":"wxPageSetupDialogData.getEnableMargins/1","type":"function"},{"doc":"Returns true if the orientation control is enabled (Windows only).","ref":"wxPageSetupDialogData.html#getEnableOrientation/1","title":"wxPageSetupDialogData.getEnableOrientation/1","type":"function"},{"doc":"Returns true if the paper size control is enabled (Windows only).","ref":"wxPageSetupDialogData.html#getEnablePaper/1","title":"wxPageSetupDialogData.getEnablePaper/1","type":"function"},{"doc":"Returns true if the printer setup button is enabled.","ref":"wxPageSetupDialogData.html#getEnablePrinter/1","title":"wxPageSetupDialogData.getEnablePrinter/1","type":"function"},{"doc":"Returns the right (x) and bottom (y) margins in millimetres.","ref":"wxPageSetupDialogData.html#getMarginBottomRight/1","title":"wxPageSetupDialogData.getMarginBottomRight/1","type":"function"},{"doc":"Returns the left (x) and top (y) margins in millimetres.","ref":"wxPageSetupDialogData.html#getMarginTopLeft/1","title":"wxPageSetupDialogData.getMarginTopLeft/1","type":"function"},{"doc":"Returns the right (x) and bottom (y) minimum margins the user can enter (Windows only). Units are in millimetres.","ref":"wxPageSetupDialogData.html#getMinMarginBottomRight/1","title":"wxPageSetupDialogData.getMinMarginBottomRight/1","type":"function"},{"doc":"Returns the left (x) and top (y) minimum margins the user can enter (Windows only). Units are in millimetres.","ref":"wxPageSetupDialogData.html#getMinMarginTopLeft/1","title":"wxPageSetupDialogData.getMinMarginTopLeft/1","type":"function"},{"doc":"Returns the paper id (stored in the internal wxPrintData object). See: wxPrintData:setPaperId/2","ref":"wxPageSetupDialogData.html#getPaperId/1","title":"wxPageSetupDialogData.getPaperId/1","type":"function"},{"doc":"Returns the paper size in millimetres.","ref":"wxPageSetupDialogData.html#getPaperSize/1","title":"wxPageSetupDialogData.getPaperSize/1","type":"function"},{"doc":"","ref":"wxPageSetupDialogData.html#getPrintData/1","title":"wxPageSetupDialogData.getPrintData/1","type":"function"},{"doc":"Returns true if the print data associated with the dialog data is valid. This can return false on Windows if the current printer is not set, for example. On all other platforms, it returns true.","ref":"wxPageSetupDialogData.html#isOk/1","title":"wxPageSetupDialogData.isOk/1","type":"function"},{"doc":"Default constructor.","ref":"wxPageSetupDialogData.html#new/0","title":"wxPageSetupDialogData.new/0","type":"function"},{"doc":"Construct an object from a print data object.","ref":"wxPageSetupDialogData.html#new/1","title":"wxPageSetupDialogData.new/1","type":"function"},{"doc":"Pass true if the dialog will simply return default printer information (such as orientation) instead of showing a dialog (Windows only).","ref":"wxPageSetupDialogData.html#setDefaultInfo/2","title":"wxPageSetupDialogData.setDefaultInfo/2","type":"function"},{"doc":"Pass true if the page setup dialog will take its minimum margin values from the currently selected printer properties (Windows only). Units are in millimetres.","ref":"wxPageSetupDialogData.html#setDefaultMinMargins/2","title":"wxPageSetupDialogData.setDefaultMinMargins/2","type":"function"},{"doc":"Sets the right (x) and bottom (y) margins in millimetres.","ref":"wxPageSetupDialogData.html#setMarginBottomRight/2","title":"wxPageSetupDialogData.setMarginBottomRight/2","type":"function"},{"doc":"Sets the left (x) and top (y) margins in millimetres.","ref":"wxPageSetupDialogData.html#setMarginTopLeft/2","title":"wxPageSetupDialogData.setMarginTopLeft/2","type":"function"},{"doc":"Sets the right (x) and bottom (y) minimum margins the user can enter (Windows only). Units are in millimetres.","ref":"wxPageSetupDialogData.html#setMinMarginBottomRight/2","title":"wxPageSetupDialogData.setMinMarginBottomRight/2","type":"function"},{"doc":"Sets the left (x) and top (y) minimum margins the user can enter (Windows only). Units are in millimetres.","ref":"wxPageSetupDialogData.html#setMinMarginTopLeft/2","title":"wxPageSetupDialogData.setMinMarginTopLeft/2","type":"function"},{"doc":"Sets the paper size id. Calling this function overrides the explicit paper dimensions passed in setPaperSize/2 . See: wxPrintData:setPaperId/2","ref":"wxPageSetupDialogData.html#setPaperId/2","title":"wxPageSetupDialogData.setPaperId/2","type":"function"},{"doc":"Sets the paper size in millimetres. If a corresponding paper id is found, it will be set in the internal wxPrintData object, otherwise the paper size overrides the paper id.","ref":"wxPageSetupDialogData.html#setPaperSize/2","title":"wxPageSetupDialogData.setPaperSize/2","type":"function"},{"doc":"Sets the print data associated with this object.","ref":"wxPageSetupDialogData.html#setPrintData/2","title":"wxPageSetupDialogData.setPrintData/2","type":"function"},{"doc":"","ref":"wxPageSetupDialogData.html#t:wxPageSetupDialogData/0","title":"wxPageSetupDialogData.wxPageSetupDialogData/0","type":"type"},{"doc":"A wxPaintDC must be constructed if an application wishes to paint on the client area of a window from within an EVT_PAINT() event handler. This should normally be constructed as a temporary stack object; don't store a wxPaintDC object. If you have an EVT_PAINT() handler, you must create a wxPaintDC object within it even if you don't actually use it. Using wxPaintDC within your EVT_PAINT() handler is important because it automatically sets the clipping area to the damaged area of the window. Attempts to draw outside this area do not appear. A wxPaintDC object is initialized to use the same font and colours as the window it is associated with. See: wxDC , wxClientDC , wxMemoryDC , wxWindowDC , wxScreenDC This class is derived (and can use functions) from: wxWindowDC wxDC wxWidgets docs: wxPaintDC","ref":"wxPaintDC.html","title":"wxPaintDC","type":"module"},{"doc":"Destroys the object.","ref":"wxPaintDC.html#destroy/1","title":"wxPaintDC.destroy/1","type":"function"},{"doc":"Constructor. Pass a pointer to the window on which you wish to paint.","ref":"wxPaintDC.html#new/1","title":"wxPaintDC.new/1","type":"function"},{"doc":"","ref":"wxPaintDC.html#t:wxPaintDC/0","title":"wxPaintDC.wxPaintDC/0","type":"type"},{"doc":"A paint event is sent when a window's contents needs to be repainted. The handler of this event must create a wxPaintDC object and use it for painting the window contents. For example: Notice that you must not create other kinds of wxDC (e.g. wxClientDC or wxWindowDC ) in EVT_PAINT handlers and also don't create wxPaintDC outside of this event handlers. You can optimize painting by retrieving the rectangles that have been damaged and only repainting these. The rectangles are in terms of the client area, and are unscrolled, so you will need to do some calculations using the current view position to obtain logical, scrolled units. Here is an example of using the wxRegionIterator (not implemented in wx) class: Remark: Please notice that in general it is impossible to change the drawing of a standard control (such as wxButton ) and so you shouldn't attempt to handle paint events for them as even if it might work on some platforms, this is inherently not portable and won't work everywhere. See: Overview events This class is derived (and can use functions) from: wxEvent wxWidgets docs: wxPaintEvent Events Use wxEvtHandler:connect/3 with wxPaintEventType to subscribe to events of this type.","ref":"wxPaintEvent.html","title":"wxPaintEvent","type":"module"},{"doc":"","ref":"wxPaintEvent.html#t:wxPaint/0","title":"wxPaintEvent.wxPaint/0","type":"type"},{"doc":"","ref":"wxPaintEvent.html#t:wxPaintEvent/0","title":"wxPaintEvent.wxPaintEvent/0","type":"type"},{"doc":"","ref":"wxPaintEvent.html#t:wxPaintEventType/0","title":"wxPaintEvent.wxPaintEventType/0","type":"type"},{"doc":"A palette is a table that maps pixel values to RGB colours. It allows the colours of a low-depth bitmap, for example, to be mapped to the available colours in a display. The notion of palettes is becoming more and more obsolete nowadays and only the MSW port is still using a native palette. All other ports use generic code which is basically just an array of colours. It is likely that in the future the only use for palettes within wxWidgets will be for representing colour indices from images (such as GIF or PNG). The image handlers for these formats have been modified to create a palette if there is such information in the original image file (usually 256 or less colour images). See wxImage for more information. Predefined objects (include wx.hrl): ?wxNullPalette See: wxDC:setPalette/2 , wxBitmap wxWidgets docs: wxPalette","ref":"wxPalette.html","title":"wxPalette","type":"module"},{"doc":"Creates a palette from arrays of size n , one for each red, blue or green component. Return: true if the creation was successful, false otherwise. See: new/3","ref":"wxPalette.html#create/4","title":"wxPalette.create/4","type":"function"},{"doc":"Destructor. See: reference-counted object destruction","ref":"wxPalette.html#destroy/1","title":"wxPalette.destroy/1","type":"function"},{"doc":"Returns number of entries in palette.","ref":"wxPalette.html#getColoursCount/1","title":"wxPalette.getColoursCount/1","type":"function"},{"doc":"Returns a pixel value (index into the palette) for the given RGB values. Return: The nearest palette index or wxNOT_FOUND for unexpected errors. See: getRGB/2","ref":"wxPalette.html#getPixel/4","title":"wxPalette.getPixel/4","type":"function"},{"doc":"Returns RGB values for a given palette index. Return: true if the operation was successful. See: getPixel/4","ref":"wxPalette.html#getRGB/2","title":"wxPalette.getRGB/2","type":"function"},{"doc":"Returns true if palette data is present.","ref":"wxPalette.html#isOk/1","title":"wxPalette.isOk/1","type":"function"},{"doc":"Default constructor.","ref":"wxPalette.html#new/0","title":"wxPalette.new/0","type":"function"},{"doc":"Copy constructor, uses overview_refcount.","ref":"wxPalette.html#new/1","title":"wxPalette.new/1","type":"function"},{"doc":"Creates a palette from arrays of size n , one for each red, blue or green component. See: create/4","ref":"wxPalette.html#new/3","title":"wxPalette.new/3","type":"function"},{"doc":"See: isOk/1 .","ref":"wxPalette.html#ok/1","title":"wxPalette.ok/1","type":"function"},{"doc":"","ref":"wxPalette.html#t:wxPalette/0","title":"wxPalette.wxPalette/0","type":"type"},{"doc":"This class is derived (and can use functions) from: wxEvent wxWidgets docs: wxPaletteChangedEvent","ref":"wxPaletteChangedEvent.html","title":"wxPaletteChangedEvent","type":"module"},{"doc":"","ref":"wxPaletteChangedEvent.html#getChangedWindow/1","title":"wxPaletteChangedEvent.getChangedWindow/1","type":"function"},{"doc":"","ref":"wxPaletteChangedEvent.html#setChangedWindow/2","title":"wxPaletteChangedEvent.setChangedWindow/2","type":"function"},{"doc":"","ref":"wxPaletteChangedEvent.html#t:wxPaletteChanged/0","title":"wxPaletteChangedEvent.wxPaletteChanged/0","type":"type"},{"doc":"","ref":"wxPaletteChangedEvent.html#t:wxPaletteChangedEvent/0","title":"wxPaletteChangedEvent.wxPaletteChangedEvent/0","type":"type"},{"doc":"","ref":"wxPaletteChangedEvent.html#t:wxPaletteChangedEventType/0","title":"wxPaletteChangedEvent.wxPaletteChangedEventType/0","type":"type"},{"doc":"A panel is a window on which controls are placed. It is usually placed within a frame. Its main feature over its parent class wxWindow is code for handling child windows and TAB traversal, which is implemented natively if possible (e.g. in wxGTK) or by wxWidgets itself otherwise. Note: Tab traversal is implemented through an otherwise undocumented intermediate wxControlContainer class from which any class can derive in addition to the normal wxWindow base class. Please see and to find out how this is achieved. Note: if not all characters are being intercepted by your OnKeyDown or OnChar handler, it may be because you are using the wxTAB_TRAVERSAL style, which grabs some keypresses for use by child controls. Remark: By default, a panel has the same colouring as a dialog. See: wxDialog This class is derived (and can use functions) from: wxWindow wxEvtHandler wxWidgets docs: wxPanel Events Event types emitted from this class: navigation_key","ref":"wxPanel.html","title":"wxPanel","type":"module"},{"doc":"Destructor. Deletes any child windows before deleting the physical window.","ref":"wxPanel.html#destroy/1","title":"wxPanel.destroy/1","type":"function"},{"doc":"Sends a wxInitDialogEvent , which in turn transfers data to the dialog via validators. See: wxInitDialogEvent","ref":"wxPanel.html#initDialog/1","title":"wxPanel.initDialog/1","type":"function"},{"doc":"Default constructor.","ref":"wxPanel.html#new/0","title":"wxPanel.new/0","type":"function"},{"doc":"","ref":"wxPanel.html#new/1","title":"wxPanel.new/1","type":"function"},{"doc":"Constructor. See: Create() (not implemented in wx)","ref":"wxPanel.html#new/2","title":"wxPanel.new/2","type":"function"},{"doc":"In contrast to wxWindow:setFocus/1 (see above) this will set the focus to the panel even if there are child windows in the panel. This is only rarely needed.","ref":"wxPanel.html#setFocusIgnoringChildren/1","title":"wxPanel.setFocusIgnoringChildren/1","type":"function"},{"doc":"","ref":"wxPanel.html#t:wxPanel/0","title":"wxPanel.wxPanel/0","type":"type"},{"doc":"This class represents a dialog that requests a one-line password string from the user. It is implemented as a generic wxWidgets dialog. See: Overview cmndlg This class is derived (and can use functions) from: wxTextEntryDialog wxDialog wxTopLevelWindow wxWindow wxEvtHandler wxWidgets docs: wxPasswordEntryDialog","ref":"wxPasswordEntryDialog.html","title":"wxPasswordEntryDialog","type":"module"},{"doc":"Destroys the object.","ref":"wxPasswordEntryDialog.html#destroy/1","title":"wxPasswordEntryDialog.destroy/1","type":"function"},{"doc":"","ref":"wxPasswordEntryDialog.html#new/2","title":"wxPasswordEntryDialog.new/2","type":"function"},{"doc":"Constructor. Use wxDialog:showModal/1 to show the dialog.","ref":"wxPasswordEntryDialog.html#new/3","title":"wxPasswordEntryDialog.new/3","type":"function"},{"doc":"","ref":"wxPasswordEntryDialog.html#t:wxPasswordEntryDialog/0","title":"wxPasswordEntryDialog.wxPasswordEntryDialog/0","type":"type"},{"doc":"A pen is a drawing tool for drawing outlines. It is used for drawing lines and painting the outline of rectangles, ellipses, etc. It has a colour, a width and a style. Note: On a monochrome display, wxWidgets shows all non-white pens as black. Do not initialize objects on the stack before the program commences, since other required structures may not have been set up yet. Instead, define global pointers to objects and create them in wxApp::OnInit() (not implemented in wx) or when required. An application may wish to dynamically create pens with different characteristics, and there is the consequent danger that a large number of duplicate pens will be created. Therefore an application may wish to get a pointer to a pen by using the global list of pens ?wxThePenList, and calling the member function wxPenList::FindOrCreatePen() (not implemented in wx). See wxPenList (not implemented in wx) for more info. This class uses reference counting and copy-on-write internally so that assignments between two instances of this class are very cheap. You can therefore use actual objects instead of pointers without efficiency problems. If an instance of this class is changed it will create its own data internally so that other instances, which previously shared the data using the reference counting, are not affected. Predefined objects (include wx.hrl): See: wxPenList (not implemented in wx), wxDC , wxDC:setPen/2 wxWidgets docs: wxPen","ref":"wxPen.html","title":"wxPen","type":"module"},{"doc":"Destructor. See: reference-counted object destruction Remark: Although all remaining pens are deleted when the application exits, the application should try to clean up all pens itself. This is because wxWidgets cannot know if a pointer to the pen object is stored in an application data structure, and there is a risk of double deletion.","ref":"wxPen.html#destroy/1","title":"wxPen.destroy/1","type":"function"},{"doc":"Returns the pen cap style, which may be one of wxCAP_ROUND , wxCAP_PROJECTING and wxCAP_BUTT . The default is wxCAP_ROUND . See: setCap/2","ref":"wxPen.html#getCap/1","title":"wxPen.getCap/1","type":"function"},{"doc":"Returns a reference to the pen colour. See: setColour/4","ref":"wxPen.html#getColour/1","title":"wxPen.getColour/1","type":"function"},{"doc":"Returns the pen join style, which may be one of wxJOIN_BEVEL , wxJOIN_ROUND and wxJOIN_MITER . The default is wxJOIN_ROUND . See: setJoin/2","ref":"wxPen.html#getJoin/1","title":"wxPen.getJoin/1","type":"function"},{"doc":"Returns the pen style. See: new/2 , setStyle/2","ref":"wxPen.html#getStyle/1","title":"wxPen.getStyle/1","type":"function"},{"doc":"Returns the pen width. See: setWidth/2","ref":"wxPen.html#getWidth/1","title":"wxPen.getWidth/1","type":"function"},{"doc":"Returns true if the pen is initialised. Notice that an uninitialized pen object can't be queried for any pen properties and all calls to the accessor methods on it will result in an assert failure.","ref":"wxPen.html#isOk/1","title":"wxPen.isOk/1","type":"function"},{"doc":"Default constructor. The pen will be uninitialised, and isOk/1 will return false.","ref":"wxPen.html#new/0","title":"wxPen.new/0","type":"function"},{"doc":"Copy constructor, uses overview_refcount.","ref":"wxPen.html#new/1","title":"wxPen.new/1","type":"function"},{"doc":"Constructs a pen from a colour object, pen width and style. Remark: Different versions of Windows and different versions of other platforms support very different subsets of the styles above so handle with care. See: setStyle/2 , setColour/4 , setWidth/2","ref":"wxPen.html#new/2","title":"wxPen.new/2","type":"function"},{"doc":"Sets the pen cap style, which may be one of wxCAP_ROUND , wxCAP_PROJECTING and wxCAP_BUTT . The default is wxCAP_ROUND . See: getCap/1","ref":"wxPen.html#setCap/2","title":"wxPen.setCap/2","type":"function"},{"doc":"The pen's colour is changed to the given colour. See: getColour/1","ref":"wxPen.html#setColour/2","title":"wxPen.setColour/2","type":"function"},{"doc":"","ref":"wxPen.html#setColour/4","title":"wxPen.setColour/4","type":"function"},{"doc":"Sets the pen join style, which may be one of wxJOIN_BEVEL , wxJOIN_ROUND and wxJOIN_MITER . The default is wxJOIN_ROUND . See: getJoin/1","ref":"wxPen.html#setJoin/2","title":"wxPen.setJoin/2","type":"function"},{"doc":"Set the pen style. See: new/2","ref":"wxPen.html#setStyle/2","title":"wxPen.setStyle/2","type":"function"},{"doc":"Sets the pen width. See: getWidth/1","ref":"wxPen.html#setWidth/2","title":"wxPen.setWidth/2","type":"function"},{"doc":"","ref":"wxPen.html#t:wxPen/0","title":"wxPen.wxPen/0","type":"type"},{"doc":"Base abstract class for all pickers which support an auxiliary text control. This class handles all positioning and sizing of the text control like a an horizontal wxBoxSizer would do, with the text control on the left of the picker button. The proportion (see wxSizer documentation for more info about proportion values) of the picker control defaults to 1 when there isn't a text control associated (see wxPB_USE_TEXTCTRL style) and to 0 otherwise. Styles This class supports the following styles: See: wxColourPickerCtrl This class is derived (and can use functions) from: wxControl wxWindow wxEvtHandler wxWidgets docs: wxPickerBase","ref":"wxPickerBase.html","title":"wxPickerBase","type":"module"},{"doc":"Returns the margin (in pixel) between the picker and the text control. This function can be used only when hasTextCtrl/1 returns true.","ref":"wxPickerBase.html#getInternalMargin/1","title":"wxPickerBase.getInternalMargin/1","type":"function"},{"doc":"Returns the proportion value of the picker.","ref":"wxPickerBase.html#getPickerCtrlProportion/1","title":"wxPickerBase.getPickerCtrlProportion/1","type":"function"},{"doc":"Returns a pointer to the text control handled by this window or NULL if the wxPB_USE_TEXTCTRL style was not specified when this control was created. Remark: The contents of the text control could be an invalid representation of the entity which can be chosen through the picker (e.g. when the user enters an invalid colour syntax because of a typo). Thus you should never parse the content of the textctrl to get the user's input; rather use the derived-class getter (e.g. wxColourPickerCtrl:getColour/1 , wxFilePickerCtrl:getPath/1 , etc).","ref":"wxPickerBase.html#getTextCtrl/1","title":"wxPickerBase.getTextCtrl/1","type":"function"},{"doc":"Returns the proportion value of the text control. This function can be used only when hasTextCtrl/1 returns true.","ref":"wxPickerBase.html#getTextCtrlProportion/1","title":"wxPickerBase.getTextCtrlProportion/1","type":"function"},{"doc":"Returns true if this window has a valid text control (i.e. if the wxPB_USE_TEXTCTRL style was given when creating this control).","ref":"wxPickerBase.html#hasTextCtrl/1","title":"wxPickerBase.hasTextCtrl/1","type":"function"},{"doc":"Returns true if the picker control is growable.","ref":"wxPickerBase.html#isPickerCtrlGrowable/1","title":"wxPickerBase.isPickerCtrlGrowable/1","type":"function"},{"doc":"Returns true if the text control is growable. This function can be used only when hasTextCtrl/1 returns true.","ref":"wxPickerBase.html#isTextCtrlGrowable/1","title":"wxPickerBase.isTextCtrlGrowable/1","type":"function"},{"doc":"Sets the margin (in pixel) between the picker and the text control. This function can be used only when hasTextCtrl/1 returns true.","ref":"wxPickerBase.html#setInternalMargin/2","title":"wxPickerBase.setInternalMargin/2","type":"function"},{"doc":"","ref":"wxPickerBase.html#setPickerCtrlGrowable/1","title":"wxPickerBase.setPickerCtrlGrowable/1","type":"function"},{"doc":"Sets the picker control as growable when grow is true.","ref":"wxPickerBase.html#setPickerCtrlGrowable/2","title":"wxPickerBase.setPickerCtrlGrowable/2","type":"function"},{"doc":"Sets the proportion value of the picker. Look at the detailed description of wxPickerBase for more info.","ref":"wxPickerBase.html#setPickerCtrlProportion/2","title":"wxPickerBase.setPickerCtrlProportion/2","type":"function"},{"doc":"","ref":"wxPickerBase.html#setTextCtrlGrowable/1","title":"wxPickerBase.setTextCtrlGrowable/1","type":"function"},{"doc":"Sets the text control as growable when grow is true. This function can be used only when hasTextCtrl/1 returns true.","ref":"wxPickerBase.html#setTextCtrlGrowable/2","title":"wxPickerBase.setTextCtrlGrowable/2","type":"function"},{"doc":"Sets the proportion value of the text control. Look at the detailed description of wxPickerBase for more info. This function can be used only when hasTextCtrl/1 returns true.","ref":"wxPickerBase.html#setTextCtrlProportion/2","title":"wxPickerBase.setTextCtrlProportion/2","type":"function"},{"doc":"","ref":"wxPickerBase.html#t:wxPickerBase/0","title":"wxPickerBase.wxPickerBase/0","type":"type"},{"doc":"A wxPopupWindow which disappears automatically when the user clicks mouse outside it or if it loses focus in any other way. This window can be useful for implementing custom combobox-like controls for example. See: wxPopupWindow This class is derived (and can use functions) from: wxPopupWindow wxWindow wxEvtHandler wxWidgets docs: wxPopupTransientWindow","ref":"wxPopupTransientWindow.html","title":"wxPopupTransientWindow","type":"module"},{"doc":"Destroys the object.","ref":"wxPopupTransientWindow.html#destroy/1","title":"wxPopupTransientWindow.destroy/1","type":"function"},{"doc":"Hide the window.","ref":"wxPopupTransientWindow.html#dismiss/1","title":"wxPopupTransientWindow.dismiss/1","type":"function"},{"doc":"Default constructor.","ref":"wxPopupTransientWindow.html#new/0","title":"wxPopupTransientWindow.new/0","type":"function"},{"doc":"","ref":"wxPopupTransientWindow.html#new/1","title":"wxPopupTransientWindow.new/1","type":"function"},{"doc":"Constructor.","ref":"wxPopupTransientWindow.html#new/2","title":"wxPopupTransientWindow.new/2","type":"function"},{"doc":"","ref":"wxPopupTransientWindow.html#popup/1","title":"wxPopupTransientWindow.popup/1","type":"function"},{"doc":"Popup the window (this will show it too). If focus is non-NULL, it will be kept focused while this window is shown if supported by the current platform, otherwise the popup itself will receive focus. In any case, the popup will disappear automatically if it loses focus because of a user action. See: dismiss/1","ref":"wxPopupTransientWindow.html#popup/2","title":"wxPopupTransientWindow.popup/2","type":"function"},{"doc":"","ref":"wxPopupTransientWindow.html#t:wxPopupTransientWindow/0","title":"wxPopupTransientWindow.wxPopupTransientWindow/0","type":"type"},{"doc":"A special kind of top level window used for popup menus, combobox popups and such. Styles This class supports the following styles: See: wxDialog , wxFrame This class is derived (and can use functions) from: wxWindow wxEvtHandler wxWidgets docs: wxPopupWindow","ref":"wxPopupWindow.html","title":"wxPopupWindow","type":"module"},{"doc":"","ref":"wxPopupWindow.html#create/2","title":"wxPopupWindow.create/2","type":"function"},{"doc":"Create method for two-step creation.","ref":"wxPopupWindow.html#create/3","title":"wxPopupWindow.create/3","type":"function"},{"doc":"Destroys the object.","ref":"wxPopupWindow.html#destroy/1","title":"wxPopupWindow.destroy/1","type":"function"},{"doc":"Default constructor.","ref":"wxPopupWindow.html#new/0","title":"wxPopupWindow.new/0","type":"function"},{"doc":"","ref":"wxPopupWindow.html#new/1","title":"wxPopupWindow.new/1","type":"function"},{"doc":"Constructor.","ref":"wxPopupWindow.html#new/2","title":"wxPopupWindow.new/2","type":"function"},{"doc":"Move the popup window to the right position, i.e. such that it is entirely visible. The popup is positioned at ptOrigin + size if it opens below and to the right (default), at ptOrigin - sizePopup if it opens above and to the left etc.","ref":"wxPopupWindow.html#position/3","title":"wxPopupWindow.position/3","type":"function"},{"doc":"","ref":"wxPopupWindow.html#t:wxPopupWindow/0","title":"wxPopupWindow.wxPopupWindow/0","type":"type"},{"doc":"This defines the wxWidgets Encapsulated PostScript device context, which can write PostScript files on any platform. See wxDC for descriptions of the member functions. Starting a document Document should be started with call to wxDC:startDoc/2 prior to calling any function to execute a drawing operation. However, some functions, like wxDC:setFont/2 , may be legitimately called even before wxDC:startDoc/2 . This class is derived (and can use functions) from: wxDC wxWidgets docs: wxPostScriptDC","ref":"wxPostScriptDC.html","title":"wxPostScriptDC","type":"module"},{"doc":"Destroys the object.","ref":"wxPostScriptDC.html#destroy/1","title":"wxPostScriptDC.destroy/1","type":"function"},{"doc":"","ref":"wxPostScriptDC.html#new/0","title":"wxPostScriptDC.new/0","type":"function"},{"doc":"Constructs a PostScript printer device context from a wxPrintData object.","ref":"wxPostScriptDC.html#new/1","title":"wxPostScriptDC.new/1","type":"function"},{"doc":"","ref":"wxPostScriptDC.html#t:wxPostScriptDC/0","title":"wxPostScriptDC.wxPostScriptDC/0","type":"type"},{"doc":"A preview canvas is the default canvas used by the print preview system to display the preview. See: wxPreviewFrame , wxPreviewControlBar , wxPrintPreview This class is derived (and can use functions) from: wxScrolledWindow wxPanel wxWindow wxEvtHandler wxWidgets docs: wxPreviewCanvas","ref":"wxPreviewCanvas.html","title":"wxPreviewCanvas","type":"module"},{"doc":"","ref":"wxPreviewCanvas.html#t:wxPreviewCanvas/0","title":"wxPreviewCanvas.wxPreviewCanvas/0","type":"type"},{"doc":"This is the default implementation of the preview control bar, a panel with buttons and a zoom control. You can derive a new class from this and override some or all member functions to change the behaviour and appearance; or you can leave it as it is. See: wxPreviewFrame , wxPreviewCanvas , wxPrintPreview This class is derived (and can use functions) from: wxPanel wxWindow wxEvtHandler wxWidgets docs: wxPreviewControlBar","ref":"wxPreviewControlBar.html","title":"wxPreviewControlBar","type":"module"},{"doc":"Creates buttons, according to value of the button style flags.","ref":"wxPreviewControlBar.html#createButtons/1","title":"wxPreviewControlBar.createButtons/1","type":"function"},{"doc":"Destructor.","ref":"wxPreviewControlBar.html#destroy/1","title":"wxPreviewControlBar.destroy/1","type":"function"},{"doc":"Gets the print preview object associated with the control bar.","ref":"wxPreviewControlBar.html#getPrintPreview/1","title":"wxPreviewControlBar.getPrintPreview/1","type":"function"},{"doc":"Gets the current zoom setting in percent.","ref":"wxPreviewControlBar.html#getZoomControl/1","title":"wxPreviewControlBar.getZoomControl/1","type":"function"},{"doc":"","ref":"wxPreviewControlBar.html#new/3","title":"wxPreviewControlBar.new/3","type":"function"},{"doc":"Constructor. The buttons parameter may be a combination of the following, using the bitwise 'or' operator:","ref":"wxPreviewControlBar.html#new/4","title":"wxPreviewControlBar.new/4","type":"function"},{"doc":"Sets the zoom control.","ref":"wxPreviewControlBar.html#setZoomControl/2","title":"wxPreviewControlBar.setZoomControl/2","type":"function"},{"doc":"","ref":"wxPreviewControlBar.html#t:wxPreviewControlBar/0","title":"wxPreviewControlBar.wxPreviewControlBar/0","type":"type"},{"doc":"This class provides the default method of managing the print preview interface. Member functions may be overridden to replace functionality, or the class may be used without derivation. See: wxPreviewCanvas , wxPreviewControlBar , wxPrintPreview This class is derived (and can use functions) from: wxFrame wxTopLevelWindow wxWindow wxEvtHandler wxWidgets docs: wxPreviewFrame","ref":"wxPreviewFrame.html","title":"wxPreviewFrame","type":"module"},{"doc":"Creates a wxPreviewCanvas . Override this function to allow a user-defined preview canvas object to be created.","ref":"wxPreviewFrame.html#createCanvas/1","title":"wxPreviewFrame.createCanvas/1","type":"function"},{"doc":"Creates a wxPreviewControlBar . Override this function to allow a user-defined preview control bar object to be created.","ref":"wxPreviewFrame.html#createControlBar/1","title":"wxPreviewFrame.createControlBar/1","type":"function"},{"doc":"Destructor.","ref":"wxPreviewFrame.html#destroy/1","title":"wxPreviewFrame.destroy/1","type":"function"},{"doc":"Initializes the frame elements and prepares for showing it. Calling this method is equivalent to calling InitializeWithModality() (not implemented in wx) with wxPreviewFrame_AppModal argument, please see its documentation for more details. Please notice that this function is virtual mostly for backwards compatibility only, there is no real need to override it as it's never called by wxWidgets itself.","ref":"wxPreviewFrame.html#initialize/1","title":"wxPreviewFrame.initialize/1","type":"function"},{"doc":"","ref":"wxPreviewFrame.html#new/2","title":"wxPreviewFrame.new/2","type":"function"},{"doc":"Constructor. Pass a print preview object plus other normal frame arguments. The print preview object will be destroyed by the frame when it closes.","ref":"wxPreviewFrame.html#new/3","title":"wxPreviewFrame.new/3","type":"function"},{"doc":"Enables any disabled frames in the application, and deletes the print preview object, implicitly deleting any printout objects associated with the print preview object.","ref":"wxPreviewFrame.html#onCloseWindow/2","title":"wxPreviewFrame.onCloseWindow/2","type":"function"},{"doc":"","ref":"wxPreviewFrame.html#t:wxPreviewFrame/0","title":"wxPreviewFrame.wxPreviewFrame/0","type":"type"},{"doc":"This class holds a variety of information related to printers and printer device contexts. This class is used to create a wxPrinterDC (not implemented in wx) and a wxPostScriptDC . It is also used as a data member of wxPrintDialogData and wxPageSetupDialogData , as part of the mechanism for transferring data between the print dialogs and the application. See: Overview printing , wxPrintDialog , wxPageSetupDialog , wxPrintDialogData , wxPageSetupDialogData , Overview cmndlg , wxPrinterDC (not implemented in wx), wxPostScriptDC wxWidgets docs: wxPrintData","ref":"wxPrintData.html","title":"wxPrintData","type":"module"},{"doc":"Destructor.","ref":"wxPrintData.html#destroy/1","title":"wxPrintData.destroy/1","type":"function"},{"doc":"Returns the current bin (papersource). By default, the system is left to select the bin ( wxPRINTBIN_DEFAULT is returned). See setBin/2 for the full list of bin values.","ref":"wxPrintData.html#getBin/1","title":"wxPrintData.getBin/1","type":"function"},{"doc":"Returns true if collation is on.","ref":"wxPrintData.html#getCollate/1","title":"wxPrintData.getCollate/1","type":"function"},{"doc":"Returns true if colour printing is on.","ref":"wxPrintData.html#getColour/1","title":"wxPrintData.getColour/1","type":"function"},{"doc":"Returns the duplex mode. One of wxDUPLEX_SIMPLEX, wxDUPLEX_HORIZONTAL, wxDUPLEX_VERTICAL.","ref":"wxPrintData.html#getDuplex/1","title":"wxPrintData.getDuplex/1","type":"function"},{"doc":"Returns the number of copies requested by the user.","ref":"wxPrintData.html#getNoCopies/1","title":"wxPrintData.getNoCopies/1","type":"function"},{"doc":"Gets the orientation. This can be wxLANDSCAPE or wxPORTRAIT.","ref":"wxPrintData.html#getOrientation/1","title":"wxPrintData.getOrientation/1","type":"function"},{"doc":"Returns the paper size id. See: setPaperId/2","ref":"wxPrintData.html#getPaperId/1","title":"wxPrintData.getPaperId/1","type":"function"},{"doc":"Returns the printer name. If the printer name is the empty string, it indicates that the default printer should be used.","ref":"wxPrintData.html#getPrinterName/1","title":"wxPrintData.getPrinterName/1","type":"function"},{"doc":"Returns the current print quality. This can be a positive integer, denoting the number of dots per inch, or one of the following identifiers: On input you should pass one of these identifiers, but on return you may get back a positive integer indicating the current resolution setting.","ref":"wxPrintData.html#getQuality/1","title":"wxPrintData.getQuality/1","type":"function"},{"doc":"Returns true if the print data is valid for using in print dialogs. This can return false on Windows if the current printer is not set, for example. On all other platforms, it returns true.","ref":"wxPrintData.html#isOk/1","title":"wxPrintData.isOk/1","type":"function"},{"doc":"Default constructor.","ref":"wxPrintData.html#new/0","title":"wxPrintData.new/0","type":"function"},{"doc":"Copy constructor.","ref":"wxPrintData.html#new/1","title":"wxPrintData.new/1","type":"function"},{"doc":"Sets the current bin.","ref":"wxPrintData.html#setBin/2","title":"wxPrintData.setBin/2","type":"function"},{"doc":"Sets collation to on or off.","ref":"wxPrintData.html#setCollate/2","title":"wxPrintData.setCollate/2","type":"function"},{"doc":"Sets colour printing on or off.","ref":"wxPrintData.html#setColour/2","title":"wxPrintData.setColour/2","type":"function"},{"doc":"Returns the duplex mode. One of wxDUPLEX_SIMPLEX, wxDUPLEX_HORIZONTAL, wxDUPLEX_VERTICAL.","ref":"wxPrintData.html#setDuplex/2","title":"wxPrintData.setDuplex/2","type":"function"},{"doc":"Sets the default number of copies to be printed out.","ref":"wxPrintData.html#setNoCopies/2","title":"wxPrintData.setNoCopies/2","type":"function"},{"doc":"Sets the orientation. This can be wxLANDSCAPE or wxPORTRAIT.","ref":"wxPrintData.html#setOrientation/2","title":"wxPrintData.setOrientation/2","type":"function"},{"doc":"Sets the paper id. This indicates the type of paper to be used. For a mapping between paper id, paper size and string name, see wxPrintPaperDatabase in &quot;paper.h&quot; (not yet documented). See: SetPaperSize() (not implemented in wx)","ref":"wxPrintData.html#setPaperId/2","title":"wxPrintData.setPaperId/2","type":"function"},{"doc":"Sets the printer name. This can be the empty string to indicate that the default printer should be used.","ref":"wxPrintData.html#setPrinterName/2","title":"wxPrintData.setPrinterName/2","type":"function"},{"doc":"Sets the desired print quality. This can be a positive integer, denoting the number of dots per inch, or one of the following identifiers: On input you should pass one of these identifiers, but on return you may get back a positive integer indicating the current resolution setting.","ref":"wxPrintData.html#setQuality/2","title":"wxPrintData.setQuality/2","type":"function"},{"doc":"","ref":"wxPrintData.html#t:wxPrintData/0","title":"wxPrintData.wxPrintData/0","type":"type"},{"doc":"This class represents the print and print setup common dialogs. You may obtain a wxPrinterDC (not implemented in wx) device context from a successfully dismissed print dialog. See: Overview printing , Overview cmndlg This class is derived (and can use functions) from: wxDialog wxTopLevelWindow wxWindow wxEvtHandler wxWidgets docs: wxPrintDialog","ref":"wxPrintDialog.html","title":"wxPrintDialog","type":"module"},{"doc":"Destructor. If getPrintDC/1 has not been called, the device context obtained by the dialog (if any) will be deleted.","ref":"wxPrintDialog.html#destroy/1","title":"wxPrintDialog.destroy/1","type":"function"},{"doc":"Returns the device context created by the print dialog, if any. When this function has been called, the ownership of the device context is transferred to the application, so it must then be deleted explicitly.","ref":"wxPrintDialog.html#getPrintDC/1","title":"wxPrintDialog.getPrintDC/1","type":"function"},{"doc":"Returns the print dialog data associated with the print dialog.","ref":"wxPrintDialog.html#getPrintDialogData/1","title":"wxPrintDialog.getPrintDialogData/1","type":"function"},{"doc":"","ref":"wxPrintDialog.html#new/1","title":"wxPrintDialog.new/1","type":"function"},{"doc":"","ref":"wxPrintDialog.html#new/2","title":"wxPrintDialog.new/2","type":"function"},{"doc":"","ref":"wxPrintDialog.html#t:wxPrintDialog/0","title":"wxPrintDialog.wxPrintDialog/0","type":"type"},{"doc":"This class holds information related to the visual characteristics of wxPrintDialog . It contains a wxPrintData object with underlying printing settings. See: Overview printing , wxPrintDialog , Overview cmndlg wxWidgets docs: wxPrintDialogData","ref":"wxPrintDialogData.html","title":"wxPrintDialogData","type":"module"},{"doc":"Destructor.","ref":"wxPrintDialogData.html#destroy/1","title":"wxPrintDialogData.destroy/1","type":"function"},{"doc":"Enables or disables the &quot;Help&quot; button.","ref":"wxPrintDialogData.html#enableHelp/2","title":"wxPrintDialogData.enableHelp/2","type":"function"},{"doc":"Enables or disables the &quot;Page numbers&quot; controls.","ref":"wxPrintDialogData.html#enablePageNumbers/2","title":"wxPrintDialogData.enablePageNumbers/2","type":"function"},{"doc":"Enables or disables the &quot;Print to file&quot; checkbox.","ref":"wxPrintDialogData.html#enablePrintToFile/2","title":"wxPrintDialogData.enablePrintToFile/2","type":"function"},{"doc":"Enables or disables the &quot;Selection&quot; radio button.","ref":"wxPrintDialogData.html#enableSelection/2","title":"wxPrintDialogData.enableSelection/2","type":"function"},{"doc":"Returns true if the user requested that all pages be printed.","ref":"wxPrintDialogData.html#getAllPages/1","title":"wxPrintDialogData.getAllPages/1","type":"function"},{"doc":"Returns true if the user requested that the document(s) be collated.","ref":"wxPrintDialogData.html#getCollate/1","title":"wxPrintDialogData.getCollate/1","type":"function"},{"doc":"Returns the from page number, as entered by the user.","ref":"wxPrintDialogData.html#getFromPage/1","title":"wxPrintDialogData.getFromPage/1","type":"function"},{"doc":"Returns the maximum page number.","ref":"wxPrintDialogData.html#getMaxPage/1","title":"wxPrintDialogData.getMaxPage/1","type":"function"},{"doc":"Returns the minimum page number.","ref":"wxPrintDialogData.html#getMinPage/1","title":"wxPrintDialogData.getMinPage/1","type":"function"},{"doc":"Returns the number of copies requested by the user.","ref":"wxPrintDialogData.html#getNoCopies/1","title":"wxPrintDialogData.getNoCopies/1","type":"function"},{"doc":"Returns a reference to the internal wxPrintData object.","ref":"wxPrintDialogData.html#getPrintData/1","title":"wxPrintDialogData.getPrintData/1","type":"function"},{"doc":"Returns true if the user has selected printing to a file.","ref":"wxPrintDialogData.html#getPrintToFile/1","title":"wxPrintDialogData.getPrintToFile/1","type":"function"},{"doc":"Returns true if the user requested that the selection be printed (where &quot;selection&quot; is a concept specific to the application).","ref":"wxPrintDialogData.html#getSelection/1","title":"wxPrintDialogData.getSelection/1","type":"function"},{"doc":"Returns the &quot;print to&quot; page number, as entered by the user.","ref":"wxPrintDialogData.html#getToPage/1","title":"wxPrintDialogData.getToPage/1","type":"function"},{"doc":"Returns true if the print data is valid for using in print dialogs. This can return false on Windows if the current printer is not set, for example. On all other platforms, it returns true.","ref":"wxPrintDialogData.html#isOk/1","title":"wxPrintDialogData.isOk/1","type":"function"},{"doc":"Default constructor.","ref":"wxPrintDialogData.html#new/0","title":"wxPrintDialogData.new/0","type":"function"},{"doc":"Copy constructor.","ref":"wxPrintDialogData.html#new/1","title":"wxPrintDialogData.new/1","type":"function"},{"doc":"Sets the &quot;Collate&quot; checkbox to true or false.","ref":"wxPrintDialogData.html#setCollate/2","title":"wxPrintDialogData.setCollate/2","type":"function"},{"doc":"Sets the from page number.","ref":"wxPrintDialogData.html#setFromPage/2","title":"wxPrintDialogData.setFromPage/2","type":"function"},{"doc":"Sets the maximum page number.","ref":"wxPrintDialogData.html#setMaxPage/2","title":"wxPrintDialogData.setMaxPage/2","type":"function"},{"doc":"Sets the minimum page number.","ref":"wxPrintDialogData.html#setMinPage/2","title":"wxPrintDialogData.setMinPage/2","type":"function"},{"doc":"Sets the default number of copies the user has requested to be printed out.","ref":"wxPrintDialogData.html#setNoCopies/2","title":"wxPrintDialogData.setNoCopies/2","type":"function"},{"doc":"Sets the internal wxPrintData .","ref":"wxPrintDialogData.html#setPrintData/2","title":"wxPrintDialogData.setPrintData/2","type":"function"},{"doc":"Sets the &quot;Print to file&quot; checkbox to true or false.","ref":"wxPrintDialogData.html#setPrintToFile/2","title":"wxPrintDialogData.setPrintToFile/2","type":"function"},{"doc":"Selects the &quot;Selection&quot; radio button. The effect of printing the selection depends on how the application implements this command, if at all.","ref":"wxPrintDialogData.html#setSelection/2","title":"wxPrintDialogData.setSelection/2","type":"function"},{"doc":"Sets the &quot;print to&quot; page number.","ref":"wxPrintDialogData.html#setToPage/2","title":"wxPrintDialogData.setToPage/2","type":"function"},{"doc":"","ref":"wxPrintDialogData.html#t:wxPrintDialogData/0","title":"wxPrintDialogData.wxPrintDialogData/0","type":"type"},{"doc":"Objects of this class manage the print preview process. The object is passed a wxPrintout object, and the wxPrintPreview object itself is passed to a wxPreviewFrame object. Previewing is started by initializing and showing the preview frame. Unlike wxPrinter:print/4 , flow of control returns to the application immediately after the frame is shown. Note: The preview shown is only exact on Windows. On other platforms, the wxDC used for preview is different from what is used for printing and the results may be significantly different, depending on how is the output created. In particular, printing code relying on wxDC:getTextExtent/3 heavily (for example, wxHtmlEasyPrinting and other wxHTML classes do) is affected. It is recommended to use native preview functionality on platforms that offer it (macOS, GTK+). See: Overview printing , wxPrinterDC (not implemented in wx), wxPrintDialog , wxPrintout , wxPrinter , wxPreviewCanvas , wxPreviewControlBar , wxPreviewFrame wxWidgets docs: wxPrintPreview","ref":"wxPrintPreview.html","title":"wxPrintPreview","type":"module"},{"doc":"Destructor. Deletes both print preview objects, so do not destroy these objects in your application.","ref":"wxPrintPreview.html#destroy/1","title":"wxPrintPreview.destroy/1","type":"function"},{"doc":"Gets the preview window used for displaying the print preview image.","ref":"wxPrintPreview.html#getCanvas/1","title":"wxPrintPreview.getCanvas/1","type":"function"},{"doc":"Gets the page currently being previewed.","ref":"wxPrintPreview.html#getCurrentPage/1","title":"wxPrintPreview.getCurrentPage/1","type":"function"},{"doc":"Gets the frame used for displaying the print preview canvas and control bar.","ref":"wxPrintPreview.html#getFrame/1","title":"wxPrintPreview.getFrame/1","type":"function"},{"doc":"Returns the maximum page number.","ref":"wxPrintPreview.html#getMaxPage/1","title":"wxPrintPreview.getMaxPage/1","type":"function"},{"doc":"Returns the minimum page number.","ref":"wxPrintPreview.html#getMinPage/1","title":"wxPrintPreview.getMinPage/1","type":"function"},{"doc":"Gets the preview printout object associated with the wxPrintPreview object.","ref":"wxPrintPreview.html#getPrintout/1","title":"wxPrintPreview.getPrintout/1","type":"function"},{"doc":"Gets the printout object to be used for printing from within the preview interface, or NULL if none exists.","ref":"wxPrintPreview.html#getPrintoutForPrinting/1","title":"wxPrintPreview.getPrintoutForPrinting/1","type":"function"},{"doc":"Returns true if the wxPrintPreview is valid, false otherwise. It could return false if there was a problem initializing the printer device context (current printer not set, for example).","ref":"wxPrintPreview.html#isOk/1","title":"wxPrintPreview.isOk/1","type":"function"},{"doc":"","ref":"wxPrintPreview.html#new/1","title":"wxPrintPreview.new/1","type":"function"},{"doc":"Constructor. Pass a printout object, an optional printout object to be used for actual printing, and the address of an optional block of printer data, which will be copied to the print preview object's print data. If printoutForPrinting is non-NULL, a &quot;Print...&quot; button will be placed on the preview frame so that the user can print directly from the preview interface. Remark: Do not explicitly delete the printout objects once this constructor has been called, since they will be deleted in the wxPrintPreview destructor. The same does not apply to the data argument. Use isOk/1 to check whether the wxPrintPreview object was created correctly.","ref":"wxPrintPreview.html#new/2","title":"wxPrintPreview.new/2","type":"function"},{"doc":"","ref":"wxPrintPreview.html#new/3","title":"wxPrintPreview.new/3","type":"function"},{"doc":"This refreshes the preview window with the preview image. It must be called from the preview window's OnPaint member. The implementation simply blits the preview bitmap onto the canvas, creating a new preview bitmap if none exists.","ref":"wxPrintPreview.html#paintPage/3","title":"wxPrintPreview.paintPage/3","type":"function"},{"doc":"Invokes the print process using the second wxPrintout object supplied in the wxPrintPreview constructor. Will normally be called by the Print ... panel item on the preview frame's control bar. Returns false in case of error - call wxPrinter:getLastError/0 to get detailed information about the kind of the error.","ref":"wxPrintPreview.html#print/2","title":"wxPrintPreview.print/2","type":"function"},{"doc":"Renders a page into a wxMemoryDC . Used internally by wxPrintPreview .","ref":"wxPrintPreview.html#renderPage/2","title":"wxPrintPreview.renderPage/2","type":"function"},{"doc":"Sets the window to be used for displaying the print preview image.","ref":"wxPrintPreview.html#setCanvas/2","title":"wxPrintPreview.setCanvas/2","type":"function"},{"doc":"Sets the current page to be previewed.","ref":"wxPrintPreview.html#setCurrentPage/2","title":"wxPrintPreview.setCurrentPage/2","type":"function"},{"doc":"Sets the frame to be used for displaying the print preview canvas and control bar.","ref":"wxPrintPreview.html#setFrame/2","title":"wxPrintPreview.setFrame/2","type":"function"},{"doc":"Associates a printout object with the wxPrintPreview object.","ref":"wxPrintPreview.html#setPrintout/2","title":"wxPrintPreview.setPrintout/2","type":"function"},{"doc":"Sets the percentage preview zoom, and refreshes the preview canvas accordingly.","ref":"wxPrintPreview.html#setZoom/2","title":"wxPrintPreview.setZoom/2","type":"function"},{"doc":"","ref":"wxPrintPreview.html#t:wxPrintPreview/0","title":"wxPrintPreview.wxPrintPreview/0","type":"type"},{"doc":"This class represents the Windows or PostScript printer, and is the vehicle through which printing may be launched by an application. Printing can also be achieved through using of lower functions and classes, but this and associated classes provide a more convenient and general method of printing. See: Overview printing , wxPrinterDC (not implemented in wx), wxPrintDialog , wxPrintout , wxPrintPreview wxWidgets docs: wxPrinter","ref":"wxPrinter.html","title":"wxPrinter","type":"module"},{"doc":"Creates the default printing abort window, with a cancel button.","ref":"wxPrinter.html#createAbortWindow/3","title":"wxPrinter.createAbortWindow/3","type":"function"},{"doc":"Destroys the object.","ref":"wxPrinter.html#destroy/1","title":"wxPrinter.destroy/1","type":"function"},{"doc":"Returns true if the user has aborted the print job.","ref":"wxPrinter.html#getAbort/1","title":"wxPrinter.getAbort/1","type":"function"},{"doc":"Return last error. Valid after calling print/4 , printDialog/2 or wxPrintPreview:print/2 . These functions set last error to wxPRINTER_NO_ERROR if no error happened. Returned value is one of the following:","ref":"wxPrinter.html#getLastError/0","title":"wxPrinter.getLastError/0","type":"function"},{"doc":"Returns the print data associated with the printer object.","ref":"wxPrinter.html#getPrintDialogData/1","title":"wxPrinter.getPrintDialogData/1","type":"function"},{"doc":"","ref":"wxPrinter.html#new/0","title":"wxPrinter.new/0","type":"function"},{"doc":"Constructor. Pass an optional pointer to a block of print dialog data, which will be copied to the printer object's local data. See: wxPrintDialogData , wxPrintData","ref":"wxPrinter.html#new/1","title":"wxPrinter.new/1","type":"function"},{"doc":"","ref":"wxPrinter.html#print/3","title":"wxPrinter.print/3","type":"function"},{"doc":"Starts the printing process. Provide a parent window, a user-defined wxPrintout object which controls the printing of a document, and whether the print dialog should be invoked first. print/4 could return false if there was a problem initializing the printer device context (current printer not set, for example) or the user cancelled printing. Call getLastError/0 to get detailed information about the kind of the error.","ref":"wxPrinter.html#print/4","title":"wxPrinter.print/4","type":"function"},{"doc":"Invokes the print dialog. If successful (the user did not press Cancel and no error occurred), a suitable device context will be returned; otherwise NULL is returned; call getLastError/0 to get detailed information about the kind of the error. Remark: The application must delete this device context to avoid a memory leak.","ref":"wxPrinter.html#printDialog/2","title":"wxPrinter.printDialog/2","type":"function"},{"doc":"Default error-reporting function.","ref":"wxPrinter.html#reportError/4","title":"wxPrinter.reportError/4","type":"function"},{"doc":"Invokes the print setup dialog. Deprecated: The setup dialog is obsolete, though retained for backward compatibility.","ref":"wxPrinter.html#setup/2","title":"wxPrinter.setup/2","type":"function"},{"doc":"","ref":"wxPrinter.html#t:wxPrinter/0","title":"wxPrinter.wxPrinter/0","type":"type"},{"doc":"This class encapsulates the functionality of printing out an application document. A new class must be derived and members overridden to respond to calls such as OnPrintPage() (not implemented in wx) and HasPage() (not implemented in wx) and to render the print image onto an associated wxDC . Instances of this class are passed to wxPrinter:print/4 or to a wxPrintPreview object to initiate printing or previewing. Your derived wxPrintout is responsible for drawing both the preview image and the printed page. If your windows' drawing routines accept an arbitrary DC as an argument, you can re-use those routines within your wxPrintout subclass to draw the printout image. You may also add additional drawing elements within your wxPrintout subclass, like headers, footers, and/or page numbers. However, the image on the printed page will often differ from the image drawn on the screen, as will the print preview image - not just in the presence of headers and footers, but typically in scale. A high-resolution printer presents a much larger drawing surface (i.e., a higher-resolution DC); a zoomed-out preview image presents a much smaller drawing surface (lower-resolution DC). By using the routines FitThisSizeToXXX() and/or MapScreenSizeToXXX() within your wxPrintout subclass to set the user scale and origin of the associated DC, you can easily use a single drawing routine to draw on your application's windows, to create the print preview image, and to create the printed paper image, and achieve a common appearance to the preview image and the printed page. See: Overview printing , wxPrinterDC (not implemented in wx), wxPrintDialog , wxPageSetupDialog , wxPrinter , wxPrintPreview wxWidgets docs: wxPrintout","ref":"wxPrintout.html","title":"wxPrintout","type":"module"},{"doc":"Destructor.","ref":"wxPrintout.html#destroy/1","title":"wxPrintout.destroy/1","type":"function"},{"doc":"Set the user scale and device origin of the wxDC associated with this wxPrintout so that the given image size fits entirely within the page rectangle and the origin is at the top left corner of the page rectangle. On MSW and Mac, the page rectangle is the printable area of the page. On other platforms and PostScript printing, the page rectangle is the entire paper. Use this if you want your printed image as large as possible, but with the caveat that on some platforms, portions of the image might be cut off at the edges.","ref":"wxPrintout.html#fitThisSizeToPage/2","title":"wxPrintout.fitThisSizeToPage/2","type":"function"},{"doc":"Set the user scale and device origin of the wxDC associated with this wxPrintout so that the given image size fits entirely within the page margins set in the given wxPageSetupDialogData object. This function provides the greatest consistency across all platforms because it does not depend on having access to the printable area of the paper. Remark: On Mac, the native wxPageSetupDialog does not let you set the page margins; you'll have to provide your own mechanism, or you can use the Mac-only class wxMacPageMarginsDialog.","ref":"wxPrintout.html#fitThisSizeToPageMargins/3","title":"wxPrintout.fitThisSizeToPageMargins/3","type":"function"},{"doc":"Set the user scale and device origin of the wxDC associated with this wxPrintout so that the given image size fits entirely within the paper and the origin is at the top left corner of the paper. Use this if you're managing your own page margins. Note: With most printers, the region around the edges of the paper are not printable so that the edges of the image could be cut off.","ref":"wxPrintout.html#fitThisSizeToPaper/2","title":"wxPrintout.fitThisSizeToPaper/2","type":"function"},{"doc":"Returns the device context associated with the printout (given to the printout at start of printing or previewing). The application can use getDC/1 to obtain a device context to draw on. This will be a wxPrinterDC (not implemented in wx) if printing under Windows or Mac, a wxPostScriptDC if printing on other platforms, and a wxMemoryDC if previewing.","ref":"wxPrintout.html#getDC/1","title":"wxPrintout.getDC/1","type":"function"},{"doc":"Return the rectangle corresponding to the page margins specified by the given wxPageSetupDialogData object in the associated wxDC 's logical coordinates for the current user scale and device origin. The page margins are specified with respect to the edges of the paper on all platforms.","ref":"wxPrintout.html#getLogicalPageMarginsRect/2","title":"wxPrintout.getLogicalPageMarginsRect/2","type":"function"},{"doc":"Return the rectangle corresponding to the page in the associated wxDC 's logical coordinates for the current user scale and device origin. On MSW and Mac, this will be the printable area of the paper. On other platforms and PostScript printing, this will be the full paper rectangle.","ref":"wxPrintout.html#getLogicalPageRect/1","title":"wxPrintout.getLogicalPageRect/1","type":"function"},{"doc":"Return the rectangle corresponding to the paper in the associated wxDC 's logical coordinates for the current user scale and device origin.","ref":"wxPrintout.html#getLogicalPaperRect/1","title":"wxPrintout.getLogicalPaperRect/1","type":"function"},{"doc":"Returns the number of pixels per logical inch of the printer device context. Dividing the printer PPI by the screen PPI can give a suitable scaling factor for drawing text onto the printer. Remember to multiply this by a scaling factor to take the preview DC size into account. Or you can just use the FitThisSizeToXXX() and MapScreenSizeToXXX routines below, which do most of the scaling calculations for you.","ref":"wxPrintout.html#getPPIPrinter/1","title":"wxPrintout.getPPIPrinter/1","type":"function"},{"doc":"Returns the number of pixels per logical inch of the screen device context. Dividing the printer PPI by the screen PPI can give a suitable scaling factor for drawing text onto the printer. If you are doing your own scaling, remember to multiply this by a scaling factor to take the preview DC size into account.","ref":"wxPrintout.html#getPPIScreen/1","title":"wxPrintout.getPPIScreen/1","type":"function"},{"doc":"Returns the size of the printer page in millimetres.","ref":"wxPrintout.html#getPageSizeMM/1","title":"wxPrintout.getPageSizeMM/1","type":"function"},{"doc":"Returns the size of the printer page in pixels, called the page rectangle. The page rectangle has a top left corner at (0,0) and a bottom right corner at (w,h). These values may not be the same as the values returned from wxDC:getSize/1 ; if the printout is being used for previewing, a memory device context is used, which uses a bitmap size reflecting the current preview zoom. The application must take this discrepancy into account if previewing is to be supported.","ref":"wxPrintout.html#getPageSizePixels/1","title":"wxPrintout.getPageSizePixels/1","type":"function"},{"doc":"Returns the rectangle that corresponds to the entire paper in pixels, called the paper rectangle. This distinction between paper rectangle and page rectangle reflects the fact that most printers cannot print all the way to the edge of the paper. The page rectangle is a rectangle whose top left corner is at (0,0) and whose width and height are given by wxDC::GetPageSizePixels(). On MSW and Mac, the page rectangle gives the printable area of the paper, while the paper rectangle represents the entire paper, including non-printable borders. Thus, the rectangle returned by wxDC::GetPaperRectPixels() will have a top left corner whose coordinates are small negative numbers and the bottom right corner will have values somewhat larger than the width and height given by wxDC::GetPageSizePixels(). On other platforms and for PostScript printing, the paper is treated as if its entire area were printable, so this function will return the same rectangle as the page rectangle.","ref":"wxPrintout.html#getPaperRectPixels/1","title":"wxPrintout.getPaperRectPixels/1","type":"function"},{"doc":"Returns the title of the printout.","ref":"wxPrintout.html#getTitle/1","title":"wxPrintout.getTitle/1","type":"function"},{"doc":"Returns true if the printout is currently being used for previewing. See: GetPreview() (not implemented in wx)","ref":"wxPrintout.html#isPreview/1","title":"wxPrintout.isPreview/1","type":"function"},{"doc":"Set the user scale and device origin of the wxDC associated with this wxPrintout so that one screen pixel maps to one device pixel on the DC. That is, the user scale is set to (1,1) and the device origin is set to (0,0). Use this if you want to do your own scaling prior to calling wxDC drawing calls, for example, if your underlying model is floating-point and you want to achieve maximum drawing precision on high-resolution printers. You can use the GetLogicalXXXRect() routines below to obtain the paper rectangle, page rectangle, or page margins rectangle to perform your own scaling. Note: While the underlying drawing model of macOS is floating-point, wxWidgets's drawing model scales from integer coordinates.","ref":"wxPrintout.html#mapScreenSizeToDevice/1","title":"wxPrintout.mapScreenSizeToDevice/1","type":"function"},{"doc":"This sets the user scale of the wxDC associated with this wxPrintout to the same scale as mapScreenSizeToPaper/1 but sets the logical origin to the top left corner of the page rectangle.","ref":"wxPrintout.html#mapScreenSizeToPage/1","title":"wxPrintout.mapScreenSizeToPage/1","type":"function"},{"doc":"This sets the user scale of the wxDC associated with this wxPrintout to the same scale as mapScreenSizeToPageMargins/2 but sets the logical origin to the top left corner of the page margins specified by the given wxPageSetupDialogData object.","ref":"wxPrintout.html#mapScreenSizeToPageMargins/2","title":"wxPrintout.mapScreenSizeToPageMargins/2","type":"function"},{"doc":"Set the user scale and device origin of the wxDC associated with this wxPrintout so that the printed page matches the screen size as closely as possible and the logical origin is in the top left corner of the paper rectangle. That is, a 100-pixel object on screen should appear at the same size on the printed page. (It will, of course, be larger or smaller in the preview image, depending on the zoom factor.) Use this if you want WYSIWYG behaviour, e.g., in a text editor.","ref":"wxPrintout.html#mapScreenSizeToPaper/1","title":"wxPrintout.mapScreenSizeToPaper/1","type":"function"},{"doc":"Constructor. Creates a wxPrintout object with a callback fun and optionally other callback funs. The This argument is the wxPrintout object reference to this object Notice: The callbacks may not call other processes.","ref":"wxPrintout.html#new/3","title":"wxPrintout.new/3","type":"function"},{"doc":"Shift the device origin by an amount specified in logical coordinates.","ref":"wxPrintout.html#offsetLogicalOrigin/3","title":"wxPrintout.offsetLogicalOrigin/3","type":"function"},{"doc":"Set the device origin of the associated wxDC so that the current logical point becomes the new logical origin.","ref":"wxPrintout.html#setLogicalOrigin/3","title":"wxPrintout.setLogicalOrigin/3","type":"function"},{"doc":"","ref":"wxPrintout.html#t:wxPrintout/0","title":"wxPrintout.wxPrintout/0","type":"type"},{"doc":"If supported by the platform this class will provide the platform's native progress dialog, else it will simply be the wxGenericProgressDialog (not implemented in wx). This class is derived (and can use functions) from: wxDialog wxTopLevelWindow wxWindow wxEvtHandler wxWidgets docs: wxProgressDialog","ref":"wxProgressDialog.html","title":"wxProgressDialog","type":"module"},{"doc":"Destroys the object.","ref":"wxProgressDialog.html#destroy/1","title":"wxProgressDialog.destroy/1","type":"function"},{"doc":"","ref":"wxProgressDialog.html#new/2","title":"wxProgressDialog.new/2","type":"function"},{"doc":"","ref":"wxProgressDialog.html#new/3","title":"wxProgressDialog.new/3","type":"function"},{"doc":"Can be used to continue with the dialog, after the user had clicked the &quot;Abort&quot; button.","ref":"wxProgressDialog.html#resume/1","title":"wxProgressDialog.resume/1","type":"function"},{"doc":"","ref":"wxProgressDialog.html#update/2","title":"wxProgressDialog.update/2","type":"function"},{"doc":"Updates the dialog, setting the progress bar to the new value and updating the message if new one is specified. Returns true unless the &quot;Cancel&quot; button has been pressed. If false is returned, the application can either immediately destroy the dialog or ask the user for the confirmation and if the abort is not confirmed the dialog may be resumed with resume/1 function. If value is the maximum value for the dialog, the behaviour of the function depends on whether wxPD_AUTO_HIDE was used when the dialog was created. If it was, the dialog is hidden and the function returns immediately. If it was not, the dialog becomes a modal dialog and waits for the user to dismiss it, meaning that this function does not return until this happens. Notice that if newmsg is longer than the currently shown message, the dialog will be automatically made wider to account for it. However if the new message is shorter than the previous one, the dialog doesn't shrink back to avoid constant resizes if the message is changed often. To do this and fit the dialog to its current contents you may call wxWindow:fit/1 explicitly. However the native MSW implementation of this class does make the dialog shorter if the new text has fewer lines of text than the old one, so it is recommended to keep the number of lines of text constant in order to avoid jarring dialog size changes. You may also want to make the initial message, specified when creating the dialog, wide enough to avoid having to resize the dialog later, e.g. by appending a long string of unbreakable spaces ( wxString (not implemented in wx)(L'\\u00a0', 100)) to it.","ref":"wxProgressDialog.html#update/3","title":"wxProgressDialog.update/3","type":"function"},{"doc":"","ref":"wxProgressDialog.html#t:wxProgressDialog/0","title":"wxProgressDialog.wxProgressDialog/0","type":"type"},{"doc":"This class is derived (and can use functions) from: wxEvent wxWidgets docs: wxQueryNewPaletteEvent","ref":"wxQueryNewPaletteEvent.html","title":"wxQueryNewPaletteEvent","type":"module"},{"doc":"","ref":"wxQueryNewPaletteEvent.html#getPaletteRealized/1","title":"wxQueryNewPaletteEvent.getPaletteRealized/1","type":"function"},{"doc":"","ref":"wxQueryNewPaletteEvent.html#setPaletteRealized/2","title":"wxQueryNewPaletteEvent.setPaletteRealized/2","type":"function"},{"doc":"","ref":"wxQueryNewPaletteEvent.html#t:wxQueryNewPalette/0","title":"wxQueryNewPaletteEvent.wxQueryNewPalette/0","type":"type"},{"doc":"","ref":"wxQueryNewPaletteEvent.html#t:wxQueryNewPaletteEvent/0","title":"wxQueryNewPaletteEvent.wxQueryNewPaletteEvent/0","type":"type"},{"doc":"","ref":"wxQueryNewPaletteEvent.html#t:wxQueryNewPaletteEventType/0","title":"wxQueryNewPaletteEvent.wxQueryNewPaletteEventType/0","type":"type"},{"doc":"A radio box item is used to select one of number of mutually exclusive choices. It is displayed as a vertical column or horizontal row of labelled buttons. Styles This class supports the following styles: See: Overview events , wxRadioButton , wxCheckBox This class is derived (and can use functions) from: wxControl wxWindow wxEvtHandler wxWidgets docs: wxRadioBox Events Event types emitted from this class: command_radiobox_selected","ref":"wxRadioBox.html","title":"wxRadioBox","type":"module"},{"doc":"","ref":"wxRadioBox.html#create/7","title":"wxRadioBox.create/7","type":"function"},{"doc":"Creates the radiobox for two-step construction. See new/7 for further details.","ref":"wxRadioBox.html#create/8","title":"wxRadioBox.create/8","type":"function"},{"doc":"Destructor, destroying the radiobox item.","ref":"wxRadioBox.html#destroy/1","title":"wxRadioBox.destroy/1","type":"function"},{"doc":"","ref":"wxRadioBox.html#enable/1","title":"wxRadioBox.enable/1","type":"function"},{"doc":"Enables or disables the radiobox. See: wxWindow:enable/2","ref":"wxRadioBox.html#enable/2","title":"wxRadioBox.enable/2","type":"function"},{"doc":"Enables or disables an individual button in the radiobox. See: wxWindow:enable/2","ref":"wxRadioBox.html#enable/3","title":"wxRadioBox.enable/3","type":"function"},{"doc":"Returns the number of columns in the radiobox.","ref":"wxRadioBox.html#getColumnCount/1","title":"wxRadioBox.getColumnCount/1","type":"function"},{"doc":"Returns a radio box item under the point, a zero-based item index, or wxNOT_FOUND if no item is under the point.","ref":"wxRadioBox.html#getItemFromPoint/2","title":"wxRadioBox.getItemFromPoint/2","type":"function"},{"doc":"Returns the helptext associated with the specified item if any or wxEmptyString . See: setItemHelpText/3","ref":"wxRadioBox.html#getItemHelpText/2","title":"wxRadioBox.getItemHelpText/2","type":"function"},{"doc":"Returns the tooltip associated with the specified item if any or NULL. See: setItemToolTip/3 , wxWindow:getToolTip/1","ref":"wxRadioBox.html#getItemToolTip/2","title":"wxRadioBox.getItemToolTip/2","type":"function"},{"doc":"Returns the number of rows in the radiobox.","ref":"wxRadioBox.html#getRowCount/1","title":"wxRadioBox.getRowCount/1","type":"function"},{"doc":"Returns the index of the selected item or wxNOT_FOUND if no item is selected. Return: The position of the current selection. Remark: This method can be used with single selection list boxes only, you should use wxListBox:getSelections/1 for the list boxes with wxLB_MULTIPLE style. See: setSelection/2 , wxControlWithItems:getStringSelection/1","ref":"wxRadioBox.html#getSelection/1","title":"wxRadioBox.getSelection/1","type":"function"},{"doc":"Returns the label of the item with the given index. Return: The label of the item or an empty string if the position was invalid.","ref":"wxRadioBox.html#getString/2","title":"wxRadioBox.getString/2","type":"function"},{"doc":"Returns true if the item is enabled or false if it was disabled using enable/3 . This function is currently only implemented in wxMSW, wxGTK, wxQT and wxUniversal and always returns true in the other ports.","ref":"wxRadioBox.html#isItemEnabled/2","title":"wxRadioBox.isItemEnabled/2","type":"function"},{"doc":"Returns true if the item is currently shown or false if it was hidden using show/3 . Note that this function returns true for an item which hadn't been hidden even if the entire radiobox is not currently shown. This function is currently only implemented in wxMSW, wxGTK, wxQT and wxUniversal and always returns true in the other ports.","ref":"wxRadioBox.html#isItemShown/2","title":"wxRadioBox.isItemShown/2","type":"function"},{"doc":"","ref":"wxRadioBox.html#new/6","title":"wxRadioBox.new/6","type":"function"},{"doc":"Constructor, creating and showing a radiobox. See: create/8 , wxValidator (not implemented in wx)","ref":"wxRadioBox.html#new/7","title":"wxRadioBox.new/7","type":"function"},{"doc":"Sets the helptext for an item. Empty string erases any existing helptext. See: getItemHelpText/2","ref":"wxRadioBox.html#setItemHelpText/3","title":"wxRadioBox.setItemHelpText/3","type":"function"},{"doc":"Sets the tooltip text for the specified item in the radio group. This function is currently only implemented in wxMSW and wxGTK2 and does nothing in the other ports. See: getItemToolTip/2 , wxWindow:setToolTip/2","ref":"wxRadioBox.html#setItemToolTip/3","title":"wxRadioBox.setItemToolTip/3","type":"function"},{"doc":"Sets the selection to the given item. Notice that a radio box always has selection, so n must be valid here and passing wxNOT_FOUND is not allowed.","ref":"wxRadioBox.html#setSelection/2","title":"wxRadioBox.setSelection/2","type":"function"},{"doc":"","ref":"wxRadioBox.html#show/2","title":"wxRadioBox.show/2","type":"function"},{"doc":"Shows or hides individual buttons. Return: true if the item has been shown or hidden or false if nothing was done because it already was in the requested state. See: show/3","ref":"wxRadioBox.html#show/3","title":"wxRadioBox.show/3","type":"function"},{"doc":"","ref":"wxRadioBox.html#t:wxRadioBox/0","title":"wxRadioBox.wxRadioBox/0","type":"type"},{"doc":"A radio button item is a button which usually denotes one of several mutually exclusive options. It has a text label next to a (usually) round button. You can create a group of mutually-exclusive radio buttons by specifying wxRB_GROUP for the first in the group. The group ends when another radio button group is created, or there are no more radio buttons. Styles This class supports the following styles: See: Overview events , wxRadioBox , wxCheckBox This class is derived (and can use functions) from: wxControl wxWindow wxEvtHandler wxWidgets docs: wxRadioButton Events Event types emitted from this class: command_radiobutton_selected","ref":"wxRadioButton.html","title":"wxRadioButton","type":"module"},{"doc":"","ref":"wxRadioButton.html#create/4","title":"wxRadioButton.create/4","type":"function"},{"doc":"Creates the choice for two-step construction. See new/4 for further details.","ref":"wxRadioButton.html#create/5","title":"wxRadioButton.create/5","type":"function"},{"doc":"Destructor, destroying the radio button item.","ref":"wxRadioButton.html#destroy/1","title":"wxRadioButton.destroy/1","type":"function"},{"doc":"Returns true if the radio button is checked, false otherwise.","ref":"wxRadioButton.html#getValue/1","title":"wxRadioButton.getValue/1","type":"function"},{"doc":"Default constructor. See: create/5 , wxValidator (not implemented in wx)","ref":"wxRadioButton.html#new/0","title":"wxRadioButton.new/0","type":"function"},{"doc":"","ref":"wxRadioButton.html#new/3","title":"wxRadioButton.new/3","type":"function"},{"doc":"Constructor, creating and showing a radio button. See: create/5 , wxValidator (not implemented in wx)","ref":"wxRadioButton.html#new/4","title":"wxRadioButton.new/4","type":"function"},{"doc":"Sets the radio button to checked or unchecked status. This does not cause a wxEVT_RADIOBUTTON event to get emitted. If the radio button belongs to a radio group exactly one button in the group may be checked and so this method can be only called with value set to true. To uncheck a radio button in a group you must check another button in the same group. Note: Under MSW, the focused radio button is always selected, i.e. its value is true. And, conversely, calling SetValue(true) will also set focus to the radio button if the focus had previously been on another radio button in the same group - as otherwise setting it on wouldn't work.","ref":"wxRadioButton.html#setValue/2","title":"wxRadioButton.setValue/2","type":"function"},{"doc":"","ref":"wxRadioButton.html#t:wxRadioButton/0","title":"wxRadioButton.wxRadioButton/0","type":"type"},{"doc":"A wxRegion represents a simple or complex region on a device context or window. This class uses reference counting and copy-on-write internally so that assignments between two instances of this class are very cheap. You can therefore use actual objects instead of pointers without efficiency problems. If an instance of this class is changed it will create its own data internally so that other instances, which previously shared the data using the reference counting, are not affected. Predefined objects (include wx.hrl): See: wxRegionIterator (not implemented in wx) wxWidgets docs: wxRegion","ref":"wxRegion.html","title":"wxRegion","type":"module"},{"doc":"Finds the Xor of this region and another region. This method can be used even if this region is invalid and has the natural behaviour in this case, i.e. makes this region equal to the given region . Return: true if successful, false otherwise. Remark: This operation creates a region that combines all of this region and the second region, except for any overlapping areas. The result is stored in this region.","ref":"wxRegion.html#Xor/2","title":"wxRegion.Xor/2","type":"function"},{"doc":"Finds the Xor of this region and another, rectangular region, specified using position and size. This method can be used even if this region is invalid and has the natural behaviour in this case, i.e. makes this region equal to the given rectangle. Return: true if successful, false otherwise. Remark: This operation creates a region that combines all of this region and the second region, except for any overlapping areas. The result is stored in this region.","ref":"wxRegion.html#Xor/5","title":"wxRegion.Xor/5","type":"function"},{"doc":"Clears the current region. The object becomes invalid, or null, after being cleared.","ref":"wxRegion.html#clear/1","title":"wxRegion.clear/1","type":"function"},{"doc":"Returns a value indicating whether the given rectangle is contained within the region. This method always returns wxOutRegion for an invalid region but may, nevertheless, be safely called in this case. Return: One of ?wxOutRegion, ?wxPartRegion or ?wxInRegion. Note: On Windows, only ?wxOutRegion and ?wxInRegion are returned; a value ?wxInRegion then indicates that all or some part of the region is contained in this region.","ref":"wxRegion.html#contains/2","title":"wxRegion.contains/2","type":"function"},{"doc":"Returns a value indicating whether the given point is contained within the region. This method always returns wxOutRegion for an invalid region but may, nevertheless, be safely called in this case. Return: The return value is one of wxOutRegion and wxInRegion .","ref":"wxRegion.html#contains/3","title":"wxRegion.contains/3","type":"function"},{"doc":"Returns a value indicating whether the given rectangle is contained within the region. This method always returns wxOutRegion for an invalid region but may, nevertheless, be safely called in this case. Return: One of ?wxOutRegion, ?wxPartRegion or ?wxInRegion. Note: On Windows, only ?wxOutRegion and ?wxInRegion are returned; a value ?wxInRegion then indicates that all or some part of the region is contained in this region.","ref":"wxRegion.html#contains/5","title":"wxRegion.contains/5","type":"function"},{"doc":"Convert the region to a black and white bitmap with the white pixels being inside the region. This method can't be used for invalid region.","ref":"wxRegion.html#convertToBitmap/1","title":"wxRegion.convertToBitmap/1","type":"function"},{"doc":"Destructor. See reference-counted object destruction for more info.","ref":"wxRegion.html#destroy/1","title":"wxRegion.destroy/1","type":"function"},{"doc":"","ref":"wxRegion.html#getBox/1","title":"wxRegion.getBox/1","type":"function"},{"doc":"Finds the intersection of this region and another region. This method always fails, i.e. returns false, if this region is invalid but may nevertheless be safely used even in this case. Return: true if successful, false otherwise. Remark: Creates the intersection of the two regions, that is, the parts which are in both regions. The result is stored in this region.","ref":"wxRegion.html#intersect/2","title":"wxRegion.intersect/2","type":"function"},{"doc":"Finds the intersection of this region and another, rectangular region, specified using position and size. This method always fails, i.e. returns false, if this region is invalid but may nevertheless be safely used even in this case. Return: true if successful, false otherwise. Remark: Creates the intersection of the two regions, that is, the parts which are in both regions. The result is stored in this region.","ref":"wxRegion.html#intersect/5","title":"wxRegion.intersect/5","type":"function"},{"doc":"Returns true if the region is empty, false otherwise. Always returns true if the region is invalid.","ref":"wxRegion.html#isEmpty/1","title":"wxRegion.isEmpty/1","type":"function"},{"doc":"Default constructor. This constructor creates an invalid, or null, object, i.e. calling IsOk() on it returns false and isEmpty/1 returns true.","ref":"wxRegion.html#new/0","title":"wxRegion.new/0","type":"function"},{"doc":"Constructs a region using a bitmap. See union/5 for more details.","ref":"wxRegion.html#new/1","title":"wxRegion.new/1","type":"function"},{"doc":"Constructs a rectangular region from the top left point and the bottom right point.","ref":"wxRegion.html#new/2","title":"wxRegion.new/2","type":"function"},{"doc":"Constructs a rectangular region with the given position and size.","ref":"wxRegion.html#new/4","title":"wxRegion.new/4","type":"function"},{"doc":"","ref":"wxRegion.html#offset/2","title":"wxRegion.offset/2","type":"function"},{"doc":"Moves the region by the specified offsets in horizontal and vertical directions. This method can't be called if the region is invalid as it doesn't make sense to offset it then. Attempts to do it will result in assert failure. Return: true if successful, false otherwise (the region is unchanged then).","ref":"wxRegion.html#offset/3","title":"wxRegion.offset/3","type":"function"},{"doc":"Subtracts a region from this region. This method always fails, i.e. returns false, if this region is invalid but may nevertheless be safely used even in this case. Return: true if successful, false otherwise. Remark: This operation combines the parts of 'this' region that are not part of the second region. The result is stored in this region.","ref":"wxRegion.html#subtract/2","title":"wxRegion.subtract/2","type":"function"},{"doc":"Finds the union of this region and another, rectangular region. This method can be used even if this region is invalid and has the natural behaviour in this case, i.e. makes this region equal to the given rectangle. Return: true if successful, false otherwise. Remark: This operation creates a region that combines all of this region and the second region. The result is stored in this region.","ref":"wxRegion.html#union/2","title":"wxRegion.union/2","type":"function"},{"doc":"","ref":"wxRegion.html#union/3","title":"wxRegion.union/3","type":"function"},{"doc":"Finds the union of this region and the non-transparent pixels of a bitmap. Colour to be treated as transparent is specified in the transColour argument, along with an optional colour tolerance value. Return: true if successful, false otherwise. Remark: This operation creates a region that combines all of this region and the second region. The result is stored in this region.","ref":"wxRegion.html#union/4","title":"wxRegion.union/4","type":"function"},{"doc":"Finds the union of this region and another, rectangular region, specified using position and size. This method can be used even if this region is invalid and has the natural behaviour in this case, i.e. makes this region equal to the given rectangle. Return: true if successful, false otherwise. Remark: This operation creates a region that combines all of this region and the second region. The result is stored in this region.","ref":"wxRegion.html#union/5","title":"wxRegion.union/5","type":"function"},{"doc":"","ref":"wxRegion.html#t:wxRegion/0","title":"wxRegion.wxRegion/0","type":"type"},{"doc":"A sash event is sent when the sash of a wxSashWindow has been dragged by the user. Remark: When a sash belonging to a sash window is dragged by the user, and then released, this event is sent to the window, where it may be processed by an event table entry in a derived class, a plug-in event handler or an ancestor class. Note that the wxSashWindow doesn't change the window's size itself. It relies on the application's event handler to do that. This is because the application may have to handle other consequences of the resize, or it may wish to veto it altogether. The event handler should look at the drag rectangle: see getDragRect/1 to see what the new size of the window would be if the resize were to be applied. It should also call getDragStatus/1 to see whether the drag was OK or out of the current allowed range. See: wxSashWindow , Overview events This class is derived (and can use functions) from: wxCommandEvent wxEvent wxWidgets docs: wxSashEvent Events Use wxEvtHandler:connect/3 with wxSashEventType to subscribe to events of this type.","ref":"wxSashEvent.html","title":"wxSashEvent","type":"module"},{"doc":"Returns the rectangle representing the new size the window would be if the resize was applied. It is up to the application to set the window size if required.","ref":"wxSashEvent.html#getDragRect/1","title":"wxSashEvent.getDragRect/1","type":"function"},{"doc":"Returns the status of the sash: one of wxSASH_STATUS_OK, wxSASH_STATUS_OUT_OF_RANGE. If the drag caused the notional bounding box of the window to flip over, for example, the drag will be out of rage.","ref":"wxSashEvent.html#getDragStatus/1","title":"wxSashEvent.getDragStatus/1","type":"function"},{"doc":"Returns the dragged edge. The return value is one of wxSASH_TOP, wxSASH_RIGHT, wxSASH_BOTTOM, wxSASH_LEFT.","ref":"wxSashEvent.html#getEdge/1","title":"wxSashEvent.getEdge/1","type":"function"},{"doc":"","ref":"wxSashEvent.html#t:wxSash/0","title":"wxSashEvent.wxSash/0","type":"type"},{"doc":"","ref":"wxSashEvent.html#t:wxSashEvent/0","title":"wxSashEvent.wxSashEvent/0","type":"type"},{"doc":"","ref":"wxSashEvent.html#t:wxSashEventType/0","title":"wxSashEvent.wxSashEventType/0","type":"type"},{"doc":"wxSashLayoutWindow responds to OnCalculateLayout events generated by wxLayoutAlgorithm . It allows the application to use simple accessors to specify how the window should be laid out, rather than having to respond to events. The fact that the class derives from wxSashWindow allows sashes to be used if required, to allow the windows to be user-resizable. The documentation for wxLayoutAlgorithm explains the purpose of this class in more detail. For the window styles see wxSashWindow . This class handles the EVT_QUERY_LAYOUT_INFO and EVT_CALCULATE_LAYOUT events for you. However, if you use sashes, see wxSashWindow for relevant event information. See also wxLayoutAlgorithm for information about the layout events. See: wxLayoutAlgorithm , wxSashWindow , Overview events This class is derived (and can use functions) from: wxSashWindow wxWindow wxEvtHandler wxWidgets docs: wxSashLayoutWindow","ref":"wxSashLayoutWindow.html","title":"wxSashLayoutWindow","type":"module"},{"doc":"","ref":"wxSashLayoutWindow.html#create/2","title":"wxSashLayoutWindow.create/2","type":"function"},{"doc":"Initializes a sash layout window, which can be a child of a frame, dialog or any other non-control window.","ref":"wxSashLayoutWindow.html#create/3","title":"wxSashLayoutWindow.create/3","type":"function"},{"doc":"Destroys the object.","ref":"wxSashLayoutWindow.html#destroy/1","title":"wxSashLayoutWindow.destroy/1","type":"function"},{"doc":"Returns the alignment of the window: one of wxLAYOUT_TOP, wxLAYOUT_LEFT, wxLAYOUT_RIGHT, wxLAYOUT_BOTTOM.","ref":"wxSashLayoutWindow.html#getAlignment/1","title":"wxSashLayoutWindow.getAlignment/1","type":"function"},{"doc":"Returns the orientation of the window: one of wxLAYOUT_HORIZONTAL, wxLAYOUT_VERTICAL.","ref":"wxSashLayoutWindow.html#getOrientation/1","title":"wxSashLayoutWindow.getOrientation/1","type":"function"},{"doc":"Default ctor.","ref":"wxSashLayoutWindow.html#new/0","title":"wxSashLayoutWindow.new/0","type":"function"},{"doc":"","ref":"wxSashLayoutWindow.html#new/1","title":"wxSashLayoutWindow.new/1","type":"function"},{"doc":"Constructs a sash layout window, which can be a child of a frame, dialog or any other non-control window.","ref":"wxSashLayoutWindow.html#new/2","title":"wxSashLayoutWindow.new/2","type":"function"},{"doc":"Sets the alignment of the window (which edge of the available parent client area the window is attached to). alignment is one of wxLAYOUT_TOP, wxLAYOUT_LEFT, wxLAYOUT_RIGHT, wxLAYOUT_BOTTOM.","ref":"wxSashLayoutWindow.html#setAlignment/2","title":"wxSashLayoutWindow.setAlignment/2","type":"function"},{"doc":"Sets the default dimensions of the window. The dimension other than the orientation will be fixed to this value, and the orientation dimension will be ignored and the window stretched to fit the available space.","ref":"wxSashLayoutWindow.html#setDefaultSize/2","title":"wxSashLayoutWindow.setDefaultSize/2","type":"function"},{"doc":"Sets the orientation of the window (the direction the window will stretch in, to fill the available parent client area). orientation is one of wxLAYOUT_HORIZONTAL, wxLAYOUT_VERTICAL.","ref":"wxSashLayoutWindow.html#setOrientation/2","title":"wxSashLayoutWindow.setOrientation/2","type":"function"},{"doc":"","ref":"wxSashLayoutWindow.html#t:wxSashLayoutWindow/0","title":"wxSashLayoutWindow.wxSashLayoutWindow/0","type":"type"},{"doc":"wxSashWindow allows any of its edges to have a sash which can be dragged to resize the window. The actual content window will be created by the application as a child of wxSashWindow . The window (or an ancestor) will be notified of a drag via a wxSashEvent notification. Styles This class supports the following styles: See: wxSashEvent , wxSashLayoutWindow , Overview events This class is derived (and can use functions) from: wxWindow wxEvtHandler wxWidgets docs: wxSashWindow Events Event types emitted from this class: sash_dragged","ref":"wxSashWindow.html","title":"wxSashWindow","type":"module"},{"doc":"Destructor.","ref":"wxSashWindow.html#destroy/1","title":"wxSashWindow.destroy/1","type":"function"},{"doc":"Gets the maximum window size in the x direction.","ref":"wxSashWindow.html#getMaximumSizeX/1","title":"wxSashWindow.getMaximumSizeX/1","type":"function"},{"doc":"Gets the maximum window size in the y direction.","ref":"wxSashWindow.html#getMaximumSizeY/1","title":"wxSashWindow.getMaximumSizeY/1","type":"function"},{"doc":"Gets the minimum window size in the x direction.","ref":"wxSashWindow.html#getMinimumSizeX/1","title":"wxSashWindow.getMinimumSizeX/1","type":"function"},{"doc":"Gets the minimum window size in the y direction.","ref":"wxSashWindow.html#getMinimumSizeY/1","title":"wxSashWindow.getMinimumSizeY/1","type":"function"},{"doc":"Returns true if a sash is visible on the given edge, false otherwise. See: setSashVisible/3","ref":"wxSashWindow.html#getSashVisible/2","title":"wxSashWindow.getSashVisible/2","type":"function"},{"doc":"Default ctor.","ref":"wxSashWindow.html#new/0","title":"wxSashWindow.new/0","type":"function"},{"doc":"","ref":"wxSashWindow.html#new/1","title":"wxSashWindow.new/1","type":"function"},{"doc":"Constructs a sash window, which can be a child of a frame, dialog or any other non-control window.","ref":"wxSashWindow.html#new/2","title":"wxSashWindow.new/2","type":"function"},{"doc":"Sets the maximum window size in the x direction.","ref":"wxSashWindow.html#setMaximumSizeX/2","title":"wxSashWindow.setMaximumSizeX/2","type":"function"},{"doc":"Sets the maximum window size in the y direction.","ref":"wxSashWindow.html#setMaximumSizeY/2","title":"wxSashWindow.setMaximumSizeY/2","type":"function"},{"doc":"Sets the minimum window size in the x direction.","ref":"wxSashWindow.html#setMinimumSizeX/2","title":"wxSashWindow.setMinimumSizeX/2","type":"function"},{"doc":"Sets the minimum window size in the y direction.","ref":"wxSashWindow.html#setMinimumSizeY/2","title":"wxSashWindow.setMinimumSizeY/2","type":"function"},{"doc":"Call this function to make a sash visible or invisible on a particular edge. See: getSashVisible/2","ref":"wxSashWindow.html#setSashVisible/3","title":"wxSashWindow.setSashVisible/3","type":"function"},{"doc":"","ref":"wxSashWindow.html#t:wxSashWindow/0","title":"wxSashWindow.wxSashWindow/0","type":"type"},{"doc":"A wxScreenDC can be used to paint on the screen. This should normally be constructed as a temporary stack object; don't store a wxScreenDC object. When using multiple monitors, wxScreenDC corresponds to the entire virtual screen composed of all of them. Notice that coordinates on wxScreenDC can be negative in this case, see wxDisplay:getGeometry/1 for more. See: wxDC , wxMemoryDC , wxPaintDC , wxClientDC , wxWindowDC This class is derived (and can use functions) from: wxDC wxWidgets docs: wxScreenDC","ref":"wxScreenDC.html","title":"wxScreenDC","type":"module"},{"doc":"Destroys the object.","ref":"wxScreenDC.html#destroy/1","title":"wxScreenDC.destroy/1","type":"function"},{"doc":"Constructor.","ref":"wxScreenDC.html#new/0","title":"wxScreenDC.new/0","type":"function"},{"doc":"","ref":"wxScreenDC.html#t:wxScreenDC/0","title":"wxScreenDC.wxScreenDC/0","type":"type"},{"doc":"A wxScrollBar is a control that represents a horizontal or vertical scrollbar. It is distinct from the two scrollbars that some windows provide automatically, but the two types of scrollbar share the way events are received. Remark: A scrollbar has the following main attributes: range, thumb size, page size, and position. The range is the total number of units associated with the view represented by the scrollbar. For a table with 15 columns, the range would be 15. The thumb size is the number of units that are currently visible. For the table example, the window might be sized so that only 5 columns are currently visible, in which case the application would set the thumb size to 5. When the thumb size becomes the same as or greater than the range, the scrollbar will be automatically hidden on most platforms. The page size is the number of units that the scrollbar should scroll by, when 'paging' through the data. This value is normally the same as the thumb size length, because it is natural to assume that the visible window size defines a page. The scrollbar position is the current thumb position. Most applications will find it convenient to provide a function called AdjustScrollbars() which can be called initially, from an OnSize event handler, and whenever the application data changes in size. It will adjust the view, object and page size according to the size of the window and the size of the data. Styles This class supports the following styles: The difference between EVT_SCROLL_THUMBRELEASE and EVT_SCROLL_CHANGED The EVT_SCROLL_THUMBRELEASE event is only emitted when actually dragging the thumb using the mouse and releasing it (This EVT_SCROLL_THUMBRELEASE event is also followed by an EVT_SCROLL_CHANGED event). The EVT_SCROLL_CHANGED event also occurs when using the keyboard to change the thumb position, and when clicking next to the thumb (In all these cases the EVT_SCROLL_THUMBRELEASE event does not happen). In short, the EVT_SCROLL_CHANGED event is triggered when scrolling/moving has finished independently of the way it had started. Please see the page_samples_widgets (&quot;Slider&quot; page) to see the difference between EVT_SCROLL_THUMBRELEASE and EVT_SCROLL_CHANGED in action. See: Overview scrolling , Overview events , wxScrolled (not implemented in wx) This class is derived (and can use functions) from: wxControl wxWindow wxEvtHandler wxWidgets docs: wxScrollBar Events Event types emitted from this class: scroll_top , scroll_bottom , scroll_lineup , scroll_linedown , scroll_pageup , scroll_pagedown , scroll_thumbtrack , scroll_thumbrelease , scroll_changed , scroll_top , scroll_bottom , scroll_lineup , scroll_linedown , scroll_pageup , scroll_pagedown , scroll_thumbtrack , scroll_thumbrelease , scroll_changed","ref":"wxScrollBar.html","title":"wxScrollBar","type":"module"},{"doc":"","ref":"wxScrollBar.html#create/3","title":"wxScrollBar.create/3","type":"function"},{"doc":"Scrollbar creation function called by the scrollbar constructor. See new/3 for details.","ref":"wxScrollBar.html#create/4","title":"wxScrollBar.create/4","type":"function"},{"doc":"Destructor, destroying the scrollbar.","ref":"wxScrollBar.html#destroy/1","title":"wxScrollBar.destroy/1","type":"function"},{"doc":"Returns the page size of the scrollbar. This is the number of scroll units that will be scrolled when the user pages up or down. Often it is the same as the thumb size. See: setScrollbar/6","ref":"wxScrollBar.html#getPageSize/1","title":"wxScrollBar.getPageSize/1","type":"function"},{"doc":"Returns the length of the scrollbar. See: setScrollbar/6","ref":"wxScrollBar.html#getRange/1","title":"wxScrollBar.getRange/1","type":"function"},{"doc":"Returns the current position of the scrollbar thumb. See: setThumbPosition/2","ref":"wxScrollBar.html#getThumbPosition/1","title":"wxScrollBar.getThumbPosition/1","type":"function"},{"doc":"Returns the thumb or 'view' size. See: setScrollbar/6","ref":"wxScrollBar.html#getThumbSize/1","title":"wxScrollBar.getThumbSize/1","type":"function"},{"doc":"Default constructor.","ref":"wxScrollBar.html#new/0","title":"wxScrollBar.new/0","type":"function"},{"doc":"","ref":"wxScrollBar.html#new/2","title":"wxScrollBar.new/2","type":"function"},{"doc":"Constructor, creating and showing a scrollbar. See: create/4 , wxValidator (not implemented in wx)","ref":"wxScrollBar.html#new/3","title":"wxScrollBar.new/3","type":"function"},{"doc":"","ref":"wxScrollBar.html#setScrollbar/5","title":"wxScrollBar.setScrollbar/5","type":"function"},{"doc":"Sets the scrollbar properties. Remark: Let's say you wish to display 50 lines of text, using the same font. The window is sized so that you can only see 16 lines at a time. You would use: The page size is 1 less than the thumb size so that the last line of the previous page will be visible on the next page, to help orient the user. Note that with the window at this size, the thumb position can never go above 50 minus 16, or 34. You can determine how many lines are currently visible by dividing the current view size by the character height in pixels. When defining your own scrollbar behaviour, you will always need to recalculate the scrollbar settings when the window size changes. You could therefore put your scrollbar calculations and setScrollbar/6 call into a function named AdjustScrollbars, which can be called initially and also from a wxSizeEvent event handler function.","ref":"wxScrollBar.html#setScrollbar/6","title":"wxScrollBar.setScrollbar/6","type":"function"},{"doc":"Sets the position of the scrollbar. See: getThumbPosition/1","ref":"wxScrollBar.html#setThumbPosition/2","title":"wxScrollBar.setThumbPosition/2","type":"function"},{"doc":"","ref":"wxScrollBar.html#t:wxScrollBar/0","title":"wxScrollBar.wxScrollBar/0","type":"type"},{"doc":"A scroll event holds information about events sent from stand-alone scrollbars (see wxScrollBar ) and sliders (see wxSlider ). Note that scrolled windows send the wxScrollWinEvent which does not derive from wxCommandEvent , but from wxEvent directly - don't confuse these two kinds of events and use the event table macros mentioned below only for the scrollbar-like controls. The difference between EVT_SCROLL_THUMBRELEASE and EVT_SCROLL_CHANGED The EVT_SCROLL_THUMBRELEASE event is only emitted when actually dragging the thumb using the mouse and releasing it (This EVT_SCROLL_THUMBRELEASE event is also followed by an EVT_SCROLL_CHANGED event). The EVT_SCROLL_CHANGED event also occurs when using the keyboard to change the thumb position, and when clicking next to the thumb (In all these cases the EVT_SCROLL_THUMBRELEASE event does not happen). In short, the EVT_SCROLL_CHANGED event is triggered when scrolling/ moving has finished independently of the way it had started. Please see the page_samples_widgets (&quot;Slider&quot; page) to see the difference between EVT_SCROLL_THUMBRELEASE and EVT_SCROLL_CHANGED in action. Remark: Note that unless specifying a scroll control identifier, you will need to test for scrollbar orientation with getOrientation/1 , since horizontal and vertical scroll events are processed using the same event handler. See: wxScrollBar , wxSlider , wxSpinButton , wxScrollWinEvent , Overview events This class is derived (and can use functions) from: wxCommandEvent wxEvent wxWidgets docs: wxScrollEvent Events Use wxEvtHandler:connect/3 with wxScrollEventType to subscribe to events of this type.","ref":"wxScrollEvent.html","title":"wxScrollEvent","type":"module"},{"doc":"Returns wxHORIZONTAL or wxVERTICAL, depending on the orientation of the scrollbar.","ref":"wxScrollEvent.html#getOrientation/1","title":"wxScrollEvent.getOrientation/1","type":"function"},{"doc":"Returns the position of the scrollbar.","ref":"wxScrollEvent.html#getPosition/1","title":"wxScrollEvent.getPosition/1","type":"function"},{"doc":"","ref":"wxScrollEvent.html#t:wxScroll/0","title":"wxScrollEvent.wxScroll/0","type":"type"},{"doc":"","ref":"wxScrollEvent.html#t:wxScrollEvent/0","title":"wxScrollEvent.wxScrollEvent/0","type":"type"},{"doc":"","ref":"wxScrollEvent.html#t:wxScrollEventType/0","title":"wxScrollEvent.wxScrollEventType/0","type":"type"},{"doc":"A scroll event holds information about events sent from scrolling windows. Note that you can use the EVT_SCROLLWIN* macros for intercepting scroll window events from the receiving window. See: wxScrollEvent , Overview events This class is derived (and can use functions) from: wxEvent wxWidgets docs: wxScrollWinEvent Events Use wxEvtHandler:connect/3 with wxScrollWinEventType to subscribe to events of this type.","ref":"wxScrollWinEvent.html","title":"wxScrollWinEvent","type":"module"},{"doc":"Returns wxHORIZONTAL or wxVERTICAL, depending on the orientation of the scrollbar.","ref":"wxScrollWinEvent.html#getOrientation/1","title":"wxScrollWinEvent.getOrientation/1","type":"function"},{"doc":"Returns the position of the scrollbar for the thumb track and release events. Note that this field can't be used for the other events, you need to query the window itself for the current position in that case.","ref":"wxScrollWinEvent.html#getPosition/1","title":"wxScrollWinEvent.getPosition/1","type":"function"},{"doc":"","ref":"wxScrollWinEvent.html#t:wxScrollWin/0","title":"wxScrollWinEvent.wxScrollWin/0","type":"type"},{"doc":"","ref":"wxScrollWinEvent.html#t:wxScrollWinEvent/0","title":"wxScrollWinEvent.wxScrollWinEvent/0","type":"type"},{"doc":"","ref":"wxScrollWinEvent.html#t:wxScrollWinEventType/0","title":"wxScrollWinEvent.wxScrollWinEventType/0","type":"type"},{"doc":"There are two commonly used (but not the only possible!) specializations of this class: Note: See wxScrolled::Create() (not implemented in wx) if you want to use wxScrolled (not implemented in wx) with a custom class. Starting from version 2.4 of wxWidgets, there are several ways to use a ?wxScrolledWindow (and now wxScrolled (not implemented in wx)). In particular, there are three ways to set the size of the scrolling area: One way is to set the scrollbars directly using a call to setScrollbars/6 . This is the way it used to be in any previous version of wxWidgets and it will be kept for backwards compatibility. An additional method of manual control, which requires a little less computation of your own, is to set the total size of the scrolling area by calling either wxWindow:setVirtualSize/3 , or wxWindow:fitInside/1 , and setting the scrolling increments for it by calling setScrollRate/3 . Scrolling in some orientation is enabled by setting a non-zero increment for it. The most automatic and newest way is to simply let sizers determine the scrolling area. This is now the default when you set an interior sizer into a wxScrolled (not implemented in wx) with wxWindow:setSizer/3 . The scrolling area will be set to the size requested by the sizer and the scrollbars will be assigned for each orientation according to the need for them and the scrolling increment set by setScrollRate/3 . As above, scrolling is only enabled in orientations with a non-zero increment. You can influence the minimum size of the scrolled area controlled by a sizer by calling wxWindow::SetVirtualSizeHints(). (Calling setScrollbars/6 has analogous effects in wxWidgets 2.4 - in later versions it may not continue to override the sizer.) Note that if maximum size hints are still supported by wxWindow::SetVirtualSizeHints(), use them at your own dire risk. They may or may not have been removed for 2.4, but it really only makes sense to set minimum size hints here. We should probably replace wxWindow::SetVirtualSizeHints() with wxWindow::SetMinVirtualSize() or similar and remove it entirely in future. As with all windows, an application can draw onto a wxScrolled (not implemented in wx) using a device context. You have the option of handling the OnPaint handler or overriding the wxScrolled::OnDraw() (not implemented in wx) function, which is passed a pre-scrolled device context (prepared by doPrepareDC/2 ). If you don't wish to calculate your own scrolling, you must call doPrepareDC/2 when not drawing from within OnDraw() (not implemented in wx), to set the device origin for the device context according to the current scroll position. A wxScrolled (not implemented in wx) will normally scroll itself and therefore its child windows as well. It might however be desired to scroll a different window than itself: e.g. when designing a spreadsheet, you will normally only have to scroll the (usually white) cell area, whereas the (usually grey) label area will scroll very differently. For this special purpose, you can call setTargetWindow/2 which means that pressing the scrollbars will scroll a different window. Note that the underlying system knows nothing about scrolling coordinates, so that all system functions (mouse events, expose events, refresh calls etc) as well as the position of subwindows are relative to the &quot;physical&quot; origin of the scrolled window. If the user insert a child window at position (10,10) and scrolls the window down 100 pixels (moving the child window out of the visible area), the child window will report a position of (10,-90). Styles This class supports the following styles: Note: Don't confuse wxScrollWinEvents generated by this class with wxScrollEvent objects generated by wxScrollBar and wxSlider . Remark: Use wxScrolled (not implemented in wx) for applications where the user scrolls by a fixed amount, and where a 'page' can be interpreted to be the current visible portion of the window. For more sophisticated applications, use the wxScrolled (not implemented in wx) implementation as a guide to build your own scroll behaviour or use wxVScrolledWindow (not implemented in wx) or its variants. Since: The wxScrolled (not implemented in wx) template exists since version 2.9.0. In older versions, only ?wxScrolledWindow (equivalent of wxScrolled&lt;wxPanel&gt;) was available. See: wxScrollBar , wxClientDC , wxPaintDC , wxVScrolledWindow (not implemented in wx), wxHScrolledWindow (not implemented in wx), wxHVScrolledWindow (not implemented in wx) This class is derived (and can use functions) from: wxPanel wxWindow wxEvtHandler wxWidgets docs: wxScrolledWindow Events Event types emitted from this class: scrollwin_top , scrollwin_bottom , scrollwin_lineup , scrollwin_linedown , scrollwin_pageup , scrollwin_pagedown , scrollwin_thumbtrack , scrollwin_thumbrelease","ref":"wxScrolledWindow.html","title":"wxScrolledWindow","type":"module"},{"doc":"","ref":"wxScrolledWindow.html#calcScrolledPosition/2","title":"wxScrolledWindow.calcScrolledPosition/2","type":"function"},{"doc":"Translates the logical coordinates to the device ones. For example, if a window is scrolled 10 pixels to the bottom, the device coordinates of the origin are (0, 0) (as always), but the logical coordinates are (0, 10) and so the call to CalcScrolledPosition(0, 10, xx, yy) will return 0 in yy. See: calcUnscrolledPosition/3","ref":"wxScrolledWindow.html#calcScrolledPosition/3","title":"wxScrolledWindow.calcScrolledPosition/3","type":"function"},{"doc":"","ref":"wxScrolledWindow.html#calcUnscrolledPosition/2","title":"wxScrolledWindow.calcUnscrolledPosition/2","type":"function"},{"doc":"Translates the device coordinates to the logical ones. For example, if a window is scrolled 10 pixels to the bottom, the device coordinates of the origin are (0, 0) (as always), but the logical coordinates are (0, 10) and so the call to CalcUnscrolledPosition(0, 0, xx, yy) will return 10 in yy. See: calcScrolledPosition/3","ref":"wxScrolledWindow.html#calcUnscrolledPosition/3","title":"wxScrolledWindow.calcUnscrolledPosition/3","type":"function"},{"doc":"Destroys the object.","ref":"wxScrolledWindow.html#destroy/1","title":"wxScrolledWindow.destroy/1","type":"function"},{"doc":"Call this function to prepare the device context for drawing a scrolled image. It sets the device origin according to the current scroll position. doPrepareDC/2 is called automatically within the default wxEVT_PAINT event handler, so your OnDraw() (not implemented in wx) override will be passed an already 'pre-scrolled' device context. However, if you wish to draw from outside of OnDraw() (not implemented in wx) (e.g. from your own wxEVT_PAINT handler), you must call this function yourself. For example: Notice that the function sets the origin by moving it relatively to the current origin position, so you shouldn't change the origin before calling doPrepareDC/2 or, if you do, reset it to (0, 0) later. If you call doPrepareDC/2 immediately after device context creation, as in the example above, this problem doesn't arise, of course, so it is customary to do it like this.","ref":"wxScrolledWindow.html#doPrepareDC/2","title":"wxScrolledWindow.doPrepareDC/2","type":"function"},{"doc":"Enable or disable use of wxWindow:scrollWindow/4 for scrolling. By default, when a scrolled window is logically scrolled, wxWindow:scrollWindow/4 is called on the underlying window which scrolls the window contents and only invalidates the part of the window newly brought into view. If false is passed as an argument, then this &quot;physical scrolling&quot; is disabled and the window is entirely invalidated whenever it is scrolled by calling wxWindow:refresh/2 . It should be rarely necessary to disable physical scrolling, so this method shouldn't be called in normal circumstances.","ref":"wxScrolledWindow.html#enableScrolling/3","title":"wxScrolledWindow.enableScrolling/3","type":"function"},{"doc":"Get the number of pixels per scroll unit (line), in each direction, as set by setScrollbars/6 . A value of zero indicates no scrolling in that direction. See: setScrollbars/6 , wxWindow:getVirtualSize/1","ref":"wxScrolledWindow.html#getScrollPixelsPerUnit/1","title":"wxScrolledWindow.getScrollPixelsPerUnit/1","type":"function"},{"doc":"This is a simple overload of GetViewStart(int*,int*); see that function for more info.","ref":"wxScrolledWindow.html#getViewStart/1","title":"wxScrolledWindow.getViewStart/1","type":"function"},{"doc":"Default constructor.","ref":"wxScrolledWindow.html#new/0","title":"wxScrolledWindow.new/0","type":"function"},{"doc":"","ref":"wxScrolledWindow.html#new/1","title":"wxScrolledWindow.new/1","type":"function"},{"doc":"Constructor. Remark: The window is initially created without visible scrollbars. Call setScrollbars/6 to specify how big the virtual window size should be.","ref":"wxScrolledWindow.html#new/2","title":"wxScrolledWindow.new/2","type":"function"},{"doc":"This function is for backwards compatibility only and simply calls doPrepareDC/2 now. Notice that it is not called by the default paint event handle ( doPrepareDC/2 is), so overriding this method in your derived class is useless.","ref":"wxScrolledWindow.html#prepareDC/2","title":"wxScrolledWindow.prepareDC/2","type":"function"},{"doc":"This is an overload of scroll/3 ; see that function for more info.","ref":"wxScrolledWindow.html#scroll/2","title":"wxScrolledWindow.scroll/2","type":"function"},{"doc":"Scrolls a window so the view start is at the given point. Remark: The positions are in scroll units, not pixels, so to convert to pixels you will have to multiply by the number of pixels per scroll increment. If either parameter is ?wxDefaultCoord (-1), that position will be ignored (no change in that direction). See: setScrollbars/6 , getScrollPixelsPerUnit/1","ref":"wxScrolledWindow.html#scroll/3","title":"wxScrolledWindow.scroll/3","type":"function"},{"doc":"Set the horizontal and vertical scrolling increment only. See the pixelsPerUnit parameter in setScrollbars/6 .","ref":"wxScrolledWindow.html#setScrollRate/3","title":"wxScrolledWindow.setScrollRate/3","type":"function"},{"doc":"","ref":"wxScrolledWindow.html#setScrollbars/5","title":"wxScrolledWindow.setScrollbars/5","type":"function"},{"doc":"Sets up vertical and/or horizontal scrollbars. The first pair of parameters give the number of pixels per 'scroll step', i.e. amount moved when the up or down scroll arrows are pressed. The second pair gives the length of scrollbar in scroll steps, which sets the size of the virtual window. xPos and yPos optionally specify a position to scroll to immediately. For example, the following gives a window horizontal and vertical scrollbars with 20 pixels per scroll step, and a size of 50 steps (1000 pixels) in each direction: wxScrolled (not implemented in wx) manages the page size itself, using the current client window size as the page size. Note that for more sophisticated scrolling applications, for example where scroll steps may be variable according to the position in the document, it will be necessary to derive a new class from wxWindow , overriding OnSize() and adjusting the scrollbars appropriately. See: wxWindow:setVirtualSize/3","ref":"wxScrolledWindow.html#setScrollbars/6","title":"wxScrolledWindow.setScrollbars/6","type":"function"},{"doc":"Call this function to tell wxScrolled (not implemented in wx) to perform the actual scrolling on a different window (and not on itself). This method is useful when only a part of the window should be scrolled. A typical example is a control consisting of a fixed header and the scrollable contents window: the scrollbars are attached to the main window itself, hence it, and not the contents window must be derived from wxScrolled (not implemented in wx), but only the contents window scrolls when the scrollbars are used. To implement such setup, you need to call this method with the contents window as argument. Notice that if this method is used, GetSizeAvailableForScrollTarget() (not implemented in wx) method must be overridden.","ref":"wxScrolledWindow.html#setTargetWindow/2","title":"wxScrolledWindow.setTargetWindow/2","type":"function"},{"doc":"","ref":"wxScrolledWindow.html#t:wxScrolledWindow/0","title":"wxScrolledWindow.wxScrolledWindow/0","type":"type"},{"doc":"A wxSetCursorEvent is generated from wxWindow when the mouse cursor is about to be set as a result of mouse motion. This event gives the application the chance to perform specific mouse cursor processing based on the current position of the mouse within the window. Use setCursor/2 to specify the cursor you want to be displayed. See: wx_misc:setCursor/1 , wxWindow:setCursor/2 This class is derived (and can use functions) from: wxEvent wxWidgets docs: wxSetCursorEvent Events Use wxEvtHandler:connect/3 with wxSetCursorEventType to subscribe to events of this type.","ref":"wxSetCursorEvent.html","title":"wxSetCursorEvent","type":"module"},{"doc":"Returns a reference to the cursor specified by this event.","ref":"wxSetCursorEvent.html#getCursor/1","title":"wxSetCursorEvent.getCursor/1","type":"function"},{"doc":"Returns the X coordinate of the mouse in client coordinates.","ref":"wxSetCursorEvent.html#getX/1","title":"wxSetCursorEvent.getX/1","type":"function"},{"doc":"Returns the Y coordinate of the mouse in client coordinates.","ref":"wxSetCursorEvent.html#getY/1","title":"wxSetCursorEvent.getY/1","type":"function"},{"doc":"Returns true if the cursor specified by this event is a valid cursor. Remark: You cannot specify wxNullCursor with this event, as it is not considered a valid cursor.","ref":"wxSetCursorEvent.html#hasCursor/1","title":"wxSetCursorEvent.hasCursor/1","type":"function"},{"doc":"Sets the cursor associated with this event.","ref":"wxSetCursorEvent.html#setCursor/2","title":"wxSetCursorEvent.setCursor/2","type":"function"},{"doc":"","ref":"wxSetCursorEvent.html#t:wxSetCursor/0","title":"wxSetCursorEvent.wxSetCursor/0","type":"type"},{"doc":"","ref":"wxSetCursorEvent.html#t:wxSetCursorEvent/0","title":"wxSetCursorEvent.wxSetCursorEvent/0","type":"type"},{"doc":"","ref":"wxSetCursorEvent.html#t:wxSetCursorEventType/0","title":"wxSetCursorEvent.wxSetCursorEventType/0","type":"type"},{"doc":"An event being sent when the window is shown or hidden. The event is triggered by calls to wxWindow:show/2 , and any user action showing a previously hidden window or vice versa (if allowed by the current platform and/or window manager). Notice that the event is not triggered when the application is iconized (minimized) or restored under wxMSW. See: Overview events , wxWindow:show/2 , wxWindow:isShown/1 This class is derived (and can use functions) from: wxEvent wxWidgets docs: wxShowEvent Events Use wxEvtHandler:connect/3 with wxShowEventType to subscribe to events of this type.","ref":"wxShowEvent.html","title":"wxShowEvent","type":"module"},{"doc":"Return true if the window has been shown, false if it has been hidden.","ref":"wxShowEvent.html#isShown/1","title":"wxShowEvent.isShown/1","type":"function"},{"doc":"Set whether the windows was shown or hidden.","ref":"wxShowEvent.html#setShow/2","title":"wxShowEvent.setShow/2","type":"function"},{"doc":"","ref":"wxShowEvent.html#t:wxShow/0","title":"wxShowEvent.wxShow/0","type":"type"},{"doc":"","ref":"wxShowEvent.html#t:wxShowEvent/0","title":"wxShowEvent.wxShowEvent/0","type":"type"},{"doc":"","ref":"wxShowEvent.html#t:wxShowEventType/0","title":"wxShowEvent.wxShowEventType/0","type":"type"},{"doc":"This class represents a dialog that shows a list of strings, and allows the user to select one. Double-clicking on a list item is equivalent to single-clicking and then pressing OK. Styles This class supports the following styles: See: Overview cmndlg , wxMultiChoiceDialog This class is derived (and can use functions) from: wxDialog wxTopLevelWindow wxWindow wxEvtHandler wxWidgets docs: wxSingleChoiceDialog","ref":"wxSingleChoiceDialog.html","title":"wxSingleChoiceDialog","type":"module"},{"doc":"Destroys the object.","ref":"wxSingleChoiceDialog.html#destroy/1","title":"wxSingleChoiceDialog.destroy/1","type":"function"},{"doc":"Returns the index of selected item.","ref":"wxSingleChoiceDialog.html#getSelection/1","title":"wxSingleChoiceDialog.getSelection/1","type":"function"},{"doc":"Returns the selected string.","ref":"wxSingleChoiceDialog.html#getStringSelection/1","title":"wxSingleChoiceDialog.getStringSelection/1","type":"function"},{"doc":"","ref":"wxSingleChoiceDialog.html#new/4","title":"wxSingleChoiceDialog.new/4","type":"function"},{"doc":"Constructor, taking an array of wxString (not implemented in wx) choices and optional client data. Remark: Use wxDialog:showModal/1 to show the dialog.","ref":"wxSingleChoiceDialog.html#new/5","title":"wxSingleChoiceDialog.new/5","type":"function"},{"doc":"Sets the index of the initially selected item.","ref":"wxSingleChoiceDialog.html#setSelection/2","title":"wxSingleChoiceDialog.setSelection/2","type":"function"},{"doc":"","ref":"wxSingleChoiceDialog.html#t:wxSingleChoiceDialog/0","title":"wxSingleChoiceDialog.wxSingleChoiceDialog/0","type":"type"},{"doc":"A size event holds information about size change events of wxWindow . The EVT_SIZE handler function will be called when the window has been resized. You may wish to use this for frames to resize their child windows as appropriate. Note that the size passed is of the whole window: call wxWindow:getClientSize/1 for the area which may be used by the application. When a window is resized, usually only a small part of the window is damaged and you may only need to repaint that area. However, if your drawing depends on the size of the window, you may need to clear the DC explicitly and repaint the whole window. In which case, you may need to call wxWindow:refresh/2 to invalidate the entire window. Important : Sizers ( see overview_sizer ) rely on size events to function correctly. Therefore, in a sizer-based layout, do not forget to call Skip on all size events you catch (and don't catch size events at all when you don't need to). See: {Width,Height}, Overview events This class is derived (and can use functions) from: wxEvent wxWidgets docs: wxSizeEvent Events Use wxEvtHandler:connect/3 with wxSizeEventType to subscribe to events of this type.","ref":"wxSizeEvent.html","title":"wxSizeEvent","type":"module"},{"doc":"","ref":"wxSizeEvent.html#getRect/1","title":"wxSizeEvent.getRect/1","type":"function"},{"doc":"Returns the entire size of the window generating the size change event. This is the new total size of the window, i.e. the same size as would be returned by wxWindow:getSize/1 if it were called now. Use wxWindow:getClientSize/1 if you catch this event in a top level window such as wxFrame to find the size available for the window contents.","ref":"wxSizeEvent.html#getSize/1","title":"wxSizeEvent.getSize/1","type":"function"},{"doc":"","ref":"wxSizeEvent.html#t:wxSize/0","title":"wxSizeEvent.wxSize/0","type":"type"},{"doc":"","ref":"wxSizeEvent.html#t:wxSizeEvent/0","title":"wxSizeEvent.wxSizeEvent/0","type":"type"},{"doc":"","ref":"wxSizeEvent.html#t:wxSizeEventType/0","title":"wxSizeEvent.wxSizeEventType/0","type":"type"},{"doc":"wxSizer is the abstract base class used for laying out subwindows in a window. You cannot use wxSizer directly; instead, you will have to use one of the sizer classes derived from it. Currently there are wxBoxSizer , wxStaticBoxSizer , wxGridSizer , wxFlexGridSizer , wxWrapSizer (not implemented in wx) and wxGridBagSizer . The layout algorithm used by sizers in wxWidgets is closely related to layout in other GUI toolkits, such as Java's AWT, the GTK toolkit or the Qt toolkit. It is based upon the idea of the individual subwindows reporting their minimal required size and their ability to get stretched if the size of the parent window has changed. This will most often mean that the programmer does not set the original size of a dialog in the beginning, rather the dialog will be assigned a sizer and this sizer will be queried about the recommended size. The sizer in turn will query its children, which can be normal windows, empty space or other sizers, so that a hierarchy of sizers can be constructed. Note that wxSizer does not derive from wxWindow and thus does not interfere with tab ordering and requires very little resources compared to a real window on screen. What makes sizers so well fitted for use in wxWidgets is the fact that every control reports its own minimal size and the algorithm can handle differences in font sizes or different window (dialog item) sizes on different platforms without problems. If e.g. the standard font as well as the overall design of Motif widgets requires more space than on Windows, the initial dialog size will automatically be bigger on Motif than on Windows. Sizers may also be used to control the layout of custom drawn items on the window. The add/4 , insert/5 , and prepend/4 functions return a pointer to the newly added wxSizerItem . Just add empty space of the desired size and attributes, and then use the wxSizerItem:getRect/1 method to determine where the drawing operations should take place. Please notice that sizers, like child windows, are owned by the library and will be deleted by it which implies that they must be allocated on the heap. However if you create a sizer and do not add it to another sizer or window, the library wouldn't be able to delete such an orphan sizer and in this, and only this, case it should be deleted explicitly. wxSizer flags The &quot;flag&quot; argument accepted by wxSizerItem constructors and other functions, e.g. add/4 , is an OR-combination of the following flags. Two main behaviours are defined using these flags. One is the border around a window: the border parameter determines the border width whereas the flags given here determine which side(s) of the item that the border will be added. The other flags determine how the sizer item behaves when the space allotted to the sizer changes, and is somewhat dependent on the specific kind of sizer used. See: Overview sizer wxWidgets docs: wxSizer","ref":"wxSizer.html","title":"wxSizer","type":"module"},{"doc":"","ref":"wxSizer.html#add/2","title":"wxSizer.add/2","type":"function"},{"doc":"Appends a child to the sizer. wxSizer itself is an abstract class, but the parameters are equivalent in the derived classes that you will instantiate to use it so they are described here:","ref":"wxSizer.html#add/3","title":"wxSizer.add/3","type":"function"},{"doc":"Appends a spacer child to the sizer.","ref":"wxSizer.html#add/4","title":"wxSizer.add/4","type":"function"},{"doc":"This base function adds non-stretchable space to both the horizontal and vertical orientation of the sizer. More readable way of calling: See: addSpacer/2","ref":"wxSizer.html#addSpacer/2","title":"wxSizer.addSpacer/2","type":"function"},{"doc":"","ref":"wxSizer.html#addStretchSpacer/1","title":"wxSizer.addStretchSpacer/1","type":"function"},{"doc":"Adds stretchable space to the sizer. More readable way of calling:","ref":"wxSizer.html#addStretchSpacer/2","title":"wxSizer.addStretchSpacer/2","type":"function"},{"doc":"This method is abstract and has to be overwritten by any derived class. Here, the sizer will do the actual calculation of its children's minimal sizes.","ref":"wxSizer.html#calcMin/1","title":"wxSizer.calcMin/1","type":"function"},{"doc":"","ref":"wxSizer.html#clear/1","title":"wxSizer.clear/1","type":"function"},{"doc":"Detaches all children from the sizer. If delete_windows is true then child windows will also be deleted. Notice that child sizers are always deleted, as a general consequence of the principle that sizers own their sizer children, but don't own their window children (because they are already owned by their parent windows).","ref":"wxSizer.html#clear/2","title":"wxSizer.clear/2","type":"function"},{"doc":"Detach a item at position index from the sizer without destroying it. This method does not cause any layout or resizing to take place, call layout/1 to update the layout &quot;on screen&quot; after detaching a child from the sizer. Returns true if the child item was found and detached, false otherwise. See: remove/2","ref":"wxSizer.html#detach/2","title":"wxSizer.detach/2","type":"function"},{"doc":"Tell the sizer to resize the window so that its client area matches the sizer's minimal size ( ComputeFittingClientSize() (not implemented in wx) is called to determine it). This is commonly done in the constructor of the window itself, see sample in the description of wxBoxSizer . Return: The new window size. See: ComputeFittingClientSize() (not implemented in wx), ComputeFittingWindowSize() (not implemented in wx)","ref":"wxSizer.html#fit/2","title":"wxSizer.fit/2","type":"function"},{"doc":"Tell the sizer to resize the virtual size of the window to match the sizer's minimal size. This will not alter the on screen size of the window, but may cause the addition/removal/alteration of scrollbars required to view the virtual area in windows which manage it. See: wxScrolledWindow:setScrollbars/6 , setVirtualSizeHints/2","ref":"wxSizer.html#fitInside/2","title":"wxSizer.fitInside/2","type":"function"},{"doc":"","ref":"wxSizer.html#getChildren/1","title":"wxSizer.getChildren/1","type":"function"},{"doc":"Finds wxSizerItem which is located in the sizer at position index . Use parameter recursive to search in subsizers too. Returns pointer to item or NULL.","ref":"wxSizer.html#getItem/2","title":"wxSizer.getItem/2","type":"function"},{"doc":"Finds wxSizerItem which holds the given window . Use parameter recursive to search in subsizers too. Returns pointer to item or NULL.","ref":"wxSizer.html#getItem/3","title":"wxSizer.getItem/3","type":"function"},{"doc":"Returns the minimal size of the sizer. This is either the combined minimal size of all the children and their borders or the minimal size set by setMinSize/3 , depending on which is bigger. Note that the returned value is client size, not window size. In particular, if you use the value to set toplevel window's minimal or actual size, use wxWindow::SetMinClientSize() (not implemented in wx) or wxWindow:setClientSize/3 , not wxWindow:setMinSize/2 or wxWindow:setSize/6 .","ref":"wxSizer.html#getMinSize/1","title":"wxSizer.getMinSize/1","type":"function"},{"doc":"Returns the current position of the sizer.","ref":"wxSizer.html#getPosition/1","title":"wxSizer.getPosition/1","type":"function"},{"doc":"Returns the current size of the sizer.","ref":"wxSizer.html#getSize/1","title":"wxSizer.getSize/1","type":"function"},{"doc":"Hides the item at position index . To make a sizer item disappear, use hide/3 followed by layout/1 . Use parameter recursive to hide elements found in subsizers. Returns true if the child item was found, false otherwise. See: isShown/2 , show/3","ref":"wxSizer.html#hide/2","title":"wxSizer.hide/2","type":"function"},{"doc":"Hides the child window . To make a sizer item disappear, use hide/3 followed by layout/1 . Use parameter recursive to hide elements found in subsizers. Returns true if the child item was found, false otherwise. See: isShown/2 , show/3","ref":"wxSizer.html#hide/3","title":"wxSizer.hide/3","type":"function"},{"doc":"","ref":"wxSizer.html#insert/3","title":"wxSizer.insert/3","type":"function"},{"doc":"Insert a child into the sizer before any existing item at index . See add/4 for the meaning of the other parameters.","ref":"wxSizer.html#insert/4","title":"wxSizer.insert/4","type":"function"},{"doc":"Insert a child into the sizer before any existing item at index . See add/4 for the meaning of the other parameters.","ref":"wxSizer.html#insert/5","title":"wxSizer.insert/5","type":"function"},{"doc":"Inserts non-stretchable space to the sizer. More readable way of calling wxSizer::Insert(index, size, size).","ref":"wxSizer.html#insertSpacer/3","title":"wxSizer.insertSpacer/3","type":"function"},{"doc":"","ref":"wxSizer.html#insertStretchSpacer/2","title":"wxSizer.insertStretchSpacer/2","type":"function"},{"doc":"Inserts stretchable space to the sizer. More readable way of calling wxSizer::Insert(0, 0, prop).","ref":"wxSizer.html#insertStretchSpacer/3","title":"wxSizer.insertStretchSpacer/3","type":"function"},{"doc":"Returns true if the item at index is shown. See: hide/3 , show/3 , wxSizerItem:isShown/1","ref":"wxSizer.html#isShown/2","title":"wxSizer.isShown/2","type":"function"},{"doc":"Call this to force layout of the children anew, e.g. after having added a child to or removed a child (window, other sizer or space) from the sizer while keeping the current dimension.","ref":"wxSizer.html#layout/1","title":"wxSizer.layout/1","type":"function"},{"doc":"","ref":"wxSizer.html#prepend/2","title":"wxSizer.prepend/2","type":"function"},{"doc":"Same as add/4 , but prepends the items to the beginning of the list of items (windows, subsizers or spaces) owned by this sizer.","ref":"wxSizer.html#prepend/3","title":"wxSizer.prepend/3","type":"function"},{"doc":"Same as add/4 , but prepends the items to the beginning of the list of items (windows, subsizers or spaces) owned by this sizer.","ref":"wxSizer.html#prepend/4","title":"wxSizer.prepend/4","type":"function"},{"doc":"Prepends non-stretchable space to the sizer. More readable way of calling wxSizer::Prepend(size, size, 0).","ref":"wxSizer.html#prependSpacer/2","title":"wxSizer.prependSpacer/2","type":"function"},{"doc":"","ref":"wxSizer.html#prependStretchSpacer/1","title":"wxSizer.prependStretchSpacer/1","type":"function"},{"doc":"Prepends stretchable space to the sizer. More readable way of calling wxSizer::Prepend(0, 0, prop).","ref":"wxSizer.html#prependStretchSpacer/2","title":"wxSizer.prependStretchSpacer/2","type":"function"},{"doc":"See: layout/1 .","ref":"wxSizer.html#recalcSizes/1","title":"wxSizer.recalcSizes/1","type":"function"},{"doc":"Removes a sizer child from the sizer and destroys it. Note: This method does not cause any layout or resizing to take place, call layout/1 to update the layout &quot;on screen&quot; after removing a child from the sizer. Return: true if the child item was found and removed, false otherwise.","ref":"wxSizer.html#remove/2","title":"wxSizer.remove/2","type":"function"},{"doc":"Detaches the given item at position index from the sizer and replaces it with the given wxSizerItem newitem . The detached child is deleted only if it is a sizer or a spacer (but not if it is a wxWindow because windows are owned by their parent window, not the sizer). This method does not cause any layout or resizing to take place, call layout/1 to update the layout &quot;on screen&quot; after replacing a child from the sizer. Returns true if the child item was found and removed, false otherwise.","ref":"wxSizer.html#replace/3","title":"wxSizer.replace/3","type":"function"},{"doc":"Detaches the given oldwin from the sizer and replaces it with the given newwin . The detached child window is not deleted (because windows are owned by their parent window, not the sizer). Use parameter recursive to search the given element recursively in subsizers. This method does not cause any layout or resizing to take place, call layout/1 to update the layout &quot;on screen&quot; after replacing a child from the sizer. Returns true if the child item was found and removed, false otherwise.","ref":"wxSizer.html#replace/4","title":"wxSizer.replace/4","type":"function"},{"doc":"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.","ref":"wxSizer.html#setDimension/3","title":"wxSizer.setDimension/3","type":"function"},{"doc":"Call this to force the sizer to take the given dimension and thus force the items owned by the sizer to resize themselves according to the rules defined by the parameter in the add/4 and prepend/4 methods.","ref":"wxSizer.html#setDimension/5","title":"wxSizer.setDimension/5","type":"function"},{"doc":"","ref":"wxSizer.html#setItemMinSize/3","title":"wxSizer.setItemMinSize/3","type":"function"},{"doc":"","ref":"wxSizer.html#setItemMinSize/4","title":"wxSizer.setItemMinSize/4","type":"function"},{"doc":"Call this to give the sizer a minimal size. Normally, the sizer will calculate its minimal size based purely on how much space its children need. After calling this method getMinSize/1 will return either the minimal size as requested by its children or the minimal size set here, depending on which is bigger.","ref":"wxSizer.html#setMinSize/2","title":"wxSizer.setMinSize/2","type":"function"},{"doc":"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.","ref":"wxSizer.html#setMinSize/3","title":"wxSizer.setMinSize/3","type":"function"},{"doc":"This method first calls fit/2 and then setSizeHints/2 on the window passed to it. This only makes sense when window is actually a wxTopLevelWindow such as a wxFrame or a wxDialog , since SetSizeHints only has any effect in these classes. It does nothing in normal windows or controls. This method is implicitly used by wxWindow:setSizerAndFit/3 which is commonly invoked in the constructor of a toplevel window itself (see the sample in the description of wxBoxSizer ) if the toplevel window is resizable.","ref":"wxSizer.html#setSizeHints/2","title":"wxSizer.setSizeHints/2","type":"function"},{"doc":"See: fitInside/2 .","ref":"wxSizer.html#setVirtualSizeHints/2","title":"wxSizer.setVirtualSizeHints/2","type":"function"},{"doc":"","ref":"wxSizer.html#show/2","title":"wxSizer.show/2","type":"function"},{"doc":"Shows the item at index . To make a sizer item disappear or reappear, use show/3 followed by layout/1 . Returns true if the child item was found, false otherwise. See: hide/3 , isShown/2","ref":"wxSizer.html#show/3","title":"wxSizer.show/3","type":"function"},{"doc":"Show or hide all items managed by the sizer.","ref":"wxSizer.html#showItems/2","title":"wxSizer.showItems/2","type":"function"},{"doc":"","ref":"wxSizer.html#t:wxSizer/0","title":"wxSizer.wxSizer/0","type":"type"},{"doc":"Container for sizer items flags providing readable names for them. Normally, when you add an item to a sizer via wxSizer:add/4 , you have to specify a lot of flags and parameters which can be unwieldy. This is where wxSizerFlags comes in: it allows you to specify all parameters using the named methods instead. For example, instead of you can now write This is more readable and also allows you to create wxSizerFlags objects which can be reused for several sizer items. Note that by specification, all methods of wxSizerFlags return the wxSizerFlags object itself to allowing chaining multiple methods calls like in the examples above. See: wxSizer wxWidgets docs: wxSizerFlags","ref":"wxSizerFlags.html","title":"wxSizerFlags","type":"module"},{"doc":"Sets the alignment of this wxSizerFlags to align . This method replaces the previously set alignment with the specified one. See: Top() (not implemented in wx), left/1 , right/1 , Bottom() (not implemented in wx), centre/1","ref":"wxSizerFlags.html#align/2","title":"wxSizerFlags.align/2","type":"function"},{"doc":"","ref":"wxSizerFlags.html#border/1","title":"wxSizerFlags.border/1","type":"function"},{"doc":"Sets the wxSizerFlags to have a border with size as returned by GetDefaultBorder() (not implemented in wx).","ref":"wxSizerFlags.html#border/2","title":"wxSizerFlags.border/2","type":"function"},{"doc":"Sets the wxSizerFlags to have a border of a number of pixels specified by borderinpixels with the directions specified by direction . Prefer to use the overload below or DoubleBorder() (not implemented in wx) or TripleBorder() (not implemented in wx) versions instead of hard-coding the border value in pixels to avoid too small borders on devices with high DPI displays.","ref":"wxSizerFlags.html#border/3","title":"wxSizerFlags.border/3","type":"function"},{"doc":"Sets the object of the wxSizerFlags to center itself in the area it is given.","ref":"wxSizerFlags.html#center/1","title":"wxSizerFlags.center/1","type":"function"},{"doc":"See: center/1 .","ref":"wxSizerFlags.html#centre/1","title":"wxSizerFlags.centre/1","type":"function"},{"doc":"Destroys the object.","ref":"wxSizerFlags.html#destroy/1","title":"wxSizerFlags.destroy/1","type":"function"},{"doc":"Sets the object of the wxSizerFlags to expand to fill as much area as it can.","ref":"wxSizerFlags.html#expand/1","title":"wxSizerFlags.expand/1","type":"function"},{"doc":"Aligns the object to the left, similar for Align(wxALIGN_LEFT) . Unlike align/2 , this method doesn't change the vertical alignment of the item.","ref":"wxSizerFlags.html#left/1","title":"wxSizerFlags.left/1","type":"function"},{"doc":"","ref":"wxSizerFlags.html#new/0","title":"wxSizerFlags.new/0","type":"function"},{"doc":"Creates the wxSizer with the proportion specified by proportion .","ref":"wxSizerFlags.html#new/1","title":"wxSizerFlags.new/1","type":"function"},{"doc":"Sets the proportion of this wxSizerFlags to proportion .","ref":"wxSizerFlags.html#proportion/2","title":"wxSizerFlags.proportion/2","type":"function"},{"doc":"Aligns the object to the right, similar for Align(wxALIGN_RIGHT) . Unlike align/2 , this method doesn't change the vertical alignment of the item.","ref":"wxSizerFlags.html#right/1","title":"wxSizerFlags.right/1","type":"function"},{"doc":"","ref":"wxSizerFlags.html#t:wxSizerFlags/0","title":"wxSizerFlags.wxSizerFlags/0","type":"type"},{"doc":"The wxSizerItem class is used to track the position, size and other attributes of each item managed by a wxSizer . It is not usually necessary to use this class because the sizer elements can also be identified by their positions or window or sizer pointers but sometimes it may be more convenient to use it directly. wxWidgets docs: wxSizerItem","ref":"wxSizerItem.html","title":"wxSizerItem","type":"module"},{"doc":"Set the sizer tracked by this item. Old sizer, if any, is deleted.","ref":"wxSizerItem.html#assignSizer/2","title":"wxSizerItem.assignSizer/2","type":"function"},{"doc":"Set the size of the spacer tracked by this item. Old spacer, if any, is deleted.","ref":"wxSizerItem.html#assignSpacer/2","title":"wxSizerItem.assignSpacer/2","type":"function"},{"doc":"","ref":"wxSizerItem.html#assignSpacer/3","title":"wxSizerItem.assignSpacer/3","type":"function"},{"doc":"Set the window to be tracked by this item. Note: This is a low-level method which is dangerous if used incorrectly, avoid using it if possible, i.e. if higher level methods such as wxSizer:replace/4 can be used instead. If the sizer item previously contained a window, it is dissociated from the sizer containing this sizer item (if any), but this object doesn't have the pointer to the containing sizer and so it's the caller's responsibility to call wxWindow:setContainingSizer/2 on window . Failure to do this can result in memory corruption when the window is destroyed later, so it is crucial to not forget to do it. Also note that the previously contained window is not deleted, so it's also the callers responsibility to do it, if necessary.","ref":"wxSizerItem.html#assignWindow/2","title":"wxSizerItem.assignWindow/2","type":"function"},{"doc":"Calculates the minimum desired size for the item, including any space needed by borders.","ref":"wxSizerItem.html#calcMin/1","title":"wxSizerItem.calcMin/1","type":"function"},{"doc":"Destroy the window or the windows in a subsizer, depending on the type of item.","ref":"wxSizerItem.html#deleteWindows/1","title":"wxSizerItem.deleteWindows/1","type":"function"},{"doc":"Deletes the user data and subsizer, if any.","ref":"wxSizerItem.html#destroy/1","title":"wxSizerItem.destroy/1","type":"function"},{"doc":"Enable deleting the SizerItem without destroying the contained sizer.","ref":"wxSizerItem.html#detachSizer/1","title":"wxSizerItem.detachSizer/1","type":"function"},{"doc":"Return the border attribute.","ref":"wxSizerItem.html#getBorder/1","title":"wxSizerItem.getBorder/1","type":"function"},{"doc":"Return the flags attribute. See wxSizer flags list (not implemented in wx) for details.","ref":"wxSizerItem.html#getFlag/1","title":"wxSizerItem.getFlag/1","type":"function"},{"doc":"Get the minimum size needed for the item.","ref":"wxSizerItem.html#getMinSize/1","title":"wxSizerItem.getMinSize/1","type":"function"},{"doc":"What is the current position of the item, as set in the last Layout.","ref":"wxSizerItem.html#getPosition/1","title":"wxSizerItem.getPosition/1","type":"function"},{"doc":"Get the proportion item attribute.","ref":"wxSizerItem.html#getProportion/1","title":"wxSizerItem.getProportion/1","type":"function"},{"doc":"Get the ratio item attribute.","ref":"wxSizerItem.html#getRatio/1","title":"wxSizerItem.getRatio/1","type":"function"},{"doc":"Get the rectangle of the item on the parent window, excluding borders.","ref":"wxSizerItem.html#getRect/1","title":"wxSizerItem.getRect/1","type":"function"},{"doc":"Get the current size of the item, as set in the last Layout.","ref":"wxSizerItem.html#getSize/1","title":"wxSizerItem.getSize/1","type":"function"},{"doc":"If this item is tracking a sizer, return it. NULL otherwise.","ref":"wxSizerItem.html#getSizer/1","title":"wxSizerItem.getSizer/1","type":"function"},{"doc":"If this item is tracking a spacer, return its size.","ref":"wxSizerItem.html#getSpacer/1","title":"wxSizerItem.getSpacer/1","type":"function"},{"doc":"Get the userData item attribute.","ref":"wxSizerItem.html#getUserData/1","title":"wxSizerItem.getUserData/1","type":"function"},{"doc":"If this item is tracking a window then return it. NULL otherwise.","ref":"wxSizerItem.html#getWindow/1","title":"wxSizerItem.getWindow/1","type":"function"},{"doc":"Returns true if this item is a window or a spacer and it is shown or if this item is a sizer and not all of its elements are hidden. In other words, for sizer items, all of the child elements must be hidden for the sizer itself to be considered hidden. As an exception, if the wxRESERVE_SPACE_EVEN_IF_HIDDEN flag was used for this sizer item, then isShown/1 always returns true for it (see wxSizerFlags::ReserveSpaceEvenIfHidden() (not implemented in wx)).","ref":"wxSizerItem.html#isShown/1","title":"wxSizerItem.isShown/1","type":"function"},{"doc":"Is this item a sizer?","ref":"wxSizerItem.html#isSizer/1","title":"wxSizerItem.isSizer/1","type":"function"},{"doc":"Is this item a spacer?","ref":"wxSizerItem.html#isSpacer/1","title":"wxSizerItem.isSpacer/1","type":"function"},{"doc":"Is this item a window?","ref":"wxSizerItem.html#isWindow/1","title":"wxSizerItem.isWindow/1","type":"function"},{"doc":"","ref":"wxSizerItem.html#new/1","title":"wxSizerItem.new/1","type":"function"},{"doc":"","ref":"wxSizerItem.html#new/2","title":"wxSizerItem.new/2","type":"function"},{"doc":"Construct a sizer item for tracking a spacer.","ref":"wxSizerItem.html#new/3","title":"wxSizerItem.new/3","type":"function"},{"doc":"Set the border item attribute.","ref":"wxSizerItem.html#setBorder/2","title":"wxSizerItem.setBorder/2","type":"function"},{"doc":"Set the position and size of the space allocated to the sizer, and adjust the position and size of the item to be within that space taking alignment and borders into account.","ref":"wxSizerItem.html#setDimension/3","title":"wxSizerItem.setDimension/3","type":"function"},{"doc":"Set the flag item attribute.","ref":"wxSizerItem.html#setFlag/2","title":"wxSizerItem.setFlag/2","type":"function"},{"doc":"Sets the minimum size to be allocated for this item. This is identical to setMinSize/3 , prefer to use the other function, as its name is more clear.","ref":"wxSizerItem.html#setInitSize/3","title":"wxSizerItem.setInitSize/3","type":"function"},{"doc":"Sets the minimum size to be allocated for this item. If this item is a window, the size is also passed to wxWindow:setMinSize/2 .","ref":"wxSizerItem.html#setMinSize/2","title":"wxSizerItem.setMinSize/2","type":"function"},{"doc":"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.","ref":"wxSizerItem.html#setMinSize/3","title":"wxSizerItem.setMinSize/3","type":"function"},{"doc":"Set the proportion item attribute.","ref":"wxSizerItem.html#setProportion/2","title":"wxSizerItem.setProportion/2","type":"function"},{"doc":"","ref":"wxSizerItem.html#setRatio/2","title":"wxSizerItem.setRatio/2","type":"function"},{"doc":"Set the ratio item attribute.","ref":"wxSizerItem.html#setRatio/3","title":"wxSizerItem.setRatio/3","type":"function"},{"doc":"Set the show item attribute, which sizers use to determine if the item is to be made part of the layout or not. If the item is tracking a window then it is shown or hidden as needed.","ref":"wxSizerItem.html#show/2","title":"wxSizerItem.show/2","type":"function"},{"doc":"","ref":"wxSizerItem.html#t:wxSizerItem/0","title":"wxSizerItem.wxSizerItem/0","type":"type"},{"doc":"A slider is a control with a handle which can be pulled back and forth to change the value. On Windows, the track bar control is used. On GTK+, tick marks are only available for version 2.16 and later. Slider generates the same events as wxScrollBar but in practice the most convenient way to process wxSlider updates is by handling the slider-specific wxEVT_SLIDER event which carries wxCommandEvent containing just the latest slider position. Styles This class supports the following styles: The difference between EVT_SCROLL_THUMBRELEASE and EVT_SCROLL_CHANGED The EVT_SCROLL_THUMBRELEASE event is only emitted when actually dragging the thumb using the mouse and releasing it (This EVT_SCROLL_THUMBRELEASE event is also followed by an EVT_SCROLL_CHANGED event). The EVT_SCROLL_CHANGED event also occurs when using the keyboard to change the thumb position, and when clicking next to the thumb (In all these cases the EVT_SCROLL_THUMBRELEASE event does not happen). In short, the EVT_SCROLL_CHANGED event is triggered when scrolling/ moving has finished independently of the way it had started. Please see the page_samples_widgets (&quot;Slider&quot; page) to see the difference between EVT_SCROLL_THUMBRELEASE and EVT_SCROLL_CHANGED in action. See: Overview events , wxScrollBar This class is derived (and can use functions) from: wxControl wxWindow wxEvtHandler wxWidgets docs: wxSlider Events Event types emitted from this class: scroll_top , scroll_bottom , scroll_lineup , scroll_linedown , scroll_pageup , scroll_pagedown , scroll_thumbtrack , scroll_thumbrelease , scroll_changed , scroll_top , scroll_bottom , scroll_lineup , scroll_linedown , scroll_pageup , scroll_pagedown , scroll_thumbtrack , scroll_thumbrelease , scroll_changed , command_slider_updated","ref":"wxSlider.html","title":"wxSlider","type":"module"},{"doc":"","ref":"wxSlider.html#create/6","title":"wxSlider.create/6","type":"function"},{"doc":"Used for two-step slider construction. See new/6 for further details.","ref":"wxSlider.html#create/7","title":"wxSlider.create/7","type":"function"},{"doc":"Destructor, destroying the slider.","ref":"wxSlider.html#destroy/1","title":"wxSlider.destroy/1","type":"function"},{"doc":"Returns the line size. See: setLineSize/2","ref":"wxSlider.html#getLineSize/1","title":"wxSlider.getLineSize/1","type":"function"},{"doc":"Gets the maximum slider value. See: getMin/1 , setRange/3","ref":"wxSlider.html#getMax/1","title":"wxSlider.getMax/1","type":"function"},{"doc":"Gets the minimum slider value. See: getMin/1 , setRange/3","ref":"wxSlider.html#getMin/1","title":"wxSlider.getMin/1","type":"function"},{"doc":"Returns the page size. See: setPageSize/2","ref":"wxSlider.html#getPageSize/1","title":"wxSlider.getPageSize/1","type":"function"},{"doc":"Returns the thumb length. Only for:wxmsw See: setThumbLength/2","ref":"wxSlider.html#getThumbLength/1","title":"wxSlider.getThumbLength/1","type":"function"},{"doc":"Gets the current slider value. See: getMin/1 , getMax/1 , setValue/2","ref":"wxSlider.html#getValue/1","title":"wxSlider.getValue/1","type":"function"},{"doc":"Default constructor.","ref":"wxSlider.html#new/0","title":"wxSlider.new/0","type":"function"},{"doc":"","ref":"wxSlider.html#new/5","title":"wxSlider.new/5","type":"function"},{"doc":"Constructor, creating and showing a slider. See: create/7 , wxValidator (not implemented in wx)","ref":"wxSlider.html#new/6","title":"wxSlider.new/6","type":"function"},{"doc":"Sets the line size for the slider. See: getLineSize/1","ref":"wxSlider.html#setLineSize/2","title":"wxSlider.setLineSize/2","type":"function"},{"doc":"Sets the page size for the slider. See: getPageSize/1","ref":"wxSlider.html#setPageSize/2","title":"wxSlider.setPageSize/2","type":"function"},{"doc":"Sets the minimum and maximum slider values. See: getMin/1 , getMax/1","ref":"wxSlider.html#setRange/3","title":"wxSlider.setRange/3","type":"function"},{"doc":"Sets the slider thumb length. Only for:wxmsw See: getThumbLength/1","ref":"wxSlider.html#setThumbLength/2","title":"wxSlider.setThumbLength/2","type":"function"},{"doc":"Sets the slider position.","ref":"wxSlider.html#setValue/2","title":"wxSlider.setValue/2","type":"function"},{"doc":"","ref":"wxSlider.html#t:wxSlider/0","title":"wxSlider.wxSlider/0","type":"type"},{"doc":"A wxSpinButton has two small up and down (or left and right) arrow buttons. It is often used next to a text control for increment and decrementing a value. Portable programs should try to use wxSpinCtrl instead as wxSpinButton is not implemented for all platforms but wxSpinCtrl is as it degenerates to a simple wxTextCtrl on such platforms. Note: the range supported by this control (and wxSpinCtrl ) depends on the platform but is at least -0x8000 to 0x7fff . Under GTK and Win32 with sufficiently new version of comctrl32.dll (at least 4.71 is required, 5.80 is recommended) the full 32 bit range is supported. Styles This class supports the following styles: See: wxSpinCtrl This class is derived (and can use functions) from: wxControl wxWindow wxEvtHandler wxWidgets docs: wxSpinButton Events Event types emitted from this class: spin , spin_up , spin_down","ref":"wxSpinButton.html","title":"wxSpinButton","type":"module"},{"doc":"","ref":"wxSpinButton.html#create/2","title":"wxSpinButton.create/2","type":"function"},{"doc":"Scrollbar creation function called by the spin button constructor. See new/2 for details.","ref":"wxSpinButton.html#create/3","title":"wxSpinButton.create/3","type":"function"},{"doc":"Destructor, destroys the spin button control.","ref":"wxSpinButton.html#destroy/1","title":"wxSpinButton.destroy/1","type":"function"},{"doc":"Returns the maximum permissible value. See: setRange/3","ref":"wxSpinButton.html#getMax/1","title":"wxSpinButton.getMax/1","type":"function"},{"doc":"Returns the minimum permissible value. See: setRange/3","ref":"wxSpinButton.html#getMin/1","title":"wxSpinButton.getMin/1","type":"function"},{"doc":"Returns the current spin button value. See: setValue/2","ref":"wxSpinButton.html#getValue/1","title":"wxSpinButton.getValue/1","type":"function"},{"doc":"Default constructor.","ref":"wxSpinButton.html#new/0","title":"wxSpinButton.new/0","type":"function"},{"doc":"","ref":"wxSpinButton.html#new/1","title":"wxSpinButton.new/1","type":"function"},{"doc":"Constructor, creating and showing a spin button. See: create/3","ref":"wxSpinButton.html#new/2","title":"wxSpinButton.new/2","type":"function"},{"doc":"Sets the range of the spin button. In portable code, min should be less than or equal to max . In wxMSW it is possible to specify minimum greater than maximum and the native control supports the same range as if they were reversed, but swaps the meaning of up and down arrows, however this dubious feature is not supported on other platforms. See: getMin/1 , getMax/1","ref":"wxSpinButton.html#setRange/3","title":"wxSpinButton.setRange/3","type":"function"},{"doc":"Sets the value of the spin button.","ref":"wxSpinButton.html#setValue/2","title":"wxSpinButton.setValue/2","type":"function"},{"doc":"","ref":"wxSpinButton.html#t:wxSpinButton/0","title":"wxSpinButton.wxSpinButton/0","type":"type"},{"doc":"wxSpinCtrl combines wxTextCtrl and wxSpinButton in one control. Styles This class supports the following styles: See: wxSpinButton , wxSpinCtrlDouble (not implemented in wx), wxControl This class is derived (and can use functions) from: wxControl wxWindow wxEvtHandler wxWidgets docs: wxSpinCtrl Events Event types emitted from this class: command_spinctrl_updated","ref":"wxSpinCtrl.html","title":"wxSpinCtrl","type":"module"},{"doc":"","ref":"wxSpinCtrl.html#create/2","title":"wxSpinCtrl.create/2","type":"function"},{"doc":"Creation function called by the spin control constructor. See new/2 for details.","ref":"wxSpinCtrl.html#create/3","title":"wxSpinCtrl.create/3","type":"function"},{"doc":"Destroys the object.","ref":"wxSpinCtrl.html#destroy/1","title":"wxSpinCtrl.destroy/1","type":"function"},{"doc":"Gets maximal allowable value.","ref":"wxSpinCtrl.html#getMax/1","title":"wxSpinCtrl.getMax/1","type":"function"},{"doc":"Gets minimal allowable value.","ref":"wxSpinCtrl.html#getMin/1","title":"wxSpinCtrl.getMin/1","type":"function"},{"doc":"Gets the value of the spin control.","ref":"wxSpinCtrl.html#getValue/1","title":"wxSpinCtrl.getValue/1","type":"function"},{"doc":"Default constructor.","ref":"wxSpinCtrl.html#new/0","title":"wxSpinCtrl.new/0","type":"function"},{"doc":"","ref":"wxSpinCtrl.html#new/1","title":"wxSpinCtrl.new/1","type":"function"},{"doc":"Constructor, creating and showing a spin control. If value is non-empty, it will be shown in the text entry part of the control and if it has numeric value, the initial numeric value of the control, as returned by getValue/1 will also be determined by it instead of by initial . Hence, it only makes sense to specify initial if value is an empty string or is not convertible to a number, otherwise initial is simply ignored and the number specified by value is used. See: create/3","ref":"wxSpinCtrl.html#new/2","title":"wxSpinCtrl.new/2","type":"function"},{"doc":"Sets range of allowable values. Notice that calling this method may change the value of the control if it's not inside the new valid range, e.g. it will become minVal if it is less than it now. However no wxEVT_SPINCTRL event is generated, even if it the value does change. Note: Setting a range including negative values is silently ignored if current base is set to 16.","ref":"wxSpinCtrl.html#setRange/3","title":"wxSpinCtrl.setRange/3","type":"function"},{"doc":"Select the text in the text part of the control between positions from (inclusive) and to (exclusive). This is similar to wxTextCtrl:setSelection/3 . Note: this is currently only implemented for Windows and generic versions of the control.","ref":"wxSpinCtrl.html#setSelection/3","title":"wxSpinCtrl.setSelection/3","type":"function"},{"doc":"Sets the value of the spin control. It is recommended to use the overload taking an integer value instead. Notice that, unlike wxTextCtrl:setValue/2 , but like most of the other setter methods in wxWidgets, calling this method does not generate any events as events are only generated for the user actions.","ref":"wxSpinCtrl.html#setValue/2","title":"wxSpinCtrl.setValue/2","type":"function"},{"doc":"","ref":"wxSpinCtrl.html#t:wxSpinCtrl/0","title":"wxSpinCtrl.wxSpinCtrl/0","type":"type"},{"doc":"This event class is used for the events generated by wxSpinButton and wxSpinCtrl . See: wxSpinButton , and, wxSpinCtrl This class is derived (and can use functions) from: wxNotifyEvent wxCommandEvent wxEvent wxWidgets docs: wxSpinEvent Events Use wxEvtHandler:connect/3 with wxSpinEventType to subscribe to events of this type.","ref":"wxSpinEvent.html","title":"wxSpinEvent","type":"module"},{"doc":"Retrieve the current spin button or control value.","ref":"wxSpinEvent.html#getPosition/1","title":"wxSpinEvent.getPosition/1","type":"function"},{"doc":"Set the value associated with the event.","ref":"wxSpinEvent.html#setPosition/2","title":"wxSpinEvent.setPosition/2","type":"function"},{"doc":"","ref":"wxSpinEvent.html#t:wxSpin/0","title":"wxSpinEvent.wxSpin/0","type":"type"},{"doc":"","ref":"wxSpinEvent.html#t:wxSpinEvent/0","title":"wxSpinEvent.wxSpinEvent/0","type":"type"},{"doc":"","ref":"wxSpinEvent.html#t:wxSpinEventType/0","title":"wxSpinEvent.wxSpinEventType/0","type":"type"},{"doc":"wxSplashScreen shows a window with a thin border, displaying a bitmap describing your application. Show it in application initialisation, and then either explicitly destroy it or let it time-out. Example usage: This class is derived (and can use functions) from: wxFrame wxTopLevelWindow wxWindow wxEvtHandler wxWidgets docs: wxSplashScreen","ref":"wxSplashScreen.html","title":"wxSplashScreen","type":"module"},{"doc":"Destroys the splash screen.","ref":"wxSplashScreen.html#destroy/1","title":"wxSplashScreen.destroy/1","type":"function"},{"doc":"Returns the splash style (see new/6 for details).","ref":"wxSplashScreen.html#getSplashStyle/1","title":"wxSplashScreen.getSplashStyle/1","type":"function"},{"doc":"Returns the timeout in milliseconds.","ref":"wxSplashScreen.html#getTimeout/1","title":"wxSplashScreen.getTimeout/1","type":"function"},{"doc":"","ref":"wxSplashScreen.html#new/5","title":"wxSplashScreen.new/5","type":"function"},{"doc":"Construct the splash screen passing a bitmap, a style, a timeout, a window id, optional position and size, and a window style. splashStyle is a bitlist of some of the following: milliseconds is the timeout in milliseconds.","ref":"wxSplashScreen.html#new/6","title":"wxSplashScreen.new/6","type":"function"},{"doc":"","ref":"wxSplashScreen.html#t:wxSplashScreen/0","title":"wxSplashScreen.wxSplashScreen/0","type":"type"},{"doc":"This class represents the events generated by a splitter control. Also there is only one event class, the data associated to the different events is not the same and so not all accessor functions may be called for each event. The documentation mentions the kind of event(s) for which the given accessor function makes sense: calling it for other types of events will result in assert failure (in debug mode) and will return meaningless results. See: wxSplitterWindow , Overview events This class is derived (and can use functions) from: wxNotifyEvent wxCommandEvent wxEvent wxWidgets docs: wxSplitterEvent Events Use wxEvtHandler:connect/3 with wxSplitterEventType to subscribe to events of this type.","ref":"wxSplitterEvent.html","title":"wxSplitterEvent","type":"module"},{"doc":"Returns the new sash position. May only be called while processing wxEVT_SPLITTER_SASH_POS_CHANGING and wxEVT_SPLITTER_SASH_POS_CHANGED events.","ref":"wxSplitterEvent.html#getSashPosition/1","title":"wxSplitterEvent.getSashPosition/1","type":"function"},{"doc":"Returns a pointer to the window being removed when a splitter window is unsplit. May only be called while processing wxEVT_SPLITTER_UNSPLIT events.","ref":"wxSplitterEvent.html#getWindowBeingRemoved/1","title":"wxSplitterEvent.getWindowBeingRemoved/1","type":"function"},{"doc":"Returns the x coordinate of the double-click point. May only be called while processing wxEVT_SPLITTER_DOUBLECLICKED events.","ref":"wxSplitterEvent.html#getX/1","title":"wxSplitterEvent.getX/1","type":"function"},{"doc":"Returns the y coordinate of the double-click point. May only be called while processing wxEVT_SPLITTER_DOUBLECLICKED events.","ref":"wxSplitterEvent.html#getY/1","title":"wxSplitterEvent.getY/1","type":"function"},{"doc":"In the case of wxEVT_SPLITTER_SASH_POS_CHANGED events, sets the new sash position. In the case of wxEVT_SPLITTER_SASH_POS_CHANGING events, sets the new tracking bar position so visual feedback during dragging will represent that change that will actually take place. Set to -1 from the event handler code to prevent repositioning. May only be called while processing wxEVT_SPLITTER_SASH_POS_CHANGING and wxEVT_SPLITTER_SASH_POS_CHANGED events.","ref":"wxSplitterEvent.html#setSashPosition/2","title":"wxSplitterEvent.setSashPosition/2","type":"function"},{"doc":"","ref":"wxSplitterEvent.html#t:wxSplitter/0","title":"wxSplitterEvent.wxSplitter/0","type":"type"},{"doc":"","ref":"wxSplitterEvent.html#t:wxSplitterEvent/0","title":"wxSplitterEvent.wxSplitterEvent/0","type":"type"},{"doc":"","ref":"wxSplitterEvent.html#t:wxSplitterEventType/0","title":"wxSplitterEvent.wxSplitterEventType/0","type":"type"},{"doc":"This class manages up to two subwindows. The current view can be split into two programmatically (perhaps from a menu command), and unsplit either programmatically or via the wxSplitterWindow user interface. Styles This class supports the following styles: See: wxSplitterEvent , Overview splitterwindow This class is derived (and can use functions) from: wxWindow wxEvtHandler wxWidgets docs: wxSplitterWindow Events Event types emitted from this class: command_splitter_sash_pos_changing , command_splitter_sash_pos_changed , command_splitter_unsplit","ref":"wxSplitterWindow.html","title":"wxSplitterWindow","type":"module"},{"doc":"","ref":"wxSplitterWindow.html#create/2","title":"wxSplitterWindow.create/2","type":"function"},{"doc":"Creation function, for two-step construction. See new/2 for details.","ref":"wxSplitterWindow.html#create/3","title":"wxSplitterWindow.create/3","type":"function"},{"doc":"Destroys the wxSplitterWindow and its children.","ref":"wxSplitterWindow.html#destroy/1","title":"wxSplitterWindow.destroy/1","type":"function"},{"doc":"Returns the current minimum pane size (defaults to zero). See: setMinimumPaneSize/2","ref":"wxSplitterWindow.html#getMinimumPaneSize/1","title":"wxSplitterWindow.getMinimumPaneSize/1","type":"function"},{"doc":"Returns the current sash gravity. See: setSashGravity/2","ref":"wxSplitterWindow.html#getSashGravity/1","title":"wxSplitterWindow.getSashGravity/1","type":"function"},{"doc":"Returns the current sash position. See: setSashPosition/3","ref":"wxSplitterWindow.html#getSashPosition/1","title":"wxSplitterWindow.getSashPosition/1","type":"function"},{"doc":"Gets the split mode. See: setSplitMode/2 , splitVertically/4 , splitHorizontally/4","ref":"wxSplitterWindow.html#getSplitMode/1","title":"wxSplitterWindow.getSplitMode/1","type":"function"},{"doc":"Returns the left/top or only pane.","ref":"wxSplitterWindow.html#getWindow1/1","title":"wxSplitterWindow.getWindow1/1","type":"function"},{"doc":"Returns the right/bottom pane.","ref":"wxSplitterWindow.html#getWindow2/1","title":"wxSplitterWindow.getWindow2/1","type":"function"},{"doc":"Initializes the splitter window to have one pane. The child window is shown if it is currently hidden. Remark: This should be called if you wish to initially view only a single pane in the splitter window. See: splitVertically/4 , splitHorizontally/4","ref":"wxSplitterWindow.html#initialize/2","title":"wxSplitterWindow.initialize/2","type":"function"},{"doc":"Returns true if the window is split, false otherwise.","ref":"wxSplitterWindow.html#isSplit/1","title":"wxSplitterWindow.isSplit/1","type":"function"},{"doc":"Default constructor.","ref":"wxSplitterWindow.html#new/0","title":"wxSplitterWindow.new/0","type":"function"},{"doc":"","ref":"wxSplitterWindow.html#new/1","title":"wxSplitterWindow.new/1","type":"function"},{"doc":"Constructor for creating the window. Remark: After using this constructor, you must create either one or two subwindows with the splitter window as parent, and then call one of initialize/2 , splitVertically/4 and splitHorizontally/4 in order to set the pane(s). You can create two windows, with one hidden when not being shown; or you can create and delete the second pane on demand. See: initialize/2 , splitVertically/4 , splitHorizontally/4 , create/3","ref":"wxSplitterWindow.html#new/2","title":"wxSplitterWindow.new/2","type":"function"},{"doc":"This function replaces one of the windows managed by the wxSplitterWindow with another one. It is in general better to use it instead of calling unsplit/2 and then resplitting the window back because it will provoke much less flicker (if any). It is valid to call this function whether the splitter has two windows or only one. Both parameters should be non-NULL and winOld must specify one of the windows managed by the splitter. If the parameters are incorrect or the window couldn't be replaced, false is returned. Otherwise the function will return true, but please notice that it will not delete the replaced window and you may wish to do it yourself. See: getMinimumPaneSize/1","ref":"wxSplitterWindow.html#replaceWindow/3","title":"wxSplitterWindow.replaceWindow/3","type":"function"},{"doc":"Sets the minimum pane size. Remark: The default minimum pane size is zero, which means that either pane can be reduced to zero by dragging the sash, thus removing one of the panes. To prevent this behaviour (and veto out-of-range sash dragging), set a minimum size, for example 20 pixels. If the wxSP_PERMIT_UNSPLIT style is used when a splitter window is created, the window may be unsplit even if minimum size is non-zero. See: getMinimumPaneSize/1","ref":"wxSplitterWindow.html#setMinimumPaneSize/2","title":"wxSplitterWindow.setMinimumPaneSize/2","type":"function"},{"doc":"Sets the sash gravity. Remark: Gravity is real factor which controls position of sash while resizing wxSplitterWindow . Gravity tells wxSplitterWindow how much will left/top window grow while resizing. Example values: Notice that when sash gravity for a newly created splitter window, it is often necessary to explicitly set the splitter size using wxWindow:setSize/6 to ensure that is big enough for its initial sash position. Otherwise, i.e. if the window is created with the default tiny size and only resized to its correct size later, the initial sash position will be affected by the gravity and typically result in sash being at the rightmost position for the gravity of 1. See the example code creating wxSplitterWindow in the splitter sample for more details. See: getSashGravity/1","ref":"wxSplitterWindow.html#setSashGravity/2","title":"wxSplitterWindow.setSashGravity/2","type":"function"},{"doc":"","ref":"wxSplitterWindow.html#setSashPosition/2","title":"wxSplitterWindow.setSashPosition/2","type":"function"},{"doc":"Sets the sash position. Remark: Does not currently check for an out-of-range value. See: getSashPosition/1","ref":"wxSplitterWindow.html#setSashPosition/3","title":"wxSplitterWindow.setSashPosition/3","type":"function"},{"doc":"Sets the split mode. Remark: Only sets the internal variable; does not update the display. See: getSplitMode/1 , splitVertically/4 , splitHorizontally/4","ref":"wxSplitterWindow.html#setSplitMode/2","title":"wxSplitterWindow.setSplitMode/2","type":"function"},{"doc":"","ref":"wxSplitterWindow.html#splitHorizontally/3","title":"wxSplitterWindow.splitHorizontally/3","type":"function"},{"doc":"Initializes the top and bottom panes of the splitter window. The child windows are shown if they are currently hidden. Return: true if successful, false otherwise (the window was already split). Remark: This should be called if you wish to initially view two panes. It can also be called at any subsequent time, but the application should check that the window is not currently split using isSplit/1 . See: splitVertically/4 , isSplit/1 , unsplit/2","ref":"wxSplitterWindow.html#splitHorizontally/4","title":"wxSplitterWindow.splitHorizontally/4","type":"function"},{"doc":"","ref":"wxSplitterWindow.html#splitVertically/3","title":"wxSplitterWindow.splitVertically/3","type":"function"},{"doc":"Initializes the left and right panes of the splitter window. The child windows are shown if they are currently hidden. Return: true if successful, false otherwise (the window was already split). Remark: This should be called if you wish to initially view two panes. It can also be called at any subsequent time, but the application should check that the window is not currently split using isSplit/1 . See: splitHorizontally/4 , isSplit/1 , unsplit/2","ref":"wxSplitterWindow.html#splitVertically/4","title":"wxSplitterWindow.splitVertically/4","type":"function"},{"doc":"","ref":"wxSplitterWindow.html#unsplit/1","title":"wxSplitterWindow.unsplit/1","type":"function"},{"doc":"Unsplits the window. Return: true if successful, false otherwise (the window was not split). Remark: This call will not actually delete the pane being removed; it calls OnUnsplit() (not implemented in wx) which can be overridden for the desired behaviour. By default, the pane being removed is hidden. See: splitHorizontally/4 , splitVertically/4 , isSplit/1 , OnUnsplit() (not implemented in wx)","ref":"wxSplitterWindow.html#unsplit/2","title":"wxSplitterWindow.unsplit/2","type":"function"},{"doc":"Causes any pending sizing of the sash and child panes to take place immediately. Such resizing normally takes place in idle time, in order to wait for layout to be completed. However, this can cause unacceptable flicker as the panes are resized after the window has been shown. To work around this, you can perform window layout (for example by sending a size event to the parent window), and then call this function, before showing the top-level window.","ref":"wxSplitterWindow.html#updateSize/1","title":"wxSplitterWindow.updateSize/1","type":"function"},{"doc":"","ref":"wxSplitterWindow.html#t:wxSplitterWindow/0","title":"wxSplitterWindow.wxSplitterWindow/0","type":"type"},{"doc":"A static bitmap control displays a bitmap. Native implementations on some platforms are only meant for display of the small icons in the dialog boxes. If you want to display larger images portably, you may use generic implementation wxGenericStaticBitmap declared in &lt;wx/generic/statbmpg.h&gt;. Notice that for the best results, the size of the control should be the same as the size of the image displayed in it, as happens by default if it's not resized explicitly. Otherwise, behaviour depends on the platform: under MSW, the bitmap is drawn centred inside the control, while elsewhere it is drawn at the origin of the control. You can use SetScaleMode() (not implemented in wx) to control how the image is scaled inside the control. See: wxBitmap This class is derived (and can use functions) from: wxControl wxWindow wxEvtHandler wxWidgets docs: wxStaticBitmap","ref":"wxStaticBitmap.html","title":"wxStaticBitmap","type":"module"},{"doc":"","ref":"wxStaticBitmap.html#create/4","title":"wxStaticBitmap.create/4","type":"function"},{"doc":"Creation function, for two-step construction. For details see new/4 .","ref":"wxStaticBitmap.html#create/5","title":"wxStaticBitmap.create/5","type":"function"},{"doc":"Destroys the object.","ref":"wxStaticBitmap.html#destroy/1","title":"wxStaticBitmap.destroy/1","type":"function"},{"doc":"Returns the bitmap currently used in the control. Notice that this method can be called even if SetIcon() (not implemented in wx) had been used. See: setBitmap/2","ref":"wxStaticBitmap.html#getBitmap/1","title":"wxStaticBitmap.getBitmap/1","type":"function"},{"doc":"Default constructor.","ref":"wxStaticBitmap.html#new/0","title":"wxStaticBitmap.new/0","type":"function"},{"doc":"","ref":"wxStaticBitmap.html#new/3","title":"wxStaticBitmap.new/3","type":"function"},{"doc":"Constructor, creating and showing a static bitmap control. See: create/5","ref":"wxStaticBitmap.html#new/4","title":"wxStaticBitmap.new/4","type":"function"},{"doc":"Sets the bitmap label. See: getBitmap/1","ref":"wxStaticBitmap.html#setBitmap/2","title":"wxStaticBitmap.setBitmap/2","type":"function"},{"doc":"","ref":"wxStaticBitmap.html#t:wxStaticBitmap/0","title":"wxStaticBitmap.wxStaticBitmap/0","type":"type"},{"doc":"A static box is a rectangle drawn around other windows to denote a logical grouping of items. Note that while the previous versions required that windows appearing inside a static box be created as its siblings (i.e. use the same parent as the static box itself), since wxWidgets 2.9.1 it is also possible to create them as children of wxStaticBox itself and you are actually encouraged to do it like this if compatibility with the previous versions is not important. So the new recommended way to create static box is: While the compatible - and now deprecated - way is Also note that there is a specialized wxSizer class ( wxStaticBoxSizer ) which can be used as an easier way to pack items into a static box. See: wxStaticText , wxStaticBoxSizer This class is derived (and can use functions) from: wxControl wxWindow wxEvtHandler wxWidgets docs: wxStaticBox","ref":"wxStaticBox.html","title":"wxStaticBox","type":"module"},{"doc":"","ref":"wxStaticBox.html#create/4","title":"wxStaticBox.create/4","type":"function"},{"doc":"Creates the static box for two-step construction. See new/4 for further details.","ref":"wxStaticBox.html#create/5","title":"wxStaticBox.create/5","type":"function"},{"doc":"Constructor for a static box using the given window as label. This constructor takes a pointer to an arbitrary window (although usually a wxCheckBox or a wxRadioButton ) instead of just the usual text label and puts this window at the top of the box at the place where the label would be shown. The label window must be a non-null, fully created window and will become a child of this wxStaticBox , i.e. it will be owned by this control and will be deleted when the wxStaticBox itself is deleted. An example of creating a wxStaticBox with window as a label: Currently this constructor is only available in wxGTK and wxMSW, use wxHAS_WINDOW_LABEL_IN_STATIC_BOX to check whether it can be used at compile-time. Since: 3.1.1 Destructor, destroying the group box.","ref":"wxStaticBox.html#destroy/1","title":"wxStaticBox.destroy/1","type":"function"},{"doc":"Default constructor.","ref":"wxStaticBox.html#new/0","title":"wxStaticBox.new/0","type":"function"},{"doc":"","ref":"wxStaticBox.html#new/3","title":"wxStaticBox.new/3","type":"function"},{"doc":"Constructor, creating and showing a static box. See: create/5","ref":"wxStaticBox.html#new/4","title":"wxStaticBox.new/4","type":"function"},{"doc":"","ref":"wxStaticBox.html#t:wxStaticBox/0","title":"wxStaticBox.wxStaticBox/0","type":"type"},{"doc":"wxStaticBoxSizer is a sizer derived from wxBoxSizer but adds a static box around the sizer. The static box may be either created independently or the sizer may create it itself as a convenience. In any case, the sizer owns the wxStaticBox control and will delete it in the wxStaticBoxSizer destructor. Note that since wxWidgets 2.9.1 you are encouraged to create the windows which are added to wxStaticBoxSizer as children of wxStaticBox itself, see this class documentation for more details. Example of use of this class: See: wxSizer , wxStaticBox , wxBoxSizer , Overview sizer This class is derived (and can use functions) from: wxBoxSizer wxSizer wxWidgets docs: wxStaticBoxSizer","ref":"wxStaticBoxSizer.html","title":"wxStaticBoxSizer","type":"module"},{"doc":"Destroys the object.","ref":"wxStaticBoxSizer.html#destroy/1","title":"wxStaticBoxSizer.destroy/1","type":"function"},{"doc":"Returns the static box associated with the sizer.","ref":"wxStaticBoxSizer.html#getStaticBox/1","title":"wxStaticBoxSizer.getStaticBox/1","type":"function"},{"doc":"This constructor uses an already existing static box.","ref":"wxStaticBoxSizer.html#new/2","title":"wxStaticBoxSizer.new/2","type":"function"},{"doc":"This constructor creates a new static box with the given label and parent window.","ref":"wxStaticBoxSizer.html#new/3","title":"wxStaticBoxSizer.new/3","type":"function"},{"doc":"","ref":"wxStaticBoxSizer.html#t:wxStaticBoxSizer/0","title":"wxStaticBoxSizer.wxStaticBoxSizer/0","type":"type"},{"doc":"A static line is just a line which may be used in a dialog to separate the groups of controls. The line may be only vertical or horizontal. Moreover, not all ports (notably not wxGTK) support specifying the transversal direction of the line (e.g. height for a horizontal line) so for maximal portability you should specify it as wxDefaultCoord. Styles This class supports the following styles: See: wxStaticBox This class is derived (and can use functions) from: wxControl wxWindow wxEvtHandler wxWidgets docs: wxStaticLine","ref":"wxStaticLine.html","title":"wxStaticLine","type":"module"},{"doc":"","ref":"wxStaticLine.html#create/2","title":"wxStaticLine.create/2","type":"function"},{"doc":"Creates the static line for two-step construction. See new/2 for further details.","ref":"wxStaticLine.html#create/3","title":"wxStaticLine.create/3","type":"function"},{"doc":"Destroys the object.","ref":"wxStaticLine.html#destroy/1","title":"wxStaticLine.destroy/1","type":"function"},{"doc":"This static function returns the size which will be given to the smaller dimension of the static line, i.e. its height for a horizontal line or its width for a vertical one.","ref":"wxStaticLine.html#getDefaultSize/0","title":"wxStaticLine.getDefaultSize/0","type":"function"},{"doc":"Returns true if the line is vertical, false if horizontal.","ref":"wxStaticLine.html#isVertical/1","title":"wxStaticLine.isVertical/1","type":"function"},{"doc":"Default constructor.","ref":"wxStaticLine.html#new/0","title":"wxStaticLine.new/0","type":"function"},{"doc":"","ref":"wxStaticLine.html#new/1","title":"wxStaticLine.new/1","type":"function"},{"doc":"Constructor, creating and showing a static line. See: create/3","ref":"wxStaticLine.html#new/2","title":"wxStaticLine.new/2","type":"function"},{"doc":"","ref":"wxStaticLine.html#t:wxStaticLine/0","title":"wxStaticLine.wxStaticLine/0","type":"type"},{"doc":"A static text control displays one or more lines of read-only text. wxStaticText supports the three classic text alignments, label ellipsization i.e. replacing parts of the text with the ellipsis (&quot;...&quot;) if the label doesn't fit into the provided space and also formatting markup with wxControl::SetLabelMarkup() (not implemented in wx). Styles This class supports the following styles: See: wxStaticBitmap , wxStaticBox This class is derived (and can use functions) from: wxControl wxWindow wxEvtHandler wxWidgets docs: wxStaticText","ref":"wxStaticText.html","title":"wxStaticText","type":"module"},{"doc":"","ref":"wxStaticText.html#create/4","title":"wxStaticText.create/4","type":"function"},{"doc":"Creation function, for two-step construction. For details see new/4 .","ref":"wxStaticText.html#create/5","title":"wxStaticText.create/5","type":"function"},{"doc":"Destroys the object.","ref":"wxStaticText.html#destroy/1","title":"wxStaticText.destroy/1","type":"function"},{"doc":"Returns the control's label, as it was passed to wxControl:setLabel/2 . Note that the returned string may contains mnemonics (&quot;&amp;&quot; characters) if they were passed to the wxControl:setLabel/2 function; use GetLabelText() (not implemented in wx) if they are undesired. Also note that the returned string is always the string which was passed to wxControl:setLabel/2 but may be different from the string passed to SetLabelText() (not implemented in wx) (since this last one escapes mnemonic characters).","ref":"wxStaticText.html#getLabel/1","title":"wxStaticText.getLabel/1","type":"function"},{"doc":"Default constructor.","ref":"wxStaticText.html#new/0","title":"wxStaticText.new/0","type":"function"},{"doc":"","ref":"wxStaticText.html#new/3","title":"wxStaticText.new/3","type":"function"},{"doc":"Constructor, creating and showing a text control. See: create/5","ref":"wxStaticText.html#new/4","title":"wxStaticText.new/4","type":"function"},{"doc":"Change the label shown in the control. Notice that since wxWidgets 3.1.1 this function is guaranteed not to do anything if the label didn't really change, so there is no benefit to checking if the new label is different from the current one in the application code. See: wxControl:setLabel/2","ref":"wxStaticText.html#setLabel/2","title":"wxStaticText.setLabel/2","type":"function"},{"doc":"This functions wraps the controls label so that each of its lines becomes at most width pixels wide if possible (the lines are broken at words boundaries so it might not be the case if words are too long). If width is negative, no wrapping is done. Note that this width is not necessarily the total width of the control, since a few pixels for the border (depending on the controls border style) may be added. Since: 2.6.2","ref":"wxStaticText.html#wrap/2","title":"wxStaticText.wrap/2","type":"function"},{"doc":"","ref":"wxStaticText.html#t:wxStaticText/0","title":"wxStaticText.wxStaticText/0","type":"type"},{"doc":"A status bar is a narrow window that can be placed along the bottom of a frame to give small amounts of status information. It can contain one or more fields, one or more of which can be variable length according to the size of the window. wxStatusBar also maintains an independent stack of status texts for each field (see pushStatusText/3 and popStatusText/2 ). Note that in wxStatusBar context, the terms pane and field are synonyms. Styles This class supports the following styles: Remark: It is possible to create controls and other windows on the status bar. Position these windows from an OnSize() event handler. Remark: Notice that only the first 127 characters of a string will be shown in status bar fields under Windows if a proper manifest indicating that the program uses version 6 of common controls library is not used. This is a limitation of the native control on these platforms. See: wxStatusBarPane (not implemented in wx), wxFrame , Examples This class is derived (and can use functions) from: wxWindow wxEvtHandler wxWidgets docs: wxStatusBar","ref":"wxStatusBar.html","title":"wxStatusBar","type":"module"},{"doc":"","ref":"wxStatusBar.html#create/2","title":"wxStatusBar.create/2","type":"function"},{"doc":"Creates the window, for two-step construction. See new/2 for details.","ref":"wxStatusBar.html#create/3","title":"wxStatusBar.create/3","type":"function"},{"doc":"Destructor.","ref":"wxStatusBar.html#destroy/1","title":"wxStatusBar.destroy/1","type":"function"},{"doc":"Returns the size and position of a field's internal bounding rectangle. Return: true if the field index is valid, false otherwise. See: {X,Y,W,H}","ref":"wxStatusBar.html#getFieldRect/2","title":"wxStatusBar.getFieldRect/2","type":"function"},{"doc":"Returns the number of fields in the status bar.","ref":"wxStatusBar.html#getFieldsCount/1","title":"wxStatusBar.getFieldsCount/1","type":"function"},{"doc":"","ref":"wxStatusBar.html#getStatusText/1","title":"wxStatusBar.getStatusText/1","type":"function"},{"doc":"Returns the string associated with a status bar field. Return: The status field string if the field is valid, otherwise the empty string. See: setStatusText/3","ref":"wxStatusBar.html#getStatusText/2","title":"wxStatusBar.getStatusText/2","type":"function"},{"doc":"Default ctor.","ref":"wxStatusBar.html#new/0","title":"wxStatusBar.new/0","type":"function"},{"doc":"","ref":"wxStatusBar.html#new/1","title":"wxStatusBar.new/1","type":"function"},{"doc":"Constructor, creating the window. See: create/3","ref":"wxStatusBar.html#new/2","title":"wxStatusBar.new/2","type":"function"},{"doc":"","ref":"wxStatusBar.html#popStatusText/1","title":"wxStatusBar.popStatusText/1","type":"function"},{"doc":"Restores the text to the value it had before the last call to pushStatusText/3 . Notice that if setStatusText/3 had been called in the meanwhile, popStatusText/2 will not change the text, i.e. it does not override explicit changes to status text but only restores the saved text if it hadn't been changed since. See: pushStatusText/3","ref":"wxStatusBar.html#popStatusText/2","title":"wxStatusBar.popStatusText/2","type":"function"},{"doc":"","ref":"wxStatusBar.html#pushStatusText/2","title":"wxStatusBar.pushStatusText/2","type":"function"},{"doc":"Saves the current field text in a per-field stack, and sets the field text to the string passed as argument. See: popStatusText/2","ref":"wxStatusBar.html#pushStatusText/3","title":"wxStatusBar.pushStatusText/3","type":"function"},{"doc":"","ref":"wxStatusBar.html#setFieldsCount/2","title":"wxStatusBar.setFieldsCount/2","type":"function"},{"doc":"Sets the number of fields, and optionally the field widths.","ref":"wxStatusBar.html#setFieldsCount/3","title":"wxStatusBar.setFieldsCount/3","type":"function"},{"doc":"Sets the minimal possible height for the status bar. The real height may be bigger than the height specified here depending on the size of the font used by the status bar.","ref":"wxStatusBar.html#setMinHeight/2","title":"wxStatusBar.setMinHeight/2","type":"function"},{"doc":"Sets the styles of the fields in the status line which can make fields appear flat or raised instead of the standard sunken 3D border.","ref":"wxStatusBar.html#setStatusStyles/2","title":"wxStatusBar.setStatusStyles/2","type":"function"},{"doc":"","ref":"wxStatusBar.html#setStatusText/2","title":"wxStatusBar.setStatusText/2","type":"function"},{"doc":"Sets the status text for the i-th field. The given text will replace the current text. The display of the status bar is updated immediately, so there is no need to call wxWindow:update/1 after calling this function. Note that if pushStatusText/3 had been called before the new text will also replace the last saved value to make sure that the next call to popStatusText/2 doesn't restore the old value, which was overwritten by the call to this function. See: getStatusText/2 , wxFrame:setStatusText/3","ref":"wxStatusBar.html#setStatusText/3","title":"wxStatusBar.setStatusText/3","type":"function"},{"doc":"Sets the widths of the fields in the status line. There are two types of fields: fixed widths and variable width fields. For the fixed width fields you should specify their (constant) width in pixels. For the variable width fields, specify a negative number which indicates how the field should expand: the space left for all variable width fields is divided between them according to the absolute value of this number. A variable width field with width of -2 gets twice as much of it as a field with width -1 and so on. For example, to create one fixed width field of width 100 in the right part of the status bar and two more fields which get 66% and 33% of the remaining space correspondingly, you should use an array containing -2, -1 and 100. Remark: The widths of the variable fields are calculated from the total width of all fields, minus the sum of widths of the non-variable fields, divided by the number of variable fields. See: setFieldsCount/3 , wxFrame:setStatusWidths/2","ref":"wxStatusBar.html#setStatusWidths/2","title":"wxStatusBar.setStatusWidths/2","type":"function"},{"doc":"","ref":"wxStatusBar.html#t:wxStatusBar/0","title":"wxStatusBar.wxStatusBar/0","type":"type"},{"doc":"This class creates button layouts which conform to the standard button spacing and ordering defined by the platform or toolkit's user interface guidelines (if such things exist). By using this class, you can ensure that all your standard dialogs look correct on all major platforms. Currently it conforms to the Windows, GTK+ and macOS human interface guidelines. When there aren't interface guidelines defined for a particular platform or toolkit, wxStdDialogButtonSizer reverts to the Windows implementation. To use this class, first add buttons to the sizer by calling addButton/2 (or setAffirmativeButton/2 , setNegativeButton/2 or setCancelButton/2 ) and then call Realize in order to create the actual button layout used. Other than these special operations, this sizer works like any other sizer. If you add a button with wxID_SAVE, on macOS the button will be renamed to &quot;Save&quot; and the wxID_NO button will be renamed to &quot;Don't Save&quot; in accordance with the macOS Human Interface Guidelines. See: wxSizer , Overview sizer , wxDialog:createButtonSizer/2 This class is derived (and can use functions) from: wxBoxSizer wxSizer wxWidgets docs: wxStdDialogButtonSizer","ref":"wxStdDialogButtonSizer.html","title":"wxStdDialogButtonSizer","type":"module"},{"doc":"Adds a button to the wxStdDialogButtonSizer . The button must have one of the following identifiers:","ref":"wxStdDialogButtonSizer.html#addButton/2","title":"wxStdDialogButtonSizer.addButton/2","type":"function"},{"doc":"Destroys the object.","ref":"wxStdDialogButtonSizer.html#destroy/1","title":"wxStdDialogButtonSizer.destroy/1","type":"function"},{"doc":"Constructor for a wxStdDialogButtonSizer .","ref":"wxStdDialogButtonSizer.html#new/0","title":"wxStdDialogButtonSizer.new/0","type":"function"},{"doc":"Rearranges the buttons and applies proper spacing between buttons to make them match the platform or toolkit's interface guidelines.","ref":"wxStdDialogButtonSizer.html#realize/1","title":"wxStdDialogButtonSizer.realize/1","type":"function"},{"doc":"Sets the affirmative button for the sizer. This allows you to use identifiers other than the standard identifiers outlined above.","ref":"wxStdDialogButtonSizer.html#setAffirmativeButton/2","title":"wxStdDialogButtonSizer.setAffirmativeButton/2","type":"function"},{"doc":"Sets the cancel button for the sizer. This allows you to use identifiers other than the standard identifiers outlined above.","ref":"wxStdDialogButtonSizer.html#setCancelButton/2","title":"wxStdDialogButtonSizer.setCancelButton/2","type":"function"},{"doc":"Sets the negative button for the sizer. This allows you to use identifiers other than the standard identifiers outlined above.","ref":"wxStdDialogButtonSizer.html#setNegativeButton/2","title":"wxStdDialogButtonSizer.setNegativeButton/2","type":"function"},{"doc":"","ref":"wxStdDialogButtonSizer.html#t:wxStdDialogButtonSizer/0","title":"wxStdDialogButtonSizer.wxStdDialogButtonSizer/0","type":"type"},{"doc":"A wxWidgets implementation of the Scintilla source code editing component. As well as features found in standard text editing components, Scintilla includes features especially useful when editing and debugging source code. These include support for syntax styling, error indicators, code completion and call tips. The selection margin can contain markers like those used in debuggers to indicate breakpoints and the current line. Styling choices are more open than with many editors, allowing the use of proportional fonts, bold and italics, multiple foreground and background colours and multiple fonts. wxStyledTextCtrl is a 1 to 1 mapping of &quot;raw&quot; scintilla interface, whose documentation can be found in the Scintilla website ( http://www.scintilla.org/ ). Please see wxStyledTextEvent for the documentation of all event types you can use with wxStyledTextCtrl . Index of the member groups Links for quick access to the various categories of wxStyledTextCtrl functions: See: wxStyledTextEvent This class is derived (and can use functions) from: wxControl wxWindow wxEvtHandler wxWidgets docs: wxStyledTextCtrl","ref":"wxStyledTextCtrl.html","title":"wxStyledTextCtrl","type":"module"},{"doc":"Add text to the document at current position.","ref":"wxStyledTextCtrl.html#addText/2","title":"wxStyledTextCtrl.addText/2","type":"function"},{"doc":"","ref":"wxStyledTextCtrl.html#addTextRaw/2","title":"wxStyledTextCtrl.addTextRaw/2","type":"function"},{"doc":"Add text to the document at current position.","ref":"wxStyledTextCtrl.html#addTextRaw/3","title":"wxStyledTextCtrl.addTextRaw/3","type":"function"},{"doc":"Enlarge the document to a particular size of text bytes.","ref":"wxStyledTextCtrl.html#allocate/2","title":"wxStyledTextCtrl.allocate/2","type":"function"},{"doc":"Append a string to the end of the document without changing the selection.","ref":"wxStyledTextCtrl.html#appendText/2","title":"wxStyledTextCtrl.appendText/2","type":"function"},{"doc":"","ref":"wxStyledTextCtrl.html#appendTextRaw/2","title":"wxStyledTextCtrl.appendTextRaw/2","type":"function"},{"doc":"Append a string to the end of the document without changing the selection.","ref":"wxStyledTextCtrl.html#appendTextRaw/3","title":"wxStyledTextCtrl.appendTextRaw/3","type":"function"},{"doc":"Is there an auto-completion list visible?","ref":"wxStyledTextCtrl.html#autoCompActive/1","title":"wxStyledTextCtrl.autoCompActive/1","type":"function"},{"doc":"Remove the auto-completion list from the screen.","ref":"wxStyledTextCtrl.html#autoCompCancel/1","title":"wxStyledTextCtrl.autoCompCancel/1","type":"function"},{"doc":"User has selected an item so remove the list and insert the selection.","ref":"wxStyledTextCtrl.html#autoCompComplete/1","title":"wxStyledTextCtrl.autoCompComplete/1","type":"function"},{"doc":"Retrieve whether or not autocompletion is hidden automatically when nothing matches.","ref":"wxStyledTextCtrl.html#autoCompGetAutoHide/1","title":"wxStyledTextCtrl.autoCompGetAutoHide/1","type":"function"},{"doc":"Retrieve whether auto-completion cancelled by backspacing before start.","ref":"wxStyledTextCtrl.html#autoCompGetCancelAtStart/1","title":"wxStyledTextCtrl.autoCompGetCancelAtStart/1","type":"function"},{"doc":"Retrieve whether a single item auto-completion list automatically choose the item.","ref":"wxStyledTextCtrl.html#autoCompGetChooseSingle/1","title":"wxStyledTextCtrl.autoCompGetChooseSingle/1","type":"function"},{"doc":"Get currently selected item position in the auto-completion list.","ref":"wxStyledTextCtrl.html#autoCompGetCurrent/1","title":"wxStyledTextCtrl.autoCompGetCurrent/1","type":"function"},{"doc":"Retrieve whether or not autocompletion deletes any word characters after the inserted text upon completion.","ref":"wxStyledTextCtrl.html#autoCompGetDropRestOfWord/1","title":"wxStyledTextCtrl.autoCompGetDropRestOfWord/1","type":"function"},{"doc":"Retrieve state of ignore case flag.","ref":"wxStyledTextCtrl.html#autoCompGetIgnoreCase/1","title":"wxStyledTextCtrl.autoCompGetIgnoreCase/1","type":"function"},{"doc":"Set the maximum height, in rows, of auto-completion and user lists.","ref":"wxStyledTextCtrl.html#autoCompGetMaxHeight/1","title":"wxStyledTextCtrl.autoCompGetMaxHeight/1","type":"function"},{"doc":"Get the maximum width, in characters, of auto-completion and user lists.","ref":"wxStyledTextCtrl.html#autoCompGetMaxWidth/1","title":"wxStyledTextCtrl.autoCompGetMaxWidth/1","type":"function"},{"doc":"Retrieve the auto-completion list separator character.","ref":"wxStyledTextCtrl.html#autoCompGetSeparator/1","title":"wxStyledTextCtrl.autoCompGetSeparator/1","type":"function"},{"doc":"Retrieve the auto-completion list type-separator character.","ref":"wxStyledTextCtrl.html#autoCompGetTypeSeparator/1","title":"wxStyledTextCtrl.autoCompGetTypeSeparator/1","type":"function"},{"doc":"Retrieve the position of the caret when the auto-completion list was displayed.","ref":"wxStyledTextCtrl.html#autoCompPosStart/1","title":"wxStyledTextCtrl.autoCompPosStart/1","type":"function"},{"doc":"Select the item in the auto-completion list that starts with a string.","ref":"wxStyledTextCtrl.html#autoCompSelect/2","title":"wxStyledTextCtrl.autoCompSelect/2","type":"function"},{"doc":"Set whether or not autocompletion is hidden automatically when nothing matches.","ref":"wxStyledTextCtrl.html#autoCompSetAutoHide/2","title":"wxStyledTextCtrl.autoCompSetAutoHide/2","type":"function"},{"doc":"Should the auto-completion list be cancelled if the user backspaces to a position before where the box was created.","ref":"wxStyledTextCtrl.html#autoCompSetCancelAtStart/2","title":"wxStyledTextCtrl.autoCompSetCancelAtStart/2","type":"function"},{"doc":"Should a single item auto-completion list automatically choose the item.","ref":"wxStyledTextCtrl.html#autoCompSetChooseSingle/2","title":"wxStyledTextCtrl.autoCompSetChooseSingle/2","type":"function"},{"doc":"Set whether or not autocompletion deletes any word characters after the inserted text upon completion.","ref":"wxStyledTextCtrl.html#autoCompSetDropRestOfWord/2","title":"wxStyledTextCtrl.autoCompSetDropRestOfWord/2","type":"function"},{"doc":"Define a set of characters that when typed will cause the autocompletion to choose the selected item.","ref":"wxStyledTextCtrl.html#autoCompSetFillUps/2","title":"wxStyledTextCtrl.autoCompSetFillUps/2","type":"function"},{"doc":"Set whether case is significant when performing auto-completion searches.","ref":"wxStyledTextCtrl.html#autoCompSetIgnoreCase/2","title":"wxStyledTextCtrl.autoCompSetIgnoreCase/2","type":"function"},{"doc":"Set the maximum height, in rows, of auto-completion and user lists. The default is 5 rows.","ref":"wxStyledTextCtrl.html#autoCompSetMaxHeight/2","title":"wxStyledTextCtrl.autoCompSetMaxHeight/2","type":"function"},{"doc":"Set the maximum width, in characters, of auto-completion and user lists. Set to 0 to autosize to fit longest item, which is the default.","ref":"wxStyledTextCtrl.html#autoCompSetMaxWidth/2","title":"wxStyledTextCtrl.autoCompSetMaxWidth/2","type":"function"},{"doc":"Change the separator character in the string setting up an auto-completion list. Default is space but can be changed if items contain space.","ref":"wxStyledTextCtrl.html#autoCompSetSeparator/2","title":"wxStyledTextCtrl.autoCompSetSeparator/2","type":"function"},{"doc":"Change the type-separator character in the string setting up an auto-completion list. Default is '?' but can be changed if items contain '?'.","ref":"wxStyledTextCtrl.html#autoCompSetTypeSeparator/2","title":"wxStyledTextCtrl.autoCompSetTypeSeparator/2","type":"function"},{"doc":"Display a auto-completion list. The lengthEntered parameter indicates how many characters before the caret should be used to provide context.","ref":"wxStyledTextCtrl.html#autoCompShow/3","title":"wxStyledTextCtrl.autoCompShow/3","type":"function"},{"doc":"Define a set of character that when typed cancel the auto-completion list.","ref":"wxStyledTextCtrl.html#autoCompStops/2","title":"wxStyledTextCtrl.autoCompStops/2","type":"function"},{"doc":"Dedent the selected lines.","ref":"wxStyledTextCtrl.html#backTab/1","title":"wxStyledTextCtrl.backTab/1","type":"function"},{"doc":"Start a sequence of actions that is undone and redone as a unit. May be nested.","ref":"wxStyledTextCtrl.html#beginUndoAction/1","title":"wxStyledTextCtrl.beginUndoAction/1","type":"function"},{"doc":"Highlight the character at a position indicating there is no matching brace.","ref":"wxStyledTextCtrl.html#braceBadLight/2","title":"wxStyledTextCtrl.braceBadLight/2","type":"function"},{"doc":"Highlight the characters at two positions.","ref":"wxStyledTextCtrl.html#braceHighlight/3","title":"wxStyledTextCtrl.braceHighlight/3","type":"function"},{"doc":"Find the position of a matching brace or wxSTC_INVALID_POSITION if no match.","ref":"wxStyledTextCtrl.html#braceMatch/2","title":"wxStyledTextCtrl.braceMatch/2","type":"function"},{"doc":"Is there an active call tip?","ref":"wxStyledTextCtrl.html#callTipActive/1","title":"wxStyledTextCtrl.callTipActive/1","type":"function"},{"doc":"Remove the call tip from the screen.","ref":"wxStyledTextCtrl.html#callTipCancel/1","title":"wxStyledTextCtrl.callTipCancel/1","type":"function"},{"doc":"Retrieve the position where the caret was before displaying the call tip. Since: 3.1.0","ref":"wxStyledTextCtrl.html#callTipPosAtStart/1","title":"wxStyledTextCtrl.callTipPosAtStart/1","type":"function"},{"doc":"Set the background colour for the call tip.","ref":"wxStyledTextCtrl.html#callTipSetBackground/2","title":"wxStyledTextCtrl.callTipSetBackground/2","type":"function"},{"doc":"Set the foreground colour for the call tip.","ref":"wxStyledTextCtrl.html#callTipSetForeground/2","title":"wxStyledTextCtrl.callTipSetForeground/2","type":"function"},{"doc":"Set the foreground colour for the highlighted part of the call tip.","ref":"wxStyledTextCtrl.html#callTipSetForegroundHighlight/2","title":"wxStyledTextCtrl.callTipSetForegroundHighlight/2","type":"function"},{"doc":"Highlight a segment of the definition.","ref":"wxStyledTextCtrl.html#callTipSetHighlight/3","title":"wxStyledTextCtrl.callTipSetHighlight/3","type":"function"},{"doc":"Show a call tip containing a definition near position pos.","ref":"wxStyledTextCtrl.html#callTipShow/3","title":"wxStyledTextCtrl.callTipShow/3","type":"function"},{"doc":"Enable use of wxSTC_STYLE_CALLTIP and set call tip tab size in pixels.","ref":"wxStyledTextCtrl.html#callTipUseStyle/2","title":"wxStyledTextCtrl.callTipUseStyle/2","type":"function"},{"doc":"Will a paste succeed?","ref":"wxStyledTextCtrl.html#canPaste/1","title":"wxStyledTextCtrl.canPaste/1","type":"function"},{"doc":"Are there any redoable actions in the undo history?","ref":"wxStyledTextCtrl.html#canRedo/1","title":"wxStyledTextCtrl.canRedo/1","type":"function"},{"doc":"Are there any undoable actions in the undo history?","ref":"wxStyledTextCtrl.html#canUndo/1","title":"wxStyledTextCtrl.canUndo/1","type":"function"},{"doc":"Cancel any modes such as call tip or auto-completion list display.","ref":"wxStyledTextCtrl.html#cancel/1","title":"wxStyledTextCtrl.cancel/1","type":"function"},{"doc":"Move caret left one character.","ref":"wxStyledTextCtrl.html#charLeft/1","title":"wxStyledTextCtrl.charLeft/1","type":"function"},{"doc":"Move caret left one character extending selection to new caret position.","ref":"wxStyledTextCtrl.html#charLeftExtend/1","title":"wxStyledTextCtrl.charLeftExtend/1","type":"function"},{"doc":"Move caret left one character, extending rectangular selection to new caret position.","ref":"wxStyledTextCtrl.html#charLeftRectExtend/1","title":"wxStyledTextCtrl.charLeftRectExtend/1","type":"function"},{"doc":"Move caret right one character.","ref":"wxStyledTextCtrl.html#charRight/1","title":"wxStyledTextCtrl.charRight/1","type":"function"},{"doc":"Move caret right one character extending selection to new caret position.","ref":"wxStyledTextCtrl.html#charRightExtend/1","title":"wxStyledTextCtrl.charRightExtend/1","type":"function"},{"doc":"Move caret right one character, extending rectangular selection to new caret position.","ref":"wxStyledTextCtrl.html#charRightRectExtend/1","title":"wxStyledTextCtrl.charRightRectExtend/1","type":"function"},{"doc":"Set the last x chosen value to be the caret x position.","ref":"wxStyledTextCtrl.html#chooseCaretX/1","title":"wxStyledTextCtrl.chooseCaretX/1","type":"function"},{"doc":"Clear the selection.","ref":"wxStyledTextCtrl.html#clear/1","title":"wxStyledTextCtrl.clear/1","type":"function"},{"doc":"Delete all text in the document.","ref":"wxStyledTextCtrl.html#clearAll/1","title":"wxStyledTextCtrl.clearAll/1","type":"function"},{"doc":"Set all style bytes to 0, remove all folding information.","ref":"wxStyledTextCtrl.html#clearDocumentStyle/1","title":"wxStyledTextCtrl.clearDocumentStyle/1","type":"function"},{"doc":"Clear all the registered images.","ref":"wxStyledTextCtrl.html#clearRegisteredImages/1","title":"wxStyledTextCtrl.clearRegisteredImages/1","type":"function"},{"doc":"When key+modifier combination keyDefinition is pressed perform sciCommand. The second argument should be a bit list containing one or more of the ?wxSTC_KEYMOD_* constants and the third argument should be one of the ?wxSTC_CMD_* constants.","ref":"wxStyledTextCtrl.html#cmdKeyAssign/4","title":"wxStyledTextCtrl.cmdKeyAssign/4","type":"function"},{"doc":"When key+modifier combination keyDefinition is pressed do nothing. The second argument should be a bit list containing one or more of the ?wxSTC_KEYMOD_* constants.","ref":"wxStyledTextCtrl.html#cmdKeyClear/3","title":"wxStyledTextCtrl.cmdKeyClear/3","type":"function"},{"doc":"Drop all key mappings.","ref":"wxStyledTextCtrl.html#cmdKeyClearAll/1","title":"wxStyledTextCtrl.cmdKeyClearAll/1","type":"function"},{"doc":"Perform one of the operations defined by the wxSTC_CMD_* constants.","ref":"wxStyledTextCtrl.html#cmdKeyExecute/2","title":"wxStyledTextCtrl.cmdKeyExecute/2","type":"function"},{"doc":"Colourise a segment of the document using the current lexing language.","ref":"wxStyledTextCtrl.html#colourise/3","title":"wxStyledTextCtrl.colourise/3","type":"function"},{"doc":"Convert all line endings in the document to one mode.","ref":"wxStyledTextCtrl.html#convertEOLs/2","title":"wxStyledTextCtrl.convertEOLs/2","type":"function"},{"doc":"Copy the selection to the clipboard.","ref":"wxStyledTextCtrl.html#copy/1","title":"wxStyledTextCtrl.copy/1","type":"function"},{"doc":"Copy a range of text to the clipboard. Positions are clipped into the document.","ref":"wxStyledTextCtrl.html#copyRange/3","title":"wxStyledTextCtrl.copyRange/3","type":"function"},{"doc":"Copy argument text to the clipboard.","ref":"wxStyledTextCtrl.html#copyText/3","title":"wxStyledTextCtrl.copyText/3","type":"function"},{"doc":"","ref":"wxStyledTextCtrl.html#create/2","title":"wxStyledTextCtrl.create/2","type":"function"},{"doc":"Create the UI elements for a STC that was created with the default ctor. (For 2-phase create.)","ref":"wxStyledTextCtrl.html#create/3","title":"wxStyledTextCtrl.create/3","type":"function"},{"doc":"Cut the selection to the clipboard.","ref":"wxStyledTextCtrl.html#cut/1","title":"wxStyledTextCtrl.cut/1","type":"function"},{"doc":"Delete back from the current position to the start of the line.","ref":"wxStyledTextCtrl.html#delLineLeft/1","title":"wxStyledTextCtrl.delLineLeft/1","type":"function"},{"doc":"Delete forwards from the current position to the end of the line.","ref":"wxStyledTextCtrl.html#delLineRight/1","title":"wxStyledTextCtrl.delLineRight/1","type":"function"},{"doc":"Delete the word to the left of the caret.","ref":"wxStyledTextCtrl.html#delWordLeft/1","title":"wxStyledTextCtrl.delWordLeft/1","type":"function"},{"doc":"Delete the word to the right of the caret.","ref":"wxStyledTextCtrl.html#delWordRight/1","title":"wxStyledTextCtrl.delWordRight/1","type":"function"},{"doc":"Delete the selection or if no selection, the character before the caret.","ref":"wxStyledTextCtrl.html#deleteBack/1","title":"wxStyledTextCtrl.deleteBack/1","type":"function"},{"doc":"Delete the selection or if no selection, the character before the caret. Will not delete the character before at the start of a line.","ref":"wxStyledTextCtrl.html#deleteBackNotLine/1","title":"wxStyledTextCtrl.deleteBackNotLine/1","type":"function"},{"doc":"Destructor.","ref":"wxStyledTextCtrl.html#destroy/1","title":"wxStyledTextCtrl.destroy/1","type":"function"},{"doc":"Allow for simulating a DnD DragOver.","ref":"wxStyledTextCtrl.html#doDragOver/4","title":"wxStyledTextCtrl.doDragOver/4","type":"function"},{"doc":"Allow for simulating a DnD DropText.","ref":"wxStyledTextCtrl.html#doDropText/4","title":"wxStyledTextCtrl.doDropText/4","type":"function"},{"doc":"Find the document line of a display line taking hidden lines into account.","ref":"wxStyledTextCtrl.html#docLineFromVisible/2","title":"wxStyledTextCtrl.docLineFromVisible/2","type":"function"},{"doc":"Move caret to last position in document.","ref":"wxStyledTextCtrl.html#documentEnd/1","title":"wxStyledTextCtrl.documentEnd/1","type":"function"},{"doc":"Move caret to last position in document extending selection to new caret position.","ref":"wxStyledTextCtrl.html#documentEndExtend/1","title":"wxStyledTextCtrl.documentEndExtend/1","type":"function"},{"doc":"Move caret to first position in document.","ref":"wxStyledTextCtrl.html#documentStart/1","title":"wxStyledTextCtrl.documentStart/1","type":"function"},{"doc":"Move caret to first position in document extending selection to new caret position.","ref":"wxStyledTextCtrl.html#documentStartExtend/1","title":"wxStyledTextCtrl.documentStartExtend/1","type":"function"},{"doc":"Switch from insert to overtype mode or the reverse.","ref":"wxStyledTextCtrl.html#editToggleOvertype/1","title":"wxStyledTextCtrl.editToggleOvertype/1","type":"function"},{"doc":"Delete the undo history.","ref":"wxStyledTextCtrl.html#emptyUndoBuffer/1","title":"wxStyledTextCtrl.emptyUndoBuffer/1","type":"function"},{"doc":"End a sequence of actions that is undone and redone as a unit.","ref":"wxStyledTextCtrl.html#endUndoAction/1","title":"wxStyledTextCtrl.endUndoAction/1","type":"function"},{"doc":"Ensure the caret is visible.","ref":"wxStyledTextCtrl.html#ensureCaretVisible/1","title":"wxStyledTextCtrl.ensureCaretVisible/1","type":"function"},{"doc":"Ensure a particular line is visible by expanding any header line hiding it.","ref":"wxStyledTextCtrl.html#ensureVisible/2","title":"wxStyledTextCtrl.ensureVisible/2","type":"function"},{"doc":"Ensure a particular line is visible by expanding any header line hiding it. Use the currently set visibility policy to determine which range to display.","ref":"wxStyledTextCtrl.html#ensureVisibleEnforcePolicy/2","title":"wxStyledTextCtrl.ensureVisibleEnforcePolicy/2","type":"function"},{"doc":"Find the position of a column on a line taking into account tabs and multi-byte characters. If beyond end of line, return line end position.","ref":"wxStyledTextCtrl.html#findColumn/3","title":"wxStyledTextCtrl.findColumn/3","type":"function"},{"doc":"","ref":"wxStyledTextCtrl.html#findText/4","title":"wxStyledTextCtrl.findText/4","type":"function"},{"doc":"Find some text in the document. @param minPos The position (starting from zero) in the document at which to begin the search @param maxPos The last position (starting from zero) in the document to which the search will be restricted. @param text The text to search for. @param flags (Optional) The search flags. This should be a bit list containing one or more of the @link wxStyledTextCtrl::wxSTC_FIND_WHOLEWORD wxSTC_FIND_* @endlink constants. Return: The position (starting from zero) in the document at which the text was found or wxSTC_INVALID_POSITION if the search fails. Remark: A backwards search can be performed by setting minPos to be greater than maxPos.","ref":"wxStyledTextCtrl.html#findText/5","title":"wxStyledTextCtrl.findText/5","type":"function"},{"doc":"Insert a Form Feed character.","ref":"wxStyledTextCtrl.html#formFeed/1","title":"wxStyledTextCtrl.formFeed/1","type":"function"},{"doc":"On Windows, will draw the document into a display context such as a printer.","ref":"wxStyledTextCtrl.html#formatRange/8","title":"wxStyledTextCtrl.formatRange/8","type":"function"},{"doc":"Returns the position of the opposite end of the selection to the caret.","ref":"wxStyledTextCtrl.html#getAnchor/1","title":"wxStyledTextCtrl.getAnchor/1","type":"function"},{"doc":"Does a backspace pressed when caret is within indentation unindent?","ref":"wxStyledTextCtrl.html#getBackSpaceUnIndents/1","title":"wxStyledTextCtrl.getBackSpaceUnIndents/1","type":"function"},{"doc":"Is drawing done first into a buffer or direct to the screen?","ref":"wxStyledTextCtrl.html#getBufferedDraw/1","title":"wxStyledTextCtrl.getBufferedDraw/1","type":"function"},{"doc":"Get the foreground colour of the caret.","ref":"wxStyledTextCtrl.html#getCaretForeground/1","title":"wxStyledTextCtrl.getCaretForeground/1","type":"function"},{"doc":"Get the background alpha of the caret line.","ref":"wxStyledTextCtrl.html#getCaretLineBackAlpha/1","title":"wxStyledTextCtrl.getCaretLineBackAlpha/1","type":"function"},{"doc":"Get the colour of the background of the line containing the caret.","ref":"wxStyledTextCtrl.html#getCaretLineBackground/1","title":"wxStyledTextCtrl.getCaretLineBackground/1","type":"function"},{"doc":"Is the background of the line containing the caret in a different colour?","ref":"wxStyledTextCtrl.html#getCaretLineVisible/1","title":"wxStyledTextCtrl.getCaretLineVisible/1","type":"function"},{"doc":"Get the time in milliseconds that the caret is on and off.","ref":"wxStyledTextCtrl.html#getCaretPeriod/1","title":"wxStyledTextCtrl.getCaretPeriod/1","type":"function"},{"doc":"Can the caret preferred x position only be changed by explicit movement commands? The return value will be one of the ?wxSTC_CARETSTICKY_* constants.","ref":"wxStyledTextCtrl.html#getCaretSticky/1","title":"wxStyledTextCtrl.getCaretSticky/1","type":"function"},{"doc":"Returns the width of the insert mode caret.","ref":"wxStyledTextCtrl.html#getCaretWidth/1","title":"wxStyledTextCtrl.getCaretWidth/1","type":"function"},{"doc":"Returns the character byte at the position.","ref":"wxStyledTextCtrl.html#getCharAt/2","title":"wxStyledTextCtrl.getCharAt/2","type":"function"},{"doc":"Get the code page used to interpret the bytes of the document as characters.","ref":"wxStyledTextCtrl.html#getCodePage/1","title":"wxStyledTextCtrl.getCodePage/1","type":"function"},{"doc":"Retrieve the column number of a position, taking tab width into account.","ref":"wxStyledTextCtrl.html#getColumn/2","title":"wxStyledTextCtrl.getColumn/2","type":"function"},{"doc":"Get the way control characters are displayed.","ref":"wxStyledTextCtrl.html#getControlCharSymbol/1","title":"wxStyledTextCtrl.getControlCharSymbol/1","type":"function"},{"doc":"Retrieve the text of the line containing the caret. linePos can optionally be passed in to receive the index of the caret on the line.","ref":"wxStyledTextCtrl.html#getCurLine/1","title":"wxStyledTextCtrl.getCurLine/1","type":"function"},{"doc":"Retrieve the text of the line containing the caret. Returns the index of the caret on the line.","ref":"wxStyledTextCtrl.html#getCurLineRaw/1","title":"wxStyledTextCtrl.getCurLineRaw/1","type":"function"},{"doc":"Returns the line number of the line with the caret.","ref":"wxStyledTextCtrl.html#getCurrentLine/1","title":"wxStyledTextCtrl.getCurrentLine/1","type":"function"},{"doc":"Returns the position of the caret.","ref":"wxStyledTextCtrl.html#getCurrentPos/1","title":"wxStyledTextCtrl.getCurrentPos/1","type":"function"},{"doc":"Retrieve the current end of line mode - one of wxSTC_EOL_CRLF, wxSTC_EOL_CR, or wxSTC_EOL_LF.","ref":"wxStyledTextCtrl.html#getEOLMode/1","title":"wxStyledTextCtrl.getEOLMode/1","type":"function"},{"doc":"Retrieve the colour used in edge indication.","ref":"wxStyledTextCtrl.html#getEdgeColour/1","title":"wxStyledTextCtrl.getEdgeColour/1","type":"function"},{"doc":"Retrieve the column number which text should be kept within.","ref":"wxStyledTextCtrl.html#getEdgeColumn/1","title":"wxStyledTextCtrl.getEdgeColumn/1","type":"function"},{"doc":"Retrieve the edge highlight mode. The return value will be one of the ?wxSTC_EDGE_* constants.","ref":"wxStyledTextCtrl.html#getEdgeMode/1","title":"wxStyledTextCtrl.getEdgeMode/1","type":"function"},{"doc":"Retrieve whether the maximum scroll position has the last line at the bottom of the view.","ref":"wxStyledTextCtrl.html#getEndAtLastLine/1","title":"wxStyledTextCtrl.getEndAtLastLine/1","type":"function"},{"doc":"Retrieve the position of the last correctly styled character.","ref":"wxStyledTextCtrl.html#getEndStyled/1","title":"wxStyledTextCtrl.getEndStyled/1","type":"function"},{"doc":"Retrieve the display line at the top of the display.","ref":"wxStyledTextCtrl.html#getFirstVisibleLine/1","title":"wxStyledTextCtrl.getFirstVisibleLine/1","type":"function"},{"doc":"Is a header line expanded?","ref":"wxStyledTextCtrl.html#getFoldExpanded/2","title":"wxStyledTextCtrl.getFoldExpanded/2","type":"function"},{"doc":"Retrieve the fold level of a line.","ref":"wxStyledTextCtrl.html#getFoldLevel/2","title":"wxStyledTextCtrl.getFoldLevel/2","type":"function"},{"doc":"Find the parent line of a child line.","ref":"wxStyledTextCtrl.html#getFoldParent/2","title":"wxStyledTextCtrl.getFoldParent/2","type":"function"},{"doc":"Get the highlighted indentation guide column.","ref":"wxStyledTextCtrl.html#getHighlightGuide/1","title":"wxStyledTextCtrl.getHighlightGuide/1","type":"function"},{"doc":"Retrieve indentation size.","ref":"wxStyledTextCtrl.html#getIndent/1","title":"wxStyledTextCtrl.getIndent/1","type":"function"},{"doc":"Are the indentation guides visible? The return value will be one of the ?wxSTC_IV_* constants.","ref":"wxStyledTextCtrl.html#getIndentationGuides/1","title":"wxStyledTextCtrl.getIndentationGuides/1","type":"function"},{"doc":"Find the last child line of a header line.","ref":"wxStyledTextCtrl.html#getLastChild/3","title":"wxStyledTextCtrl.getLastChild/3","type":"function"},{"doc":"Can be used to prevent the EVT_CHAR handler from adding the char.","ref":"wxStyledTextCtrl.html#getLastKeydownProcessed/1","title":"wxStyledTextCtrl.getLastKeydownProcessed/1","type":"function"},{"doc":"Retrieve the degree of caching of layout information. The return value will be one of the ?wxSTC_CACHE_* constants.","ref":"wxStyledTextCtrl.html#getLayoutCache/1","title":"wxStyledTextCtrl.getLayoutCache/1","type":"function"},{"doc":"Returns the number of bytes in the document.","ref":"wxStyledTextCtrl.html#getLength/1","title":"wxStyledTextCtrl.getLength/1","type":"function"},{"doc":"Retrieve the lexing language of the document. The return value will be one of the ?wxSTC_LEX_* constants.","ref":"wxStyledTextCtrl.html#getLexer/1","title":"wxStyledTextCtrl.getLexer/1","type":"function"},{"doc":"Retrieve the contents of a line.","ref":"wxStyledTextCtrl.html#getLine/2","title":"wxStyledTextCtrl.getLine/2","type":"function"},{"doc":"Returns the number of lines in the document. There is always at least one.","ref":"wxStyledTextCtrl.html#getLineCount/1","title":"wxStyledTextCtrl.getLineCount/1","type":"function"},{"doc":"Get the position after the last visible characters on a line.","ref":"wxStyledTextCtrl.html#getLineEndPosition/2","title":"wxStyledTextCtrl.getLineEndPosition/2","type":"function"},{"doc":"Retrieve the position before the first non indentation character on a line.","ref":"wxStyledTextCtrl.html#getLineIndentPosition/2","title":"wxStyledTextCtrl.getLineIndentPosition/2","type":"function"},{"doc":"Retrieve the number of columns that a line is indented.","ref":"wxStyledTextCtrl.html#getLineIndentation/2","title":"wxStyledTextCtrl.getLineIndentation/2","type":"function"},{"doc":"Retrieve the contents of a line.","ref":"wxStyledTextCtrl.html#getLineRaw/2","title":"wxStyledTextCtrl.getLineRaw/2","type":"function"},{"doc":"Retrieve the extra styling information for a line.","ref":"wxStyledTextCtrl.html#getLineState/2","title":"wxStyledTextCtrl.getLineState/2","type":"function"},{"doc":"Is a line visible?","ref":"wxStyledTextCtrl.html#getLineVisible/2","title":"wxStyledTextCtrl.getLineVisible/2","type":"function"},{"doc":"Returns the size in pixels of the left margin.","ref":"wxStyledTextCtrl.html#getMarginLeft/1","title":"wxStyledTextCtrl.getMarginLeft/1","type":"function"},{"doc":"Retrieve the marker mask of a margin.","ref":"wxStyledTextCtrl.html#getMarginMask/2","title":"wxStyledTextCtrl.getMarginMask/2","type":"function"},{"doc":"Returns the size in pixels of the right margin.","ref":"wxStyledTextCtrl.html#getMarginRight/1","title":"wxStyledTextCtrl.getMarginRight/1","type":"function"},{"doc":"Retrieve the mouse click sensitivity of a margin.","ref":"wxStyledTextCtrl.html#getMarginSensitive/2","title":"wxStyledTextCtrl.getMarginSensitive/2","type":"function"},{"doc":"Retrieve the type of a margin. The return value will be one of the ?wxSTC_MARGIN_* constants.","ref":"wxStyledTextCtrl.html#getMarginType/2","title":"wxStyledTextCtrl.getMarginType/2","type":"function"},{"doc":"Retrieve the width of a margin in pixels.","ref":"wxStyledTextCtrl.html#getMarginWidth/2","title":"wxStyledTextCtrl.getMarginWidth/2","type":"function"},{"doc":"Retrieve the last line number that has line state.","ref":"wxStyledTextCtrl.html#getMaxLineState/1","title":"wxStyledTextCtrl.getMaxLineState/1","type":"function"},{"doc":"Get which document modification events are sent to the container. The return value will wxSTC_MODEVENTMASKALL if all changes generate events. Otherwise it will be a bit list containing one or more of the ?wxSTC_MOD_* constants, the ?wxSTC_PERFORMED_* constants, wxSTC_STARTACTION, wxSTC_MULTILINEUNDOREDO, wxSTC_MULTISTEPUNDOREDO, and wxSTC_LASTSTEPINUNDOREDO.","ref":"wxStyledTextCtrl.html#getModEventMask/1","title":"wxStyledTextCtrl.getModEventMask/1","type":"function"},{"doc":"Is the document different from when it was last saved?","ref":"wxStyledTextCtrl.html#getModify/1","title":"wxStyledTextCtrl.getModify/1","type":"function"},{"doc":"Get whether mouse gets captured.","ref":"wxStyledTextCtrl.html#getMouseDownCaptures/1","title":"wxStyledTextCtrl.getMouseDownCaptures/1","type":"function"},{"doc":"Retrieve the time the mouse must sit still to generate a mouse dwell event. The return value will be a time in milliseconds or wxSTC_TIME_FOREVER.","ref":"wxStyledTextCtrl.html#getMouseDwellTime/1","title":"wxStyledTextCtrl.getMouseDwellTime/1","type":"function"},{"doc":"Returns true if overtype mode is active otherwise false is returned.","ref":"wxStyledTextCtrl.html#getOvertype/1","title":"wxStyledTextCtrl.getOvertype/1","type":"function"},{"doc":"Get convert-on-paste setting.","ref":"wxStyledTextCtrl.html#getPasteConvertEndings/1","title":"wxStyledTextCtrl.getPasteConvertEndings/1","type":"function"},{"doc":"Returns the print colour mode. The return value will be one of the ?wxSTC_PRINT_* constants.","ref":"wxStyledTextCtrl.html#getPrintColourMode/1","title":"wxStyledTextCtrl.getPrintColourMode/1","type":"function"},{"doc":"Returns the print magnification.","ref":"wxStyledTextCtrl.html#getPrintMagnification/1","title":"wxStyledTextCtrl.getPrintMagnification/1","type":"function"},{"doc":"Is printing line wrapped? The return value will be one of the ?wxSTC_WRAP_* constants.","ref":"wxStyledTextCtrl.html#getPrintWrapMode/1","title":"wxStyledTextCtrl.getPrintWrapMode/1","type":"function"},{"doc":"Retrieve a &quot;property&quot; value previously set with SetProperty.","ref":"wxStyledTextCtrl.html#getProperty/2","title":"wxStyledTextCtrl.getProperty/2","type":"function"},{"doc":"In read-only mode?","ref":"wxStyledTextCtrl.html#getReadOnly/1","title":"wxStyledTextCtrl.getReadOnly/1","type":"function"},{"doc":"Get cursor type. The return value will be one of the ?wxSTC_CURSOR* constants.","ref":"wxStyledTextCtrl.html#getSTCCursor/1","title":"wxStyledTextCtrl.getSTCCursor/1","type":"function"},{"doc":"Get internal focus flag.","ref":"wxStyledTextCtrl.html#getSTCFocus/1","title":"wxStyledTextCtrl.getSTCFocus/1","type":"function"},{"doc":"Retrieve the document width assumed for scrolling.","ref":"wxStyledTextCtrl.html#getScrollWidth/1","title":"wxStyledTextCtrl.getScrollWidth/1","type":"function"},{"doc":"Get the search flags used by SearchInTarget. The return value will be a bit list containing one or more of the ?wxSTC_FIND_* constants.","ref":"wxStyledTextCtrl.html#getSearchFlags/1","title":"wxStyledTextCtrl.getSearchFlags/1","type":"function"},{"doc":"Get the alpha of the selection.","ref":"wxStyledTextCtrl.html#getSelAlpha/1","title":"wxStyledTextCtrl.getSelAlpha/1","type":"function"},{"doc":"Retrieve the selected text.","ref":"wxStyledTextCtrl.html#getSelectedText/1","title":"wxStyledTextCtrl.getSelectedText/1","type":"function"},{"doc":"Retrieve the selected text.","ref":"wxStyledTextCtrl.html#getSelectedTextRaw/1","title":"wxStyledTextCtrl.getSelectedTextRaw/1","type":"function"},{"doc":"Gets the current selection span. If the returned values are equal, there was no selection. Please note that the indices returned may be used with the other wxTextCtrl methods but don't necessarily represent the correct indices into the string returned by wxComboBox:getValue/1 for multiline controls under Windows (at least,) you should use wxTextCtrl:getStringSelection/1 to get the selected text.","ref":"wxStyledTextCtrl.html#getSelection/1","title":"wxStyledTextCtrl.getSelection/1","type":"function"},{"doc":"Returns the position at the end of the selection.","ref":"wxStyledTextCtrl.html#getSelectionEnd/1","title":"wxStyledTextCtrl.getSelectionEnd/1","type":"function"},{"doc":"Get the mode of the current selection. The return value will be one of the ?wxSTC_SEL_* constants.","ref":"wxStyledTextCtrl.html#getSelectionMode/1","title":"wxStyledTextCtrl.getSelectionMode/1","type":"function"},{"doc":"Returns the position at the start of the selection.","ref":"wxStyledTextCtrl.html#getSelectionStart/1","title":"wxStyledTextCtrl.getSelectionStart/1","type":"function"},{"doc":"Get error status. The return value will be one of the ?wxSTC_STATUS_* constants.","ref":"wxStyledTextCtrl.html#getStatus/1","title":"wxStyledTextCtrl.getStatus/1","type":"function"},{"doc":"Returns the style byte at the position.","ref":"wxStyledTextCtrl.html#getStyleAt/2","title":"wxStyledTextCtrl.getStyleAt/2","type":"function"},{"doc":"Retrieve number of bits in style bytes used to hold the lexical state. Deprecated:","ref":"wxStyledTextCtrl.html#getStyleBits/1","title":"wxStyledTextCtrl.getStyleBits/1","type":"function"},{"doc":"Retrieve the number of bits the current lexer needs for styling. Deprecated:","ref":"wxStyledTextCtrl.html#getStyleBitsNeeded/1","title":"wxStyledTextCtrl.getStyleBitsNeeded/1","type":"function"},{"doc":"Does a tab pressed when caret is within indentation indent?","ref":"wxStyledTextCtrl.html#getTabIndents/1","title":"wxStyledTextCtrl.getTabIndents/1","type":"function"},{"doc":"Retrieve the visible size of a tab.","ref":"wxStyledTextCtrl.html#getTabWidth/1","title":"wxStyledTextCtrl.getTabWidth/1","type":"function"},{"doc":"Get the position that ends the target.","ref":"wxStyledTextCtrl.html#getTargetEnd/1","title":"wxStyledTextCtrl.getTargetEnd/1","type":"function"},{"doc":"Get the position that starts the target.","ref":"wxStyledTextCtrl.html#getTargetStart/1","title":"wxStyledTextCtrl.getTargetStart/1","type":"function"},{"doc":"Retrieve all the text in the document.","ref":"wxStyledTextCtrl.html#getText/1","title":"wxStyledTextCtrl.getText/1","type":"function"},{"doc":"Retrieve the number of characters in the document.","ref":"wxStyledTextCtrl.html#getTextLength/1","title":"wxStyledTextCtrl.getTextLength/1","type":"function"},{"doc":"Retrieve a range of text.","ref":"wxStyledTextCtrl.html#getTextRange/3","title":"wxStyledTextCtrl.getTextRange/3","type":"function"},{"doc":"Retrieve a range of text.","ref":"wxStyledTextCtrl.html#getTextRangeRaw/3","title":"wxStyledTextCtrl.getTextRangeRaw/3","type":"function"},{"doc":"Retrieve all the text in the document.","ref":"wxStyledTextCtrl.html#getTextRaw/1","title":"wxStyledTextCtrl.getTextRaw/1","type":"function"},{"doc":"Is drawing done in two phases with backgrounds drawn before foregrounds?","ref":"wxStyledTextCtrl.html#getTwoPhaseDraw/1","title":"wxStyledTextCtrl.getTwoPhaseDraw/1","type":"function"},{"doc":"Is undo history being collected?","ref":"wxStyledTextCtrl.html#getUndoCollection/1","title":"wxStyledTextCtrl.getUndoCollection/1","type":"function"},{"doc":"Returns the current UseAntiAliasing setting.","ref":"wxStyledTextCtrl.html#getUseAntiAliasing/1","title":"wxStyledTextCtrl.getUseAntiAliasing/1","type":"function"},{"doc":"Is the horizontal scroll bar visible?","ref":"wxStyledTextCtrl.html#getUseHorizontalScrollBar/1","title":"wxStyledTextCtrl.getUseHorizontalScrollBar/1","type":"function"},{"doc":"Retrieve whether tabs will be used in indentation.","ref":"wxStyledTextCtrl.html#getUseTabs/1","title":"wxStyledTextCtrl.getUseTabs/1","type":"function"},{"doc":"Is the vertical scroll bar visible?","ref":"wxStyledTextCtrl.html#getUseVerticalScrollBar/1","title":"wxStyledTextCtrl.getUseVerticalScrollBar/1","type":"function"},{"doc":"Are the end of line characters visible?","ref":"wxStyledTextCtrl.html#getViewEOL/1","title":"wxStyledTextCtrl.getViewEOL/1","type":"function"},{"doc":"Are white space characters currently visible? Returns one of wxSTC_WS_* constants.","ref":"wxStyledTextCtrl.html#getViewWhiteSpace/1","title":"wxStyledTextCtrl.getViewWhiteSpace/1","type":"function"},{"doc":"Retrieve whether text is word wrapped. The return value will be one of the ?wxSTC_WRAP_* constants.","ref":"wxStyledTextCtrl.html#getWrapMode/1","title":"wxStyledTextCtrl.getWrapMode/1","type":"function"},{"doc":"Retrieve the start indent for wrapped lines.","ref":"wxStyledTextCtrl.html#getWrapStartIndent/1","title":"wxStyledTextCtrl.getWrapStartIndent/1","type":"function"},{"doc":"Retrieve the display mode of visual flags for wrapped lines. The return value will be a bit list containing one or more of the ?wxSTC_WRAPVISUALFLAG_* constants.","ref":"wxStyledTextCtrl.html#getWrapVisualFlags/1","title":"wxStyledTextCtrl.getWrapVisualFlags/1","type":"function"},{"doc":"Retrieve the location of visual flags for wrapped lines. The return value will be a bit list containing one or more of the ?wxSTC_WRAPVISUALFLAGLOC_* constants.","ref":"wxStyledTextCtrl.html#getWrapVisualFlagsLocation/1","title":"wxStyledTextCtrl.getWrapVisualFlagsLocation/1","type":"function"},{"doc":"Get the xOffset (ie, horizontal scroll position).","ref":"wxStyledTextCtrl.html#getXOffset/1","title":"wxStyledTextCtrl.getXOffset/1","type":"function"},{"doc":"Retrieve the zoom level.","ref":"wxStyledTextCtrl.html#getZoom/1","title":"wxStyledTextCtrl.getZoom/1","type":"function"},{"doc":"Set caret to start of a line and ensure it is visible.","ref":"wxStyledTextCtrl.html#gotoLine/2","title":"wxStyledTextCtrl.gotoLine/2","type":"function"},{"doc":"Set caret to a position and ensure it is visible.","ref":"wxStyledTextCtrl.html#gotoPos/2","title":"wxStyledTextCtrl.gotoPos/2","type":"function"},{"doc":"Make a range of lines invisible.","ref":"wxStyledTextCtrl.html#hideLines/3","title":"wxStyledTextCtrl.hideLines/3","type":"function"},{"doc":"Draw the selection in normal style or with selection highlighted.","ref":"wxStyledTextCtrl.html#hideSelection/2","title":"wxStyledTextCtrl.hideSelection/2","type":"function"},{"doc":"Move caret to first position on line.","ref":"wxStyledTextCtrl.html#home/1","title":"wxStyledTextCtrl.home/1","type":"function"},{"doc":"Move caret to first position on display line.","ref":"wxStyledTextCtrl.html#homeDisplay/1","title":"wxStyledTextCtrl.homeDisplay/1","type":"function"},{"doc":"Move caret to first position on display line extending selection to new caret position.","ref":"wxStyledTextCtrl.html#homeDisplayExtend/1","title":"wxStyledTextCtrl.homeDisplayExtend/1","type":"function"},{"doc":"Move caret to first position on line extending selection to new caret position.","ref":"wxStyledTextCtrl.html#homeExtend/1","title":"wxStyledTextCtrl.homeExtend/1","type":"function"},{"doc":"Move caret to first position on line, extending rectangular selection to new caret position.","ref":"wxStyledTextCtrl.html#homeRectExtend/1","title":"wxStyledTextCtrl.homeRectExtend/1","type":"function"},{"doc":"Like HomeExtend but when word-wrap is enabled extends first to start of display line HomeDisplayExtend, then to start of document line HomeExtend.","ref":"wxStyledTextCtrl.html#homeWrapExtend/1","title":"wxStyledTextCtrl.homeWrapExtend/1","type":"function"},{"doc":"Retrieve the foreground colour of an indicator.","ref":"wxStyledTextCtrl.html#indicatorGetForeground/2","title":"wxStyledTextCtrl.indicatorGetForeground/2","type":"function"},{"doc":"Retrieve the style of an indicator. The return value will be one of the ?wxSTC_INDIC_* constants.","ref":"wxStyledTextCtrl.html#indicatorGetStyle/2","title":"wxStyledTextCtrl.indicatorGetStyle/2","type":"function"},{"doc":"Set the foreground colour of an indicator.","ref":"wxStyledTextCtrl.html#indicatorSetForeground/3","title":"wxStyledTextCtrl.indicatorSetForeground/3","type":"function"},{"doc":"Set an indicator to plain, squiggle or TT. The second argument should be one of the ?wxSTC_INDIC_* constants.","ref":"wxStyledTextCtrl.html#indicatorSetStyle/3","title":"wxStyledTextCtrl.indicatorSetStyle/3","type":"function"},{"doc":"Insert string at a position.","ref":"wxStyledTextCtrl.html#insertText/3","title":"wxStyledTextCtrl.insertText/3","type":"function"},{"doc":"Insert string at a position.","ref":"wxStyledTextCtrl.html#insertTextRaw/3","title":"wxStyledTextCtrl.insertTextRaw/3","type":"function"},{"doc":"Copy the line containing the caret.","ref":"wxStyledTextCtrl.html#lineCopy/1","title":"wxStyledTextCtrl.lineCopy/1","type":"function"},{"doc":"Cut the line containing the caret.","ref":"wxStyledTextCtrl.html#lineCut/1","title":"wxStyledTextCtrl.lineCut/1","type":"function"},{"doc":"Delete the line containing the caret.","ref":"wxStyledTextCtrl.html#lineDelete/1","title":"wxStyledTextCtrl.lineDelete/1","type":"function"},{"doc":"Move caret down one line.","ref":"wxStyledTextCtrl.html#lineDown/1","title":"wxStyledTextCtrl.lineDown/1","type":"function"},{"doc":"Move caret down one line extending selection to new caret position.","ref":"wxStyledTextCtrl.html#lineDownExtend/1","title":"wxStyledTextCtrl.lineDownExtend/1","type":"function"},{"doc":"Move caret down one line, extending rectangular selection to new caret position.","ref":"wxStyledTextCtrl.html#lineDownRectExtend/1","title":"wxStyledTextCtrl.lineDownRectExtend/1","type":"function"},{"doc":"Duplicate the current line.","ref":"wxStyledTextCtrl.html#lineDuplicate/1","title":"wxStyledTextCtrl.lineDuplicate/1","type":"function"},{"doc":"Move caret to last position on line.","ref":"wxStyledTextCtrl.html#lineEnd/1","title":"wxStyledTextCtrl.lineEnd/1","type":"function"},{"doc":"Move caret to last position on display line.","ref":"wxStyledTextCtrl.html#lineEndDisplay/1","title":"wxStyledTextCtrl.lineEndDisplay/1","type":"function"},{"doc":"Move caret to last position on display line extending selection to new caret position.","ref":"wxStyledTextCtrl.html#lineEndDisplayExtend/1","title":"wxStyledTextCtrl.lineEndDisplayExtend/1","type":"function"},{"doc":"Move caret to last position on line extending selection to new caret position.","ref":"wxStyledTextCtrl.html#lineEndExtend/1","title":"wxStyledTextCtrl.lineEndExtend/1","type":"function"},{"doc":"Move caret to last position on line, extending rectangular selection to new caret position.","ref":"wxStyledTextCtrl.html#lineEndRectExtend/1","title":"wxStyledTextCtrl.lineEndRectExtend/1","type":"function"},{"doc":"Like LineEnd but when word-wrap is enabled goes first to end of display line LineEndDisplay, then to start of document line LineEnd.","ref":"wxStyledTextCtrl.html#lineEndWrap/1","title":"wxStyledTextCtrl.lineEndWrap/1","type":"function"},{"doc":"Like LineEndExtend but when word-wrap is enabled extends first to end of display line LineEndDisplayExtend, then to start of document line LineEndExtend.","ref":"wxStyledTextCtrl.html#lineEndWrapExtend/1","title":"wxStyledTextCtrl.lineEndWrapExtend/1","type":"function"},{"doc":"Retrieve the line containing a position.","ref":"wxStyledTextCtrl.html#lineFromPosition/2","title":"wxStyledTextCtrl.lineFromPosition/2","type":"function"},{"doc":"How many characters are on a line, including end of line characters?","ref":"wxStyledTextCtrl.html#lineLength/2","title":"wxStyledTextCtrl.lineLength/2","type":"function"},{"doc":"Scroll horizontally and vertically.","ref":"wxStyledTextCtrl.html#lineScroll/3","title":"wxStyledTextCtrl.lineScroll/3","type":"function"},{"doc":"Scroll the document down, keeping the caret visible.","ref":"wxStyledTextCtrl.html#lineScrollDown/1","title":"wxStyledTextCtrl.lineScrollDown/1","type":"function"},{"doc":"Scroll the document up, keeping the caret visible.","ref":"wxStyledTextCtrl.html#lineScrollUp/1","title":"wxStyledTextCtrl.lineScrollUp/1","type":"function"},{"doc":"Switch the current line with the previous.","ref":"wxStyledTextCtrl.html#lineTranspose/1","title":"wxStyledTextCtrl.lineTranspose/1","type":"function"},{"doc":"Move caret up one line.","ref":"wxStyledTextCtrl.html#lineUp/1","title":"wxStyledTextCtrl.lineUp/1","type":"function"},{"doc":"Move caret up one line extending selection to new caret position.","ref":"wxStyledTextCtrl.html#lineUpExtend/1","title":"wxStyledTextCtrl.lineUpExtend/1","type":"function"},{"doc":"Move caret up one line, extending rectangular selection to new caret position.","ref":"wxStyledTextCtrl.html#lineUpRectExtend/1","title":"wxStyledTextCtrl.lineUpRectExtend/1","type":"function"},{"doc":"Join the lines in the target.","ref":"wxStyledTextCtrl.html#linesJoin/1","title":"wxStyledTextCtrl.linesJoin/1","type":"function"},{"doc":"Retrieves the number of lines completely visible.","ref":"wxStyledTextCtrl.html#linesOnScreen/1","title":"wxStyledTextCtrl.linesOnScreen/1","type":"function"},{"doc":"Split the lines in the target into lines that are less wide than pixelWidth where possible.","ref":"wxStyledTextCtrl.html#linesSplit/2","title":"wxStyledTextCtrl.linesSplit/2","type":"function"},{"doc":"Load the contents of filename into the editor.","ref":"wxStyledTextCtrl.html#loadFile/2","title":"wxStyledTextCtrl.loadFile/2","type":"function"},{"doc":"Transform the selection to lower case.","ref":"wxStyledTextCtrl.html#lowerCase/1","title":"wxStyledTextCtrl.lowerCase/1","type":"function"},{"doc":"Add a marker to a line, returning an ID which can be used to find or delete the marker.","ref":"wxStyledTextCtrl.html#markerAdd/3","title":"wxStyledTextCtrl.markerAdd/3","type":"function"},{"doc":"Add a set of markers to a line.","ref":"wxStyledTextCtrl.html#markerAddSet/3","title":"wxStyledTextCtrl.markerAddSet/3","type":"function"},{"doc":"","ref":"wxStyledTextCtrl.html#markerDefine/3","title":"wxStyledTextCtrl.markerDefine/3","type":"function"},{"doc":"Set the symbol used for a particular marker number, and optionally the fore and background colours. The second argument should be one of the ?wxSTC_MARK_* constants.","ref":"wxStyledTextCtrl.html#markerDefine/4","title":"wxStyledTextCtrl.markerDefine/4","type":"function"},{"doc":"Define a marker with a wxBitmap .","ref":"wxStyledTextCtrl.html#markerDefineBitmap/3","title":"wxStyledTextCtrl.markerDefineBitmap/3","type":"function"},{"doc":"Delete a marker from a line.","ref":"wxStyledTextCtrl.html#markerDelete/3","title":"wxStyledTextCtrl.markerDelete/3","type":"function"},{"doc":"Delete all markers with a particular number from all lines.","ref":"wxStyledTextCtrl.html#markerDeleteAll/2","title":"wxStyledTextCtrl.markerDeleteAll/2","type":"function"},{"doc":"Delete a marker.","ref":"wxStyledTextCtrl.html#markerDeleteHandle/2","title":"wxStyledTextCtrl.markerDeleteHandle/2","type":"function"},{"doc":"Get a bit mask of all the markers set on a line.","ref":"wxStyledTextCtrl.html#markerGet/2","title":"wxStyledTextCtrl.markerGet/2","type":"function"},{"doc":"Retrieve the line number at which a particular marker is located.","ref":"wxStyledTextCtrl.html#markerLineFromHandle/2","title":"wxStyledTextCtrl.markerLineFromHandle/2","type":"function"},{"doc":"Find the next line at or after lineStart that includes a marker in mask. Return -1 when no more lines.","ref":"wxStyledTextCtrl.html#markerNext/3","title":"wxStyledTextCtrl.markerNext/3","type":"function"},{"doc":"Find the previous line before lineStart that includes a marker in mask.","ref":"wxStyledTextCtrl.html#markerPrevious/3","title":"wxStyledTextCtrl.markerPrevious/3","type":"function"},{"doc":"Set the alpha used for a marker that is drawn in the text area, not the margin.","ref":"wxStyledTextCtrl.html#markerSetAlpha/3","title":"wxStyledTextCtrl.markerSetAlpha/3","type":"function"},{"doc":"Set the background colour used for a particular marker number.","ref":"wxStyledTextCtrl.html#markerSetBackground/3","title":"wxStyledTextCtrl.markerSetBackground/3","type":"function"},{"doc":"Set the foreground colour used for a particular marker number.","ref":"wxStyledTextCtrl.html#markerSetForeground/3","title":"wxStyledTextCtrl.markerSetForeground/3","type":"function"},{"doc":"Move the caret inside current view if it's not there already.","ref":"wxStyledTextCtrl.html#moveCaretInsideView/1","title":"wxStyledTextCtrl.moveCaretInsideView/1","type":"function"},{"doc":"Default ctor.","ref":"wxStyledTextCtrl.html#new/0","title":"wxStyledTextCtrl.new/0","type":"function"},{"doc":"","ref":"wxStyledTextCtrl.html#new/1","title":"wxStyledTextCtrl.new/1","type":"function"},{"doc":"Ctor.","ref":"wxStyledTextCtrl.html#new/2","title":"wxStyledTextCtrl.new/2","type":"function"},{"doc":"Insert a new line, may use a CRLF, CR or LF depending on EOL mode.","ref":"wxStyledTextCtrl.html#newLine/1","title":"wxStyledTextCtrl.newLine/1","type":"function"},{"doc":"Move caret one page down.","ref":"wxStyledTextCtrl.html#pageDown/1","title":"wxStyledTextCtrl.pageDown/1","type":"function"},{"doc":"Move caret one page down extending selection to new caret position.","ref":"wxStyledTextCtrl.html#pageDownExtend/1","title":"wxStyledTextCtrl.pageDownExtend/1","type":"function"},{"doc":"Move caret one page down, extending rectangular selection to new caret position.","ref":"wxStyledTextCtrl.html#pageDownRectExtend/1","title":"wxStyledTextCtrl.pageDownRectExtend/1","type":"function"},{"doc":"Move caret one page up.","ref":"wxStyledTextCtrl.html#pageUp/1","title":"wxStyledTextCtrl.pageUp/1","type":"function"},{"doc":"Move caret one page up extending selection to new caret position.","ref":"wxStyledTextCtrl.html#pageUpExtend/1","title":"wxStyledTextCtrl.pageUpExtend/1","type":"function"},{"doc":"Move caret one page up, extending rectangular selection to new caret position.","ref":"wxStyledTextCtrl.html#pageUpRectExtend/1","title":"wxStyledTextCtrl.pageUpRectExtend/1","type":"function"},{"doc":"Extend selection down one paragraph (delimited by empty lines).","ref":"wxStyledTextCtrl.html#paraDownExtend/1","title":"wxStyledTextCtrl.paraDownExtend/1","type":"function"},{"doc":"Move caret up one paragraph (delimited by empty lines).","ref":"wxStyledTextCtrl.html#paraUp/1","title":"wxStyledTextCtrl.paraUp/1","type":"function"},{"doc":"Extend selection up one paragraph (delimited by empty lines).","ref":"wxStyledTextCtrl.html#paraUpExtend/1","title":"wxStyledTextCtrl.paraUpExtend/1","type":"function"},{"doc":"Paste the contents of the clipboard into the document replacing the selection.","ref":"wxStyledTextCtrl.html#paste/1","title":"wxStyledTextCtrl.paste/1","type":"function"},{"doc":"Retrieve the point in the window where a position is displayed.","ref":"wxStyledTextCtrl.html#pointFromPosition/2","title":"wxStyledTextCtrl.pointFromPosition/2","type":"function"},{"doc":"Given a valid document position, return the next position taking code page into account. Maximum value returned is the last position in the document.","ref":"wxStyledTextCtrl.html#positionAfter/2","title":"wxStyledTextCtrl.positionAfter/2","type":"function"},{"doc":"Given a valid document position, return the previous position taking code page into account. Returns 0 if passed 0.","ref":"wxStyledTextCtrl.html#positionBefore/2","title":"wxStyledTextCtrl.positionBefore/2","type":"function"},{"doc":"Retrieve the position at the start of a line.","ref":"wxStyledTextCtrl.html#positionFromLine/2","title":"wxStyledTextCtrl.positionFromLine/2","type":"function"},{"doc":"Find the position from a point within the window.","ref":"wxStyledTextCtrl.html#positionFromPoint/2","title":"wxStyledTextCtrl.positionFromPoint/2","type":"function"},{"doc":"Find the position from a point within the window but return wxSTC_INVALID_POSITION if not close to text.","ref":"wxStyledTextCtrl.html#positionFromPointClose/3","title":"wxStyledTextCtrl.positionFromPointClose/3","type":"function"},{"doc":"Redoes the next action on the undo history.","ref":"wxStyledTextCtrl.html#redo/1","title":"wxStyledTextCtrl.redo/1","type":"function"},{"doc":"Register an image for use in autocompletion lists.","ref":"wxStyledTextCtrl.html#registerImage/3","title":"wxStyledTextCtrl.registerImage/3","type":"function"},{"doc":"Replace the selected text with the argument text.","ref":"wxStyledTextCtrl.html#replaceSelection/2","title":"wxStyledTextCtrl.replaceSelection/2","type":"function"},{"doc":"Replace the target text with the argument text. Text is counted so it can contain NULs. Returns the length of the replacement text.","ref":"wxStyledTextCtrl.html#replaceTarget/2","title":"wxStyledTextCtrl.replaceTarget/2","type":"function"},{"doc":"Write the contents of the editor to filename.","ref":"wxStyledTextCtrl.html#saveFile/2","title":"wxStyledTextCtrl.saveFile/2","type":"function"},{"doc":"Scroll enough to make the given column visible.","ref":"wxStyledTextCtrl.html#scrollToColumn/2","title":"wxStyledTextCtrl.scrollToColumn/2","type":"function"},{"doc":"Scroll enough to make the given line visible.","ref":"wxStyledTextCtrl.html#scrollToLine/2","title":"wxStyledTextCtrl.scrollToLine/2","type":"function"},{"doc":"Sets the current caret position to be the search anchor.","ref":"wxStyledTextCtrl.html#searchAnchor/1","title":"wxStyledTextCtrl.searchAnchor/1","type":"function"},{"doc":"Search for a counted string in the target and set the target to the found range. Text is counted so it can contain NULs. Returns length of range or -1 for failure in which case target is not moved.","ref":"wxStyledTextCtrl.html#searchInTarget/2","title":"wxStyledTextCtrl.searchInTarget/2","type":"function"},{"doc":"Find some text starting at the search anchor. Does not ensure the selection is visible.","ref":"wxStyledTextCtrl.html#searchNext/3","title":"wxStyledTextCtrl.searchNext/3","type":"function"},{"doc":"Find some text starting at the search anchor and moving backwards. Does not ensure the selection is visible.","ref":"wxStyledTextCtrl.html#searchPrev/3","title":"wxStyledTextCtrl.searchPrev/3","type":"function"},{"doc":"Select all the text in the document.","ref":"wxStyledTextCtrl.html#selectAll/1","title":"wxStyledTextCtrl.selectAll/1","type":"function"},{"doc":"Duplicate the selection. If selection empty duplicate the line containing the caret.","ref":"wxStyledTextCtrl.html#selectionDuplicate/1","title":"wxStyledTextCtrl.selectionDuplicate/1","type":"function"},{"doc":"Is the selection rectangular? The alternative is the more common stream selection.","ref":"wxStyledTextCtrl.html#selectionIsRectangle/1","title":"wxStyledTextCtrl.selectionIsRectangle/1","type":"function"},{"doc":"Set the selection anchor to a position. The anchor is the opposite end of the selection from the caret.","ref":"wxStyledTextCtrl.html#setAnchor/2","title":"wxStyledTextCtrl.setAnchor/2","type":"function"},{"doc":"Sets whether a backspace pressed when caret is within indentation unindents.","ref":"wxStyledTextCtrl.html#setBackSpaceUnIndents/2","title":"wxStyledTextCtrl.setBackSpaceUnIndents/2","type":"function"},{"doc":"If drawing is buffered then each line of text is drawn into a bitmap buffer before drawing it to the screen to avoid flicker.","ref":"wxStyledTextCtrl.html#setBufferedDraw/2","title":"wxStyledTextCtrl.setBufferedDraw/2","type":"function"},{"doc":"Set the foreground colour of the caret.","ref":"wxStyledTextCtrl.html#setCaretForeground/2","title":"wxStyledTextCtrl.setCaretForeground/2","type":"function"},{"doc":"Set background alpha of the caret line.","ref":"wxStyledTextCtrl.html#setCaretLineBackAlpha/2","title":"wxStyledTextCtrl.setCaretLineBackAlpha/2","type":"function"},{"doc":"Set the colour of the background of the line containing the caret.","ref":"wxStyledTextCtrl.html#setCaretLineBackground/2","title":"wxStyledTextCtrl.setCaretLineBackground/2","type":"function"},{"doc":"Display the background of the line containing the caret in a different colour.","ref":"wxStyledTextCtrl.html#setCaretLineVisible/2","title":"wxStyledTextCtrl.setCaretLineVisible/2","type":"function"},{"doc":"Get the time in milliseconds that the caret is on and off. 0 = steady on.","ref":"wxStyledTextCtrl.html#setCaretPeriod/2","title":"wxStyledTextCtrl.setCaretPeriod/2","type":"function"},{"doc":"Stop the caret preferred x position changing when the user types. The input should be one of the ?wxSTC_CARETSTICKY_* constants.","ref":"wxStyledTextCtrl.html#setCaretSticky/2","title":"wxStyledTextCtrl.setCaretSticky/2","type":"function"},{"doc":"Set the width of the insert mode caret.","ref":"wxStyledTextCtrl.html#setCaretWidth/2","title":"wxStyledTextCtrl.setCaretWidth/2","type":"function"},{"doc":"Reset the set of characters for whitespace and word characters to the defaults.","ref":"wxStyledTextCtrl.html#setCharsDefault/1","title":"wxStyledTextCtrl.setCharsDefault/1","type":"function"},{"doc":"Set the code page used to interpret the bytes of the document as characters.","ref":"wxStyledTextCtrl.html#setCodePage/2","title":"wxStyledTextCtrl.setCodePage/2","type":"function"},{"doc":"Change the way control characters are displayed: If symbol is &lt; 32, keep the drawn way, else, use the given character.","ref":"wxStyledTextCtrl.html#setControlCharSymbol/2","title":"wxStyledTextCtrl.setControlCharSymbol/2","type":"function"},{"doc":"Sets the position of the caret.","ref":"wxStyledTextCtrl.html#setCurrentPos/2","title":"wxStyledTextCtrl.setCurrentPos/2","type":"function"},{"doc":"Set the current end of line mode. The input should be one of the ?wxSTC_EOL_* constants.","ref":"wxStyledTextCtrl.html#setEOLMode/2","title":"wxStyledTextCtrl.setEOLMode/2","type":"function"},{"doc":"Change the colour used in edge indication.","ref":"wxStyledTextCtrl.html#setEdgeColour/2","title":"wxStyledTextCtrl.setEdgeColour/2","type":"function"},{"doc":"Set the column number of the edge. If text goes past the edge then it is highlighted.","ref":"wxStyledTextCtrl.html#setEdgeColumn/2","title":"wxStyledTextCtrl.setEdgeColumn/2","type":"function"},{"doc":"The edge may be displayed by a line (wxSTC_EDGE_LINE/wxSTC_EDGE_MULTILINE) or by highlighting text that goes beyond it (wxSTC_EDGE_BACKGROUND) or not displayed at all (wxSTC_EDGE_NONE). The input should be one of the ?wxSTC_EDGE_* constants.","ref":"wxStyledTextCtrl.html#setEdgeMode/2","title":"wxStyledTextCtrl.setEdgeMode/2","type":"function"},{"doc":"Show the children of a header line.","ref":"wxStyledTextCtrl.html#setFoldExpanded/3","title":"wxStyledTextCtrl.setFoldExpanded/3","type":"function"},{"doc":"Set some style options for folding. The second argument should be a bit list containing one or more of the ?wxSTC_FOLDFLAG_* constants.","ref":"wxStyledTextCtrl.html#setFoldFlags/2","title":"wxStyledTextCtrl.setFoldFlags/2","type":"function"},{"doc":"Set the fold level of a line. This encodes an integer level along with flags indicating whether the line is a header and whether it is effectively white space.","ref":"wxStyledTextCtrl.html#setFoldLevel/3","title":"wxStyledTextCtrl.setFoldLevel/3","type":"function"},{"doc":"Set one of the colours used as a chequerboard pattern in the fold margin.","ref":"wxStyledTextCtrl.html#setFoldMarginColour/3","title":"wxStyledTextCtrl.setFoldMarginColour/3","type":"function"},{"doc":"Set the other colour used as a chequerboard pattern in the fold margin.","ref":"wxStyledTextCtrl.html#setFoldMarginHiColour/3","title":"wxStyledTextCtrl.setFoldMarginHiColour/3","type":"function"},{"doc":"Set the horizontal scrollbar to use instead of the one that's built-in.","ref":"wxStyledTextCtrl.html#setHScrollBar/2","title":"wxStyledTextCtrl.setHScrollBar/2","type":"function"},{"doc":"Set the highlighted indentation guide column. 0 = no highlighted guide.","ref":"wxStyledTextCtrl.html#setHighlightGuide/2","title":"wxStyledTextCtrl.setHighlightGuide/2","type":"function"},{"doc":"Set a back colour for active hotspots.","ref":"wxStyledTextCtrl.html#setHotspotActiveBackground/3","title":"wxStyledTextCtrl.setHotspotActiveBackground/3","type":"function"},{"doc":"Set a fore colour for active hotspots.","ref":"wxStyledTextCtrl.html#setHotspotActiveForeground/3","title":"wxStyledTextCtrl.setHotspotActiveForeground/3","type":"function"},{"doc":"Enable / Disable underlining active hotspots.","ref":"wxStyledTextCtrl.html#setHotspotActiveUnderline/2","title":"wxStyledTextCtrl.setHotspotActiveUnderline/2","type":"function"},{"doc":"Limit hotspots to single line so hotspots on two lines don't merge.","ref":"wxStyledTextCtrl.html#setHotspotSingleLine/2","title":"wxStyledTextCtrl.setHotspotSingleLine/2","type":"function"},{"doc":"Set the number of spaces used for one level of indentation.","ref":"wxStyledTextCtrl.html#setIndent/2","title":"wxStyledTextCtrl.setIndent/2","type":"function"},{"doc":"Show or hide indentation guides. The input should be one of the ?wxSTC_IV_* constants.","ref":"wxStyledTextCtrl.html#setIndentationGuides/2","title":"wxStyledTextCtrl.setIndentationGuides/2","type":"function"},{"doc":"Set up the key words used by the lexer.","ref":"wxStyledTextCtrl.html#setKeyWords/3","title":"wxStyledTextCtrl.setKeyWords/3","type":"function"},{"doc":"Returns the line number of the line with the caret.","ref":"wxStyledTextCtrl.html#setLastKeydownProcessed/2","title":"wxStyledTextCtrl.setLastKeydownProcessed/2","type":"function"},{"doc":"Sets the degree of caching of layout information. The input should be one of the ?wxSTC_CACHE_* constants.","ref":"wxStyledTextCtrl.html#setLayoutCache/2","title":"wxStyledTextCtrl.setLayoutCache/2","type":"function"},{"doc":"Set the lexing language of the document. The input should be one of the ?wxSTC_LEX_* constants.","ref":"wxStyledTextCtrl.html#setLexer/2","title":"wxStyledTextCtrl.setLexer/2","type":"function"},{"doc":"Set the lexing language of the document based on string name.","ref":"wxStyledTextCtrl.html#setLexerLanguage/2","title":"wxStyledTextCtrl.setLexerLanguage/2","type":"function"},{"doc":"Change the indentation of a line to a number of columns.","ref":"wxStyledTextCtrl.html#setLineIndentation/3","title":"wxStyledTextCtrl.setLineIndentation/3","type":"function"},{"doc":"Used to hold extra styling information for each line.","ref":"wxStyledTextCtrl.html#setLineState/3","title":"wxStyledTextCtrl.setLineState/3","type":"function"},{"doc":"Sets the size in pixels of the left margin.","ref":"wxStyledTextCtrl.html#setMarginLeft/2","title":"wxStyledTextCtrl.setMarginLeft/2","type":"function"},{"doc":"Set a mask that determines which markers are displayed in a margin.","ref":"wxStyledTextCtrl.html#setMarginMask/3","title":"wxStyledTextCtrl.setMarginMask/3","type":"function"},{"doc":"Sets the size in pixels of the right margin.","ref":"wxStyledTextCtrl.html#setMarginRight/2","title":"wxStyledTextCtrl.setMarginRight/2","type":"function"},{"doc":"Make a margin sensitive or insensitive to mouse clicks.","ref":"wxStyledTextCtrl.html#setMarginSensitive/3","title":"wxStyledTextCtrl.setMarginSensitive/3","type":"function"},{"doc":"Set a margin to be either numeric or symbolic. The second argument should be one of the ?wxSTC_MARGIN_* constants.","ref":"wxStyledTextCtrl.html#setMarginType/3","title":"wxStyledTextCtrl.setMarginType/3","type":"function"},{"doc":"Set the width of a margin to a width expressed in pixels.","ref":"wxStyledTextCtrl.html#setMarginWidth/3","title":"wxStyledTextCtrl.setMarginWidth/3","type":"function"},{"doc":"Set the left and right margin in the edit area, measured in pixels.","ref":"wxStyledTextCtrl.html#setMargins/3","title":"wxStyledTextCtrl.setMargins/3","type":"function"},{"doc":"Set which document modification events are sent to the container. The input should be a bit list containing one or more of the ?wxSTC_MOD_* constants, the ?wxSTC_PERFORMED_* constants, wxSTC_STARTACTION, wxSTC_MULTILINEUNDOREDO, wxSTC_MULTISTEPUNDOREDO, and wxSTC_LASTSTEPINUNDOREDO. The input can also be wxSTC_MODEVENTMASKALL to indicate that all changes should generate events.","ref":"wxStyledTextCtrl.html#setModEventMask/2","title":"wxStyledTextCtrl.setModEventMask/2","type":"function"},{"doc":"Set whether the mouse is captured when its button is pressed.","ref":"wxStyledTextCtrl.html#setMouseDownCaptures/2","title":"wxStyledTextCtrl.setMouseDownCaptures/2","type":"function"},{"doc":"Sets the time the mouse must sit still to generate a mouse dwell event. The input should be a time in milliseconds or wxSTC_TIME_FOREVER.","ref":"wxStyledTextCtrl.html#setMouseDwellTime/2","title":"wxStyledTextCtrl.setMouseDwellTime/2","type":"function"},{"doc":"Enable/Disable convert-on-paste for line endings.","ref":"wxStyledTextCtrl.html#setPasteConvertEndings/2","title":"wxStyledTextCtrl.setPasteConvertEndings/2","type":"function"},{"doc":"Modify colours when printing for clearer printed text. The input should be one of the ?wxSTC_PRINT_* constants.","ref":"wxStyledTextCtrl.html#setPrintColourMode/2","title":"wxStyledTextCtrl.setPrintColourMode/2","type":"function"},{"doc":"Sets the print magnification added to the point size of each style for printing.","ref":"wxStyledTextCtrl.html#setPrintMagnification/2","title":"wxStyledTextCtrl.setPrintMagnification/2","type":"function"},{"doc":"Set up a value that may be used by a lexer for some optional feature.","ref":"wxStyledTextCtrl.html#setProperty/3","title":"wxStyledTextCtrl.setProperty/3","type":"function"},{"doc":"Set to read only or read write.","ref":"wxStyledTextCtrl.html#setReadOnly/2","title":"wxStyledTextCtrl.setReadOnly/2","type":"function"},{"doc":"Sets the cursor to one of the wxSTC_CURSOR* values.","ref":"wxStyledTextCtrl.html#setSTCCursor/2","title":"wxStyledTextCtrl.setSTCCursor/2","type":"function"},{"doc":"Change internal focus flag.","ref":"wxStyledTextCtrl.html#setSTCFocus/2","title":"wxStyledTextCtrl.setSTCFocus/2","type":"function"},{"doc":"Remember the current position in the undo history as the position at which the document was saved.","ref":"wxStyledTextCtrl.html#setSavePoint/1","title":"wxStyledTextCtrl.setSavePoint/1","type":"function"},{"doc":"Sets the document width assumed for scrolling.","ref":"wxStyledTextCtrl.html#setScrollWidth/2","title":"wxStyledTextCtrl.setScrollWidth/2","type":"function"},{"doc":"Set the search flags used by SearchInTarget. The input should be a bit list containing one or more of the ?wxSTC_FIND_* constants.","ref":"wxStyledTextCtrl.html#setSearchFlags/2","title":"wxStyledTextCtrl.setSearchFlags/2","type":"function"},{"doc":"Set the alpha of the selection.","ref":"wxStyledTextCtrl.html#setSelAlpha/2","title":"wxStyledTextCtrl.setSelAlpha/2","type":"function"},{"doc":"Set the background colour of the main and additional selections and whether to use this setting.","ref":"wxStyledTextCtrl.html#setSelBackground/3","title":"wxStyledTextCtrl.setSelBackground/3","type":"function"},{"doc":"Set the foreground colour of the main and additional selections and whether to use this setting.","ref":"wxStyledTextCtrl.html#setSelForeground/3","title":"wxStyledTextCtrl.setSelForeground/3","type":"function"},{"doc":"Selects the text starting at the first position up to (but not including) the character at the last position. If both parameters are equal to -1 all text in the control is selected. Notice that the insertion point will be moved to from by this function. See: selectAll/1","ref":"wxStyledTextCtrl.html#setSelection/3","title":"wxStyledTextCtrl.setSelection/3","type":"function"},{"doc":"Sets the position that ends the selection - this becomes the caret.","ref":"wxStyledTextCtrl.html#setSelectionEnd/2","title":"wxStyledTextCtrl.setSelectionEnd/2","type":"function"},{"doc":"Set the selection mode to stream (wxSTC_SEL_STREAM) or rectangular (wxSTC_SEL_RECTANGLE/wxSTC_SEL_THIN) or by lines (wxSTC_SEL_LINES).","ref":"wxStyledTextCtrl.html#setSelectionMode/2","title":"wxStyledTextCtrl.setSelectionMode/2","type":"function"},{"doc":"Sets the position that starts the selection - this becomes the anchor.","ref":"wxStyledTextCtrl.html#setSelectionStart/2","title":"wxStyledTextCtrl.setSelectionStart/2","type":"function"},{"doc":"Change error status - 0 = OK. The input should be one of the ?wxSTC_STATUS_* constants.","ref":"wxStyledTextCtrl.html#setStatus/2","title":"wxStyledTextCtrl.setStatus/2","type":"function"},{"doc":"Set the styles for a segment of the document.","ref":"wxStyledTextCtrl.html#setStyleBytes/2","title":"wxStyledTextCtrl.setStyleBytes/2","type":"function"},{"doc":"Change style from current styling position for length characters to a style and move the current styling position to after this newly styled segment.","ref":"wxStyledTextCtrl.html#setStyling/3","title":"wxStyledTextCtrl.setStyling/3","type":"function"},{"doc":"Sets whether a tab pressed when caret is within indentation indents.","ref":"wxStyledTextCtrl.html#setTabIndents/2","title":"wxStyledTextCtrl.setTabIndents/2","type":"function"},{"doc":"Change the visible size of a tab to be a multiple of the width of a space character.","ref":"wxStyledTextCtrl.html#setTabWidth/2","title":"wxStyledTextCtrl.setTabWidth/2","type":"function"},{"doc":"Sets the position that ends the target which is used for updating the document without affecting the scroll position.","ref":"wxStyledTextCtrl.html#setTargetEnd/2","title":"wxStyledTextCtrl.setTargetEnd/2","type":"function"},{"doc":"Sets the position that starts the target which is used for updating the document without affecting the scroll position.","ref":"wxStyledTextCtrl.html#setTargetStart/2","title":"wxStyledTextCtrl.setTargetStart/2","type":"function"},{"doc":"Replace the contents of the document with the argument text.","ref":"wxStyledTextCtrl.html#setText/2","title":"wxStyledTextCtrl.setText/2","type":"function"},{"doc":"Replace the contents of the document with the argument text.","ref":"wxStyledTextCtrl.html#setTextRaw/2","title":"wxStyledTextCtrl.setTextRaw/2","type":"function"},{"doc":"In twoPhaseDraw mode, drawing is performed in two phases, first the background and then the foreground. This avoids chopping off characters that overlap the next run.","ref":"wxStyledTextCtrl.html#setTwoPhaseDraw/2","title":"wxStyledTextCtrl.setTwoPhaseDraw/2","type":"function"},{"doc":"Choose between collecting actions into the undo history and discarding them.","ref":"wxStyledTextCtrl.html#setUndoCollection/2","title":"wxStyledTextCtrl.setUndoCollection/2","type":"function"},{"doc":"Show or hide the horizontal scroll bar.","ref":"wxStyledTextCtrl.html#setUseHorizontalScrollBar/2","title":"wxStyledTextCtrl.setUseHorizontalScrollBar/2","type":"function"},{"doc":"Indentation will only use space characters if useTabs is false, otherwise it will use a combination of tabs and spaces.","ref":"wxStyledTextCtrl.html#setUseTabs/2","title":"wxStyledTextCtrl.setUseTabs/2","type":"function"},{"doc":"Show or hide the vertical scroll bar.","ref":"wxStyledTextCtrl.html#setUseVerticalScrollBar/2","title":"wxStyledTextCtrl.setUseVerticalScrollBar/2","type":"function"},{"doc":"Set the vertical scrollbar to use instead of the one that's built-in.","ref":"wxStyledTextCtrl.html#setVScrollBar/2","title":"wxStyledTextCtrl.setVScrollBar/2","type":"function"},{"doc":"Make the end of line characters visible or invisible.","ref":"wxStyledTextCtrl.html#setViewEOL/2","title":"wxStyledTextCtrl.setViewEOL/2","type":"function"},{"doc":"Make white space characters invisible, always visible or visible outside indentation. The input should be one of the ?wxSTC_WS_* constants.","ref":"wxStyledTextCtrl.html#setViewWhiteSpace/2","title":"wxStyledTextCtrl.setViewWhiteSpace/2","type":"function"},{"doc":"Set the way the display area is determined when a particular line is to be moved to by Find, FindNext, GotoLine, etc. The first argument should be a bit list containing one or more of the ?wxSTC_VISIBLE_* constants.","ref":"wxStyledTextCtrl.html#setVisiblePolicy/3","title":"wxStyledTextCtrl.setVisiblePolicy/3","type":"function"},{"doc":"Set the background colour of all whitespace and whether to use this setting.","ref":"wxStyledTextCtrl.html#setWhitespaceBackground/3","title":"wxStyledTextCtrl.setWhitespaceBackground/3","type":"function"},{"doc":"Set the set of characters making up whitespace for when moving or selecting by word. Should be called after SetWordChars.","ref":"wxStyledTextCtrl.html#setWhitespaceChars/2","title":"wxStyledTextCtrl.setWhitespaceChars/2","type":"function"},{"doc":"Set the foreground colour of all whitespace and whether to use this setting.","ref":"wxStyledTextCtrl.html#setWhitespaceForeground/3","title":"wxStyledTextCtrl.setWhitespaceForeground/3","type":"function"},{"doc":"Set the set of characters making up words for when moving or selecting by word. First sets defaults like SetCharsDefault.","ref":"wxStyledTextCtrl.html#setWordChars/2","title":"wxStyledTextCtrl.setWordChars/2","type":"function"},{"doc":"Sets whether text is word wrapped. The input should be one of the ?wxSTC_WRAP_* constants.","ref":"wxStyledTextCtrl.html#setWrapMode/2","title":"wxStyledTextCtrl.setWrapMode/2","type":"function"},{"doc":"Set the start indent for wrapped lines.","ref":"wxStyledTextCtrl.html#setWrapStartIndent/2","title":"wxStyledTextCtrl.setWrapStartIndent/2","type":"function"},{"doc":"Set the display mode of visual flags for wrapped lines. The input should be a bit list containing one or more of the ?wxSTC_WRAPVISUALFLAG_* constants.","ref":"wxStyledTextCtrl.html#setWrapVisualFlags/2","title":"wxStyledTextCtrl.setWrapVisualFlags/2","type":"function"},{"doc":"Set the location of visual flags for wrapped lines. The input should be a bit list containing one or more of the ?wxSTC_WRAPVISUALFLAGLOC_* constants.","ref":"wxStyledTextCtrl.html#setWrapVisualFlagsLocation/2","title":"wxStyledTextCtrl.setWrapVisualFlagsLocation/2","type":"function"},{"doc":"Set the way the caret is kept visible when going sideways. The exclusion zone is given in pixels. The first argument should be a bit list containing one or more of the ?wxSTC_CARET_* constants.","ref":"wxStyledTextCtrl.html#setXCaretPolicy/3","title":"wxStyledTextCtrl.setXCaretPolicy/3","type":"function"},{"doc":"Set the way the line the caret is on is kept visible. The exclusion zone is given in lines. The first argument should be a bit list containing one or more of the ?wxSTC_CARET_* constants.","ref":"wxStyledTextCtrl.html#setYCaretPolicy/3","title":"wxStyledTextCtrl.setYCaretPolicy/3","type":"function"},{"doc":"Set the zoom level. This number of points is added to the size of all fonts. It may be positive to magnify or negative to reduce.","ref":"wxStyledTextCtrl.html#setZoom/2","title":"wxStyledTextCtrl.setZoom/2","type":"function"},{"doc":"Make a range of lines visible.","ref":"wxStyledTextCtrl.html#showLines/3","title":"wxStyledTextCtrl.showLines/3","type":"function"},{"doc":"Start notifying the container of all key presses and commands.","ref":"wxStyledTextCtrl.html#startRecord/1","title":"wxStyledTextCtrl.startRecord/1","type":"function"},{"doc":"Set the current styling position to start.","ref":"wxStyledTextCtrl.html#startStyling/2","title":"wxStyledTextCtrl.startStyling/2","type":"function"},{"doc":"Stop notifying the container of all key presses and commands.","ref":"wxStyledTextCtrl.html#stopRecord/1","title":"wxStyledTextCtrl.stopRecord/1","type":"function"},{"doc":"Move caret to bottom of page, or one page down if already at bottom of page.","ref":"wxStyledTextCtrl.html#stutteredPageDown/1","title":"wxStyledTextCtrl.stutteredPageDown/1","type":"function"},{"doc":"Move caret to bottom of page, or one page down if already at bottom of page, extending selection to new caret position.","ref":"wxStyledTextCtrl.html#stutteredPageDownExtend/1","title":"wxStyledTextCtrl.stutteredPageDownExtend/1","type":"function"},{"doc":"Move caret to top of page, or one page up if already at top of page.","ref":"wxStyledTextCtrl.html#stutteredPageUp/1","title":"wxStyledTextCtrl.stutteredPageUp/1","type":"function"},{"doc":"Move caret to top of page, or one page up if already at top of page, extending selection to new caret position.","ref":"wxStyledTextCtrl.html#stutteredPageUpExtend/1","title":"wxStyledTextCtrl.stutteredPageUpExtend/1","type":"function"},{"doc":"Clear all the styles and make equivalent to the global default style.","ref":"wxStyledTextCtrl.html#styleClearAll/1","title":"wxStyledTextCtrl.styleClearAll/1","type":"function"},{"doc":"Reset the default style to its state at startup.","ref":"wxStyledTextCtrl.html#styleResetDefault/1","title":"wxStyledTextCtrl.styleResetDefault/1","type":"function"},{"doc":"Set the background colour of a style.","ref":"wxStyledTextCtrl.html#styleSetBackground/3","title":"wxStyledTextCtrl.styleSetBackground/3","type":"function"},{"doc":"Set a style to be bold or not.","ref":"wxStyledTextCtrl.html#styleSetBold/3","title":"wxStyledTextCtrl.styleSetBold/3","type":"function"},{"doc":"Set a style to be mixed case, or to force upper or lower case. The second argument should be one of the ?wxSTC_CASE_* constants.","ref":"wxStyledTextCtrl.html#styleSetCase/3","title":"wxStyledTextCtrl.styleSetCase/3","type":"function"},{"doc":"Set the character set of the font in a style. Converts the Scintilla character set values to a wxFontEncoding.","ref":"wxStyledTextCtrl.html#styleSetCharacterSet/3","title":"wxStyledTextCtrl.styleSetCharacterSet/3","type":"function"},{"doc":"Set a style to have its end of line filled or not.","ref":"wxStyledTextCtrl.html#styleSetEOLFilled/3","title":"wxStyledTextCtrl.styleSetEOLFilled/3","type":"function"},{"doc":"Set the font of a style.","ref":"wxStyledTextCtrl.html#styleSetFaceName/3","title":"wxStyledTextCtrl.styleSetFaceName/3","type":"function"},{"doc":"Set style size, face, bold, italic, and underline attributes from a wxFont 's attributes.","ref":"wxStyledTextCtrl.html#styleSetFont/3","title":"wxStyledTextCtrl.styleSetFont/3","type":"function"},{"doc":"","ref":"wxStyledTextCtrl.html#styleSetFontAttr/7","title":"wxStyledTextCtrl.styleSetFontAttr/7","type":"function"},{"doc":"Set all font style attributes at once.","ref":"wxStyledTextCtrl.html#styleSetFontAttr/8","title":"wxStyledTextCtrl.styleSetFontAttr/8","type":"function"},{"doc":"Set the font encoding to be used by a style.","ref":"wxStyledTextCtrl.html#styleSetFontEncoding/3","title":"wxStyledTextCtrl.styleSetFontEncoding/3","type":"function"},{"doc":"Set the foreground colour of a style.","ref":"wxStyledTextCtrl.html#styleSetForeground/3","title":"wxStyledTextCtrl.styleSetForeground/3","type":"function"},{"doc":"Set a style to be a hotspot or not.","ref":"wxStyledTextCtrl.html#styleSetHotSpot/3","title":"wxStyledTextCtrl.styleSetHotSpot/3","type":"function"},{"doc":"Set a style to be italic or not.","ref":"wxStyledTextCtrl.html#styleSetItalic/3","title":"wxStyledTextCtrl.styleSetItalic/3","type":"function"},{"doc":"Set the size of characters of a style.","ref":"wxStyledTextCtrl.html#styleSetSize/3","title":"wxStyledTextCtrl.styleSetSize/3","type":"function"},{"doc":"Extract style settings from a spec-string which is composed of one or more of the following comma separated elements: bold turns on bold italic turns on italics fore:[name or #RRGGBB] sets the foreground colour back:[name or #RRGGBB] sets the background colour face:[facename] sets the font face name to use size:[num] sets the font size in points eol turns on eol filling underline turns on underlining","ref":"wxStyledTextCtrl.html#styleSetSpec/3","title":"wxStyledTextCtrl.styleSetSpec/3","type":"function"},{"doc":"Set a style to be underlined or not.","ref":"wxStyledTextCtrl.html#styleSetUnderline/3","title":"wxStyledTextCtrl.styleSetUnderline/3","type":"function"},{"doc":"Set a style to be visible or not.","ref":"wxStyledTextCtrl.html#styleSetVisible/3","title":"wxStyledTextCtrl.styleSetVisible/3","type":"function"},{"doc":"If selection is empty or all on one line replace the selection with a tab character. If more than one line selected, indent the lines.","ref":"wxStyledTextCtrl.html#tab/1","title":"wxStyledTextCtrl.tab/1","type":"function"},{"doc":"Make the target range start and end be the same as the selection range start and end.","ref":"wxStyledTextCtrl.html#targetFromSelection/1","title":"wxStyledTextCtrl.targetFromSelection/1","type":"function"},{"doc":"Retrieve the height of a particular line of text in pixels.","ref":"wxStyledTextCtrl.html#textHeight/2","title":"wxStyledTextCtrl.textHeight/2","type":"function"},{"doc":"Measure the pixel width of some text in a particular style. Does not handle tab or control characters.","ref":"wxStyledTextCtrl.html#textWidth/3","title":"wxStyledTextCtrl.textWidth/3","type":"function"},{"doc":"Switch between sticky and non-sticky: meant to be bound to a key.","ref":"wxStyledTextCtrl.html#toggleCaretSticky/1","title":"wxStyledTextCtrl.toggleCaretSticky/1","type":"function"},{"doc":"Switch a header line between expanded and contracted.","ref":"wxStyledTextCtrl.html#toggleFold/2","title":"wxStyledTextCtrl.toggleFold/2","type":"function"},{"doc":"Undo one action in the undo history.","ref":"wxStyledTextCtrl.html#undo/1","title":"wxStyledTextCtrl.undo/1","type":"function"},{"doc":"Transform the selection to upper case.","ref":"wxStyledTextCtrl.html#upperCase/1","title":"wxStyledTextCtrl.upperCase/1","type":"function"},{"doc":"Set whether a pop up menu is displayed automatically when the user presses the wrong mouse button on certain areas. The input should be one of the ?wxSTC_POPUP_* constants. Remark: When wxContextMenuEvent is used to create a custom popup menu, this function should be called with wxSTC_POPUP_NEVER. Otherwise the default menu will be shown instead of the custom one.","ref":"wxStyledTextCtrl.html#usePopUp/2","title":"wxStyledTextCtrl.usePopUp/2","type":"function"},{"doc":"Display a list of strings and send notification when user chooses one.","ref":"wxStyledTextCtrl.html#userListShow/3","title":"wxStyledTextCtrl.userListShow/3","type":"function"},{"doc":"Move caret to before first visible character on line. If already there move to first character on line.","ref":"wxStyledTextCtrl.html#vCHome/1","title":"wxStyledTextCtrl.vCHome/1","type":"function"},{"doc":"Like VCHome but extending selection to new caret position.","ref":"wxStyledTextCtrl.html#vCHomeExtend/1","title":"wxStyledTextCtrl.vCHomeExtend/1","type":"function"},{"doc":"Move caret to before first visible character on line. If already there move to first character on line. In either case, extend rectangular selection to new caret position.","ref":"wxStyledTextCtrl.html#vCHomeRectExtend/1","title":"wxStyledTextCtrl.vCHomeRectExtend/1","type":"function"},{"doc":"Like VCHome but when word-wrap is enabled goes first to start of display line VCHomeDisplay, then behaves like VCHome.","ref":"wxStyledTextCtrl.html#vCHomeWrap/1","title":"wxStyledTextCtrl.vCHomeWrap/1","type":"function"},{"doc":"Like VCHomeExtend but when word-wrap is enabled extends first to start of display line VCHomeDisplayExtend, then behaves like VCHomeExtend.","ref":"wxStyledTextCtrl.html#vCHomeWrapExtend/1","title":"wxStyledTextCtrl.vCHomeWrapExtend/1","type":"function"},{"doc":"Find the display line of a document line taking hidden lines into account.","ref":"wxStyledTextCtrl.html#visibleFromDocLine/2","title":"wxStyledTextCtrl.visibleFromDocLine/2","type":"function"},{"doc":"Get position of end of word.","ref":"wxStyledTextCtrl.html#wordEndPosition/3","title":"wxStyledTextCtrl.wordEndPosition/3","type":"function"},{"doc":"Move caret left one word.","ref":"wxStyledTextCtrl.html#wordLeft/1","title":"wxStyledTextCtrl.wordLeft/1","type":"function"},{"doc":"Move caret left one word, position cursor at end of word.","ref":"wxStyledTextCtrl.html#wordLeftEnd/1","title":"wxStyledTextCtrl.wordLeftEnd/1","type":"function"},{"doc":"Move caret left one word, position cursor at end of word, extending selection to new caret position.","ref":"wxStyledTextCtrl.html#wordLeftEndExtend/1","title":"wxStyledTextCtrl.wordLeftEndExtend/1","type":"function"},{"doc":"Move caret left one word extending selection to new caret position.","ref":"wxStyledTextCtrl.html#wordLeftExtend/1","title":"wxStyledTextCtrl.wordLeftExtend/1","type":"function"},{"doc":"Move to the previous change in capitalisation.","ref":"wxStyledTextCtrl.html#wordPartLeft/1","title":"wxStyledTextCtrl.wordPartLeft/1","type":"function"},{"doc":"Move to the previous change in capitalisation extending selection to new caret position.","ref":"wxStyledTextCtrl.html#wordPartLeftExtend/1","title":"wxStyledTextCtrl.wordPartLeftExtend/1","type":"function"},{"doc":"Move to the change next in capitalisation.","ref":"wxStyledTextCtrl.html#wordPartRight/1","title":"wxStyledTextCtrl.wordPartRight/1","type":"function"},{"doc":"Move to the next change in capitalisation extending selection to new caret position.","ref":"wxStyledTextCtrl.html#wordPartRightExtend/1","title":"wxStyledTextCtrl.wordPartRightExtend/1","type":"function"},{"doc":"Move caret right one word.","ref":"wxStyledTextCtrl.html#wordRight/1","title":"wxStyledTextCtrl.wordRight/1","type":"function"},{"doc":"Move caret right one word, position cursor at end of word.","ref":"wxStyledTextCtrl.html#wordRightEnd/1","title":"wxStyledTextCtrl.wordRightEnd/1","type":"function"},{"doc":"Move caret right one word, position cursor at end of word, extending selection to new caret position.","ref":"wxStyledTextCtrl.html#wordRightEndExtend/1","title":"wxStyledTextCtrl.wordRightEndExtend/1","type":"function"},{"doc":"Move caret right one word extending selection to new caret position.","ref":"wxStyledTextCtrl.html#wordRightExtend/1","title":"wxStyledTextCtrl.wordRightExtend/1","type":"function"},{"doc":"Get position of start of word.","ref":"wxStyledTextCtrl.html#wordStartPosition/3","title":"wxStyledTextCtrl.wordStartPosition/3","type":"function"},{"doc":"The number of display lines needed to wrap a document line.","ref":"wxStyledTextCtrl.html#wrapCount/2","title":"wxStyledTextCtrl.wrapCount/2","type":"function"},{"doc":"Magnify the displayed text by increasing the sizes by 1 point.","ref":"wxStyledTextCtrl.html#zoomIn/1","title":"wxStyledTextCtrl.zoomIn/1","type":"function"},{"doc":"Make the displayed text smaller by decreasing the sizes by 1 point.","ref":"wxStyledTextCtrl.html#zoomOut/1","title":"wxStyledTextCtrl.zoomOut/1","type":"function"},{"doc":"","ref":"wxStyledTextCtrl.html#t:wxStyledTextCtrl/0","title":"wxStyledTextCtrl.wxStyledTextCtrl/0","type":"type"},{"doc":"The type of events sent from wxStyledTextCtrl . This class is derived (and can use functions) from: wxCommandEvent wxEvent wxWidgets docs: wxStyledTextEvent Events Use wxEvtHandler:connect/3 with wxStyledTextEventType to subscribe to events of this type.","ref":"wxStyledTextEvent.html","title":"wxStyledTextEvent","type":"module"},{"doc":"Returns true if the Alt key is pressed. This method is valid for the following event types:","ref":"wxStyledTextEvent.html#getAlt/1","title":"wxStyledTextEvent.getAlt/1","type":"function"},{"doc":"Returns true if the Control key is pressed. This method is valid for the following event types:","ref":"wxStyledTextEvent.html#getControl/1","title":"wxStyledTextEvent.getControl/1","type":"function"},{"doc":"","ref":"wxStyledTextEvent.html#getDragAllowMove/1","title":"wxStyledTextEvent.getDragAllowMove/1","type":"function"},{"doc":"Returns drag result for this event. This method is valid for wxEVT_STC_DRAG_OVER and wxEVT_STC_DO_DROP events.","ref":"wxStyledTextEvent.html#getDragResult/1","title":"wxStyledTextEvent.getDragResult/1","type":"function"},{"doc":"Deprecated: Use wxCommandEvent:getString/1 instead.","ref":"wxStyledTextEvent.html#getDragText/1","title":"wxStyledTextEvent.getDragText/1","type":"function"},{"doc":"Returns the current fold level for the line. This method is valid for wxEVT_STC_MODIFIED events when the result of getModificationType/1 includes ?wxSTC_MOD_CHANGEFOLD.","ref":"wxStyledTextEvent.html#getFoldLevelNow/1","title":"wxStyledTextEvent.getFoldLevelNow/1","type":"function"},{"doc":"Returns previous fold level for the line. This method is valid for wxEVT_STC_MODIFIED events when the result of getModificationType/1 includes ?wxSTC_MOD_CHANGEFOLD.","ref":"wxStyledTextEvent.html#getFoldLevelPrev/1","title":"wxStyledTextEvent.getFoldLevelPrev/1","type":"function"},{"doc":"Returns the key code of the key that generated this event. This method is valid for the following event types:","ref":"wxStyledTextEvent.html#getKey/1","title":"wxStyledTextEvent.getKey/1","type":"function"},{"doc":"Returns the value of the LParam field for this event. This method is valid for wxEVT_STC_MACRORECORD events.","ref":"wxStyledTextEvent.html#getLParam/1","title":"wxStyledTextEvent.getLParam/1","type":"function"},{"doc":"Returns the length (number of characters) of this event. This method is valid for wxEVT_STC_MODIFIED and wxEVT_STC_NEEDSHOWN events.","ref":"wxStyledTextEvent.html#getLength/1","title":"wxStyledTextEvent.getLength/1","type":"function"},{"doc":"Returns zero-based line number for this event. This method is valid for wxEVT_STC_DOUBLECLICK and wxEVT_STC_MODIFIED events.","ref":"wxStyledTextEvent.html#getLine/1","title":"wxStyledTextEvent.getLine/1","type":"function"},{"doc":"Returns the number of lines added or deleted with this event. This method is valid for wxEVT_STC_MODIFIED events when the result of getModificationType/1 includes ?wxSTC_MOD_INSERTTEXT or ?wxSTC_MOD_DELETETEXT.","ref":"wxStyledTextEvent.html#getLinesAdded/1","title":"wxStyledTextEvent.getLinesAdded/1","type":"function"},{"doc":"Returns the list type for this event. The list type is an integer passed to a list when it is created with the wxStyledTextCtrl:userListShow/3 method and can be used to distinguish lists if more than one is used. This method is valid for wxEVT_STC_AUTOCOMP_SELECTION_CHANGE and wxEVT_STC_USERLISTSELECTION events.","ref":"wxStyledTextEvent.html#getListType/1","title":"wxStyledTextEvent.getListType/1","type":"function"},{"doc":"Returns the zero-based index of the margin that generated this event. This method is valid for wxEVT_STC_MARGINCLICK and wxEVT_STC_MARGIN_RIGHT_CLICK events.","ref":"wxStyledTextEvent.html#getMargin/1","title":"wxStyledTextEvent.getMargin/1","type":"function"},{"doc":"Returns a message number while a macro is being recorded. Many of the wxStyledTextCtrl methods such as wxStyledTextCtrl:insertText/3 and wxStyledTextCtrl:paste/1 have an event number associated with them. This method returns that number while a macro is being recorded so that the macro can be played back later. This method is valid for wxEVT_STC_MACRORECORD events.","ref":"wxStyledTextEvent.html#getMessage/1","title":"wxStyledTextEvent.getMessage/1","type":"function"},{"doc":"Returns the modification type for this event. The modification type is a bit list that describes the change that generated this event. It may contain one or more of the following values: This method is valid for wxEVT_STC_MODIFIED events.","ref":"wxStyledTextEvent.html#getModificationType/1","title":"wxStyledTextEvent.getModificationType/1","type":"function"},{"doc":"Returns the modifiers of the key press or mouse click for this event. The returned value is a bit list that may contain one or more of the following values: In addition, the value can be checked for equality with ?wxSTC_KEYMOD_NORM to test if no modifiers are present. This method is valid for the following event types:","ref":"wxStyledTextEvent.html#getModifiers/1","title":"wxStyledTextEvent.getModifiers/1","type":"function"},{"doc":"Returns the zero-based text position associated this event. This method is valid for the following event types:","ref":"wxStyledTextEvent.html#getPosition/1","title":"wxStyledTextEvent.getPosition/1","type":"function"},{"doc":"Returns true if the Shift key is pressed. This method is valid for the following event types:","ref":"wxStyledTextEvent.html#getShift/1","title":"wxStyledTextEvent.getShift/1","type":"function"},{"doc":"Deprecated: Use wxCommandEvent:getString/1 instead.","ref":"wxStyledTextEvent.html#getText/1","title":"wxStyledTextEvent.getText/1","type":"function"},{"doc":"Returns value of the WParam field for this event. This method is valid for wxEVT_STC_MACRORECORD events.","ref":"wxStyledTextEvent.html#getWParam/1","title":"wxStyledTextEvent.getWParam/1","type":"function"},{"doc":"Returns the X coordinate of the mouse for this event. This method is valid for the following event types:","ref":"wxStyledTextEvent.html#getX/1","title":"wxStyledTextEvent.getX/1","type":"function"},{"doc":"Returns the Y coordinate of the mouse for this event. This method is valid for the following event types:","ref":"wxStyledTextEvent.html#getY/1","title":"wxStyledTextEvent.getY/1","type":"function"},{"doc":"","ref":"wxStyledTextEvent.html#t:wxStyledText/0","title":"wxStyledTextEvent.wxStyledText/0","type":"type"},{"doc":"","ref":"wxStyledTextEvent.html#t:wxStyledTextEvent/0","title":"wxStyledTextEvent.wxStyledTextEvent/0","type":"type"},{"doc":"","ref":"wxStyledTextEvent.html#t:wxStyledTextEventType/0","title":"wxStyledTextEvent.wxStyledTextEventType/0","type":"type"},{"doc":"This class is used for system colour change events, which are generated when the user changes the colour settings using the control panel. This is only appropriate under Windows. Remark: The default event handler for this event propagates the event to child windows, since Windows only sends the events to top-level windows. If intercepting this event for a top-level window, remember to call the base class handler, or to pass the event on to the window's children explicitly. See: Overview events This class is derived (and can use functions) from: wxEvent wxWidgets docs: wxSysColourChangedEvent Events Use wxEvtHandler:connect/3 with wxSysColourChangedEventType to subscribe to events of this type.","ref":"wxSysColourChangedEvent.html","title":"wxSysColourChangedEvent","type":"module"},{"doc":"","ref":"wxSysColourChangedEvent.html#t:wxSysColourChanged/0","title":"wxSysColourChangedEvent.wxSysColourChanged/0","type":"type"},{"doc":"","ref":"wxSysColourChangedEvent.html#t:wxSysColourChangedEvent/0","title":"wxSysColourChangedEvent.wxSysColourChangedEvent/0","type":"type"},{"doc":"","ref":"wxSysColourChangedEvent.html#t:wxSysColourChangedEventType/0","title":"wxSysColourChangedEvent.wxSysColourChangedEventType/0","type":"type"},{"doc":"wxSystemOptions stores option/value pairs that wxWidgets itself or applications can use to alter behaviour at run-time. It can be used to optimize behaviour that doesn't deserve a distinct API, but is still important to be able to configure. System options can be set by the program itself using setOption/2 method and they also can be set from the program environment by defining an environment variable wx_option to set the given option for all wxWidgets applications or wx_appname_option to set it just for the application with the given name (as returned by wxApp::GetAppName() (not implemented in wx)). Notice that any characters not allowed in the environment variables names, such as periods and dashes, should be replaced with underscores. E.g. to define a system option &quot;foo-bar&quot; you need to define the environment variable &quot;wx_foo_bar&quot;. The program may use system options for its own needs but they are mostly used to control the behaviour of wxWidgets library itself. These options are currently recognised by wxWidgets: All platforms Windows GTK+ Mac Motif The compile-time option to include or exclude this functionality is wxUSE_SYSTEM_OPTIONS. See: wxSystemSettings wxWidgets docs: wxSystemOptions","ref":"wxSystemOptions.html","title":"wxSystemOptions","type":"module"},{"doc":"Gets an option. The function is case-insensitive to name . Returns empty string if the option hasn't been set. See: setOption/2 , getOptionInt/1 , hasOption/1","ref":"wxSystemOptions.html#getOption/1","title":"wxSystemOptions.getOption/1","type":"function"},{"doc":"Gets an option as an integer. The function is case-insensitive to name . If the option hasn't been set, this function returns 0. See: setOption/2 , getOption/1 , hasOption/1","ref":"wxSystemOptions.html#getOptionInt/1","title":"wxSystemOptions.getOptionInt/1","type":"function"},{"doc":"Returns true if the given option is present. The function is case-insensitive to name . See: setOption/2 , getOption/1 , getOptionInt/1","ref":"wxSystemOptions.html#hasOption/1","title":"wxSystemOptions.hasOption/1","type":"function"},{"doc":"Returns true if the option with the given name had been set to 0 value. This is mostly useful for boolean options for which you can't use GetOptionInt(name) == 0 as this would also be true if the option hadn't been set at all.","ref":"wxSystemOptions.html#isFalse/1","title":"wxSystemOptions.isFalse/1","type":"function"},{"doc":"Sets an option. The function is case-insensitive to name .","ref":"wxSystemOptions.html#setOption/2","title":"wxSystemOptions.setOption/2","type":"function"},{"doc":"","ref":"wxSystemOptions.html#t:wxSystemOptions/0","title":"wxSystemOptions.wxSystemOptions/0","type":"type"},{"doc":"wxSystemSettings allows the application to ask for details about the system. This can include settings such as standard colours, fonts, and user interface element sizes. See: wxFont , wx_color() , wxSystemOptions wxWidgets docs: wxSystemSettings","ref":"wxSystemSettings.html","title":"wxSystemSettings","type":"module"},{"doc":"Returns a system colour. Return: The returned colour is always valid.","ref":"wxSystemSettings.html#getColour/1","title":"wxSystemSettings.getColour/1","type":"function"},{"doc":"Returns a system font. Return: The returned font is always valid.","ref":"wxSystemSettings.html#getFont/1","title":"wxSystemSettings.getFont/1","type":"function"},{"doc":"","ref":"wxSystemSettings.html#getMetric/1","title":"wxSystemSettings.getMetric/1","type":"function"},{"doc":"Returns the value of a system metric, or -1 if the metric is not supported on the current system. The value of win determines if the metric returned is a global value or a wxWindow based value, in which case it might determine the widget, the display the window is on, or something similar. The window given should be as close to the metric as possible (e.g. a wxTopLevelWindow in case of the wxSYS_CAPTION_Y metric). index can be one of the ?wxSystemMetric enum values. win is a pointer to the window for which the metric is requested. Specifying the win parameter is encouraged, because some metrics on some ports are not supported without one,or they might be capable of reporting better values if given one. If a window does not make sense for a metric, one should still be given, as for example it might determine which displays cursor width is requested with wxSYS_CURSOR_X.","ref":"wxSystemSettings.html#getMetric/2","title":"wxSystemSettings.getMetric/2","type":"function"},{"doc":"Returns the screen type. The return value is one of the ?wxSystemScreenType enum values.","ref":"wxSystemSettings.html#getScreenType/0","title":"wxSystemSettings.getScreenType/0","type":"function"},{"doc":"","ref":"wxSystemSettings.html#t:wxSystemSettings/0","title":"wxSystemSettings.wxSystemSettings/0","type":"type"},{"doc":"This class represents a taskbar icon. A taskbar icon is an icon that appears in the 'system tray' and responds to mouse clicks, optionally with a tooltip above it to help provide information. X Window System Note Under X Window System, the window manager must support either the &quot;System Tray Protocol&quot; (see http://freedesktop.org/wiki/Specifications/systemtray-spec ) by freedesktop.org (WMs used by modern desktop environments such as GNOME &gt;= 2, KDE &gt;= 3 and XFCE &gt;= 4 all do) or the older methods used in GNOME 1.2 and KDE 1 and 2. If it doesn't, the icon will appear as a toplevel window on user's desktop. Because not all window managers have system tray, there's no guarantee that wxTaskBarIcon will work correctly under X Window System and so the applications should use it only as an optional component of their user interface. The user should be required to explicitly enable the taskbar icon on Unix, it shouldn't be on by default. This class is derived (and can use functions) from: wxEvtHandler wxWidgets docs: wxTaskBarIcon Events Event types emitted from this class: taskbar_move , taskbar_left_down , taskbar_left_up , taskbar_right_down , taskbar_right_up , taskbar_left_dclick , taskbar_right_dclick","ref":"wxTaskBarIcon.html","title":"wxTaskBarIcon","type":"module"},{"doc":"Destroys the wxTaskBarIcon object, removing the icon if not already removed.","ref":"wxTaskBarIcon.html#destroy/1","title":"wxTaskBarIcon.destroy/1","type":"function"},{"doc":"Default constructor. The iconType is only applicable on wxOSX/Cocoa.","ref":"wxTaskBarIcon.html#new/1","title":"wxTaskBarIcon.new/1","type":"function"},{"doc":"Pops up a menu at the current mouse position. The events can be handled by a class derived from wxTaskBarIcon . Note: It is recommended to override CreatePopupMenu() (not implemented in wx) callback instead of calling this method from event handler, because some ports (e.g. wxCocoa) may not implement popupMenu/2 and mouse click events at all.","ref":"wxTaskBarIcon.html#popupMenu/2","title":"wxTaskBarIcon.popupMenu/2","type":"function"},{"doc":"Removes the icon previously set with setIcon/3 .","ref":"wxTaskBarIcon.html#removeIcon/1","title":"wxTaskBarIcon.removeIcon/1","type":"function"},{"doc":"","ref":"wxTaskBarIcon.html#setIcon/2","title":"wxTaskBarIcon.setIcon/2","type":"function"},{"doc":"Sets the icon, and optional tooltip text.","ref":"wxTaskBarIcon.html#setIcon/3","title":"wxTaskBarIcon.setIcon/3","type":"function"},{"doc":"","ref":"wxTaskBarIcon.html#t:wxTaskBarIcon/0","title":"wxTaskBarIcon.wxTaskBarIcon/0","type":"type"},{"doc":"The event class used by wxTaskBarIcon . For a list of the event macros meant to be used with wxTaskBarIconEvent , please look at wxTaskBarIcon description. This class is derived (and can use functions) from: wxEvent wxWidgets docs: wxTaskBarIconEvent","ref":"wxTaskBarIconEvent.html","title":"wxTaskBarIconEvent","type":"module"},{"doc":"","ref":"wxTaskBarIconEvent.html#t:wxTaskBarIcon/0","title":"wxTaskBarIconEvent.wxTaskBarIcon/0","type":"type"},{"doc":"","ref":"wxTaskBarIconEvent.html#t:wxTaskBarIconEvent/0","title":"wxTaskBarIconEvent.wxTaskBarIconEvent/0","type":"type"},{"doc":"","ref":"wxTaskBarIconEvent.html#t:wxTaskBarIconEventType/0","title":"wxTaskBarIconEvent.wxTaskBarIconEventType/0","type":"type"},{"doc":"wxTextAttr represents the character and paragraph attributes, or style, for a range of text in a wxTextCtrl or wxRichTextCtrl (not implemented in wx). When setting up a wxTextAttr object, pass a bitlist mask to setFlags/2 to indicate which style elements should be changed. As a convenience, when you call a setter such as SetFont, the relevant bit will be set. See: wxTextCtrl , wxRichTextCtrl (not implemented in wx) wxWidgets docs: wxTextAttr","ref":"wxTextAttr.html","title":"wxTextAttr","type":"module"},{"doc":"Destroys the object.","ref":"wxTextAttr.html#destroy/1","title":"wxTextAttr.destroy/1","type":"function"},{"doc":"Returns the alignment flags. See ?wxTextAttrAlignment for a list of available styles.","ref":"wxTextAttr.html#getAlignment/1","title":"wxTextAttr.getAlignment/1","type":"function"},{"doc":"Returns the background colour.","ref":"wxTextAttr.html#getBackgroundColour/1","title":"wxTextAttr.getBackgroundColour/1","type":"function"},{"doc":"Returns flags indicating which attributes are applicable. See setFlags/2 for a list of available flags.","ref":"wxTextAttr.html#getFlags/1","title":"wxTextAttr.getFlags/1","type":"function"},{"doc":"Creates and returns a font specified by the font attributes in the wxTextAttr object. Note that wxTextAttr does not store a wxFont object, so this is only a temporary font. For greater efficiency, access the font attributes directly.","ref":"wxTextAttr.html#getFont/1","title":"wxTextAttr.getFont/1","type":"function"},{"doc":"Returns the left indent in tenths of a millimetre.","ref":"wxTextAttr.html#getLeftIndent/1","title":"wxTextAttr.getLeftIndent/1","type":"function"},{"doc":"Returns the left sub-indent in tenths of a millimetre.","ref":"wxTextAttr.html#getLeftSubIndent/1","title":"wxTextAttr.getLeftSubIndent/1","type":"function"},{"doc":"Returns the right indent in tenths of a millimeter.","ref":"wxTextAttr.html#getRightIndent/1","title":"wxTextAttr.getRightIndent/1","type":"function"},{"doc":"Returns an array of tab stops, each expressed in tenths of a millimeter. Each stop is measured from the left margin and therefore each value must be larger than the last.","ref":"wxTextAttr.html#getTabs/1","title":"wxTextAttr.getTabs/1","type":"function"},{"doc":"Returns the text foreground colour.","ref":"wxTextAttr.html#getTextColour/1","title":"wxTextAttr.getTextColour/1","type":"function"},{"doc":"Returns true if the attribute object specifies a background colour.","ref":"wxTextAttr.html#hasBackgroundColour/1","title":"wxTextAttr.hasBackgroundColour/1","type":"function"},{"doc":"Returns true if the attribute object specifies any font attributes.","ref":"wxTextAttr.html#hasFont/1","title":"wxTextAttr.hasFont/1","type":"function"},{"doc":"Returns true if the attribute object specifies a text foreground colour.","ref":"wxTextAttr.html#hasTextColour/1","title":"wxTextAttr.hasTextColour/1","type":"function"},{"doc":"Returns false if we have any attributes set, true otherwise.","ref":"wxTextAttr.html#isDefault/1","title":"wxTextAttr.isDefault/1","type":"function"},{"doc":"Constructors.","ref":"wxTextAttr.html#new/0","title":"wxTextAttr.new/0","type":"function"},{"doc":"","ref":"wxTextAttr.html#new/1","title":"wxTextAttr.new/1","type":"function"},{"doc":"","ref":"wxTextAttr.html#new/2","title":"wxTextAttr.new/2","type":"function"},{"doc":"Sets the paragraph alignment. See ?wxTextAttrAlignment enumeration values. Of these, wxTEXT_ALIGNMENT_JUSTIFIED is unimplemented. In future justification may be supported when printing or previewing, only.","ref":"wxTextAttr.html#setAlignment/2","title":"wxTextAttr.setAlignment/2","type":"function"},{"doc":"Sets the background colour.","ref":"wxTextAttr.html#setBackgroundColour/2","title":"wxTextAttr.setBackgroundColour/2","type":"function"},{"doc":"Sets the flags determining which styles are being specified. The ?wxTextAttrFlags values can be passed in a bitlist.","ref":"wxTextAttr.html#setFlags/2","title":"wxTextAttr.setFlags/2","type":"function"},{"doc":"","ref":"wxTextAttr.html#setFont/2","title":"wxTextAttr.setFont/2","type":"function"},{"doc":"Sets the attributes for the given font. Note that wxTextAttr does not store an actual wxFont object.","ref":"wxTextAttr.html#setFont/3","title":"wxTextAttr.setFont/3","type":"function"},{"doc":"","ref":"wxTextAttr.html#setLeftIndent/2","title":"wxTextAttr.setLeftIndent/2","type":"function"},{"doc":"Sets the left indent and left subindent in tenths of a millimetre. The sub-indent is an offset from the left of the paragraph, and is used for all but the first line in a paragraph. A positive value will cause the first line to appear to the left of the subsequent lines, and a negative value will cause the first line to be indented relative to the subsequent lines. wxRichTextBuffer (not implemented in wx) uses indentation to render a bulleted item. The left indent is the distance between the margin and the bullet. The content of the paragraph, including the first line, starts at leftMargin + leftSubIndent. So the distance between the left edge of the bullet and the left of the actual paragraph is leftSubIndent.","ref":"wxTextAttr.html#setLeftIndent/3","title":"wxTextAttr.setLeftIndent/3","type":"function"},{"doc":"Sets the right indent in tenths of a millimetre.","ref":"wxTextAttr.html#setRightIndent/2","title":"wxTextAttr.setRightIndent/2","type":"function"},{"doc":"Sets the tab stops, expressed in tenths of a millimetre. Each stop is measured from the left margin and therefore each value must be larger than the last.","ref":"wxTextAttr.html#setTabs/2","title":"wxTextAttr.setTabs/2","type":"function"},{"doc":"Sets the text foreground colour.","ref":"wxTextAttr.html#setTextColour/2","title":"wxTextAttr.setTextColour/2","type":"function"},{"doc":"","ref":"wxTextAttr.html#t:wxTextAttr/0","title":"wxTextAttr.wxTextAttr/0","type":"type"},{"doc":"A text control allows text to be displayed and edited. It may be single line or multi-line. Notice that a lot of methods of the text controls are found in the base wxTextEntry (not implemented in wx) class which is a common base class for wxTextCtrl and other controls using a single line text entry field (e.g. wxComboBox ). Styles This class supports the following styles: wxTextCtrl Text Format The multiline text controls always store the text as a sequence of lines separated by '\\n' characters, i.e. in the Unix text format even on non-Unix platforms. This allows the user code to ignore the differences between the platforms but at a price: the indices in the control such as those returned by getInsertionPoint/1 or getSelection/1 can not be used as indices into the string returned by getValue/1 as they're going to be slightly off for platforms using &quot;\\\\r\\\\n&quot; as separator (as Windows does). Instead, if you need to obtain a substring between the 2 indices obtained from the control with the help of the functions mentioned above, you should use getRange/3 . And the indices themselves can only be passed to other methods, for example setInsertionPoint/2 or setSelection/3 . To summarize: never use the indices returned by (multiline) wxTextCtrl as indices into the string it contains, but only as arguments to be passed back to the other wxTextCtrl methods. This problem doesn't arise for single-line platforms however where the indices in the control do correspond to the positions in the value string. wxTextCtrl Positions and Coordinates It is possible to use either linear positions, i.e. roughly (but not always exactly, as explained in the previous section) the index of the character in the text contained in the control or X-Y coordinates, i.e. column and line of the character when working with this class and it provides the functions positionToXY/2 and xYToPosition/3 to convert between the two. Additionally, a position in the control can be converted to its coordinates in pixels using PositionToCoords() (not implemented in wx) which can be useful to e.g. show a popup menu near the given character. And, in the other direction, HitTest() (not implemented in wx) can be used to find the character under, or near, the given pixel coordinates. To be more precise, positions actually refer to the gaps between characters and not the characters themselves. Thus, position 0 is the one before the very first character in the control and so is a valid position even when the control is empty. And if the control contains a single character, it has two valid positions: 0 before this character and 1 - after it. This, when the documentation of various functions mentions &quot;invalid position&quot;, it doesn't consider the position just after the last character of the line to be invalid, only the positions beyond that one (e.g. 2 and greater in the single character example) are actually invalid. wxTextCtrl Styles. Multi-line text controls support styling, i.e. provide a possibility to set colours and font for individual characters in it (note that under Windows wxTE_RICH style is required for style support). To use the styles you can either call setDefaultStyle/2 before inserting the text or call setStyle/4 later to change the style of the text already in the control (the first solution is much more efficient). In either case, if the style doesn't specify some of the attributes (for example you only want to set the text colour but without changing the font nor the text background), the values of the default style will be used for them. If there is no default style, the attributes of the text control itself are used. So the following code correctly describes what it does: the second call to setDefaultStyle/2 doesn't change the text foreground colour (which stays red) while the last one doesn't change the background colour (which stays grey): wxTextCtrl and C++ Streams This class multiply-inherits from std::streambuf (except for some really old compilers using non-standard iostream library), allowing code such as the following: Note that even if your build of wxWidgets doesn't support this (the symbol wxHAS_TEXT_WINDOW_STREAM has value of 0 then) you can still use wxTextCtrl itself in a stream-like manner: However the possibility to create a std::ostream associated with wxTextCtrl may be useful if you need to redirect the output of a function taking a std::ostream as parameter to a text control. Another commonly requested need is to redirect std::cout to the text control. This may be done in the following way: But wxWidgets provides a convenient class to make it even simpler so instead you may just do See wxStreamToTextRedirector (not implemented in wx) for more details. Event Handling. The following commands are processed by default event handlers in wxTextCtrl : wxID_CUT , wxID_COPY , wxID_PASTE , wxID_UNDO , wxID_REDO . The associated UI update events are also processed automatically, when the control has the focus. See: create/4 , wxValidator (not implemented in wx) This class is derived (and can use functions) from: wxControl wxWindow wxEvtHandler wxWidgets docs: wxTextCtrl Events Event types emitted from this class: command_text_updated , command_text_enter , text_maxlen","ref":"wxTextCtrl.html","title":"wxTextCtrl","type":"module"},{"doc":"Appends the text to the end of the text control. Remark: After the text is appended, the insertion point will be at the end of the text control. If this behaviour is not desired, the programmer should use getInsertionPoint/1 and setInsertionPoint/2 . See: writeText/2","ref":"wxTextCtrl.html#appendText/2","title":"wxTextCtrl.appendText/2","type":"function"},{"doc":"Returns true if the selection can be copied to the clipboard.","ref":"wxTextCtrl.html#canCopy/1","title":"wxTextCtrl.canCopy/1","type":"function"},{"doc":"Returns true if the selection can be cut to the clipboard.","ref":"wxTextCtrl.html#canCut/1","title":"wxTextCtrl.canCut/1","type":"function"},{"doc":"Returns true if the contents of the clipboard can be pasted into the text control. On some platforms (Motif, GTK) this is an approximation and returns true if the control is editable, false otherwise.","ref":"wxTextCtrl.html#canPaste/1","title":"wxTextCtrl.canPaste/1","type":"function"},{"doc":"Returns true if there is a redo facility available and the last operation can be redone.","ref":"wxTextCtrl.html#canRedo/1","title":"wxTextCtrl.canRedo/1","type":"function"},{"doc":"Returns true if there is an undo facility available and the last operation can be undone.","ref":"wxTextCtrl.html#canUndo/1","title":"wxTextCtrl.canUndo/1","type":"function"},{"doc":"Sets the new text control value. It also marks the control as not-modified which means that IsModified() would return false immediately after the call to changeValue/2 . The insertion point is set to the start of the control (i.e. position 0) by this function. This functions does not generate the wxEVT_TEXT event but otherwise is identical to setValue/2 . See overview_events_prog for more information. Since: 2.7.1","ref":"wxTextCtrl.html#changeValue/2","title":"wxTextCtrl.changeValue/2","type":"function"},{"doc":"Clears the text in the control. Note that this function will generate a wxEVT_TEXT event, i.e. its effect is identical to calling SetValue (&quot;&quot;).","ref":"wxTextCtrl.html#clear/1","title":"wxTextCtrl.clear/1","type":"function"},{"doc":"Copies the selected text to the clipboard.","ref":"wxTextCtrl.html#copy/1","title":"wxTextCtrl.copy/1","type":"function"},{"doc":"","ref":"wxTextCtrl.html#create/3","title":"wxTextCtrl.create/3","type":"function"},{"doc":"Creates the text control for two-step construction. This method should be called if the default constructor was used for the control creation. Its parameters have the same meaning as for the non-default constructor.","ref":"wxTextCtrl.html#create/4","title":"wxTextCtrl.create/4","type":"function"},{"doc":"Copies the selected text to the clipboard and removes it from the control.","ref":"wxTextCtrl.html#cut/1","title":"wxTextCtrl.cut/1","type":"function"},{"doc":"Destructor, destroying the text control.","ref":"wxTextCtrl.html#destroy/1","title":"wxTextCtrl.destroy/1","type":"function"},{"doc":"Resets the internal modified flag as if the current changes had been saved.","ref":"wxTextCtrl.html#discardEdits/1","title":"wxTextCtrl.discardEdits/1","type":"function"},{"doc":"This function inserts into the control the character which would have been inserted if the given key event had occurred in the text control. The event object should be the same as the one passed to EVT_KEY_DOWN handler previously by wxWidgets. Please note that this function doesn't currently work correctly for all keys under any platform but MSW. Return: true if the event resulted in a change to the control, false otherwise.","ref":"wxTextCtrl.html#emulateKeyPress/2","title":"wxTextCtrl.emulateKeyPress/2","type":"function"},{"doc":"Returns the style currently used for the new text. See: setDefaultStyle/2","ref":"wxTextCtrl.html#getDefaultStyle/1","title":"wxTextCtrl.getDefaultStyle/1","type":"function"},{"doc":"Returns the insertion point, or cursor, position. This is defined as the zero based index of the character position to the right of the insertion point. For example, if the insertion point is at the end of the single-line text control, it is equal to getLastPosition/1 . Notice that insertion position is, in general, different from the index of the character the cursor position at in the string returned by getValue/1 . While this is always the case for the single line controls, multi-line controls can use two characters &quot;\\\\r\\\\n&quot; as line separator (this is notably the case under MSW) meaning that indices in the control and its string value are offset by 1 for every line. Hence to correctly get the character at the current cursor position, taking into account that there can be none if the cursor is at the end of the string, you could do the following:","ref":"wxTextCtrl.html#getInsertionPoint/1","title":"wxTextCtrl.getInsertionPoint/1","type":"function"},{"doc":"Returns the zero based index of the last position in the text control, which is equal to the number of characters in the control.","ref":"wxTextCtrl.html#getLastPosition/1","title":"wxTextCtrl.getLastPosition/1","type":"function"},{"doc":"Gets the length of the specified line, not including any trailing newline character(s). Return: The length of the line, or -1 if lineNo was invalid.","ref":"wxTextCtrl.html#getLineLength/2","title":"wxTextCtrl.getLineLength/2","type":"function"},{"doc":"Returns the contents of a given line in the text control, not including any trailing newline character(s). Return: The contents of the line.","ref":"wxTextCtrl.html#getLineText/2","title":"wxTextCtrl.getLineText/2","type":"function"},{"doc":"Returns the number of lines in the text control buffer. The returned number is the number of logical lines, i.e. just the count of the number of newline characters in the control + 1, for wxGTK and wxOSX/Cocoa ports while it is the number of physical lines, i.e. the count of lines actually shown in the control, in wxMSW. Because of this discrepancy, it is not recommended to use this function. Remark: Note that even empty text controls have one line (where the insertion point is), so getNumberOfLines/1 never returns 0.","ref":"wxTextCtrl.html#getNumberOfLines/1","title":"wxTextCtrl.getNumberOfLines/1","type":"function"},{"doc":"Returns the string containing the text starting in the positions from and up to to in the control. The positions must have been returned by another wxTextCtrl method. Please note that the positions in a multiline wxTextCtrl do not correspond to the indices in the string returned by getValue/1 because of the different new line representations ( CR or CR LF) and so this method should be used to obtain the correct results instead of extracting parts of the entire value. It may also be more efficient, especially if the control contains a lot of data.","ref":"wxTextCtrl.html#getRange/3","title":"wxTextCtrl.getRange/3","type":"function"},{"doc":"Gets the current selection span. If the returned values are equal, there was no selection. Please note that the indices returned may be used with the other wxTextCtrl methods but don't necessarily represent the correct indices into the string returned by getValue/1 for multiline controls under Windows (at least,) you should use getStringSelection/1 to get the selected text.","ref":"wxTextCtrl.html#getSelection/1","title":"wxTextCtrl.getSelection/1","type":"function"},{"doc":"Gets the text currently selected in the control. If there is no selection, the returned string is empty.","ref":"wxTextCtrl.html#getStringSelection/1","title":"wxTextCtrl.getStringSelection/1","type":"function"},{"doc":"Returns the style at this position in the text control. Not all platforms support this function. Return: true on success, false if an error occurred (this may also mean that the styles are not supported under this platform). See: setStyle/4 , wxTextAttr","ref":"wxTextCtrl.html#getStyle/3","title":"wxTextCtrl.getStyle/3","type":"function"},{"doc":"Gets the contents of the control. Notice that for a multiline text control, the lines will be separated by (Unix-style) \\n characters, even under Windows where they are separated by a \\r\\n sequence in the native control.","ref":"wxTextCtrl.html#getValue/1","title":"wxTextCtrl.getValue/1","type":"function"},{"doc":"Returns true if the controls contents may be edited by user (note that it always can be changed by the program). In other words, this functions returns true if the control hasn't been put in read-only mode by a previous call to setEditable/2 .","ref":"wxTextCtrl.html#isEditable/1","title":"wxTextCtrl.isEditable/1","type":"function"},{"doc":"Returns true if the text has been modified by user. Note that calling setValue/2 doesn't make the control modified. See: markDirty/1","ref":"wxTextCtrl.html#isModified/1","title":"wxTextCtrl.isModified/1","type":"function"},{"doc":"Returns true if this is a multi line edit control and false otherwise. See: isSingleLine/1","ref":"wxTextCtrl.html#isMultiLine/1","title":"wxTextCtrl.isMultiLine/1","type":"function"},{"doc":"Returns true if this is a single line edit control and false otherwise. See: isSingleLine/1 , isMultiLine/1","ref":"wxTextCtrl.html#isSingleLine/1","title":"wxTextCtrl.isSingleLine/1","type":"function"},{"doc":"","ref":"wxTextCtrl.html#loadFile/2","title":"wxTextCtrl.loadFile/2","type":"function"},{"doc":"Loads and displays the named file, if it exists. Return: true if successful, false otherwise.","ref":"wxTextCtrl.html#loadFile/3","title":"wxTextCtrl.loadFile/3","type":"function"},{"doc":"Mark text as modified (dirty). See: isModified/1","ref":"wxTextCtrl.html#markDirty/1","title":"wxTextCtrl.markDirty/1","type":"function"},{"doc":"Default ctor.","ref":"wxTextCtrl.html#new/0","title":"wxTextCtrl.new/0","type":"function"},{"doc":"","ref":"wxTextCtrl.html#new/2","title":"wxTextCtrl.new/2","type":"function"},{"doc":"Constructor, creating and showing a text control. Remark: The horizontal scrollbar (wxHSCROLL style flag) will only be created for multi-line text controls. Without a horizontal scrollbar, text lines that don't fit in the control's size will be wrapped (but no newline character is inserted). Single line controls don't have a horizontal scrollbar, the text is automatically scrolled so that the insertion point is always visible. See: create/4 , wxValidator (not implemented in wx)","ref":"wxTextCtrl.html#new/3","title":"wxTextCtrl.new/3","type":"function"},{"doc":"Pastes text from the clipboard to the text item.","ref":"wxTextCtrl.html#paste/1","title":"wxTextCtrl.paste/1","type":"function"},{"doc":"Converts given position to a zero-based column, line number pair. Return: true on success, false on failure (most likely due to a too large position parameter). See: xYToPosition/3","ref":"wxTextCtrl.html#positionToXY/2","title":"wxTextCtrl.positionToXY/2","type":"function"},{"doc":"If there is a redo facility and the last operation can be redone, redoes the last operation. Does nothing if there is no redo facility.","ref":"wxTextCtrl.html#redo/1","title":"wxTextCtrl.redo/1","type":"function"},{"doc":"Removes the text starting at the first given position up to (but not including) the character at the last position. This function puts the current insertion point position at to as a side effect.","ref":"wxTextCtrl.html#remove/3","title":"wxTextCtrl.remove/3","type":"function"},{"doc":"Replaces the text starting at the first position up to (but not including) the character at the last position with the given text. This function puts the current insertion point position at to as a side effect.","ref":"wxTextCtrl.html#replace/4","title":"wxTextCtrl.replace/4","type":"function"},{"doc":"","ref":"wxTextCtrl.html#saveFile/1","title":"wxTextCtrl.saveFile/1","type":"function"},{"doc":"Saves the contents of the control in a text file. Return: true if the operation was successful, false otherwise.","ref":"wxTextCtrl.html#saveFile/2","title":"wxTextCtrl.saveFile/2","type":"function"},{"doc":"Changes the default style to use for the new text which is going to be added to the control. This applies both to the text added programmatically using writeText/2 or appendText/2 and to the text entered by the user interactively. If either of the font, foreground, or background colour is not set in style , the values of the previous default style are used for them. If the previous default style didn't set them neither, the global font or colours of the text control itself are used as fall back. However if the style parameter is the default wxTextAttr , then the default style is just reset (instead of being combined with the new style which wouldn't change it at all). Return: true on success, false if an error occurred (this may also mean that the styles are not supported under this platform). See: getDefaultStyle/1","ref":"wxTextCtrl.html#setDefaultStyle/2","title":"wxTextCtrl.setDefaultStyle/2","type":"function"},{"doc":"Makes the text item editable or read-only, overriding the wxTE_READONLY flag. See: isEditable/1","ref":"wxTextCtrl.html#setEditable/2","title":"wxTextCtrl.setEditable/2","type":"function"},{"doc":"Sets the insertion point at the given position.","ref":"wxTextCtrl.html#setInsertionPoint/2","title":"wxTextCtrl.setInsertionPoint/2","type":"function"},{"doc":"Sets the insertion point at the end of the text control. This is equivalent to calling setInsertionPoint/2 with getLastPosition/1 argument.","ref":"wxTextCtrl.html#setInsertionPointEnd/1","title":"wxTextCtrl.setInsertionPointEnd/1","type":"function"},{"doc":"This function sets the maximum number of characters the user can enter into the control. In other words, it allows limiting the text value length to len not counting the terminating NUL character. If len is 0, the previously set max length limit, if any, is discarded and the user may enter as much text as the underlying native text control widget supports (typically at least 32Kb). If the user tries to enter more characters into the text control when it already is filled up to the maximal length, a wxEVT_TEXT_MAXLEN event is sent to notify the program about it (giving it the possibility to show an explanatory message, for example) and the extra input is discarded. Note that in wxGTK this function may only be used with single line text controls.","ref":"wxTextCtrl.html#setMaxLength/2","title":"wxTextCtrl.setMaxLength/2","type":"function"},{"doc":"Selects the text starting at the first position up to (but not including) the character at the last position. If both parameters are equal to -1 all text in the control is selected. Notice that the insertion point will be moved to from by this function. See: SelectAll() (not implemented in wx)","ref":"wxTextCtrl.html#setSelection/3","title":"wxTextCtrl.setSelection/3","type":"function"},{"doc":"Changes the style of the given range. If any attribute within style is not set, the corresponding attribute from getDefaultStyle/1 is used. Return: true on success, false if an error occurred (this may also mean that the styles are not supported under this platform). See: getStyle/3 , wxTextAttr","ref":"wxTextCtrl.html#setStyle/4","title":"wxTextCtrl.setStyle/4","type":"function"},{"doc":"Sets the new text control value. It also marks the control as not-modified which means that IsModified() would return false immediately after the call to setValue/2 . The insertion point is set to the start of the control (i.e. position 0) by this function unless the control value doesn't change at all, in which case the insertion point is left at its original position. Note that, unlike most other functions changing the controls values, this function generates a wxEVT_TEXT event. To avoid this you can use changeValue/2 instead.","ref":"wxTextCtrl.html#setValue/2","title":"wxTextCtrl.setValue/2","type":"function"},{"doc":"Makes the line containing the given position visible.","ref":"wxTextCtrl.html#showPosition/2","title":"wxTextCtrl.showPosition/2","type":"function"},{"doc":"If there is an undo facility and the last operation can be undone, undoes the last operation. Does nothing if there is no undo facility.","ref":"wxTextCtrl.html#undo/1","title":"wxTextCtrl.undo/1","type":"function"},{"doc":"Writes the text into the text control at the current insertion position. Remark: Newlines in the text string are the only control characters allowed, and they will cause appropriate line breaks. See operator&lt;&lt;() and appendText/2 for more convenient ways of writing to the window. After the write operation, the insertion point will be at the end of the inserted text, so subsequent write operations will be appended. To append text after the user may have interacted with the control, call setInsertionPointEnd/1 before writing.","ref":"wxTextCtrl.html#writeText/2","title":"wxTextCtrl.writeText/2","type":"function"},{"doc":"Converts the given zero based column and line number to a position. Return: The position value, or -1 if x or y was invalid.","ref":"wxTextCtrl.html#xYToPosition/3","title":"wxTextCtrl.xYToPosition/3","type":"function"},{"doc":"","ref":"wxTextCtrl.html#t:wxTextCtrl/0","title":"wxTextCtrl.wxTextCtrl/0","type":"type"},{"doc":"wxTextDataObject is a specialization of wxDataObjectSimple (not implemented in wx) for text data. It can be used without change to paste data into the wxClipboard or a wxDropSource (not implemented in wx). A user may wish to derive a new class from this class for providing text on-demand in order to minimize memory consumption when offering data in several formats, such as plain text and RTF because by default the text is stored in a string in this class, but it might as well be generated when requested. For this, getTextLength/1 and getText/1 will have to be overridden. Note that if you already have the text inside a string, you will not achieve any efficiency gain by overriding these functions because copying wxStrings is already a very efficient operation (data is not actually copied because wxStrings are reference counted). See: Overview dnd , wxDataObject , wxDataObjectSimple (not implemented in wx), wxFileDataObject , wxBitmapDataObject This class is derived (and can use functions) from: wxDataObject wxWidgets docs: wxTextDataObject","ref":"wxTextDataObject.html","title":"wxTextDataObject","type":"module"},{"doc":"Destroys the object.","ref":"wxTextDataObject.html#destroy/1","title":"wxTextDataObject.destroy/1","type":"function"},{"doc":"Returns the text associated with the data object. You may wish to override this method when offering data on-demand, but this is not required by wxWidgets' internals. Use this method to get data in text form from the wxClipboard .","ref":"wxTextDataObject.html#getText/1","title":"wxTextDataObject.getText/1","type":"function"},{"doc":"Returns the data size. By default, returns the size of the text data set in the constructor or using setText/2 . This can be overridden to provide text size data on-demand. It is recommended to return the text length plus 1 for a trailing zero, but this is not strictly required.","ref":"wxTextDataObject.html#getTextLength/1","title":"wxTextDataObject.getTextLength/1","type":"function"},{"doc":"","ref":"wxTextDataObject.html#new/0","title":"wxTextDataObject.new/0","type":"function"},{"doc":"Constructor, may be used to initialise the text (otherwise setText/2 should be used later).","ref":"wxTextDataObject.html#new/1","title":"wxTextDataObject.new/1","type":"function"},{"doc":"Sets the text associated with the data object. This method is called when the data object receives the data and, by default, copies the text into the member variable. If you want to process the text on the fly you may wish to override this function.","ref":"wxTextDataObject.html#setText/2","title":"wxTextDataObject.setText/2","type":"function"},{"doc":"","ref":"wxTextDataObject.html#t:wxTextDataObject/0","title":"wxTextDataObject.wxTextDataObject/0","type":"type"},{"doc":"This class represents a dialog that requests a one-line text string from the user. It is implemented as a generic wxWidgets dialog. See: Overview cmndlg This class is derived (and can use functions) from: wxDialog wxTopLevelWindow wxWindow wxEvtHandler wxWidgets docs: wxTextEntryDialog","ref":"wxTextEntryDialog.html","title":"wxTextEntryDialog","type":"module"},{"doc":"Destructor.","ref":"wxTextEntryDialog.html#destroy/1","title":"wxTextEntryDialog.destroy/1","type":"function"},{"doc":"Returns the text that the user has entered if the user has pressed OK, or the original value if the user has pressed Cancel.","ref":"wxTextEntryDialog.html#getValue/1","title":"wxTextEntryDialog.getValue/1","type":"function"},{"doc":"Default constructor. Call Create() (not implemented in wx) to really create the dialog later. Since: 2.9.5","ref":"wxTextEntryDialog.html#new/0","title":"wxTextEntryDialog.new/0","type":"function"},{"doc":"","ref":"wxTextEntryDialog.html#new/2","title":"wxTextEntryDialog.new/2","type":"function"},{"doc":"Constructor. Use wxDialog:showModal/1 to show the dialog. See Create() (not implemented in wx) method for parameter description.","ref":"wxTextEntryDialog.html#new/3","title":"wxTextEntryDialog.new/3","type":"function"},{"doc":"Sets the default text value.","ref":"wxTextEntryDialog.html#setValue/2","title":"wxTextEntryDialog.setValue/2","type":"function"},{"doc":"","ref":"wxTextEntryDialog.html#t:wxTextEntryDialog/0","title":"wxTextEntryDialog.wxTextEntryDialog/0","type":"type"},{"doc":"wxToggleButton is a button that stays pressed when clicked by the user. In other words, it is similar to wxCheckBox in functionality but looks like a wxButton . Since wxWidgets version 2.9.0 this control emits an update UI event. You can see wxToggleButton in action in page_samples_widgets. See: wxCheckBox , wxButton , wxBitmapToggleButton (not implemented in wx) This class is derived (and can use functions) from: wxControl wxWindow wxEvtHandler wxWidgets docs: wxToggleButton Events Event types emitted from this class: command_togglebutton_clicked","ref":"wxToggleButton.html","title":"wxToggleButton","type":"module"},{"doc":"","ref":"wxToggleButton.html#create/4","title":"wxToggleButton.create/4","type":"function"},{"doc":"Creates the toggle button for two-step construction. See new/4 for details.","ref":"wxToggleButton.html#create/5","title":"wxToggleButton.create/5","type":"function"},{"doc":"Destructor, destroying the toggle button.","ref":"wxToggleButton.html#destroy/1","title":"wxToggleButton.destroy/1","type":"function"},{"doc":"Gets the state of the toggle button. Return: Returns true if it is pressed, false otherwise.","ref":"wxToggleButton.html#getValue/1","title":"wxToggleButton.getValue/1","type":"function"},{"doc":"Default constructor.","ref":"wxToggleButton.html#new/0","title":"wxToggleButton.new/0","type":"function"},{"doc":"","ref":"wxToggleButton.html#new/3","title":"wxToggleButton.new/3","type":"function"},{"doc":"Constructor, creating and showing a toggle button. See: create/5 , wxValidator (not implemented in wx)","ref":"wxToggleButton.html#new/4","title":"wxToggleButton.new/4","type":"function"},{"doc":"Sets the toggle button to the given state. This does not cause a EVT_TOGGLEBUTTON event to be emitted.","ref":"wxToggleButton.html#setValue/2","title":"wxToggleButton.setValue/2","type":"function"},{"doc":"","ref":"wxToggleButton.html#t:wxToggleButton/0","title":"wxToggleButton.wxToggleButton/0","type":"type"},{"doc":"A toolbar is a bar of buttons and/or other controls usually placed below the menu bar in a wxFrame . You may create a toolbar that is managed by a frame calling wxFrame:createToolBar/2 . Under Pocket PC, you should always use this function for creating the toolbar to be managed by the frame, so that wxWidgets can use a combined menubar and toolbar. Where you manage your own toolbars, create wxToolBar as usual. There are several different types of tools you can add to a toolbar. These types are controlled by the ?wxItemKind enumeration. Note that many methods in wxToolBar such as addTool/6 return a wxToolBarToolBase* object. This should be regarded as an opaque handle representing the newly added toolbar item, providing access to its id and position within the toolbar. Changes to the item's state should be made through calls to wxToolBar methods, for example enableTool/3 . Calls to wxToolBarToolBase (not implemented in wx) methods (undocumented by purpose) will not change the visible state of the item within the tool bar. After you have added all the tools you need, you must call realize/1 to effectively construct and display the toolbar. wxMSW note : Note that under wxMSW toolbar paints tools to reflect system-wide colours. If you use more than 16 colours in your tool bitmaps, you may wish to suppress this behaviour, otherwise system colours in your bitmaps will inadvertently be mapped to system colours. To do this, set the msw.remap system option before creating the toolbar: If you wish to use 32-bit images (which include an alpha channel for transparency) use: Then colour remapping is switched off, and a transparent background used. But only use this option under Windows XP with true colour: Styles This class supports the following styles: See: Overview toolbar This class is derived (and can use functions) from: wxControl wxWindow wxEvtHandler wxWidgets docs: wxToolBar Events Event types emitted from this class: command_tool_rclicked , command_tool_enter , tool_dropdown","ref":"wxToolBar.html","title":"wxToolBar","type":"module"},{"doc":"","ref":"wxToolBar.html#addCheckTool/4","title":"wxToolBar.addCheckTool/4","type":"function"},{"doc":"Adds a new check (or toggle) tool to the toolbar. The parameters are the same as in addTool/6 . See: addTool/6","ref":"wxToolBar.html#addCheckTool/5","title":"wxToolBar.addCheckTool/5","type":"function"},{"doc":"","ref":"wxToolBar.html#addControl/2","title":"wxToolBar.addControl/2","type":"function"},{"doc":"Adds any control to the toolbar, typically e.g. a wxComboBox . Remark: wxMac: labels are only displayed if wxWidgets is built with wxMAC_USE_NATIVE_TOOLBAR set to 1","ref":"wxToolBar.html#addControl/3","title":"wxToolBar.addControl/3","type":"function"},{"doc":"","ref":"wxToolBar.html#addRadioTool/4","title":"wxToolBar.addRadioTool/4","type":"function"},{"doc":"Adds a new radio tool to the toolbar. Consecutive radio tools form a radio group such that exactly one button in the group is pressed at any moment, in other words whenever a button in the group is pressed the previously pressed button is automatically released. You should avoid having the radio groups of only one element as it would be impossible for the user to use such button. By default, the first button in the radio group is initially pressed, the others are not. See: addTool/6","ref":"wxToolBar.html#addRadioTool/5","title":"wxToolBar.addRadioTool/5","type":"function"},{"doc":"Adds a separator for spacing groups of tools. Notice that the separator uses the look appropriate for the current platform so it can be a vertical line (MSW, some versions of GTK) or just an empty space or something else. See: addTool/6 , setToolSeparation/2 , addStretchableSpace/1","ref":"wxToolBar.html#addSeparator/1","title":"wxToolBar.addSeparator/1","type":"function"},{"doc":"Adds a stretchable space to the toolbar. Any space not taken up by the fixed items (all items except for stretchable spaces) is distributed in equal measure between the stretchable spaces in the toolbar. The most common use for this method is to add a single stretchable space before the items which should be right-aligned in the toolbar, but more exotic possibilities are possible, e.g. a stretchable space may be added in the beginning and the end of the toolbar to centre all toolbar items. See: addTool/6 , addSeparator/1 , insertStretchableSpace/2 Since: 2.9.1","ref":"wxToolBar.html#addStretchableSpace/1","title":"wxToolBar.addStretchableSpace/1","type":"function"},{"doc":"Adds a tool to the toolbar. Remark: After you have added tools to a toolbar, you must call realize/1 in order to have the tools appear. See: addSeparator/1 , addCheckTool/5 , addRadioTool/5 , insertTool/6 , deleteTool/2 , realize/1 , SetDropdownMenu() (not implemented in wx)","ref":"wxToolBar.html#addTool/2","title":"wxToolBar.addTool/2","type":"function"},{"doc":"","ref":"wxToolBar.html#addTool/4","title":"wxToolBar.addTool/4","type":"function"},{"doc":"Adds a tool to the toolbar. This most commonly used version has fewer parameters than the full version below which specifies the more rarely used button features. Remark: After you have added tools to a toolbar, you must call realize/1 in order to have the tools appear. See: addSeparator/1 , addCheckTool/5 , addRadioTool/5 , insertTool/6 , deleteTool/2 , realize/1 , SetDropdownMenu() (not implemented in wx)","ref":"wxToolBar.html#addTool/5","title":"wxToolBar.addTool/5","type":"function"},{"doc":"Adds a tool to the toolbar. Remark: After you have added tools to a toolbar, you must call realize/1 in order to have the tools appear. See: addSeparator/1 , addCheckTool/5 , addRadioTool/5 , insertTool/6 , deleteTool/2 , realize/1 , SetDropdownMenu() (not implemented in wx)","ref":"wxToolBar.html#addTool/6","title":"wxToolBar.addTool/6","type":"function"},{"doc":"Removes the specified tool from the toolbar and deletes it. If you don't want to delete the tool, but just to remove it from the toolbar (to possibly add it back later), you may use removeTool/2 instead. Note: It is unnecessary to call realize/1 for the change to take place, it will happen immediately. Return: true if the tool was deleted, false otherwise. See: deleteToolByPos/2","ref":"wxToolBar.html#deleteTool/2","title":"wxToolBar.deleteTool/2","type":"function"},{"doc":"This function behaves like deleteTool/2 but it deletes the tool at the specified position and not the one with the given id.","ref":"wxToolBar.html#deleteToolByPos/2","title":"wxToolBar.deleteToolByPos/2","type":"function"},{"doc":"Enables or disables the tool. Remark: Some implementations will change the visible state of the tool to indicate that it is disabled. See: getToolEnabled/2 , toggleTool/3","ref":"wxToolBar.html#enableTool/3","title":"wxToolBar.enableTool/3","type":"function"},{"doc":"Returns a pointer to the tool identified by id or NULL if no corresponding tool is found.","ref":"wxToolBar.html#findById/2","title":"wxToolBar.findById/2","type":"function"},{"doc":"Returns a pointer to the control identified by id or NULL if no corresponding control is found.","ref":"wxToolBar.html#findControl/2","title":"wxToolBar.findControl/2","type":"function"},{"doc":"Finds a tool for the given mouse position. Return: A pointer to a tool if a tool is found, or NULL otherwise. Remark: Currently not implemented in wxGTK (always returns NULL there).","ref":"wxToolBar.html#findToolForPosition/3","title":"wxToolBar.findToolForPosition/3","type":"function"},{"doc":"Returns the left/right and top/bottom margins, which are also used for inter-toolspacing. See: setMargins/3","ref":"wxToolBar.html#getMargins/1","title":"wxToolBar.getMargins/1","type":"function"},{"doc":"Returns the size of bitmap that the toolbar expects to have. The default bitmap size is platform-dependent: for example, it is 16*15 for MSW and 24*24 for GTK. This size does not necessarily indicate the best size to use for the toolbars on the given platform, for this you should use wxArtProvider::GetNativeSizeHint(wxART_TOOLBAR) but in any case, as the bitmap size is deduced automatically from the size of the bitmaps associated with the tools added to the toolbar, it is usually unnecessary to call setToolBitmapSize/2 explicitly. Remark: Note that this is the size of the bitmap you pass to addTool/6 , and not the eventual size of the tool button. See: setToolBitmapSize/2 , getToolSize/1","ref":"wxToolBar.html#getToolBitmapSize/1","title":"wxToolBar.getToolBitmapSize/1","type":"function"},{"doc":"Called to determine whether a tool is enabled (responds to user input). Return: true if the tool is enabled, false otherwise. See: enableTool/3","ref":"wxToolBar.html#getToolEnabled/2","title":"wxToolBar.getToolEnabled/2","type":"function"},{"doc":"Returns the long help for the given tool. See: setToolLongHelp/3 , setToolShortHelp/3","ref":"wxToolBar.html#getToolLongHelp/2","title":"wxToolBar.getToolLongHelp/2","type":"function"},{"doc":"Returns the value used for packing tools. See: setToolPacking/2","ref":"wxToolBar.html#getToolPacking/1","title":"wxToolBar.getToolPacking/1","type":"function"},{"doc":"Returns the tool position in the toolbar, or wxNOT_FOUND if the tool is not found.","ref":"wxToolBar.html#getToolPos/2","title":"wxToolBar.getToolPos/2","type":"function"},{"doc":"Returns the default separator size. See: setToolSeparation/2","ref":"wxToolBar.html#getToolSeparation/1","title":"wxToolBar.getToolSeparation/1","type":"function"},{"doc":"Returns the short help for the given tool. See: getToolLongHelp/2 , setToolShortHelp/3","ref":"wxToolBar.html#getToolShortHelp/2","title":"wxToolBar.getToolShortHelp/2","type":"function"},{"doc":"Returns the size of a whole button, which is usually larger than a tool bitmap because of added 3D effects. See: setToolBitmapSize/2 , getToolBitmapSize/1","ref":"wxToolBar.html#getToolSize/1","title":"wxToolBar.getToolSize/1","type":"function"},{"doc":"Gets the on/off state of a toggle tool. Return: true if the tool is toggled on, false otherwise. See: toggleTool/3","ref":"wxToolBar.html#getToolState/2","title":"wxToolBar.getToolState/2","type":"function"},{"doc":"","ref":"wxToolBar.html#insertControl/3","title":"wxToolBar.insertControl/3","type":"function"},{"doc":"Inserts the control into the toolbar at the given position. You must call realize/1 for the change to take place. See: addControl/3 , insertTool/6","ref":"wxToolBar.html#insertControl/4","title":"wxToolBar.insertControl/4","type":"function"},{"doc":"Inserts the separator into the toolbar at the given position. You must call realize/1 for the change to take place. See: addSeparator/1 , insertTool/6","ref":"wxToolBar.html#insertSeparator/2","title":"wxToolBar.insertSeparator/2","type":"function"},{"doc":"Inserts a stretchable space at the given position. See addStretchableSpace/1 for details about stretchable spaces. See: insertTool/6 , insertSeparator/2 Since: 2.9.1","ref":"wxToolBar.html#insertStretchableSpace/2","title":"wxToolBar.insertStretchableSpace/2","type":"function"},{"doc":"","ref":"wxToolBar.html#insertTool/3","title":"wxToolBar.insertTool/3","type":"function"},{"doc":"","ref":"wxToolBar.html#insertTool/5","title":"wxToolBar.insertTool/5","type":"function"},{"doc":"Inserts the tool with the specified attributes into the toolbar at the given position. You must call realize/1 for the change to take place. See: addTool/6 , insertControl/4 , insertSeparator/2 Return: The newly inserted tool or NULL on failure. Notice that with the overload taking tool parameter the caller is responsible for deleting the tool in the latter case.","ref":"wxToolBar.html#insertTool/6","title":"wxToolBar.insertTool/6","type":"function"},{"doc":"This function should be called after you have added tools.","ref":"wxToolBar.html#realize/1","title":"wxToolBar.realize/1","type":"function"},{"doc":"Removes the given tool from the toolbar but doesn't delete it. This allows inserting/adding this tool back to this (or another) toolbar later. Note: It is unnecessary to call realize/1 for the change to take place, it will happen immediately. See: deleteTool/2","ref":"wxToolBar.html#removeTool/2","title":"wxToolBar.removeTool/2","type":"function"},{"doc":"Set the values to be used as margins for the toolbar. Remark: This must be called before the tools are added if absolute positioning is to be used, and the default (zero-size) margins are to be overridden. See: getMargins/1","ref":"wxToolBar.html#setMargins/3","title":"wxToolBar.setMargins/3","type":"function"},{"doc":"Sets the default size of each tool bitmap. The default bitmap size is 16 by 15 pixels. Remark: This should be called to tell the toolbar what the tool bitmap size is. Call it before you add tools. See: getToolBitmapSize/1 , getToolSize/1","ref":"wxToolBar.html#setToolBitmapSize/2","title":"wxToolBar.setToolBitmapSize/2","type":"function"},{"doc":"Sets the long help for the given tool. Remark: You might use the long help for displaying the tool purpose on the status line. See: getToolLongHelp/2 , setToolShortHelp/3","ref":"wxToolBar.html#setToolLongHelp/3","title":"wxToolBar.setToolLongHelp/3","type":"function"},{"doc":"Sets the value used for spacing tools. The default value is 1. Remark: The packing is used for spacing in the vertical direction if the toolbar is horizontal, and for spacing in the horizontal direction if the toolbar is vertical. See: getToolPacking/1","ref":"wxToolBar.html#setToolPacking/2","title":"wxToolBar.setToolPacking/2","type":"function"},{"doc":"Sets the default separator size. The default value is 5. See: addSeparator/1","ref":"wxToolBar.html#setToolSeparation/2","title":"wxToolBar.setToolSeparation/2","type":"function"},{"doc":"Sets the short help for the given tool. Remark: An application might use short help for identifying the tool purpose in a tooltip. See: getToolShortHelp/2 , setToolLongHelp/3","ref":"wxToolBar.html#setToolShortHelp/3","title":"wxToolBar.setToolShortHelp/3","type":"function"},{"doc":"Toggles a tool on or off. This does not cause any event to get emitted. Remark: Only applies to a tool that has been specified as a toggle tool.","ref":"wxToolBar.html#toggleTool/3","title":"wxToolBar.toggleTool/3","type":"function"},{"doc":"","ref":"wxToolBar.html#t:wxToolBar/0","title":"wxToolBar.wxToolBar/0","type":"type"},{"doc":"This class holds information about a tooltip associated with a window (see wxWindow:setToolTip/2 ). The four static methods, enable/1 , setDelay/1 wxToolTip::SetAutoPop() (not implemented in wx) and wxToolTip::SetReshow() (not implemented in wx) can be used to globally alter tooltips behaviour. wxWidgets docs: wxToolTip","ref":"wxToolTip.html","title":"wxToolTip","type":"module"},{"doc":"Destroys the object.","ref":"wxToolTip.html#destroy/1","title":"wxToolTip.destroy/1","type":"function"},{"doc":"Enable or disable tooltips globally. Note: May not be supported on all platforms (eg. wxCocoa).","ref":"wxToolTip.html#enable/1","title":"wxToolTip.enable/1","type":"function"},{"doc":"Get the tooltip text.","ref":"wxToolTip.html#getTip/1","title":"wxToolTip.getTip/1","type":"function"},{"doc":"Get the associated window.","ref":"wxToolTip.html#getWindow/1","title":"wxToolTip.getWindow/1","type":"function"},{"doc":"Constructor.","ref":"wxToolTip.html#new/1","title":"wxToolTip.new/1","type":"function"},{"doc":"Set the delay after which the tooltip appears. Note: May not be supported on all platforms.","ref":"wxToolTip.html#setDelay/1","title":"wxToolTip.setDelay/1","type":"function"},{"doc":"Set the tooltip text.","ref":"wxToolTip.html#setTip/2","title":"wxToolTip.setTip/2","type":"function"},{"doc":"","ref":"wxToolTip.html#t:wxToolTip/0","title":"wxToolTip.wxToolTip/0","type":"type"},{"doc":"wxToolbook is a class similar to wxNotebook but which uses a wxToolBar to show the labels instead of the tabs. There is no documentation for this class yet but its usage is identical to wxNotebook (except for the features clearly related to tabs only), so please refer to that class documentation for now. You can also use the page_samples_notebook to see wxToolbook in action. One feature of this class not supported by wxBookCtrlBase is the support for disabling some of the pages, see EnablePage() (not implemented in wx). Styles This class supports the following styles: See: Overview bookctrl , wxBookCtrlBase , wxNotebook , Examples This class is derived (and can use functions) from: wxBookCtrlBase wxControl wxWindow wxEvtHandler wxWidgets docs: wxToolbook Events Event types emitted from this class: toolbook_page_changed , toolbook_page_changing","ref":"wxToolbook.html","title":"wxToolbook","type":"module"},{"doc":"","ref":"wxToolbook.html#addPage/3","title":"wxToolbook.addPage/3","type":"function"},{"doc":"Adds a new page. The page must have the book control itself as the parent and must not have been added to this control previously. The call to this function will generate the page changing and page changed events if select is true, but not when inserting the very first page (as there is no previous page selection to switch from in this case and so it wouldn't make sense to e.g. veto such event). Return: true if successful, false otherwise. Remark: Do not delete the page, it will be deleted by the book control. See: insertPage/5","ref":"wxToolbook.html#addPage/4","title":"wxToolbook.addPage/4","type":"function"},{"doc":"","ref":"wxToolbook.html#advanceSelection/1","title":"wxToolbook.advanceSelection/1","type":"function"},{"doc":"Cycles through the tabs. The call to this function generates the page changing events.","ref":"wxToolbook.html#advanceSelection/2","title":"wxToolbook.advanceSelection/2","type":"function"},{"doc":"Sets the image list for the page control and takes ownership of the list. See: wxImageList , setImageList/2","ref":"wxToolbook.html#assignImageList/2","title":"wxToolbook.assignImageList/2","type":"function"},{"doc":"Changes the selection to the given page, returning the previous selection. This function behaves as setSelection/2 but does not generate the page changing events. See overview_events_prog for more information.","ref":"wxToolbook.html#changeSelection/2","title":"wxToolbook.changeSelection/2","type":"function"},{"doc":"","ref":"wxToolbook.html#create/3","title":"wxToolbook.create/3","type":"function"},{"doc":"Create the tool book control that has already been constructed with the default constructor.","ref":"wxToolbook.html#create/4","title":"wxToolbook.create/4","type":"function"},{"doc":"Deletes all pages.","ref":"wxToolbook.html#deleteAllPages/1","title":"wxToolbook.deleteAllPages/1","type":"function"},{"doc":"Destroys the object.","ref":"wxToolbook.html#destroy/1","title":"wxToolbook.destroy/1","type":"function"},{"doc":"Returns the currently selected page or NULL.","ref":"wxToolbook.html#getCurrentPage/1","title":"wxToolbook.getCurrentPage/1","type":"function"},{"doc":"Returns the associated image list, may be NULL. See: wxImageList , setImageList/2","ref":"wxToolbook.html#getImageList/1","title":"wxToolbook.getImageList/1","type":"function"},{"doc":"Returns the window at the given page position.","ref":"wxToolbook.html#getPage/2","title":"wxToolbook.getPage/2","type":"function"},{"doc":"Returns the number of pages in the control.","ref":"wxToolbook.html#getPageCount/1","title":"wxToolbook.getPageCount/1","type":"function"},{"doc":"Returns the image index for the given page.","ref":"wxToolbook.html#getPageImage/2","title":"wxToolbook.getPageImage/2","type":"function"},{"doc":"Returns the string for the given page.","ref":"wxToolbook.html#getPageText/2","title":"wxToolbook.getPageText/2","type":"function"},{"doc":"Returns the currently selected page, or wxNOT_FOUND if none was selected. Note that this method may return either the previously or newly selected page when called from the EVT_BOOKCTRL_PAGE_CHANGED handler depending on the platform and so wxBookCtrlEvent:getSelection/1 should be used instead in this case.","ref":"wxToolbook.html#getSelection/1","title":"wxToolbook.getSelection/1","type":"function"},{"doc":"Returns the index of the tab at the specified position or wxNOT_FOUND if none. If flags parameter is non-NULL, the position of the point inside the tab is returned as well. Return: Returns the zero-based tab index or wxNOT_FOUND if there is no tab at the specified position.","ref":"wxToolbook.html#hitTest/2","title":"wxToolbook.hitTest/2","type":"function"},{"doc":"","ref":"wxToolbook.html#insertPage/4","title":"wxToolbook.insertPage/4","type":"function"},{"doc":"Inserts a new page at the specified position. Return: true if successful, false otherwise. Remark: Do not delete the page, it will be deleted by the book control. See: addPage/4","ref":"wxToolbook.html#insertPage/5","title":"wxToolbook.insertPage/5","type":"function"},{"doc":"Constructs a choicebook control.","ref":"wxToolbook.html#new/0","title":"wxToolbook.new/0","type":"function"},{"doc":"","ref":"wxToolbook.html#new/2","title":"wxToolbook.new/2","type":"function"},{"doc":"","ref":"wxToolbook.html#new/3","title":"wxToolbook.new/3","type":"function"},{"doc":"Sets the image list to use. It does not take ownership of the image list, you must delete it yourself. See: wxImageList , assignImageList/2","ref":"wxToolbook.html#setImageList/2","title":"wxToolbook.setImageList/2","type":"function"},{"doc":"Sets the image index for the given page. image is an index into the image list which was set with setImageList/2 .","ref":"wxToolbook.html#setPageImage/3","title":"wxToolbook.setPageImage/3","type":"function"},{"doc":"Sets the width and height of the pages. Note: This method is currently not implemented for wxGTK.","ref":"wxToolbook.html#setPageSize/2","title":"wxToolbook.setPageSize/2","type":"function"},{"doc":"Sets the text for the given page.","ref":"wxToolbook.html#setPageText/3","title":"wxToolbook.setPageText/3","type":"function"},{"doc":"Sets the selection to the given page, returning the previous selection. Notice that the call to this function generates the page changing events, use the changeSelection/2 function if you don't want these events to be generated. See: getSelection/1","ref":"wxToolbook.html#setSelection/2","title":"wxToolbook.setSelection/2","type":"function"},{"doc":"","ref":"wxToolbook.html#t:wxToolbook/0","title":"wxToolbook.wxToolbook/0","type":"type"},{"doc":"wxTopLevelWindow is a common base class for wxDialog and wxFrame . It is an abstract base class meaning that you never work with objects of this class directly, but all of its methods are also applicable for the two classes above. Note that the instances of wxTopLevelWindow are managed by wxWidgets in the internal top level window list. See: wxDialog , wxFrame This class is derived (and can use functions) from: wxWindow wxEvtHandler wxWidgets docs: wxTopLevelWindow Events Event types emitted from this class: maximize , move , show","ref":"wxTopLevelWindow.html","title":"wxTopLevelWindow","type":"module"},{"doc":"","ref":"wxTopLevelWindow.html#centerOnScreen/1","title":"wxTopLevelWindow.centerOnScreen/1","type":"function"},{"doc":"See: centreOnScreen/2 .","ref":"wxTopLevelWindow.html#centerOnScreen/2","title":"wxTopLevelWindow.centerOnScreen/2","type":"function"},{"doc":"","ref":"wxTopLevelWindow.html#centreOnScreen/1","title":"wxTopLevelWindow.centreOnScreen/1","type":"function"},{"doc":"Centres the window on screen. See: wxWindow:centreOnParent/2","ref":"wxTopLevelWindow.html#centreOnScreen/2","title":"wxTopLevelWindow.centreOnScreen/2","type":"function"},{"doc":"Returns the standard icon of the window. The icon will be invalid if it hadn't been previously set by setIcon/2 . See: getIcons/1","ref":"wxTopLevelWindow.html#getIcon/1","title":"wxTopLevelWindow.getIcon/1","type":"function"},{"doc":"Returns all icons associated with the window, there will be none of them if neither setIcon/2 nor setIcons/2 had been called before. Use getIcon/1 to get the main icon of the window. See: wxIconBundle","ref":"wxTopLevelWindow.html#getIcons/1","title":"wxTopLevelWindow.getIcons/1","type":"function"},{"doc":"Gets a string containing the window title. See: setTitle/2","ref":"wxTopLevelWindow.html#getTitle/1","title":"wxTopLevelWindow.getTitle/1","type":"function"},{"doc":"","ref":"wxTopLevelWindow.html#iconize/1","title":"wxTopLevelWindow.iconize/1","type":"function"},{"doc":"Iconizes or restores the window. Note that in wxGTK the change to the window state is not immediate, i.e. isIconized/1 will typically return false right after a call to iconize/2 and its return value will only change after the control flow returns to the event loop and the notification about the window being really iconized is received. See: isIconized/1 , Restore() (not implemented in wx), (), wxIconizeEvent","ref":"wxTopLevelWindow.html#iconize/2","title":"wxTopLevelWindow.iconize/2","type":"function"},{"doc":"Returns true if this window is currently active, i.e. if the user is currently working with it.","ref":"wxTopLevelWindow.html#isActive/1","title":"wxTopLevelWindow.isActive/1","type":"function"},{"doc":"Returns true if the window is in fullscreen mode. See: showFullScreen/3","ref":"wxTopLevelWindow.html#isFullScreen/1","title":"wxTopLevelWindow.isFullScreen/1","type":"function"},{"doc":"Returns true if the window is iconized.","ref":"wxTopLevelWindow.html#isIconized/1","title":"wxTopLevelWindow.isIconized/1","type":"function"},{"doc":"Returns true if the window is maximized.","ref":"wxTopLevelWindow.html#isMaximized/1","title":"wxTopLevelWindow.isMaximized/1","type":"function"},{"doc":"","ref":"wxTopLevelWindow.html#maximize/1","title":"wxTopLevelWindow.maximize/1","type":"function"},{"doc":"Maximizes or restores the window. Note that, just as with iconize/2 , the change to the window state is not immediate in at least wxGTK port. See: Restore() (not implemented in wx), iconize/2","ref":"wxTopLevelWindow.html#maximize/2","title":"wxTopLevelWindow.maximize/2","type":"function"},{"doc":"","ref":"wxTopLevelWindow.html#requestUserAttention/1","title":"wxTopLevelWindow.requestUserAttention/1","type":"function"},{"doc":"Use a system-dependent way to attract users attention to the window when it is in background. flags may have the value of either ?wxUSER_ATTENTION_INFO (default) or ?wxUSER_ATTENTION_ERROR which results in a more drastic action. When in doubt, use the default value. Note: This function should normally be only used when the application is not already in foreground. This function is currently implemented for Win32 where it flashes the window icon in the taskbar, and for wxGTK with task bars supporting it.","ref":"wxTopLevelWindow.html#requestUserAttention/2","title":"wxTopLevelWindow.requestUserAttention/2","type":"function"},{"doc":"Sets the icon for this window. Remark: The window takes a 'copy' of icon , but since it uses reference counting, the copy is very quick. It is safe to delete icon after calling this function. Note: In wxMSW, icon must be either 16x16 or 32x32 icon. See: wxIcon , setIcons/2","ref":"wxTopLevelWindow.html#setIcon/2","title":"wxTopLevelWindow.setIcon/2","type":"function"},{"doc":"Sets several icons of different sizes for this window: this allows using different icons for different situations (e.g. task switching bar, taskbar, window title bar) instead of scaling, with possibly bad looking results, the only icon set by setIcon/2 . Note: In wxMSW, icons must contain a 16x16 or 32x32 icon, preferably both. See: wxIconBundle","ref":"wxTopLevelWindow.html#setIcons/2","title":"wxTopLevelWindow.setIcons/2","type":"function"},{"doc":"If the platform supports it, sets the shape of the window to that depicted by region . The system will not display or respond to any mouse event for the pixels that lie outside of the region. To reset the window to the normal rectangular shape simply call setShape/2 again with an empty wxRegion . Returns true if the operation is successful. This method is available in this class only since wxWidgets 2.9.3, previous versions only provided it in wxTopLevelWindow . Note that windows with non default shape have a fixed size and can't be resized using wxWindow:setSize/6 .","ref":"wxTopLevelWindow.html#setShape/2","title":"wxTopLevelWindow.setShape/2","type":"function"},{"doc":"Sets the window title. See: getTitle/1","ref":"wxTopLevelWindow.html#setTitle/2","title":"wxTopLevelWindow.setTitle/2","type":"function"},{"doc":"","ref":"wxTopLevelWindow.html#showFullScreen/2","title":"wxTopLevelWindow.showFullScreen/2","type":"function"},{"doc":"Depending on the value of show parameter the window is either shown full screen or restored to its normal state. style is a bit list containing some or all of the following values, which indicate what elements of the window to hide in full-screen mode: This function has not been tested with MDI frames. Note: Showing a window full screen also actually wxWindow:show/2 s the window if it isn't shown. See: EnableFullScreenView() (not implemented in wx), isFullScreen/1","ref":"wxTopLevelWindow.html#showFullScreen/3","title":"wxTopLevelWindow.showFullScreen/3","type":"function"},{"doc":"","ref":"wxTopLevelWindow.html#t:wxTopLevelWindow/0","title":"wxTopLevelWindow.wxTopLevelWindow/0","type":"type"},{"doc":"A tree control presents information as a hierarchy, with items that may be expanded to show further items. Items in a tree control are referenced by wxTreeItemId (not implemented in wx) handles, which may be tested for validity by calling wxTreeItemId::IsOk() (not implemented in wx). A similar control with a fully native implementation for GTK+ and macOS as well is wxDataViewTreeCtrl (not implemented in wx). To intercept events from a tree control, use the event table macros described in wxTreeEvent . Styles This class supports the following styles: See also overview_windowstyles. Win32 notes: wxTreeCtrl class uses the standard common treeview control under Win32 implemented in the system library comctl32.dll. Some versions of this library are known to have bugs with handling the tree control colours: the usual symptom is that the expanded items leave black (or otherwise incorrectly coloured) background behind them, especially for the controls using non-default background colour. The recommended solution is to upgrade the comctl32.dll to a newer version: see http://www.microsoft.com/downloads/details.aspx?familyid=cb2cf3a2-8025-4e8f-8511-9b476a8d35d2 See: wxDataViewTreeCtrl (not implemented in wx), wxTreeEvent , wxTreeItemData (not implemented in wx), Overview treectrl , wxListBox , wxListCtrl , wxImageList This class is derived (and can use functions) from: wxControl wxWindow wxEvtHandler wxWidgets docs: wxTreeCtrl Events Event types emitted from this class: command_tree_begin_drag , command_tree_begin_rdrag , command_tree_end_drag , command_tree_begin_label_edit , command_tree_end_label_edit , command_tree_delete_item , command_tree_get_info , command_tree_set_info , command_tree_item_activated , command_tree_item_collapsed , command_tree_item_collapsing , command_tree_item_expanded , command_tree_item_expanding , command_tree_item_right_click , command_tree_item_middle_click , command_tree_sel_changed , command_tree_sel_changing , command_tree_key_down , command_tree_item_gettooltip , command_tree_item_menu , command_tree_state_image_click","ref":"wxTreeCtrl.html","title":"wxTreeCtrl","type":"module"},{"doc":"","ref":"wxTreeCtrl.html#addRoot/2","title":"wxTreeCtrl.addRoot/2","type":"function"},{"doc":"Adds the root node to the tree, returning the new item. The image and selImage parameters are an index within the normal image list specifying the image to use for unselected and selected items, respectively. If image &gt; -1 and selImage is -1, the same image is used for both selected and unselected items.","ref":"wxTreeCtrl.html#addRoot/3","title":"wxTreeCtrl.addRoot/3","type":"function"},{"doc":"","ref":"wxTreeCtrl.html#appendItem/3","title":"wxTreeCtrl.appendItem/3","type":"function"},{"doc":"Appends an item to the end of the branch identified by parent , return a new item id. The image and selImage parameters are an index within the normal image list specifying the image to use for unselected and selected items, respectively. If image &gt; -1 and selImage is -1, the same image is used for both selected and unselected items.","ref":"wxTreeCtrl.html#appendItem/4","title":"wxTreeCtrl.appendItem/4","type":"function"},{"doc":"Sets the normal image list. The image list assigned with this method will be automatically deleted by wxTreeCtrl as appropriate (i.e. it takes ownership of the list). See: setImageList/2","ref":"wxTreeCtrl.html#assignImageList/2","title":"wxTreeCtrl.assignImageList/2","type":"function"},{"doc":"Sets the state image list. Image list assigned with this method will be automatically deleted by wxTreeCtrl as appropriate (i.e. it takes ownership of the list). See: setStateImageList/2","ref":"wxTreeCtrl.html#assignStateImageList/2","title":"wxTreeCtrl.assignStateImageList/2","type":"function"},{"doc":"Collapses the given item.","ref":"wxTreeCtrl.html#collapse/2","title":"wxTreeCtrl.collapse/2","type":"function"},{"doc":"Collapses the given item and removes all children.","ref":"wxTreeCtrl.html#collapseAndReset/2","title":"wxTreeCtrl.collapseAndReset/2","type":"function"},{"doc":"","ref":"wxTreeCtrl.html#create/2","title":"wxTreeCtrl.create/2","type":"function"},{"doc":"Creates the tree control. See new/2 for further details.","ref":"wxTreeCtrl.html#create/3","title":"wxTreeCtrl.create/3","type":"function"},{"doc":"Deletes the specified item. A EVT_TREE_DELETE_ITEM event will be generated. This function may cause a subsequent call to getNextChild/3 to fail.","ref":"wxTreeCtrl.html#delete/2","title":"wxTreeCtrl.delete/2","type":"function"},{"doc":"Deletes all items in the control. This function generates wxEVT_TREE_DELETE_ITEM events for each item being deleted, including the root one if it is shown, i.e. unless wxTR_HIDE_ROOT style is used.","ref":"wxTreeCtrl.html#deleteAllItems/1","title":"wxTreeCtrl.deleteAllItems/1","type":"function"},{"doc":"Deletes all children of the given item (but not the item itself). A wxEVT_TREE_DELETE_ITEM event will be generated for every item being deleted. If you have called setItemHasChildren/3 , you may need to call it again since deleteChildren/2 does not automatically clear the setting.","ref":"wxTreeCtrl.html#deleteChildren/2","title":"wxTreeCtrl.deleteChildren/2","type":"function"},{"doc":"Destructor, destroying the tree control.","ref":"wxTreeCtrl.html#destroy/1","title":"wxTreeCtrl.destroy/1","type":"function"},{"doc":"Starts editing the label of the given item . This function generates a EVT_TREE_BEGIN_LABEL_EDIT event which can be vetoed so that no text control will appear for in-place editing. If the user changed the label (i.e. s/he does not press ESC or leave the text control without changes, a EVT_TREE_END_LABEL_EDIT event will be sent which can be vetoed as well. See: EndEditLabel() (not implemented in wx), wxTreeEvent","ref":"wxTreeCtrl.html#editLabel/2","title":"wxTreeCtrl.editLabel/2","type":"function"},{"doc":"Scrolls and/or expands items to ensure that the given item is visible. This method can be used, and will work, even while the window is frozen (see wxWindow:freeze/1 ).","ref":"wxTreeCtrl.html#ensureVisible/2","title":"wxTreeCtrl.ensureVisible/2","type":"function"},{"doc":"Expands the given item.","ref":"wxTreeCtrl.html#expand/2","title":"wxTreeCtrl.expand/2","type":"function"},{"doc":"","ref":"wxTreeCtrl.html#getBoundingRect/2","title":"wxTreeCtrl.getBoundingRect/2","type":"function"},{"doc":"Retrieves the rectangle bounding the item . If textOnly is true, only the rectangle around the item's label will be returned, otherwise the item's image is also taken into account. The return value is true if the rectangle was successfully retrieved or false if it was not (in this case rect is not changed) - for example, if the item is currently invisible. Notice that the rectangle coordinates are logical, not physical ones. So, for example, the x coordinate may be negative if the tree has a horizontal scrollbar and its position is not 0.","ref":"wxTreeCtrl.html#getBoundingRect/3","title":"wxTreeCtrl.getBoundingRect/3","type":"function"},{"doc":"","ref":"wxTreeCtrl.html#getChildrenCount/2","title":"wxTreeCtrl.getChildrenCount/2","type":"function"},{"doc":"Returns the number of items in the branch. If recursively is true, returns the total number of descendants, otherwise only one level of children is counted.","ref":"wxTreeCtrl.html#getChildrenCount/3","title":"wxTreeCtrl.getChildrenCount/3","type":"function"},{"doc":"Returns the number of items in the control.","ref":"wxTreeCtrl.html#getCount/1","title":"wxTreeCtrl.getCount/1","type":"function"},{"doc":"Returns the edit control being currently used to edit a label. Returns NULL if no label is being edited. Note: This is currently only implemented for wxMSW.","ref":"wxTreeCtrl.html#getEditControl/1","title":"wxTreeCtrl.getEditControl/1","type":"function"},{"doc":"Returns the first child; call getNextChild/3 for the next child. For this enumeration function you must pass in a 'cookie' parameter which is opaque for the application but is necessary for the library to make these functions reentrant (i.e. allow more than one enumeration on one and the same object simultaneously). The cookie passed to getFirstChild/2 and getNextChild/3 should be the same variable. Returns an invalid tree item (i.e. wxTreeItemId::IsOk() (not implemented in wx) returns false) if there are no further children. See: getNextChild/3 , getNextSibling/2","ref":"wxTreeCtrl.html#getFirstChild/2","title":"wxTreeCtrl.getFirstChild/2","type":"function"},{"doc":"Returns the first visible item.","ref":"wxTreeCtrl.html#getFirstVisibleItem/1","title":"wxTreeCtrl.getFirstVisibleItem/1","type":"function"},{"doc":"Returns the normal image list.","ref":"wxTreeCtrl.html#getImageList/1","title":"wxTreeCtrl.getImageList/1","type":"function"},{"doc":"Returns the current tree control indentation.","ref":"wxTreeCtrl.html#getIndent/1","title":"wxTreeCtrl.getIndent/1","type":"function"},{"doc":"Returns the background colour of the item.","ref":"wxTreeCtrl.html#getItemBackgroundColour/2","title":"wxTreeCtrl.getItemBackgroundColour/2","type":"function"},{"doc":"Returns the tree item data associated with the item. See: wxTreeItemData (not implemented in wx)","ref":"wxTreeCtrl.html#getItemData/2","title":"wxTreeCtrl.getItemData/2","type":"function"},{"doc":"Returns the font of the item label. If the font hadn't been explicitly set for the specified item with setItemFont/3 , returns an invalid ?wxNullFont font. wxWindow:getFont/1 can be used to retrieve the global tree control font used for the items without any specific font.","ref":"wxTreeCtrl.html#getItemFont/2","title":"wxTreeCtrl.getItemFont/2","type":"function"},{"doc":"","ref":"wxTreeCtrl.html#getItemImage/2","title":"wxTreeCtrl.getItemImage/2","type":"function"},{"doc":"Gets the specified item image. The value of which may be:","ref":"wxTreeCtrl.html#getItemImage/3","title":"wxTreeCtrl.getItemImage/3","type":"function"},{"doc":"Returns the item's parent.","ref":"wxTreeCtrl.html#getItemParent/2","title":"wxTreeCtrl.getItemParent/2","type":"function"},{"doc":"Returns the item label.","ref":"wxTreeCtrl.html#getItemText/2","title":"wxTreeCtrl.getItemText/2","type":"function"},{"doc":"Returns the colour of the item label.","ref":"wxTreeCtrl.html#getItemTextColour/2","title":"wxTreeCtrl.getItemTextColour/2","type":"function"},{"doc":"Returns the last child of the item (or an invalid tree item if this item has no children). See: getFirstChild/2 , getNextSibling/2 , getLastChild/2","ref":"wxTreeCtrl.html#getLastChild/2","title":"wxTreeCtrl.getLastChild/2","type":"function"},{"doc":"Returns the next child; call getFirstChild/2 for the first child. For this enumeration function you must pass in a 'cookie' parameter which is opaque for the application but is necessary for the library to make these functions reentrant (i.e. allow more than one enumeration on one and the same object simultaneously). The cookie passed to getFirstChild/2 and getNextChild/3 should be the same. Returns an invalid tree item if there are no further children. See: getFirstChild/2","ref":"wxTreeCtrl.html#getNextChild/3","title":"wxTreeCtrl.getNextChild/3","type":"function"},{"doc":"Returns the next sibling of the specified item; call getPrevSibling/2 for the previous sibling. Returns an invalid tree item if there are no further siblings. See: getPrevSibling/2","ref":"wxTreeCtrl.html#getNextSibling/2","title":"wxTreeCtrl.getNextSibling/2","type":"function"},{"doc":"Returns the next visible item or an invalid item if this item is the last visible one. Note: The item itself must be visible.","ref":"wxTreeCtrl.html#getNextVisible/2","title":"wxTreeCtrl.getNextVisible/2","type":"function"},{"doc":"Returns the previous sibling of the specified item; call getNextSibling/2 for the next sibling. Returns an invalid tree item if there are no further children. See: getNextSibling/2","ref":"wxTreeCtrl.html#getPrevSibling/2","title":"wxTreeCtrl.getPrevSibling/2","type":"function"},{"doc":"Returns the previous visible item or an invalid item if this item is the first visible one. Note: The item itself must be visible.","ref":"wxTreeCtrl.html#getPrevVisible/2","title":"wxTreeCtrl.getPrevVisible/2","type":"function"},{"doc":"Returns the root item for the tree control.","ref":"wxTreeCtrl.html#getRootItem/1","title":"wxTreeCtrl.getRootItem/1","type":"function"},{"doc":"Returns the selection, or an invalid item if there is no selection. This function only works with the controls without wxTR_MULTIPLE style, use getSelections/1 for the controls which do have this style or, if a single item is wanted, use GetFocusedItem() (not implemented in wx).","ref":"wxTreeCtrl.html#getSelection/1","title":"wxTreeCtrl.getSelection/1","type":"function"},{"doc":"Fills the array of tree items passed in with the currently selected items. This function can be called only if the control has the wxTR_MULTIPLE style. Returns the number of selected items.","ref":"wxTreeCtrl.html#getSelections/1","title":"wxTreeCtrl.getSelections/1","type":"function"},{"doc":"Returns the state image list (from which application-defined state images are taken).","ref":"wxTreeCtrl.html#getStateImageList/1","title":"wxTreeCtrl.getStateImageList/1","type":"function"},{"doc":"Calculates which (if any) item is under the given point , returning the tree item id at this point plus extra information flags . flags is a bitlist of the following:","ref":"wxTreeCtrl.html#hitTest/2","title":"wxTreeCtrl.hitTest/2","type":"function"},{"doc":"","ref":"wxTreeCtrl.html#insertItem/4","title":"wxTreeCtrl.insertItem/4","type":"function"},{"doc":"Inserts an item after a given one ( previous ). The image and selImage parameters are an index within the normal image list specifying the image to use for unselected and selected items, respectively. If image &gt; -1 and selImage is -1, the same image is used for both selected and unselected items.","ref":"wxTreeCtrl.html#insertItem/5","title":"wxTreeCtrl.insertItem/5","type":"function"},{"doc":"Returns true if the given item is in bold state. See: setItemBold/3","ref":"wxTreeCtrl.html#isBold/2","title":"wxTreeCtrl.isBold/2","type":"function"},{"doc":"Returns true if the item is expanded (only makes sense if it has children).","ref":"wxTreeCtrl.html#isExpanded/2","title":"wxTreeCtrl.isExpanded/2","type":"function"},{"doc":"Returns true if the item is selected.","ref":"wxTreeCtrl.html#isSelected/2","title":"wxTreeCtrl.isSelected/2","type":"function"},{"doc":"Returns true if the item is valid.","ref":"wxTreeCtrl.html#isTreeItemIdOk/1","title":"wxTreeCtrl.isTreeItemIdOk/1","type":"function"},{"doc":"Returns true if the item is visible on the screen.","ref":"wxTreeCtrl.html#isVisible/2","title":"wxTreeCtrl.isVisible/2","type":"function"},{"doc":"Returns true if the item has children.","ref":"wxTreeCtrl.html#itemHasChildren/2","title":"wxTreeCtrl.itemHasChildren/2","type":"function"},{"doc":"Default Constructor.","ref":"wxTreeCtrl.html#new/0","title":"wxTreeCtrl.new/0","type":"function"},{"doc":"","ref":"wxTreeCtrl.html#new/1","title":"wxTreeCtrl.new/1","type":"function"},{"doc":"Constructor, creating and showing a tree control. See: create/3 , wxValidator (not implemented in wx)","ref":"wxTreeCtrl.html#new/2","title":"wxTreeCtrl.new/2","type":"function"},{"doc":"","ref":"wxTreeCtrl.html#prependItem/3","title":"wxTreeCtrl.prependItem/3","type":"function"},{"doc":"Appends an item as the first child of parent , return a new item id. The image and selImage parameters are an index within the normal image list specifying the image to use for unselected and selected items, respectively. If image &gt; -1 and selImage is -1, the same image is used for both selected and unselected items.","ref":"wxTreeCtrl.html#prependItem/4","title":"wxTreeCtrl.prependItem/4","type":"function"},{"doc":"Scrolls the specified item into view. Note that this method doesn't work while the window is frozen (See wxWindow:freeze/1 ), at least under MSW. See: ensureVisible/2","ref":"wxTreeCtrl.html#scrollTo/2","title":"wxTreeCtrl.scrollTo/2","type":"function"},{"doc":"","ref":"wxTreeCtrl.html#selectItem/2","title":"wxTreeCtrl.selectItem/2","type":"function"},{"doc":"Selects the given item. In multiple selection controls, can be also used to deselect a currently selected item if the value of select is false. Notice that calling this method will generate wxEVT_TREE_SEL_CHANGING and wxEVT_TREE_SEL_CHANGED events and that the change could be vetoed by the former event handler.","ref":"wxTreeCtrl.html#selectItem/3","title":"wxTreeCtrl.selectItem/3","type":"function"},{"doc":"Sets the normal image list. The image list assigned with this method will not be deleted by wxTreeCtrl 's destructor, you must delete it yourself. See: assignImageList/2","ref":"wxTreeCtrl.html#setImageList/2","title":"wxTreeCtrl.setImageList/2","type":"function"},{"doc":"Sets the indentation for the tree control.","ref":"wxTreeCtrl.html#setIndent/2","title":"wxTreeCtrl.setIndent/2","type":"function"},{"doc":"Sets the colour of the item's background.","ref":"wxTreeCtrl.html#setItemBackgroundColour/3","title":"wxTreeCtrl.setItemBackgroundColour/3","type":"function"},{"doc":"","ref":"wxTreeCtrl.html#setItemBold/2","title":"wxTreeCtrl.setItemBold/2","type":"function"},{"doc":"Makes item appear in bold font if bold parameter is true or resets it to the normal state. See: isBold/2","ref":"wxTreeCtrl.html#setItemBold/3","title":"wxTreeCtrl.setItemBold/3","type":"function"},{"doc":"Sets the item client data. Notice that the client data previously associated with the item (if any) is not freed by this function and so calling this function multiple times for the same item will result in memory leaks unless you delete the old item data pointer yourself.","ref":"wxTreeCtrl.html#setItemData/3","title":"wxTreeCtrl.setItemData/3","type":"function"},{"doc":"","ref":"wxTreeCtrl.html#setItemDropHighlight/2","title":"wxTreeCtrl.setItemDropHighlight/2","type":"function"},{"doc":"Gives the item the visual feedback for Drag'n'Drop actions, which is useful if something is dragged from the outside onto the tree control (as opposed to a DnD operation within the tree control, which already is implemented internally).","ref":"wxTreeCtrl.html#setItemDropHighlight/3","title":"wxTreeCtrl.setItemDropHighlight/3","type":"function"},{"doc":"Sets the item's font. All items in the tree should have the same height to avoid text clipping, so the fonts height should be the same for all of them, although font attributes may vary. See: setItemBold/3","ref":"wxTreeCtrl.html#setItemFont/3","title":"wxTreeCtrl.setItemFont/3","type":"function"},{"doc":"","ref":"wxTreeCtrl.html#setItemHasChildren/2","title":"wxTreeCtrl.setItemHasChildren/2","type":"function"},{"doc":"Force appearance of the button next to the item. This is useful to allow the user to expand the items which don't have any children now, but instead adding them only when needed, thus minimizing memory usage and loading time.","ref":"wxTreeCtrl.html#setItemHasChildren/3","title":"wxTreeCtrl.setItemHasChildren/3","type":"function"},{"doc":"","ref":"wxTreeCtrl.html#setItemImage/3","title":"wxTreeCtrl.setItemImage/3","type":"function"},{"doc":"Sets the specified item's image. See getItemImage/3 for the description of the which parameter.","ref":"wxTreeCtrl.html#setItemImage/4","title":"wxTreeCtrl.setItemImage/4","type":"function"},{"doc":"Sets the item label.","ref":"wxTreeCtrl.html#setItemText/3","title":"wxTreeCtrl.setItemText/3","type":"function"},{"doc":"Sets the colour of the item's text.","ref":"wxTreeCtrl.html#setItemTextColour/3","title":"wxTreeCtrl.setItemTextColour/3","type":"function"},{"doc":"Sets the state image list (from which application-defined state images are taken). Image list assigned with this method will not be deleted by wxTreeCtrl 's destructor, you must delete it yourself. See: assignStateImageList/2","ref":"wxTreeCtrl.html#setStateImageList/2","title":"wxTreeCtrl.setStateImageList/2","type":"function"},{"doc":"Sets the mode flags associated with the display of the tree control. The new mode takes effect immediately. Note: Generic only; MSW ignores changes.","ref":"wxTreeCtrl.html#setWindowStyle/2","title":"wxTreeCtrl.setWindowStyle/2","type":"function"},{"doc":"Sorts the children of the given item using OnCompareItems() (not implemented in wx). You should override that method to change the sort order (the default is ascending case-sensitive alphabetical order). See: wxTreeItemData (not implemented in wx), OnCompareItems() (not implemented in wx)","ref":"wxTreeCtrl.html#sortChildren/2","title":"wxTreeCtrl.sortChildren/2","type":"function"},{"doc":"Toggles the given item between collapsed and expanded states.","ref":"wxTreeCtrl.html#toggle/2","title":"wxTreeCtrl.toggle/2","type":"function"},{"doc":"Toggles the given item between selected and unselected states. For multiselection controls only.","ref":"wxTreeCtrl.html#toggleItemSelection/2","title":"wxTreeCtrl.toggleItemSelection/2","type":"function"},{"doc":"Removes the selection from the currently selected item (if any).","ref":"wxTreeCtrl.html#unselect/1","title":"wxTreeCtrl.unselect/1","type":"function"},{"doc":"This function either behaves the same as unselect/1 if the control doesn't have wxTR_MULTIPLE style, or removes the selection from all items if it does have this style.","ref":"wxTreeCtrl.html#unselectAll/1","title":"wxTreeCtrl.unselectAll/1","type":"function"},{"doc":"Unselects the given item. This works in multiselection controls only.","ref":"wxTreeCtrl.html#unselectItem/2","title":"wxTreeCtrl.unselectItem/2","type":"function"},{"doc":"","ref":"wxTreeCtrl.html#t:wxTreeCtrl/0","title":"wxTreeCtrl.wxTreeCtrl/0","type":"type"},{"doc":"A tree event holds information about events associated with wxTreeCtrl objects. To process input from a tree control, use these event handler macros to direct input to member functions that take a wxTreeEvent argument. See: wxTreeCtrl This class is derived (and can use functions) from: wxNotifyEvent wxCommandEvent wxEvent wxWidgets docs: wxTreeEvent Events Use wxEvtHandler:connect/3 with wxTreeEventType to subscribe to events of this type.","ref":"wxTreeEvent.html","title":"wxTreeEvent","type":"module"},{"doc":"Returns the item (valid for all events).","ref":"wxTreeEvent.html#getItem/1","title":"wxTreeEvent.getItem/1","type":"function"},{"doc":"Returns the key code if the event is a key event. Use getKeyEvent/1 to get the values of the modifier keys for this event (i.e. Shift or Ctrl).","ref":"wxTreeEvent.html#getKeyCode/1","title":"wxTreeEvent.getKeyCode/1","type":"function"},{"doc":"Returns the key event for EVT_TREE_KEY_DOWN events.","ref":"wxTreeEvent.html#getKeyEvent/1","title":"wxTreeEvent.getKeyEvent/1","type":"function"},{"doc":"Returns the label if the event is a begin or end edit label event.","ref":"wxTreeEvent.html#getLabel/1","title":"wxTreeEvent.getLabel/1","type":"function"},{"doc":"Returns the old item index (valid for EVT_TREE_SEL_CHANGING and EVT_TREE_SEL_CHANGED events).","ref":"wxTreeEvent.html#getOldItem/1","title":"wxTreeEvent.getOldItem/1","type":"function"},{"doc":"Returns the position of the mouse pointer if the event is a drag or menu-context event. In both cases the position is in client coordinates - i.e. relative to the wxTreeCtrl window (so that you can pass it directly to e.g. wxWindow:popupMenu/4 ).","ref":"wxTreeEvent.html#getPoint/1","title":"wxTreeEvent.getPoint/1","type":"function"},{"doc":"Returns true if the label edit was cancelled. This should be called from within an EVT_TREE_END_LABEL_EDIT handler.","ref":"wxTreeEvent.html#isEditCancelled/1","title":"wxTreeEvent.isEditCancelled/1","type":"function"},{"doc":"Set the tooltip for the item (valid for EVT_TREE_ITEM_GETTOOLTIP events). Windows only.","ref":"wxTreeEvent.html#setToolTip/2","title":"wxTreeEvent.setToolTip/2","type":"function"},{"doc":"","ref":"wxTreeEvent.html#t:wxTree/0","title":"wxTreeEvent.wxTree/0","type":"type"},{"doc":"","ref":"wxTreeEvent.html#t:wxTreeEvent/0","title":"wxTreeEvent.wxTreeEvent/0","type":"type"},{"doc":"","ref":"wxTreeEvent.html#t:wxTreeEventType/0","title":"wxTreeEvent.wxTreeEventType/0","type":"type"},{"doc":"This class is an extension of the wxNotebook class that allows a tree structured set of pages to be shown in a control. A classic example is a netscape preferences dialog that shows a tree of preference sections on the left and select section page on the right. To use the class simply create it and populate with pages using insertPage/5 , insertSubPage/5 , addPage/4 , AddSubPage() (not implemented in wx). If your tree is no more than 1 level in depth then you could simply use addPage/4 and AddSubPage() (not implemented in wx) to sequentially populate your tree by adding at every step a page or a subpage to the end of the tree. See: ?wxBookCtrl, wxBookCtrlEvent , wxNotebook , wxTreeCtrl , wxImageList , Overview bookctrl , Examples This class is derived (and can use functions) from: wxBookCtrlBase wxControl wxWindow wxEvtHandler wxWidgets docs: wxTreebook Events Event types emitted from this class: treebook_page_changed , treebook_page_changing","ref":"wxTreebook.html","title":"wxTreebook","type":"module"},{"doc":"","ref":"wxTreebook.html#addPage/3","title":"wxTreebook.addPage/3","type":"function"},{"doc":"Adds a new page. The page is placed at the topmost level after all other pages. NULL could be specified for page to create an empty page.","ref":"wxTreebook.html#addPage/4","title":"wxTreebook.addPage/4","type":"function"},{"doc":"","ref":"wxTreebook.html#advanceSelection/1","title":"wxTreebook.advanceSelection/1","type":"function"},{"doc":"Cycles through the tabs. The call to this function generates the page changing events.","ref":"wxTreebook.html#advanceSelection/2","title":"wxTreebook.advanceSelection/2","type":"function"},{"doc":"Sets the image list for the page control and takes ownership of the list. See: wxImageList , setImageList/2","ref":"wxTreebook.html#assignImageList/2","title":"wxTreebook.assignImageList/2","type":"function"},{"doc":"Changes the selection to the given page, returning the previous selection. This function behaves as setSelection/2 but does not generate the page changing events. See overview_events_prog for more information.","ref":"wxTreebook.html#changeSelection/2","title":"wxTreebook.changeSelection/2","type":"function"},{"doc":"","ref":"wxTreebook.html#create/3","title":"wxTreebook.create/3","type":"function"},{"doc":"Creates a treebook control. See new/3 for the description of the parameters.","ref":"wxTreebook.html#create/4","title":"wxTreebook.create/4","type":"function"},{"doc":"Deletes all pages.","ref":"wxTreebook.html#deleteAllPages/1","title":"wxTreebook.deleteAllPages/1","type":"function"},{"doc":"Destroys the wxTreebook object. Also deletes all the pages owned by the control (inserted previously into it).","ref":"wxTreebook.html#destroy/1","title":"wxTreebook.destroy/1","type":"function"},{"doc":"","ref":"wxTreebook.html#expandNode/2","title":"wxTreebook.expandNode/2","type":"function"},{"doc":"Expands (collapses) the pageId node. Returns the previous state. May generate page changing events (if selected page is under the collapsed branch, then its parent is autoselected).","ref":"wxTreebook.html#expandNode/3","title":"wxTreebook.expandNode/3","type":"function"},{"doc":"Returns the currently selected page or NULL.","ref":"wxTreebook.html#getCurrentPage/1","title":"wxTreebook.getCurrentPage/1","type":"function"},{"doc":"Returns the associated image list, may be NULL. See: wxImageList , setImageList/2","ref":"wxTreebook.html#getImageList/1","title":"wxTreebook.getImageList/1","type":"function"},{"doc":"Returns the window at the given page position.","ref":"wxTreebook.html#getPage/2","title":"wxTreebook.getPage/2","type":"function"},{"doc":"Returns the number of pages in the control.","ref":"wxTreebook.html#getPageCount/1","title":"wxTreebook.getPageCount/1","type":"function"},{"doc":"Returns the image index for the given page.","ref":"wxTreebook.html#getPageImage/2","title":"wxTreebook.getPageImage/2","type":"function"},{"doc":"Returns the string for the given page.","ref":"wxTreebook.html#getPageText/2","title":"wxTreebook.getPageText/2","type":"function"},{"doc":"Returns the currently selected page, or wxNOT_FOUND if none was selected. Note: This method may return either the previously or newly selected page when called from the EVT_TREEBOOK_PAGE_CHANGED() handler depending on the platform and so wxBookCtrlEvent:getSelection/1 should be used instead in this case.","ref":"wxTreebook.html#getSelection/1","title":"wxTreebook.getSelection/1","type":"function"},{"doc":"Returns the index of the tab at the specified position or wxNOT_FOUND if none. If flags parameter is non-NULL, the position of the point inside the tab is returned as well. Return: Returns the zero-based tab index or wxNOT_FOUND if there is no tab at the specified position.","ref":"wxTreebook.html#hitTest/2","title":"wxTreebook.hitTest/2","type":"function"},{"doc":"","ref":"wxTreebook.html#insertPage/4","title":"wxTreebook.insertPage/4","type":"function"},{"doc":"Inserts a new page just before the page indicated by pagePos . The new page is placed before pagePos page and on the same level. NULL could be specified for page to create an empty page.","ref":"wxTreebook.html#insertPage/5","title":"wxTreebook.insertPage/5","type":"function"},{"doc":"","ref":"wxTreebook.html#insertSubPage/4","title":"wxTreebook.insertSubPage/4","type":"function"},{"doc":"Inserts a sub page under the specified page. NULL could be specified for page to create an empty page.","ref":"wxTreebook.html#insertSubPage/5","title":"wxTreebook.insertSubPage/5","type":"function"},{"doc":"Returns true if the page represented by pageId is expanded.","ref":"wxTreebook.html#isNodeExpanded/2","title":"wxTreebook.isNodeExpanded/2","type":"function"},{"doc":"Default constructor.","ref":"wxTreebook.html#new/0","title":"wxTreebook.new/0","type":"function"},{"doc":"","ref":"wxTreebook.html#new/2","title":"wxTreebook.new/2","type":"function"},{"doc":"Creates an empty wxTreebook .","ref":"wxTreebook.html#new/3","title":"wxTreebook.new/3","type":"function"},{"doc":"Sets the image list to use. It does not take ownership of the image list, you must delete it yourself. See: wxImageList , assignImageList/2","ref":"wxTreebook.html#setImageList/2","title":"wxTreebook.setImageList/2","type":"function"},{"doc":"Sets the image index for the given page. image is an index into the image list which was set with setImageList/2 .","ref":"wxTreebook.html#setPageImage/3","title":"wxTreebook.setPageImage/3","type":"function"},{"doc":"Sets the width and height of the pages. Note: This method is currently not implemented for wxGTK.","ref":"wxTreebook.html#setPageSize/2","title":"wxTreebook.setPageSize/2","type":"function"},{"doc":"Sets the text for the given page.","ref":"wxTreebook.html#setPageText/3","title":"wxTreebook.setPageText/3","type":"function"},{"doc":"Sets the selection to the given page, returning the previous selection. Notice that the call to this function generates the page changing events, use the changeSelection/2 function if you don't want these events to be generated. See: wxBookCtrlBase:getSelection/1","ref":"wxTreebook.html#setSelection/2","title":"wxTreebook.setSelection/2","type":"function"},{"doc":"","ref":"wxTreebook.html#t:wxTreebook/0","title":"wxTreebook.wxTreebook/0","type":"type"},{"doc":"This class is used for pseudo-events which are called by wxWidgets to give an application the chance to update various user interface elements. Without update UI events, an application has to work hard to check/uncheck, enable/disable, show/hide, and set the text for elements such as menu items and toolbar buttons. The code for doing this has to be mixed up with the code that is invoked when an action is invoked for a menu item or button. With update UI events, you define an event handler to look at the state of the application and change UI elements accordingly. wxWidgets will call your member functions in idle time, so you don't have to worry where to call this code. In addition to being a clearer and more declarative method, it also means you don't have to worry whether you're updating a toolbar or menubar identifier. The same handler can update a menu item and toolbar button, if the identifier is the same. Instead of directly manipulating the menu or button, you call functions in the event object, such as check/2 . wxWidgets will determine whether such a call has been made, and which UI element to update. These events will work for popup menus as well as menubars. Just before a menu is popped up, wxMenu::UpdateUI (not implemented in wx) is called to process any UI events for the window that owns the menu. If you find that the overhead of UI update processing is affecting your application, you can do one or both of the following: Note that although events are sent in idle time, defining a wxIdleEvent handler for a window does not affect this because the events are sent from wxWindow::OnInternalIdle (not implemented in wx) which is always called in idle time. wxWidgets tries to optimize update events on some platforms. On Windows and GTK+, events for menubar items are only sent when the menu is about to be shown, and not in idle time. See: Overview events This class is derived (and can use functions) from: wxCommandEvent wxEvent wxWidgets docs: wxUpdateUIEvent Events Use wxEvtHandler:connect/3 with wxUpdateUIEventType to subscribe to events of this type.","ref":"wxUpdateUIEvent.html","title":"wxUpdateUIEvent","type":"module"},{"doc":"Returns true if it is appropriate to update (send UI update events to) this window. This function looks at the mode used (see setMode/1 ), the wxWS_EX_PROCESS_UI_UPDATES flag in window , the time update events were last sent in idle time, and the update interval, to determine whether events should be sent to this window now. By default this will always return true because the update mode is initially wxUPDATE_UI_PROCESS_ALL and the interval is set to 0; so update events will be sent as often as possible. You can reduce the frequency that events are sent by changing the mode and/or setting an update interval. See: resetUpdateTime/0 , setUpdateInterval/1 , setMode/1","ref":"wxUpdateUIEvent.html#canUpdate/1","title":"wxUpdateUIEvent.canUpdate/1","type":"function"},{"doc":"Check or uncheck the UI element.","ref":"wxUpdateUIEvent.html#check/2","title":"wxUpdateUIEvent.check/2","type":"function"},{"doc":"Enable or disable the UI element.","ref":"wxUpdateUIEvent.html#enable/2","title":"wxUpdateUIEvent.enable/2","type":"function"},{"doc":"Returns true if the UI element should be checked.","ref":"wxUpdateUIEvent.html#getChecked/1","title":"wxUpdateUIEvent.getChecked/1","type":"function"},{"doc":"Returns true if the UI element should be enabled.","ref":"wxUpdateUIEvent.html#getEnabled/1","title":"wxUpdateUIEvent.getEnabled/1","type":"function"},{"doc":"Static function returning a value specifying how wxWidgets will send update events: to all windows, or only to those which specify that they will process the events. See: setMode/1","ref":"wxUpdateUIEvent.html#getMode/0","title":"wxUpdateUIEvent.getMode/0","type":"function"},{"doc":"Returns true if the application has called check/2 . For wxWidgets internal use only.","ref":"wxUpdateUIEvent.html#getSetChecked/1","title":"wxUpdateUIEvent.getSetChecked/1","type":"function"},{"doc":"Returns true if the application has called enable/2 . For wxWidgets internal use only.","ref":"wxUpdateUIEvent.html#getSetEnabled/1","title":"wxUpdateUIEvent.getSetEnabled/1","type":"function"},{"doc":"Returns true if the application has called show/2 . For wxWidgets internal use only.","ref":"wxUpdateUIEvent.html#getSetShown/1","title":"wxUpdateUIEvent.getSetShown/1","type":"function"},{"doc":"Returns true if the application has called setText/2 . For wxWidgets internal use only.","ref":"wxUpdateUIEvent.html#getSetText/1","title":"wxUpdateUIEvent.getSetText/1","type":"function"},{"doc":"Returns true if the UI element should be shown.","ref":"wxUpdateUIEvent.html#getShown/1","title":"wxUpdateUIEvent.getShown/1","type":"function"},{"doc":"Returns the text that should be set for the UI element.","ref":"wxUpdateUIEvent.html#getText/1","title":"wxUpdateUIEvent.getText/1","type":"function"},{"doc":"Returns the current interval between updates in milliseconds. The value -1 disables updates, 0 updates as frequently as possible. See: setUpdateInterval/1","ref":"wxUpdateUIEvent.html#getUpdateInterval/0","title":"wxUpdateUIEvent.getUpdateInterval/0","type":"function"},{"doc":"Used internally to reset the last-updated time to the current time. It is assumed that update events are normally sent in idle time, so this is called at the end of idle processing. See: canUpdate/1 , setUpdateInterval/1 , setMode/1","ref":"wxUpdateUIEvent.html#resetUpdateTime/0","title":"wxUpdateUIEvent.resetUpdateTime/0","type":"function"},{"doc":"Specify how wxWidgets will send update events: to all windows, or only to those which specify that they will process the events.","ref":"wxUpdateUIEvent.html#setMode/1","title":"wxUpdateUIEvent.setMode/1","type":"function"},{"doc":"Sets the text for this UI element.","ref":"wxUpdateUIEvent.html#setText/2","title":"wxUpdateUIEvent.setText/2","type":"function"},{"doc":"Sets the interval between updates in milliseconds. Set to -1 to disable updates, or to 0 to update as frequently as possible. The default is 0. Use this to reduce the overhead of UI update events if your application has a lot of windows. If you set the value to -1 or greater than 0, you may also need to call wxWindow:updateWindowUI/2 at appropriate points in your application, such as when a dialog is about to be shown.","ref":"wxUpdateUIEvent.html#setUpdateInterval/1","title":"wxUpdateUIEvent.setUpdateInterval/1","type":"function"},{"doc":"Show or hide the UI element.","ref":"wxUpdateUIEvent.html#show/2","title":"wxUpdateUIEvent.show/2","type":"function"},{"doc":"","ref":"wxUpdateUIEvent.html#t:wxUpdateUI/0","title":"wxUpdateUIEvent.wxUpdateUI/0","type":"type"},{"doc":"","ref":"wxUpdateUIEvent.html#t:wxUpdateUIEvent/0","title":"wxUpdateUIEvent.wxUpdateUIEvent/0","type":"type"},{"doc":"","ref":"wxUpdateUIEvent.html#t:wxUpdateUIEventType/0","title":"wxUpdateUIEvent.wxUpdateUIEventType/0","type":"type"},{"doc":"This control may be used to render web (HTML / CSS / javascript) documents. It is designed to allow the creation of multiple backends for each port, although currently just one is available. It differs from wxHtmlWindow in that each backend is actually a full rendering engine, Trident on MSW and Webkit on macOS and GTK. This allows the correct viewing of complex pages with javascript and css. Backend Descriptions Par: The IE backend uses Microsoft's Trident rendering engine, specifically the version used by the locally installed copy of Internet Explorer. As such it is only available for the MSW port. By default recent versions of the WebBrowser control, which this backend uses, emulate Internet Explorer 7. This can be changed with a registry setting by wxWebView::MSWSetEmulationLevel() see this article for more information. This backend has full support for custom schemes and virtual file systems. Par: The Edge (Chromium) backend uses Microsoft's Edge WebView2 . It is available for Windows 7 and newer. The following features are currently unsupported with this backend: virtual filesystems, custom urls, find. This backend is not enabled by default, to build it follow these steps: Par: Under GTK the WebKit backend uses WebKitGTK+ . The current minimum version required is 1.3.1 which ships by default with Ubuntu Natty and Debian Wheezy and has the package name libwebkitgtk-dev. Custom schemes and virtual files systems are supported under this backend, however embedded resources such as images and stylesheets are currently loaded using the data:// scheme. Par: Under GTK3 the WebKit2 version of WebKitGTK+ is used. In Ubuntu the required package name is libwebkit2gtk-4.0-dev and under Fedora it is webkitgtk4-devel. All wxWEBVIEW_WEBKIT features are supported except for clearing and enabling / disabling the history. Par: The macOS WebKit backend uses Apple's WebView class. This backend has full support for custom schemes and virtual file systems. Asynchronous Notifications Many of the methods in wxWebView are asynchronous, i.e. they return immediately and perform their work in the background. This includes functions such as loadURL/2 and reload/2 . To receive notification of the progress and completion of these functions you need to handle the events that are provided. Specifically wxEVT_WEBVIEW_LOADED notifies when the page or a sub-frame has finished loading and wxEVT_WEBVIEW_ERROR notifies that an error has occurred. Virtual File Systems and Custom Schemes wxWebView supports the registering of custom scheme handlers, for example file or http . To do this create a new class which inherits from wxWebViewHandler (not implemented in wx), where wxWebHandler::GetFile() returns a pointer to a wxFSFile (not implemented in wx) which represents the given url. You can then register your handler with RegisterHandler() (not implemented in wx) it will be called for all pages and resources. wxWebViewFSHandler (not implemented in wx) is provided to access the virtual file system encapsulated by wxFileSystem (not implemented in wx). The wxMemoryFSHandler (not implemented in wx) documentation gives an example of how this may be used. wxWebViewArchiveHandler (not implemented in wx) is provided to allow the navigation of pages inside a zip archive. It supports paths of the form: scheme:///C :/example/docs.zip;protocol=zip/main.htm Since: 2.9.3 See: wxWebViewHandler (not implemented in wx), wxWebViewEvent This class is derived (and can use functions) from: wxControl wxWindow wxEvtHandler wxWidgets docs: wxWebView Events Event types emitted from this class: webview_navigating , webview_navigated , webview_loaded , webview_error , webview_newwindow , webview_title_changed","ref":"wxWebView.html","title":"wxWebView","type":"module"},{"doc":"Returns true if the current selection can be copied. Note: This always returns true on the macOS WebKit backend.","ref":"wxWebView.html#canCopy/1","title":"wxWebView.canCopy/1","type":"function"},{"doc":"Returns true if the current selection can be cut. Note: This always returns true on the macOS WebKit backend.","ref":"wxWebView.html#canCut/1","title":"wxWebView.canCut/1","type":"function"},{"doc":"Returns true if it is possible to navigate backward in the history of visited pages.","ref":"wxWebView.html#canGoBack/1","title":"wxWebView.canGoBack/1","type":"function"},{"doc":"Returns true if it is possible to navigate forward in the history of visited pages.","ref":"wxWebView.html#canGoForward/1","title":"wxWebView.canGoForward/1","type":"function"},{"doc":"Returns true if data can be pasted. Note: This always returns true on the macOS WebKit backend.","ref":"wxWebView.html#canPaste/1","title":"wxWebView.canPaste/1","type":"function"},{"doc":"Returns true if there is an action to redo.","ref":"wxWebView.html#canRedo/1","title":"wxWebView.canRedo/1","type":"function"},{"doc":"Retrieve whether the current HTML engine supports a zoom type. Return: Whether this type of zoom is supported by this HTML engine (and thus can be set through setZoomType/2 ).","ref":"wxWebView.html#canSetZoomType/2","title":"wxWebView.canSetZoomType/2","type":"function"},{"doc":"Returns true if there is an action to undo.","ref":"wxWebView.html#canUndo/1","title":"wxWebView.canUndo/1","type":"function"},{"doc":"Clear the history, this will also remove the visible page. Note: This is not implemented on the WebKit2GTK+ backend.","ref":"wxWebView.html#clearHistory/1","title":"wxWebView.clearHistory/1","type":"function"},{"doc":"Clears the current selection.","ref":"wxWebView.html#clearSelection/1","title":"wxWebView.clearSelection/1","type":"function"},{"doc":"Copies the current selection.","ref":"wxWebView.html#copy/1","title":"wxWebView.copy/1","type":"function"},{"doc":"Cuts the current selection.","ref":"wxWebView.html#cut/1","title":"wxWebView.cut/1","type":"function"},{"doc":"Deletes the current selection. Note that for wxWEBVIEW_BACKEND_WEBKIT the selection must be editable, either through SetEditable or the correct HTML attribute.","ref":"wxWebView.html#deleteSelection/1","title":"wxWebView.deleteSelection/1","type":"function"},{"doc":"","ref":"wxWebView.html#enableContextMenu/1","title":"wxWebView.enableContextMenu/1","type":"function"},{"doc":"Enable or disable the right click context menu. By default the standard context menu is enabled, this method can be used to disable it or re-enable it later. Since: 2.9.5","ref":"wxWebView.html#enableContextMenu/2","title":"wxWebView.enableContextMenu/2","type":"function"},{"doc":"","ref":"wxWebView.html#enableHistory/1","title":"wxWebView.enableHistory/1","type":"function"},{"doc":"Enable or disable the history. This will also clear the history. Note: This is not implemented on the WebKit2GTK+ backend.","ref":"wxWebView.html#enableHistory/2","title":"wxWebView.enableHistory/2","type":"function"},{"doc":"","ref":"wxWebView.html#find/2","title":"wxWebView.find/2","type":"function"},{"doc":"Finds a phrase on the current page and if found, the control will scroll the phrase into view and select it. Return: If search phrase was not found in combination with the flags then wxNOT_FOUND is returned. If called for the first time with search phrase then the total number of results will be returned. Then for every time its called with the same search phrase it will return the number of the current match. Note: This function will restart the search if the flags wxWEBVIEW_FIND_ENTIRE_WORD or wxWEBVIEW_FIND_MATCH_CASE are changed, since this will require a new search. To reset the search, for example resetting the highlights call the function with an empty search phrase. This always returns wxNOT_FOUND on the macOS WebKit backend. Since: 2.9.5","ref":"wxWebView.html#find/3","title":"wxWebView.find/3","type":"function"},{"doc":"Get the title of the current web page, or its URL/path if title is not available.","ref":"wxWebView.html#getCurrentTitle/1","title":"wxWebView.getCurrentTitle/1","type":"function"},{"doc":"Get the URL of the currently displayed document.","ref":"wxWebView.html#getCurrentURL/1","title":"wxWebView.getCurrentURL/1","type":"function"},{"doc":"Get the HTML source code of the currently displayed document. Return: The HTML source code, or an empty string if no page is currently shown.","ref":"wxWebView.html#getPageSource/1","title":"wxWebView.getPageSource/1","type":"function"},{"doc":"Get the text of the current page.","ref":"wxWebView.html#getPageText/1","title":"wxWebView.getPageText/1","type":"function"},{"doc":"Returns the currently selected source, if any.","ref":"wxWebView.html#getSelectedSource/1","title":"wxWebView.getSelectedSource/1","type":"function"},{"doc":"Returns the currently selected text, if any.","ref":"wxWebView.html#getSelectedText/1","title":"wxWebView.getSelectedText/1","type":"function"},{"doc":"Get the zoom level of the page. See getZoomFactor/1 to get more precise zoom scale value other than as provided by wxWebViewZoom . Return: The current level of zoom.","ref":"wxWebView.html#getZoom/1","title":"wxWebView.getZoom/1","type":"function"},{"doc":"Get the zoom factor of the page. Return: The current factor of zoom. Since: 3.1.4","ref":"wxWebView.html#getZoomFactor/1","title":"wxWebView.getZoomFactor/1","type":"function"},{"doc":"Get how the zoom factor is currently interpreted. Return: How the zoom factor is currently interpreted by the HTML engine.","ref":"wxWebView.html#getZoomType/1","title":"wxWebView.getZoomType/1","type":"function"},{"doc":"Navigate back in the history of visited pages. Only valid if canGoBack/1 returns true.","ref":"wxWebView.html#goBack/1","title":"wxWebView.goBack/1","type":"function"},{"doc":"Navigate forward in the history of visited pages. Only valid if canGoForward/1 returns true.","ref":"wxWebView.html#goForward/1","title":"wxWebView.goForward/1","type":"function"},{"doc":"Returns true if there is a current selection.","ref":"wxWebView.html#hasSelection/1","title":"wxWebView.hasSelection/1","type":"function"},{"doc":"Allows to check if a specific backend is currently available. Since: 3.1.4","ref":"wxWebView.html#isBackendAvailable/1","title":"wxWebView.isBackendAvailable/1","type":"function"},{"doc":"Returns whether the web control is currently busy (e.g. loading a page).","ref":"wxWebView.html#isBusy/1","title":"wxWebView.isBusy/1","type":"function"},{"doc":"Returns true if a context menu will be shown on right click. Since: 2.9.5","ref":"wxWebView.html#isContextMenuEnabled/1","title":"wxWebView.isContextMenuEnabled/1","type":"function"},{"doc":"Returns whether the web control is currently editable.","ref":"wxWebView.html#isEditable/1","title":"wxWebView.isEditable/1","type":"function"},{"doc":"Load a web page from a URL. Note: Web engines generally report errors asynchronously, so if you wish to know whether loading the URL was successful, register to receive navigation error events.","ref":"wxWebView.html#loadURL/2","title":"wxWebView.loadURL/2","type":"function"},{"doc":"","ref":"wxWebView.html#new/2","title":"wxWebView.new/2","type":"function"},{"doc":"Factory function to create a new wxWebView using a wxWebViewFactory (not implemented in wx). Return: The created wxWebView , or NULL if the requested backend is not available Since: 2.9.5","ref":"wxWebView.html#new/3","title":"wxWebView.new/3","type":"function"},{"doc":"Pastes the current data.","ref":"wxWebView.html#paste/1","title":"wxWebView.paste/1","type":"function"},{"doc":"Opens a print dialog so that the user may print the currently displayed page.","ref":"wxWebView.html#print/1","title":"wxWebView.print/1","type":"function"},{"doc":"Redos the last action.","ref":"wxWebView.html#redo/1","title":"wxWebView.redo/1","type":"function"},{"doc":"","ref":"wxWebView.html#reload/1","title":"wxWebView.reload/1","type":"function"},{"doc":"Reload the currently displayed URL. Note: The flags are ignored by the edge backend.","ref":"wxWebView.html#reload/2","title":"wxWebView.reload/2","type":"function"},{"doc":"Runs the given JavaScript code. JavaScript code is executed inside the browser control and has full access to DOM and other browser-provided functionality. For example, this code will replace the current page contents with the provided string. If output is non-null, it is filled with the result of executing this code on success, e.g. a JavaScript value such as a string, a number (integer or floating point), a boolean or JSON representation for non-primitive types such as arrays and objects. For example: This function has a few platform-specific limitations: Also notice that under MSW converting JavaScript objects to JSON is not supported in the default emulation mode. wxWebView implements its own object-to-JSON conversion as a fallback for this case, however it is not as full-featured, well-tested or performing as the implementation of this functionality in the browser control itself, so it is recommended to use MSWSetEmulationLevel() to change emulation level to a more modern one in which JSON conversion is done by the control itself. Return: true if there is a result, false if there is an error.","ref":"wxWebView.html#runScript/2","title":"wxWebView.runScript/2","type":"function"},{"doc":"Selects the entire page.","ref":"wxWebView.html#selectAll/1","title":"wxWebView.selectAll/1","type":"function"},{"doc":"","ref":"wxWebView.html#setEditable/1","title":"wxWebView.setEditable/1","type":"function"},{"doc":"Set the editable property of the web control. Enabling allows the user to edit the page even if the contenteditable attribute is not set. The exact capabilities vary with the backend being used.","ref":"wxWebView.html#setEditable/2","title":"wxWebView.setEditable/2","type":"function"},{"doc":"Set the displayed page source to the contents of the given string. Note: When using wxWEBVIEW_BACKEND_IE you must wait for the current page to finish loading before calling setPage/3 . The baseURL parameter is not used in this backend and the edge backend.","ref":"wxWebView.html#setPage/3","title":"wxWebView.setPage/3","type":"function"},{"doc":"Set the zoom level of the page. See setZoomFactor/2 for more precise scaling other than the measured steps provided by wxWebViewZoom .","ref":"wxWebView.html#setZoom/2","title":"wxWebView.setZoom/2","type":"function"},{"doc":"Set the zoom factor of the page. Note: zoom scale in IE will be converted into wxWebViewZoom levels for wxWebViewZoomType of wxWEBVIEW_ZOOM_TYPE_TEXT . Since: 3.1.4","ref":"wxWebView.html#setZoomFactor/2","title":"wxWebView.setZoomFactor/2","type":"function"},{"doc":"Set how to interpret the zoom factor. Note: invoke canSetZoomType/2 first, some HTML renderers may not support all zoom types.","ref":"wxWebView.html#setZoomType/2","title":"wxWebView.setZoomType/2","type":"function"},{"doc":"Stop the current page loading process, if any. May trigger an error event of type wxWEBVIEW_NAV_ERR_USER_CANCELLED . TODO: make wxWEBVIEW_NAV_ERR_USER_CANCELLED errors uniform across ports.","ref":"wxWebView.html#stop/1","title":"wxWebView.stop/1","type":"function"},{"doc":"Undos the last action.","ref":"wxWebView.html#undo/1","title":"wxWebView.undo/1","type":"function"},{"doc":"","ref":"wxWebView.html#t:wxWebView/0","title":"wxWebView.wxWebView/0","type":"type"},{"doc":"A navigation event holds information about events associated with wxWebView objects. Since: 2.9.3 See: wxWebView This class is derived (and can use functions) from: wxNotifyEvent wxCommandEvent wxEvent wxWidgets docs: wxWebViewEvent Events Use wxEvtHandler:connect/3 with wxWebViewEventType to subscribe to events of this type.","ref":"wxWebViewEvent.html","title":"wxWebViewEvent","type":"module"},{"doc":"Returns the integer identifier corresponding to a listbox, choice or radiobox selection (only if the event was a selection, not a deselection), or a boolean value representing the value of a checkbox. For a menu item, this method returns -1 if the item is not checkable or a boolean value (true or false) for checkable items indicating the new state of the item.","ref":"wxWebViewEvent.html#getInt/1","title":"wxWebViewEvent.getInt/1","type":"function"},{"doc":"Returns item string for a listbox or choice selection event. If one or several items have been deselected, returns the index of the first deselected item. If some items have been selected and others deselected at the same time, it will return the index of the first selected item.","ref":"wxWebViewEvent.html#getString/1","title":"wxWebViewEvent.getString/1","type":"function"},{"doc":"Get the name of the target frame which the url of this event has been or will be loaded into. This may return an empty string if the frame is not available.","ref":"wxWebViewEvent.html#getTarget/1","title":"wxWebViewEvent.getTarget/1","type":"function"},{"doc":"Get the URL being visited.","ref":"wxWebViewEvent.html#getURL/1","title":"wxWebViewEvent.getURL/1","type":"function"},{"doc":"","ref":"wxWebViewEvent.html#t:wxWebView/0","title":"wxWebViewEvent.wxWebView/0","type":"type"},{"doc":"","ref":"wxWebViewEvent.html#t:wxWebViewEvent/0","title":"wxWebViewEvent.wxWebViewEvent/0","type":"type"},{"doc":"","ref":"wxWebViewEvent.html#t:wxWebViewEventType/0","title":"wxWebViewEvent.wxWebViewEventType/0","type":"type"},{"doc":"wxWindow is the base class for all windows and represents any visible object on screen. All controls, top level windows and so on are windows. Sizers and device contexts are not, however, as they don't appear on screen themselves. Please note that all children of the window will be deleted automatically by the destructor before the window itself is deleted which means that you don't have to worry about deleting them manually. Please see the window deletion overview for more information. Also note that in this, and many others, wxWidgets classes some GetXXX() methods may be overloaded (as, for example, getSize/1 or getClientSize/1 ). In this case, the overloads are non-virtual because having multiple virtual functions with the same name results in a virtual function name hiding at the derived class level (in English, this means that the derived class has to override all overloaded variants if it overrides any of them). To allow overriding them in the derived class, wxWidgets uses a unique protected virtual DoGetXXX() method and all GetXXX() ones are forwarded to it, so overriding the former changes the behaviour of the latter. Styles This class supports the following styles: Extra Styles This class supports the following extra styles: See: Overview events , Overview windowsizing This class is derived (and can use functions) from: wxEvtHandler wxWidgets docs: wxWindow Events Event types emitted from this class: activate , child_focus , context_menu , help , drop_files , erase_background , set_focus , kill_focus , idle , joy_button_down , joy_button_up , joy_move , joy_zmove , key_down , key_up , char , char_hook , mouse_capture_lost , mouse_capture_changed , left_down , left_up , middle_down , middle_up , right_down , right_up , motion , enter_window , leave_window , left_dclick , middle_dclick , right_dclick , mousewheel , aux1_down , aux1_up , aux1_dclick , aux2_down , aux2_up , aux2_dclick , paint , scrollwin_top , scrollwin_bottom , scrollwin_lineup , scrollwin_linedown , scrollwin_pageup , scrollwin_pagedown , scrollwin_thumbtrack , scrollwin_thumbrelease , set_cursor , size , sys_colour_changed","ref":"wxWindow.html","title":"wxWindow","type":"module"},{"doc":"Destroys the window safely. Use this function instead of the delete operator, since different window classes can be destroyed differently. Frames and dialogs are not destroyed immediately when this function is called - they are added to a list of windows to be deleted on idle time, when all the window's events have been processed. This prevents problems with events being sent to non-existent windows. Return: true if the window has either been successfully deleted, or it has been added to the list of windows pending real deletion.","ref":"wxWindow.html#Destroy/1","title":"wxWindow.Destroy/1","type":"function"},{"doc":"Sets the cached best size value. See: getBestSize/1","ref":"wxWindow.html#cacheBestSize/2","title":"wxWindow.cacheBestSize/2","type":"function"},{"doc":"Returns true if the system supports transparent windows and calling setTransparent/2 may succeed. If this function returns false, transparent windows are definitely not supported by the current system.","ref":"wxWindow.html#canSetTransparent/1","title":"wxWindow.canSetTransparent/1","type":"function"},{"doc":"Directs all mouse input to this window. Call releaseMouse/1 to release the capture. Note that wxWidgets maintains the stack of windows having captured the mouse and when the mouse is released the capture returns to the window which had had captured it previously and it is only really released if there were no previous window. In particular, this means that you must release the mouse as many times as you capture it, unless the window receives the wxMouseCaptureLostEvent event. Any application which captures the mouse in the beginning of some operation must handle wxMouseCaptureLostEvent and cancel this operation when it receives the event. The event handler must not recapture mouse. See: releaseMouse/1 , wxMouseCaptureLostEvent","ref":"wxWindow.html#captureMouse/1","title":"wxWindow.captureMouse/1","type":"function"},{"doc":"","ref":"wxWindow.html#center/1","title":"wxWindow.center/1","type":"function"},{"doc":"See: centre/2 .","ref":"wxWindow.html#center/2","title":"wxWindow.center/2","type":"function"},{"doc":"","ref":"wxWindow.html#centerOnParent/1","title":"wxWindow.centerOnParent/1","type":"function"},{"doc":"See: centreOnParent/2 .","ref":"wxWindow.html#centerOnParent/2","title":"wxWindow.centerOnParent/2","type":"function"},{"doc":"","ref":"wxWindow.html#centre/1","title":"wxWindow.centre/1","type":"function"},{"doc":"Centres the window. Remark: If the window is a top level one (i.e. doesn't have a parent), it will be centred relative to the screen anyhow. See: center/2","ref":"wxWindow.html#centre/2","title":"wxWindow.centre/2","type":"function"},{"doc":"","ref":"wxWindow.html#centreOnParent/1","title":"wxWindow.centreOnParent/1","type":"function"},{"doc":"Centres the window on its parent. This is a more readable synonym for centre/2 . Remark: This methods provides for a way to centre top level windows over their parents instead of the entire screen. If there is no parent or if the window is not a top level window, then behaviour is the same as centre/2 . See: wxTopLevelWindow:centreOnScreen/2","ref":"wxWindow.html#centreOnParent/2","title":"wxWindow.centreOnParent/2","type":"function"},{"doc":"Clears the window by filling it with the current background colour. Does not cause an erase background event to be generated. Notice that this uses wxClientDC to draw on the window and the results of doing it while also drawing on wxPaintDC for this window are undefined. Hence this method shouldn't be used from EVT_PAINT handlers, just use wxDC:clear/1 on the wxPaintDC you already use there instead.","ref":"wxWindow.html#clearBackground/1","title":"wxWindow.clearBackground/1","type":"function"},{"doc":"Converts to screen coordinates from coordinates relative to this window.","ref":"wxWindow.html#clientToScreen/2","title":"wxWindow.clientToScreen/2","type":"function"},{"doc":"Converts to screen coordinates from coordinates relative to this window.","ref":"wxWindow.html#clientToScreen/3","title":"wxWindow.clientToScreen/3","type":"function"},{"doc":"","ref":"wxWindow.html#close/1","title":"wxWindow.close/1","type":"function"},{"doc":"This function simply generates a wxCloseEvent whose handler usually tries to close the window. It doesn't close the window itself, however. Return: true if the event was handled and not vetoed, false otherwise. Remark: Close calls the close handler for the window, providing an opportunity for the window to choose whether to destroy the window. Usually it is only used with the top level windows ( wxFrame and wxDialog classes) as the others are not supposed to have any special OnClose() logic. The close handler should check whether the window is being deleted forcibly, using wxCloseEvent:canVeto/1 , in which case it should destroy the window using 'Destroy'/1 . Note that calling Close does not guarantee that the window will be destroyed; but it provides a way to simulate a manual close of a window, which may or may not be implemented by destroying the window. The default implementation of wxDialog::OnCloseWindow does not necessarily delete the dialog, since it will simply simulate an wxID_CANCEL event which is handled by the appropriate button event handler and may do anything at all. To guarantee that the window will be destroyed, call 'Destroy'/1 instead See: Window Deletion Overview, 'Destroy'/1 , wxCloseEvent","ref":"wxWindow.html#close/2","title":"wxWindow.close/2","type":"function"},{"doc":"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.","ref":"wxWindow.html#convertDialogToPixels/2","title":"wxWindow.convertDialogToPixels/2","type":"function"},{"doc":"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.","ref":"wxWindow.html#convertPixelsToDialog/2","title":"wxWindow.convertPixelsToDialog/2","type":"function"},{"doc":"","ref":"wxWindow.html#create/3","title":"wxWindow.create/3","type":"function"},{"doc":"Construct the actual window object after creating the C++ object. The non-default constructor of wxWindow class does two things: it initializes the C++ object and it also creates the window object in the underlying graphical toolkit. The create/4 method can be used to perform the second part later, while the default constructor can be used to perform the first part only. Please note that the underlying window must be created exactly once, i.e. if you use the default constructor, which doesn't do this, you must call create/4 before using the window and if you use the non-default constructor, you can not call create/4 , as the underlying window is already created. Note that it is possible and, in fact, useful, to call some methods on the object between creating the C++ object itself and calling create/4 on it, e.g. a common pattern to avoid showing the contents of a window before it is fully initialized is: Also note that it is possible to create an object of a derived type and then call create/4 on it: This is notably used by overview_xrc. The parameters of this method have exactly the same meaning as the non-default constructor parameters, please refer to them for their description. Return: true if window creation succeeded or false if it failed","ref":"wxWindow.html#create/4","title":"wxWindow.create/4","type":"function"},{"doc":"Destructor. Deletes all sub-windows, then deletes itself. Instead of using the delete operator explicitly, you should normally use 'Destroy'/1 so that wxWidgets can delete a window only when it is safe to do so, in idle time. See: Window Deletion Overview, 'Destroy'/1 , wxCloseEvent","ref":"wxWindow.html#destroy/1","title":"wxWindow.destroy/1","type":"function"},{"doc":"Destroys all children of a window. Called automatically by the destructor.","ref":"wxWindow.html#destroyChildren/1","title":"wxWindow.destroyChildren/1","type":"function"},{"doc":"Disables the window. Same as enable/2 Enable(false). Return: Returns true if the window has been disabled, false if it had been already disabled before the call to this function.","ref":"wxWindow.html#disable/1","title":"wxWindow.disable/1","type":"function"},{"doc":"Enables or disables eligibility for drop file events (OnDropFiles). Remark: Windows only until version 2.8.9, available on all platforms since 2.8.10. Cannot be used together with setDropTarget/2 on non-Windows platforms. See: setDropTarget/2","ref":"wxWindow.html#dragAcceptFiles/2","title":"wxWindow.dragAcceptFiles/2","type":"function"},{"doc":"","ref":"wxWindow.html#enable/1","title":"wxWindow.enable/1","type":"function"},{"doc":"Enable or disable the window for user input. Note that when a parent window is disabled, all of its children are disabled as well and they are re-enabled again when the parent is. A window can be created initially disabled by calling this method on it before calling create/4 to create the actual underlying window, e.g. Return: Returns true if the window has been enabled or disabled, false if nothing was done, i.e. if the window had already been in the specified state. See: isEnabled/1 , disable/1 , wxRadioBox:enable/3","ref":"wxWindow.html#enable/2","title":"wxWindow.enable/2","type":"function"},{"doc":"Finds the window or control which currently has the keyboard focus. Remark: Note that this is a static function, so it can be called without needing a wxWindow pointer. See: setFocus/1 , HasFocus() (not implemented in wx)","ref":"wxWindow.html#findFocus/0","title":"wxWindow.findFocus/0","type":"function"},{"doc":"Find a child of this window, by name. May return this if it matches itself. Notice that only real children, not top level windows using this window as parent, are searched by this function.","ref":"wxWindow.html#findWindow/2","title":"wxWindow.findWindow/2","type":"function"},{"doc":"","ref":"wxWindow.html#findWindowById/1","title":"wxWindow.findWindowById/1","type":"function"},{"doc":"Find the first window with the given id . If parent is NULL, the search will start from all top-level frames and dialog boxes; if non-NULL, the search will be limited to the given window hierarchy. The search is recursive in both cases. See: findWindow/2 Return: Window with the given id or NULL if not found.","ref":"wxWindow.html#findWindowById/2","title":"wxWindow.findWindowById/2","type":"function"},{"doc":"","ref":"wxWindow.html#findWindowByLabel/1","title":"wxWindow.findWindowByLabel/1","type":"function"},{"doc":"Find a window by its label. Depending on the type of window, the label may be a window title or panel item label. If parent is NULL, the search will start from all top-level frames and dialog boxes; if non-NULL, the search will be limited to the given window hierarchy. The search is recursive in both cases and, unlike with findWindow/2 , recurses into top level child windows too. See: findWindow/2 Return: Window with the given label or NULL if not found.","ref":"wxWindow.html#findWindowByLabel/2","title":"wxWindow.findWindowByLabel/2","type":"function"},{"doc":"","ref":"wxWindow.html#findWindowByName/1","title":"wxWindow.findWindowByName/1","type":"function"},{"doc":"Find a window by its name (as given in a window constructor or create/4 function call). If parent is NULL, the search will start from all top-level frames and dialog boxes; if non-NULL, the search will be limited to the given window hierarchy. The search is recursive in both cases and, unlike findWindow/2 , recurses into top level child windows too. If no window with such name is found, findWindowByLabel/2 is called, i.e. the name is interpreted as (internal) name first but if this fails, it's internal as (user-visible) label. As this behaviour may be confusing, it is usually better to use either the findWindow/2 overload taking the name or findWindowByLabel/2 directly. Return: Window with the given name or NULL if not found.","ref":"wxWindow.html#findWindowByName/2","title":"wxWindow.findWindowByName/2","type":"function"},{"doc":"Sizes the window to fit its best size. Using this function is equivalent to setting window size to the return value of getBestSize/1 . Note that, unlike setSizerAndFit/3 , this function only changes the current window size and doesn't change its minimal size. See: Overview windowsizing","ref":"wxWindow.html#fit/1","title":"wxWindow.fit/1","type":"function"},{"doc":"Similar to fit/1 , but sizes the interior (virtual) size of a window. Mainly useful with scrolled windows to reset scrollbars after sizing changes that do not trigger a size event, and/or scrolled windows without an interior sizer. This function similarly won't do anything if there are no subwindows.","ref":"wxWindow.html#fitInside/1","title":"wxWindow.fitInside/1","type":"function"},{"doc":"Freezes the window or, in other words, prevents any updates from taking place on screen, the window is not redrawn at all. thaw/1 must be called to re-enable window redrawing. Calls to these two functions may be nested but to ensure that the window is properly repainted again, you must thaw it exactly as many times as you froze it. If the window has any children, they are recursively frozen too. This method is useful for visual appearance optimization (for example, it is a good idea to use it before doing many large text insertions in a row into a wxTextCtrl under wxGTK) but is not implemented on all platforms nor for all controls so it is mostly just a hint to wxWidgets and not a mandatory directive. See: wxWindowUpdateLocker (not implemented in wx), thaw/1 , isFrozen/1","ref":"wxWindow.html#freeze/1","title":"wxWindow.freeze/1","type":"function"},{"doc":"Convert DPI-independent pixel values to the value in pixels appropriate for the current toolkit. A DPI-independent pixel is just a pixel at the standard 96 DPI resolution. To keep the same physical size at higher resolution, the physical pixel value must be scaled by getDPIScaleFactor/1 but this scaling may be already done by the underlying toolkit (GTK+, Cocoa, ...) automatically. This method performs the conversion only if it is not already done by the lower level toolkit and so by using it with pixel values you can guarantee that the physical size of the corresponding elements will remain the same in all resolutions under all platforms. For example, instead of creating a bitmap of the hard coded size of 32 pixels you should use to avoid using tiny bitmaps on high DPI screens. Notice that this function is only needed when using hard coded pixel values. It is not necessary if the sizes are already based on the DPI-independent units such as dialog units or if you are relying on the controls automatic best size determination and using sizers to lay out them. Also note that if either component of sz has the special value of -1, it is returned unchanged independently of the current DPI, to preserve the special value of -1 in wxWidgets API (it is often used to mean &quot;unspecified&quot;). Since: 3.1.0","ref":"wxWindow.html#fromDIP/2","title":"wxWindow.fromDIP/2","type":"function"},{"doc":"Gets the accelerator table for this window. See wxAcceleratorTable .","ref":"wxWindow.html#getAcceleratorTable/1","title":"wxWindow.getAcceleratorTable/1","type":"function"},{"doc":"Returns the background colour of the window. See: setBackgroundColour/2 , setForegroundColour/2 , getForegroundColour/1","ref":"wxWindow.html#getBackgroundColour/1","title":"wxWindow.getBackgroundColour/1","type":"function"},{"doc":"Returns the background style of the window. See: setBackgroundColour/2 , getForegroundColour/1 , setBackgroundStyle/2 , setTransparent/2","ref":"wxWindow.html#getBackgroundStyle/1","title":"wxWindow.getBackgroundStyle/1","type":"function"},{"doc":"This functions returns the best acceptable minimal size for the window. For example, for a static control, it will be the minimal size such that the control label is not truncated. For windows containing subwindows (typically wxPanel ), the size returned by this function will be the same as the size the window would have had after calling fit/1 . Override virtual DoGetBestSize() (not implemented in wx) or, better, because it's usually more convenient, DoGetBestClientSize() (not implemented in wx) when writing your own custom window class to change the value returned by this public non-virtual method. Notice that the best size respects the minimal and maximal size explicitly set for the window, if any. So even if some window believes that it needs 200 pixels horizontally, calling setMaxSize/2 with a width of 100 would ensure that getBestSize/1 returns the width of at most 100 pixels. See: cacheBestSize/2 , Overview windowsizing","ref":"wxWindow.html#getBestSize/1","title":"wxWindow.getBestSize/1","type":"function"},{"doc":"Returns the currently captured window. See: hasCapture/1 , captureMouse/1 , releaseMouse/1 , wxMouseCaptureLostEvent , wxMouseCaptureChangedEvent","ref":"wxWindow.html#getCapture/0","title":"wxWindow.getCapture/0","type":"function"},{"doc":"Returns the caret() associated with the window.","ref":"wxWindow.html#getCaret/1","title":"wxWindow.getCaret/1","type":"function"},{"doc":"Returns the character height for this window.","ref":"wxWindow.html#getCharHeight/1","title":"wxWindow.getCharHeight/1","type":"function"},{"doc":"Returns the average character width for this window.","ref":"wxWindow.html#getCharWidth/1","title":"wxWindow.getCharWidth/1","type":"function"},{"doc":"Returns a const reference to the list of the window's children. wxWindowList is a type-safe wxList-like class whose elements are of type wxWindow* .","ref":"wxWindow.html#getChildren/1","title":"wxWindow.getChildren/1","type":"function"},{"doc":"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.","ref":"wxWindow.html#getClientSize/1","title":"wxWindow.getClientSize/1","type":"function"},{"doc":"Returns the sizer of which this window is a member, if any, otherwise NULL.","ref":"wxWindow.html#getContainingSizer/1","title":"wxWindow.getContainingSizer/1","type":"function"},{"doc":"Returns the factor mapping logical pixels of this window to physical pixels. This function can be used to portably determine the number of physical pixels in a window of the given size, by multiplying the window size by the value returned from it. I.e. it returns the factor converting window coordinates to &quot;content view&quot; coordinates, where the view can be just a simple window displaying a wxBitmap or wxGLCanvas or any other kind of window rendering arbitrary &quot;content&quot; on screen. For the platforms not doing any pixel mapping, i.e. where logical and physical pixels are one and the same, this function always returns 1.0 and so using it is, in principle, unnecessary and could be avoided by using preprocessor check for wxHAVE_DPI_INDEPENDENT_PIXELS not being defined, however using this function unconditionally under all platforms is usually simpler and so preferable. Note: Current behaviour of this function is compatible with wxWidgets 3.0, but different from its behaviour in versions 3.1.0 to 3.1.3, where it returned the same value as getDPIScaleFactor/1 . Please use the other function if you need to use a scaling factor greater than 1.0 even for the platforms without wxHAVE_DPI_INDEPENDENT_PIXELS , such as wxMSW. Since: 2.9.5","ref":"wxWindow.html#getContentScaleFactor/1","title":"wxWindow.getContentScaleFactor/1","type":"function"},{"doc":"Return the cursor associated with this window. See: setCursor/2","ref":"wxWindow.html#getCursor/1","title":"wxWindow.getCursor/1","type":"function"},{"doc":"Return the DPI of the display used by this window. The returned value can be different for different windows on systems with support for per-monitor DPI values, such as Microsoft Windows 10. If the DPI is not available, returns {Width,Height} object. See: wxDisplay:getPPI/1 , wxDPIChangedEvent (not implemented in wx) Since: 3.1.3","ref":"wxWindow.html#getDPI/1","title":"wxWindow.getDPI/1","type":"function"},{"doc":"Returns the ratio of the DPI used by this window to the standard DPI. The returned value is 1 for standard DPI screens or 2 for &quot;200% scaling&quot; and, unlike for getContentScaleFactor/1 , is the same under all platforms. This factor should be used to increase the size of icons and similar windows whose best size is not based on text metrics when using DPI scaling. E.g. the program may load a 32px bitmap if the content scale factor is 1.0 or 64px version of the same bitmap if it is 2.0 or bigger. Notice that this method should not be used for window sizes expressed in pixels, as they are already scaled by this factor by the underlying toolkit under some platforms. Use fromDIP/2 for anything window-related instead. Since: 3.1.4","ref":"wxWindow.html#getDPIScaleFactor/1","title":"wxWindow.getDPIScaleFactor/1","type":"function"},{"doc":"Returns the associated drop target, which may be NULL. See: setDropTarget/2 , Overview dnd","ref":"wxWindow.html#getDropTarget/1","title":"wxWindow.getDropTarget/1","type":"function"},{"doc":"Returns the extra style bits for the window.","ref":"wxWindow.html#getExtraStyle/1","title":"wxWindow.getExtraStyle/1","type":"function"},{"doc":"Returns the font for this window. See: setFont/2","ref":"wxWindow.html#getFont/1","title":"wxWindow.getFont/1","type":"function"},{"doc":"Returns the foreground colour of the window. Remark: The meaning of foreground colour varies according to the window class; it may be the text colour or other colour, or it may not be used at all. See: setForegroundColour/2 , setBackgroundColour/2 , getBackgroundColour/1","ref":"wxWindow.html#getForegroundColour/1","title":"wxWindow.getForegroundColour/1","type":"function"},{"doc":"Returns the grandparent of a window, or NULL if there isn't one.","ref":"wxWindow.html#getGrandParent/1","title":"wxWindow.getGrandParent/1","type":"function"},{"doc":"Returns the platform-specific handle of the physical window. Cast it to an appropriate handle, such as HWND for Windows, Widget for Motif or GtkWidget for GTK.","ref":"wxWindow.html#getHandle/1","title":"wxWindow.getHandle/1","type":"function"},{"doc":"Gets the help text to be used as context-sensitive help for this window. Note that the text is actually stored by the current wxHelpProvider (not implemented in wx) implementation, and not in the window object itself. See: setHelpText/2 , GetHelpTextAtPoint() (not implemented in wx), wxHelpProvider (not implemented in wx)","ref":"wxWindow.html#getHelpText/1","title":"wxWindow.getHelpText/1","type":"function"},{"doc":"Returns the identifier of the window. Remark: Each window has an integer identifier. If the application has not provided one (or the default wxID_ANY) a unique identifier with a negative value will be generated. See: setId/2 , Overview windowids","ref":"wxWindow.html#getId/1","title":"wxWindow.getId/1","type":"function"},{"doc":"Generic way of getting a label from any window, for identification purposes. Remark: The interpretation of this function differs from class to class. For frames and dialogs, the value returned is the title. For buttons or static text controls, it is the button text. This function can be useful for meta-programs (such as testing tools or special-needs access programs) which need to identify windows by name.","ref":"wxWindow.html#getLabel/1","title":"wxWindow.getLabel/1","type":"function"},{"doc":"Returns the maximum size of the window. This is an indication to the sizer layout mechanism that this is the maximum possible size as well as the upper bound on window's size settable using setSize/6 . See: GetMaxClientSize() (not implemented in wx), Overview windowsizing","ref":"wxWindow.html#getMaxSize/1","title":"wxWindow.getMaxSize/1","type":"function"},{"doc":"Returns the minimum size of the window, an indication to the sizer layout mechanism that this is the minimum required size. This method normally just returns the value set by setMinSize/2 , but it can be overridden to do the calculation on demand. See: GetMinClientSize() (not implemented in wx), Overview windowsizing","ref":"wxWindow.html#getMinSize/1","title":"wxWindow.getMinSize/1","type":"function"},{"doc":"Returns the window's name. Remark: This name is not guaranteed to be unique; it is up to the programmer to supply an appropriate name in the window constructor or via setName/2 . See: setName/2","ref":"wxWindow.html#getName/1","title":"wxWindow.getName/1","type":"function"},{"doc":"Returns the parent of the window, or NULL if there is no parent.","ref":"wxWindow.html#getParent/1","title":"wxWindow.getParent/1","type":"function"},{"doc":"This gets the position of the window in pixels, relative to the parent window for the child windows or relative to the display origin for the top level windows. See: getScreenPosition/1","ref":"wxWindow.html#getPosition/1","title":"wxWindow.getPosition/1","type":"function"},{"doc":"Returns the position and size of the window as a {X,Y,W,H} object. See: getScreenRect/1","ref":"wxWindow.html#getRect/1","title":"wxWindow.getRect/1","type":"function"},{"doc":"Returns the window position in screen coordinates, whether the window is a child window or a top level one. See: getPosition/1","ref":"wxWindow.html#getScreenPosition/1","title":"wxWindow.getScreenPosition/1","type":"function"},{"doc":"Returns the position and size of the window on the screen as a {X,Y,W,H} object. See: getRect/1","ref":"wxWindow.html#getScreenRect/1","title":"wxWindow.getScreenRect/1","type":"function"},{"doc":"Returns the built-in scrollbar position. See: setScrollbar/6","ref":"wxWindow.html#getScrollPos/2","title":"wxWindow.getScrollPos/2","type":"function"},{"doc":"Returns the built-in scrollbar range. See: setScrollbar/6","ref":"wxWindow.html#getScrollRange/2","title":"wxWindow.getScrollRange/2","type":"function"},{"doc":"Returns the built-in scrollbar thumb size. See: setScrollbar/6","ref":"wxWindow.html#getScrollThumb/2","title":"wxWindow.getScrollThumb/2","type":"function"},{"doc":"See the GetSize(int*,int*) overload for more info.","ref":"wxWindow.html#getSize/1","title":"wxWindow.getSize/1","type":"function"},{"doc":"Returns the sizer associated with the window by a previous call to setSizer/3 , or NULL.","ref":"wxWindow.html#getSizer/1","title":"wxWindow.getSizer/1","type":"function"},{"doc":"","ref":"wxWindow.html#getTextExtent/2","title":"wxWindow.getTextExtent/2","type":"function"},{"doc":"Gets the dimensions of the string as it would be drawn on the window with the currently selected font. The text extent is returned in the w and h pointers.","ref":"wxWindow.html#getTextExtent/3","title":"wxWindow.getTextExtent/3","type":"function"},{"doc":"Returns true if the window uses the system theme for drawing its background. See: setThemeEnabled/2","ref":"wxWindow.html#getThemeEnabled/1","title":"wxWindow.getThemeEnabled/1","type":"function"},{"doc":"Get the associated tooltip or NULL if none.","ref":"wxWindow.html#getToolTip/1","title":"wxWindow.getToolTip/1","type":"function"},{"doc":"Gets the dimensions of the string as it would be drawn on the window with the currently selected font. Returns the region specifying which parts of the window have been damaged. Should only be called within an wxPaintEvent handler. See: wxRegion , wxRegionIterator (not implemented in wx)","ref":"wxWindow.html#getUpdateRegion/1","title":"wxWindow.getUpdateRegion/1","type":"function"},{"doc":"This gets the virtual size of the window in pixels. By default it returns the client size of the window, but after a call to setVirtualSize/3 it will return the size set with that method. See: Overview windowsizing","ref":"wxWindow.html#getVirtualSize/1","title":"wxWindow.getVirtualSize/1","type":"function"},{"doc":"Gets the window style that was passed to the constructor or create/4 method. GetWindowStyle() (not implemented in wx) is another name for the same function.","ref":"wxWindow.html#getWindowStyleFlag/1","title":"wxWindow.getWindowStyleFlag/1","type":"function"},{"doc":"Returns the value previously passed to setWindowVariant/2 .","ref":"wxWindow.html#getWindowVariant/1","title":"wxWindow.getWindowVariant/1","type":"function"},{"doc":"Returns true if this window has the current mouse capture. See: captureMouse/1 , releaseMouse/1 , wxMouseCaptureLostEvent , wxMouseCaptureChangedEvent","ref":"wxWindow.html#hasCapture/1","title":"wxWindow.hasCapture/1","type":"function"},{"doc":"Returns true if this window currently has a scroll bar for this orientation. This method may return false even when CanScroll() (not implemented in wx) for the same orientation returns true, but if CanScroll() (not implemented in wx) returns false, i.e. scrolling in this direction is not enabled at all, hasScrollbar/2 always returns false as well.","ref":"wxWindow.html#hasScrollbar/2","title":"wxWindow.hasScrollbar/2","type":"function"},{"doc":"Returns true if this window background is transparent (as, for example, for wxStaticText ) and should show the parent window background. This method is mostly used internally by the library itself and you normally shouldn't have to call it. You may, however, have to override it in your wxWindow-derived class to ensure that background is painted correctly.","ref":"wxWindow.html#hasTransparentBackground/1","title":"wxWindow.hasTransparentBackground/1","type":"function"},{"doc":"Equivalent to calling show/2 (false).","ref":"wxWindow.html#hide/1","title":"wxWindow.hide/1","type":"function"},{"doc":"This function is (or should be, in case of custom controls) called during window creation to intelligently set up the window visual attributes, that is the font and the foreground and background colours. By &quot;intelligently&quot; the following is meant: by default, all windows use their own GetClassDefaultAttributes() (not implemented in wx) default attributes. However if some of the parents attributes are explicitly (that is, using setFont/2 and not setOwnFont/2 ) changed and if the corresponding attribute hadn't been explicitly set for this window itself, then this window takes the same value as used by the parent. In addition, if the window overrides shouldInheritColours/1 to return false, the colours will not be changed no matter what and only the font might. This rather complicated logic is necessary in order to accommodate the different usage scenarios. The most common one is when all default attributes are used and in this case, nothing should be inherited as in modern GUIs different controls use different fonts (and colours) than their siblings so they can't inherit the same value from the parent. However it was also deemed desirable to allow to simply change the attributes of all children at once by just changing the font or colour of their common parent, hence in this case we do inherit the parents attributes.","ref":"wxWindow.html#inheritAttributes/1","title":"wxWindow.inheritAttributes/1","type":"function"},{"doc":"Sends an wxEVT_INIT_DIALOG event, whose handler usually transfers data to the dialog via validators.","ref":"wxWindow.html#initDialog/1","title":"wxWindow.initDialog/1","type":"function"},{"doc":"Resets the cached best size value so it will be recalculated the next time it is needed. See: cacheBestSize/2","ref":"wxWindow.html#invalidateBestSize/1","title":"wxWindow.invalidateBestSize/1","type":"function"},{"doc":"Returns true if the window contents is double-buffered by the system, i.e. if any drawing done on the window is really done on a temporary backing surface and transferred to the screen all at once later. See: wxBufferedDC","ref":"wxWindow.html#isDoubleBuffered/1","title":"wxWindow.isDoubleBuffered/1","type":"function"},{"doc":"Returns true if the window is enabled, i.e. if it accepts user input, false otherwise. Notice that this method can return false even if this window itself hadn't been explicitly disabled when one of its parent windows is disabled. To get the intrinsic status of this window, use IsThisEnabled() (not implemented in wx) See: enable/2","ref":"wxWindow.html#isEnabled/1","title":"wxWindow.isEnabled/1","type":"function"},{"doc":"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.","ref":"wxWindow.html#isExposed/2","title":"wxWindow.isExposed/2","type":"function"},{"doc":"Returns true if the given point or rectangle area has been exposed since the last repaint. Call this in an paint event handler to optimize redrawing by only redrawing those areas, which have been exposed.","ref":"wxWindow.html#isExposed/3","title":"wxWindow.isExposed/3","type":"function"},{"doc":"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.","ref":"wxWindow.html#isExposed/5","title":"wxWindow.isExposed/5","type":"function"},{"doc":"Returns true if the window is currently frozen by a call to freeze/1 . See: freeze/1 , thaw/1","ref":"wxWindow.html#isFrozen/1","title":"wxWindow.isFrozen/1","type":"function"},{"doc":"Returns true if the window is retained, false otherwise. Remark: Retained windows are only available on X platforms.","ref":"wxWindow.html#isRetained/1","title":"wxWindow.isRetained/1","type":"function"},{"doc":"Returns true if the window is shown, false if it has been hidden. See: isShownOnScreen/1","ref":"wxWindow.html#isShown/1","title":"wxWindow.isShown/1","type":"function"},{"doc":"Returns true if the window is physically visible on the screen, i.e. it is shown and all its parents up to the toplevel window are shown as well. See: isShown/1","ref":"wxWindow.html#isShownOnScreen/1","title":"wxWindow.isShownOnScreen/1","type":"function"},{"doc":"Returns true if the given window is a top-level one. Currently all frames and dialogs are considered to be top-level windows (even if they have a parent window).","ref":"wxWindow.html#isTopLevel/1","title":"wxWindow.isTopLevel/1","type":"function"},{"doc":"Lays out the children of this window using the associated sizer. If a sizer hadn't been associated with this window (see setSizer/3 ), this function doesn't do anything, unless this is a top level window (see layout/1 ). Note that this method is called automatically when the window size changes if it has the associated sizer (or if setAutoLayout/2 with true argument had been explicitly called), ensuring that it is always laid out correctly. See: Overview windowsizing Return: Always returns true, the return value is not useful.","ref":"wxWindow.html#layout/1","title":"wxWindow.layout/1","type":"function"},{"doc":"Same as scrollLines/2 (1).","ref":"wxWindow.html#lineDown/1","title":"wxWindow.lineDown/1","type":"function"},{"doc":"Same as scrollLines/2 (-1).","ref":"wxWindow.html#lineUp/1","title":"wxWindow.lineUp/1","type":"function"},{"doc":"Lowers the window to the bottom of the window hierarchy (Z-order). Remark: This function only works for wxTopLevelWindow-derived classes. See: raise/1","ref":"wxWindow.html#lower/1","title":"wxWindow.lower/1","type":"function"},{"doc":"","ref":"wxWindow.html#move/2","title":"wxWindow.move/2","type":"function"},{"doc":"Moves the window to the given position. Remark: Implementations of setSize/6 can also implicitly implement the move/4 function, which is defined in the base wxWindow class as the call: See: setSize/6","ref":"wxWindow.html#move/3","title":"wxWindow.move/3","type":"function"},{"doc":"Moves the window to the given position. Remark: Implementations of SetSize can also implicitly implement the move/4 function, which is defined in the base wxWindow class as the call: See: setSize/6","ref":"wxWindow.html#move/4","title":"wxWindow.move/4","type":"function"},{"doc":"Moves this window in the tab navigation order after the specified win . This means that when the user presses TAB key on that other window, the focus switches to this window. Default tab order is the same as creation order, this function and moveBeforeInTabOrder/2 allow to change it after creating all the windows.","ref":"wxWindow.html#moveAfterInTabOrder/2","title":"wxWindow.moveAfterInTabOrder/2","type":"function"},{"doc":"Same as moveAfterInTabOrder/2 except that it inserts this window just before win instead of putting it right after it.","ref":"wxWindow.html#moveBeforeInTabOrder/2","title":"wxWindow.moveBeforeInTabOrder/2","type":"function"},{"doc":"","ref":"wxWindow.html#navigate/1","title":"wxWindow.navigate/1","type":"function"},{"doc":"Performs a keyboard navigation action starting from this window. This method is equivalent to calling NavigateIn() (not implemented in wx) method on the parent window. Return: Returns true if the focus was moved to another window or false if nothing changed. Remark: You may wish to call this from a text control custom keypress handler to do the default navigation behaviour for the tab key, since the standard default behaviour for a multiline text control with the wxTE_PROCESS_TAB style is to insert a tab and not navigate to the next control. See also wxNavigationKeyEvent and HandleAsNavigationKey.","ref":"wxWindow.html#navigate/2","title":"wxWindow.navigate/2","type":"function"},{"doc":"Default constructor.","ref":"wxWindow.html#new/0","title":"wxWindow.new/0","type":"function"},{"doc":"","ref":"wxWindow.html#new/2","title":"wxWindow.new/2","type":"function"},{"doc":"Constructs a window, which can be a child of a frame, dialog or any other non-control window.","ref":"wxWindow.html#new/3","title":"wxWindow.new/3","type":"function"},{"doc":"Same as scrollPages/2 (1).","ref":"wxWindow.html#pageDown/1","title":"wxWindow.pageDown/1","type":"function"},{"doc":"Same as scrollPages/2 (-1).","ref":"wxWindow.html#pageUp/1","title":"wxWindow.pageUp/1","type":"function"},{"doc":"","ref":"wxWindow.html#popupMenu/2","title":"wxWindow.popupMenu/2","type":"function"},{"doc":"Pops up the given menu at the specified coordinates, relative to this window, and returns control when the user has dismissed the menu. If a menu item is selected, the corresponding menu event is generated and will be processed as usual. If coordinates are not specified, the current mouse cursor position is used. menu is the menu to pop up. The position where the menu will appear can be specified either as a {X,Y} pos or by two integers ( x and y ). Note that this function switches focus to this window before showing the menu. Remark: Just before the menu is popped up, wxMenu::UpdateUI (not implemented in wx) is called to ensure that the menu items are in the correct state. The menu does not get deleted by the window. It is recommended to not explicitly specify coordinates when calling PopupMenu in response to mouse click, because some of the ports (namely, wxGTK) can do a better job of positioning the menu in that case. See: wxMenu","ref":"wxWindow.html#popupMenu/3","title":"wxWindow.popupMenu/3","type":"function"},{"doc":"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.","ref":"wxWindow.html#popupMenu/4","title":"wxWindow.popupMenu/4","type":"function"},{"doc":"Raises the window to the top of the window hierarchy (Z-order). Notice that this function only requests the window manager to raise this window to the top of Z-order. Depending on its configuration, the window manager may raise the window, not do it at all or indicate that a window requested to be raised in some other way, e.g. by flashing its icon if it is minimized. Remark: This function only works for wxTopLevelWindow-derived classes. See: lower/1","ref":"wxWindow.html#raise/1","title":"wxWindow.raise/1","type":"function"},{"doc":"","ref":"wxWindow.html#refresh/1","title":"wxWindow.refresh/1","type":"function"},{"doc":"Causes this window, and all of its children recursively (except under wxGTK1 where this is not implemented), to be repainted. Note that repainting doesn't happen immediately but only during the next event loop iteration, if you need to update the window immediately you should use update/1 instead. See: refreshRect/3","ref":"wxWindow.html#refresh/2","title":"wxWindow.refresh/2","type":"function"},{"doc":"","ref":"wxWindow.html#refreshRect/2","title":"wxWindow.refreshRect/2","type":"function"},{"doc":"Redraws the contents of the given rectangle: only the area inside it will be repainted. This is the same as refresh/2 but has a nicer syntax as it can be called with a temporary {X,Y,W,H} object as argument like this RefreshRect(wxRect(x, y, w, h)) .","ref":"wxWindow.html#refreshRect/3","title":"wxWindow.refreshRect/3","type":"function"},{"doc":"Releases mouse input captured with captureMouse/1 . See: captureMouse/1 , hasCapture/1 , releaseMouse/1 , wxMouseCaptureLostEvent , wxMouseCaptureChangedEvent","ref":"wxWindow.html#releaseMouse/1","title":"wxWindow.releaseMouse/1","type":"function"},{"doc":"Removes a child window. This is called automatically by window deletion functions so should not be required by the application programmer. Notice that this function is mostly internal to wxWidgets and shouldn't be called by the user code.","ref":"wxWindow.html#removeChild/2","title":"wxWindow.removeChild/2","type":"function"},{"doc":"Reparents the window, i.e. the window will be removed from its current parent window (e.g. a non-standard toolbar in a wxFrame ) and then re-inserted into another. Notice that currently you need to explicitly call wxBookCtrlBase:removePage/2 before reparenting a notebook page.","ref":"wxWindow.html#reparent/2","title":"wxWindow.reparent/2","type":"function"},{"doc":"Converts from screen to client window coordinates.","ref":"wxWindow.html#screenToClient/1","title":"wxWindow.screenToClient/1","type":"function"},{"doc":"Converts from screen to client window coordinates.","ref":"wxWindow.html#screenToClient/2","title":"wxWindow.screenToClient/2","type":"function"},{"doc":"Scrolls the window by the given number of lines down (if lines is positive) or up. Return: Returns true if the window was scrolled, false if it was already on top/bottom and nothing was done. Remark: This function is currently only implemented under MSW and wxTextCtrl under wxGTK (it also works for wxScrolled (not implemented in wx) classes under all platforms). See: scrollPages/2","ref":"wxWindow.html#scrollLines/2","title":"wxWindow.scrollLines/2","type":"function"},{"doc":"Scrolls the window by the given number of pages down (if pages is positive) or up. Return: Returns true if the window was scrolled, false if it was already on top/bottom and nothing was done. Remark: This function is currently only implemented under MSW and wxGTK. See: scrollLines/2","ref":"wxWindow.html#scrollPages/2","title":"wxWindow.scrollPages/2","type":"function"},{"doc":"","ref":"wxWindow.html#scrollWindow/3","title":"wxWindow.scrollWindow/3","type":"function"},{"doc":"Physically scrolls the pixels in the window and move child windows accordingly. Remark: Note that you can often use wxScrolled (not implemented in wx) instead of using this function directly.","ref":"wxWindow.html#scrollWindow/4","title":"wxWindow.scrollWindow/4","type":"function"},{"doc":"Sets the accelerator table for this window. See wxAcceleratorTable .","ref":"wxWindow.html#setAcceleratorTable/2","title":"wxWindow.setAcceleratorTable/2","type":"function"},{"doc":"Determines whether the layout/1 function will be called automatically when the window is resized. This method is called implicitly by setSizer/3 but if you use SetConstraints() (not implemented in wx) you should call it manually or otherwise the window layout won't be correctly updated when its size changes. See: setSizer/3 , SetConstraints() (not implemented in wx)","ref":"wxWindow.html#setAutoLayout/2","title":"wxWindow.setAutoLayout/2","type":"function"},{"doc":"Sets the background colour of the window. Notice that as with setForegroundColour/2 , setting the background colour of a native control may not affect the entire control and could be not supported at all depending on the control and platform. Please see inheritAttributes/1 for explanation of the difference between this method and setOwnBackgroundColour/2 . Remark: The background colour is usually painted by the default wxEraseEvent event handler function under Windows and automatically under GTK. Note that setting the background colour does not cause an immediate refresh, so you may wish to call clearBackground/1 or refresh/2 after calling this function. Using this function will disable attempts to use themes for this window, if the system supports them. Use with care since usually the themes represent the appearance chosen by the user to be used for all applications on the system. Return: true if the colour was really changed, false if it was already set to this colour and nothing was done. See: getBackgroundColour/1 , setForegroundColour/2 , getForegroundColour/1 , clearBackground/1 , refresh/2 , wxEraseEvent , wxSystemSettings","ref":"wxWindow.html#setBackgroundColour/2","title":"wxWindow.setBackgroundColour/2","type":"function"},{"doc":"Sets the background style of the window. The default background style is wxBG_STYLE_ERASE which indicates that the window background may be erased in EVT_ERASE_BACKGROUND handler. This is a safe, compatibility default; however you may want to change it to wxBG_STYLE_SYSTEM if you don't define any erase background event handlers at all, to avoid unnecessary generation of erase background events and always let system erase the background. And you should change the background style to wxBG_STYLE_PAINT if you define an EVT_PAINT handler which completely overwrites the window background as in this case erasing it previously, either in EVT_ERASE_BACKGROUND handler or in the system default handler, would result in flicker as the background pixels will be repainted twice every time the window is redrawn. Do ensure that the background is entirely erased by your EVT_PAINT handler in this case however as otherwise garbage may be left on screen. Notice that in previous versions of wxWidgets a common way to work around the above mentioned flickering problem was to define an empty EVT_ERASE_BACKGROUND handler. Setting background style to wxBG_STYLE_PAINT is a simpler and more efficient solution to the same problem. Under wxGTK and wxOSX, you can use ?wxBG_STYLE_TRANSPARENT to obtain full transparency of the window background. Note that wxGTK supports this only since GTK 2.12 with a compositing manager enabled, call IsTransparentBackgroundSupported() (not implemented in wx) to check whether this is the case. Also, in order for SetBackgroundStyle(wxBG_STYLE_TRANSPARENT) to work, it must be called before create/4 . If you're using your own wxWindow-derived class you should write your code in the following way: See: setBackgroundColour/2 , getForegroundColour/1 , setTransparent/2 , IsTransparentBackgroundSupported() (not implemented in wx)","ref":"wxWindow.html#setBackgroundStyle/2","title":"wxWindow.setBackgroundStyle/2","type":"function"},{"doc":"Sets the caret() associated with the window.","ref":"wxWindow.html#setCaret/2","title":"wxWindow.setCaret/2","type":"function"},{"doc":"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.","ref":"wxWindow.html#setClientSize/2","title":"wxWindow.setClientSize/2","type":"function"},{"doc":"This sets the size of the window client area in pixels. Using this function to size a window tends to be more device-independent than setSize/6 , since the application need not worry about what dimensions the border or title bar have when trying to fit the window around panel items, for example. See: Overview windowsizing","ref":"wxWindow.html#setClientSize/3","title":"wxWindow.setClientSize/3","type":"function"},{"doc":"Used by wxSizer internally to notify the window about being managed by the given sizer. This method should not be called from outside the library, unless you're implementing a custom sizer class - and in the latter case you must call this method with the pointer to the sizer itself whenever a window is added to it and with NULL argument when the window is removed from it.","ref":"wxWindow.html#setContainingSizer/2","title":"wxWindow.setContainingSizer/2","type":"function"},{"doc":"Sets the window's cursor. Notice that the window cursor also sets it for the children of the window implicitly. The cursor may be wxNullCursor in which case the window cursor will be reset back to default. See: wx_misc:setCursor/1 , wxCursor","ref":"wxWindow.html#setCursor/2","title":"wxWindow.setCursor/2","type":"function"},{"doc":"Turn on or off double buffering of the window if the system supports it.","ref":"wxWindow.html#setDoubleBuffered/2","title":"wxWindow.setDoubleBuffered/2","type":"function"},{"doc":"Associates a drop target with this window. If the window already has a drop target, it is deleted. See: getDropTarget/1 , Overview dnd","ref":"wxWindow.html#setDropTarget/2","title":"wxWindow.setDropTarget/2","type":"function"},{"doc":"Sets the extra style bits for the window. The currently defined extra style bits are reported in the class description.","ref":"wxWindow.html#setExtraStyle/2","title":"wxWindow.setExtraStyle/2","type":"function"},{"doc":"This sets the window to receive keyboard input. See: HasFocus() (not implemented in wx), wxFocusEvent , setFocus/1 , wxPanel:setFocusIgnoringChildren/1","ref":"wxWindow.html#setFocus/1","title":"wxWindow.setFocus/1","type":"function"},{"doc":"This function is called by wxWidgets keyboard navigation code when the user gives the focus to this window from keyboard (e.g. using TAB key). By default this method simply calls setFocus/1 but can be overridden to do something in addition to this in the derived classes.","ref":"wxWindow.html#setFocusFromKbd/1","title":"wxWindow.setFocusFromKbd/1","type":"function"},{"doc":"Sets the font for this window. This function should not be called for the parent window if you don't want its font to be inherited by its children, use setOwnFont/2 instead in this case and see inheritAttributes/1 for more explanations. Please notice that the given font is not automatically used for wxPaintDC objects associated with this window, you need to call wxDC:setFont/2 too. However this font is used by any standard controls for drawing their text as well as by getTextExtent/3 . Return: true if the font was really changed, false if it was already set to this font and nothing was done. See: getFont/1 , inheritAttributes/1","ref":"wxWindow.html#setFont/2","title":"wxWindow.setFont/2","type":"function"},{"doc":"Sets the foreground colour of the window. The meaning of foreground colour varies according to the window class; it may be the text colour or other colour, or it may not be used at all. Additionally, not all native controls support changing their foreground colour so this method may change their colour only partially or even not at all. Please see inheritAttributes/1 for explanation of the difference between this method and setOwnForegroundColour/2 . Return: true if the colour was really changed, false if it was already set to this colour and nothing was done. See: getForegroundColour/1 , setBackgroundColour/2 , getBackgroundColour/1 , shouldInheritColours/1","ref":"wxWindow.html#setForegroundColour/2","title":"wxWindow.setForegroundColour/2","type":"function"},{"doc":"Sets the help text to be used as context-sensitive help for this window. Note that the text is actually stored by the current wxHelpProvider (not implemented in wx) implementation, and not in the window object itself. See: getHelpText/1 , wxHelpProvider::AddHelp() (not implemented in wx)","ref":"wxWindow.html#setHelpText/2","title":"wxWindow.setHelpText/2","type":"function"},{"doc":"Sets the identifier of the window. Remark: Each window has an integer identifier. If the application has not provided one, an identifier will be generated. Normally, the identifier should be provided on creation and should not be modified subsequently. See: getId/1 , Overview windowids","ref":"wxWindow.html#setId/2","title":"wxWindow.setId/2","type":"function"},{"doc":"Sets the window's label. See: getLabel/1","ref":"wxWindow.html#setLabel/2","title":"wxWindow.setLabel/2","type":"function"},{"doc":"Sets the maximum size of the window, to indicate to the sizer layout mechanism that this is the maximum possible size. See: SetMaxClientSize() (not implemented in wx), Overview windowsizing","ref":"wxWindow.html#setMaxSize/2","title":"wxWindow.setMaxSize/2","type":"function"},{"doc":"Sets the minimum size of the window, to indicate to the sizer layout mechanism that this is the minimum required size. You may need to call this if you change the window size after construction and before adding to its parent sizer. Notice that calling this method doesn't prevent the program from making the window explicitly smaller than the specified size by calling setSize/6 , it just ensures that it won't become smaller than this size during the automatic layout. See: SetMinClientSize() (not implemented in wx), Overview windowsizing","ref":"wxWindow.html#setMinSize/2","title":"wxWindow.setMinSize/2","type":"function"},{"doc":"Sets the window's name. See: getName/1","ref":"wxWindow.html#setName/2","title":"wxWindow.setName/2","type":"function"},{"doc":"Sets the background colour of the window but prevents it from being inherited by the children of this window. See: setBackgroundColour/2 , inheritAttributes/1","ref":"wxWindow.html#setOwnBackgroundColour/2","title":"wxWindow.setOwnBackgroundColour/2","type":"function"},{"doc":"Sets the font of the window but prevents it from being inherited by the children of this window. See: setFont/2 , inheritAttributes/1","ref":"wxWindow.html#setOwnFont/2","title":"wxWindow.setOwnFont/2","type":"function"},{"doc":"Sets the foreground colour of the window but prevents it from being inherited by the children of this window. See: setForegroundColour/2 , inheritAttributes/1","ref":"wxWindow.html#setOwnForegroundColour/2","title":"wxWindow.setOwnForegroundColour/2","type":"function"},{"doc":"Deprecated: use wxDC:setPalette/2 instead.","ref":"wxWindow.html#setPalette/2","title":"wxWindow.setPalette/2","type":"function"},{"doc":"","ref":"wxWindow.html#setScrollPos/3","title":"wxWindow.setScrollPos/3","type":"function"},{"doc":"Sets the position of one of the built-in scrollbars. Remark: This function does not directly affect the contents of the window: it is up to the application to take note of scrollbar attributes and redraw contents accordingly. See: setScrollbar/6 , getScrollPos/2 , getScrollThumb/2 , wxScrollBar , wxScrolled (not implemented in wx)","ref":"wxWindow.html#setScrollPos/4","title":"wxWindow.setScrollPos/4","type":"function"},{"doc":"","ref":"wxWindow.html#setScrollbar/5","title":"wxWindow.setScrollbar/5","type":"function"},{"doc":"Sets the scrollbar properties of a built-in scrollbar. Remark: Let's say you wish to display 50 lines of text, using the same font. The window is sized so that you can only see 16 lines at a time. You would use: Note that with the window at this size, the thumb position can never go above 50 minus 16, or 34. You can determine how many lines are currently visible by dividing the current view size by the character height in pixels. When defining your own scrollbar behaviour, you will always need to recalculate the scrollbar settings when the window size changes. You could therefore put your scrollbar calculations and SetScrollbar call into a function named AdjustScrollbars, which can be called initially and also from your wxSizeEvent handler function. See: Overview scrolling , wxScrollBar , wxScrolled (not implemented in wx), wxScrollWinEvent","ref":"wxWindow.html#setScrollbar/6","title":"wxWindow.setScrollbar/6","type":"function"},{"doc":"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.","ref":"wxWindow.html#setSize/2","title":"wxWindow.setSize/2","type":"function"},{"doc":"Sets the size of the window in pixels. The size is specified using a {X,Y,W,H}, {Width,Height} or by a couple of int objects. Remark: This form must be used with non-default width and height values. See: move/4 , Overview windowsizing","ref":"wxWindow.html#setSize/3","title":"wxWindow.setSize/3","type":"function"},{"doc":"","ref":"wxWindow.html#setSize/5","title":"wxWindow.setSize/5","type":"function"},{"doc":"Sets the size of the window in pixels. Remark: This overload sets the position and optionally size, of the window. Parameters may be wxDefaultCoord to indicate either that a default should be supplied by wxWidgets, or that the current value of the dimension should be used. See: move/4 , Overview windowsizing","ref":"wxWindow.html#setSize/6","title":"wxWindow.setSize/6","type":"function"},{"doc":"","ref":"wxWindow.html#setSizeHints/2","title":"wxWindow.setSizeHints/2","type":"function"},{"doc":"Use of this function for windows which are not toplevel windows (such as wxDialog or wxFrame ) is discouraged. Please use setMinSize/2 and setMaxSize/2 instead. See: setSizeHints/4 , Overview windowsizing","ref":"wxWindow.html#setSizeHints/3","title":"wxWindow.setSizeHints/3","type":"function"},{"doc":"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.","ref":"wxWindow.html#setSizeHints/4","title":"wxWindow.setSizeHints/4","type":"function"},{"doc":"","ref":"wxWindow.html#setSizer/2","title":"wxWindow.setSizer/2","type":"function"},{"doc":"Sets the window to have the given layout sizer. The window will then own the object, and will take care of its deletion. If an existing layout constraints object is already owned by the window, it will be deleted if the deleteOld parameter is true. Note that this function will also call setAutoLayout/2 implicitly with true parameter if the sizer is non-NULL and false otherwise so that the sizer will be effectively used to layout the window children whenever it is resized. Remark: SetSizer enables and disables Layout automatically.","ref":"wxWindow.html#setSizer/3","title":"wxWindow.setSizer/3","type":"function"},{"doc":"","ref":"wxWindow.html#setSizerAndFit/2","title":"wxWindow.setSizerAndFit/2","type":"function"},{"doc":"Associate the sizer with the window and set the window size and minimal size accordingly. This method calls setSizer/3 and then wxSizer:setSizeHints/2 which sets the initial window size to the size needed to accommodate all sizer elements and sets the minimal size to the same size, this preventing the user from resizing this window to be less than this minimal size (if it's a top-level window which can be directly resized by the user).","ref":"wxWindow.html#setSizerAndFit/3","title":"wxWindow.setSizerAndFit/3","type":"function"},{"doc":"This function tells a window if it should use the system's &quot;theme&quot; code to draw the windows' background instead of its own background drawing code. This does not always have any effect since the underlying platform obviously needs to support the notion of themes in user defined windows. One such platform is GTK+ where windows can have (very colourful) backgrounds defined by a user's selected theme. Dialogs, notebook pages and the status bar have this flag set to true by default so that the default look and feel is simulated best. See: getThemeEnabled/1","ref":"wxWindow.html#setThemeEnabled/2","title":"wxWindow.setThemeEnabled/2","type":"function"},{"doc":"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.","ref":"wxWindow.html#setToolTip/2","title":"wxWindow.setToolTip/2","type":"function"},{"doc":"Set the transparency of the window. If the system supports transparent windows, returns true, otherwise returns false and the window remains fully opaque. See also canSetTransparent/1 . The parameter alpha is in the range 0..255 where 0 corresponds to a fully transparent window and 255 to the fully opaque one. The constants wxIMAGE_ALPHA_TRANSPARENT and wxIMAGE_ALPHA_OPAQUE can be used.","ref":"wxWindow.html#setTransparent/2","title":"wxWindow.setTransparent/2","type":"function"},{"doc":"This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.","ref":"wxWindow.html#setVirtualSize/2","title":"wxWindow.setVirtualSize/2","type":"function"},{"doc":"Sets the virtual size of the window in pixels. See: Overview windowsizing","ref":"wxWindow.html#setVirtualSize/3","title":"wxWindow.setVirtualSize/3","type":"function"},{"doc":"See setWindowStyleFlag/2 for more info.","ref":"wxWindow.html#setWindowStyle/2","title":"wxWindow.setWindowStyle/2","type":"function"},{"doc":"Sets the style of the window. Please note that some styles cannot be changed after the window creation and that refresh/2 might need to be called after changing the others for the change to take place immediately. See Window styles for more information about flags. See: getWindowStyleFlag/1","ref":"wxWindow.html#setWindowStyleFlag/2","title":"wxWindow.setWindowStyleFlag/2","type":"function"},{"doc":"Chooses a different variant of the window display to use. Window variants currently just differ in size, as can be seen from ?wxWindowVariant documentation. Under all platforms but macOS, this function does nothing more than change the font used by the window. However under macOS it is implemented natively and selects the appropriate variant of the native widget, which has better appearance than just scaled down or up version of the normal variant, so it should be preferred to directly tweaking the font size. By default the controls naturally use the normal variant.","ref":"wxWindow.html#setWindowVariant/2","title":"wxWindow.setWindowVariant/2","type":"function"},{"doc":"Return true from here to allow the colours of this window to be changed by inheritAttributes/1 . Returning false forbids inheriting them from the parent window. The base class version returns false, but this method is overridden in wxControl where it returns true.","ref":"wxWindow.html#shouldInheritColours/1","title":"wxWindow.shouldInheritColours/1","type":"function"},{"doc":"","ref":"wxWindow.html#show/1","title":"wxWindow.show/1","type":"function"},{"doc":"Shows or hides the window. You may need to call raise/1 for a top level window if you want to bring it to top, although this is not needed if show/2 is called immediately after the frame creation. Notice that the default state of newly created top level windows is hidden (to allow you to create their contents without flicker) unlike for all the other, not derived from wxTopLevelWindow , windows that are by default created in the shown state. Return: true if the window has been shown or hidden or false if nothing was done because it already was in the requested state. See: isShown/1 , hide/1 , wxRadioBox:show/3 , wxShowEvent","ref":"wxWindow.html#show/2","title":"wxWindow.show/2","type":"function"},{"doc":"Re-enables window updating after a previous call to freeze/1 . To really thaw the control, it must be called exactly the same number of times as freeze/1 . If the window has any children, they are recursively thawed too. See: wxWindowUpdateLocker (not implemented in wx), freeze/1 , isFrozen/1","ref":"wxWindow.html#thaw/1","title":"wxWindow.thaw/1","type":"function"},{"doc":"Convert pixel values of the current toolkit to DPI-independent pixel values. A DPI-independent pixel is just a pixel at the standard 96 DPI resolution. To keep the same physical size at higher resolution, the physical pixel value must be scaled by getDPIScaleFactor/1 but this scaling may be already done by the underlying toolkit (GTK+, Cocoa, ...) automatically. This method performs the conversion only if it is not already done by the lower level toolkit, For example, you may want to use this to store window sizes and positions so that they can be re-used regardless of the display DPI: Also note that if either component of sz has the special value of -1, it is returned unchanged independently of the current DPI, to preserve the special value of -1 in wxWidgets API (it is often used to mean &quot;unspecified&quot;). Since: 3.1.0","ref":"wxWindow.html#toDIP/2","title":"wxWindow.toDIP/2","type":"function"},{"doc":"Transfers values from child controls to data areas specified by their validators. Returns false if a transfer failed. Notice that this also calls transferDataFromWindow/1 for all children recursively. See: transferDataToWindow/1 , wxValidator (not implemented in wx), validate/1","ref":"wxWindow.html#transferDataFromWindow/1","title":"wxWindow.transferDataFromWindow/1","type":"function"},{"doc":"Transfers values to child controls from data areas specified by their validators. Notice that this also calls transferDataToWindow/1 for all children recursively. Return: Returns false if a transfer failed. See: transferDataFromWindow/1 , wxValidator (not implemented in wx), validate/1","ref":"wxWindow.html#transferDataToWindow/1","title":"wxWindow.transferDataToWindow/1","type":"function"},{"doc":"Calling this method immediately repaints the invalidated area of the window and all of its children recursively (this normally only happens when the flow of control returns to the event loop). Notice that this function doesn't invalidate any area of the window so nothing happens if nothing has been invalidated (i.e. marked as requiring a redraw). Use refresh/2 first if you want to immediately redraw the window unconditionally.","ref":"wxWindow.html#update/1","title":"wxWindow.update/1","type":"function"},{"doc":"","ref":"wxWindow.html#updateWindowUI/1","title":"wxWindow.updateWindowUI/1","type":"function"},{"doc":"This function sends one or more wxUpdateUIEvent to the window. The particular implementation depends on the window; for example a wxToolBar will send an update UI event for each toolbar button, and a wxFrame will send an update UI event for each menubar menu item. You can call this function from your application to ensure that your UI is up-to-date at this point (as far as your wxUpdateUIEvent handlers are concerned). This may be necessary if you have called wxUpdateUIEvent:setMode/1 or wxUpdateUIEvent:setUpdateInterval/1 to limit the overhead that wxWidgets incurs by sending update UI events in idle time. flags should be a bitlist of one or more of the ?wxUpdateUI enumeration. If you are calling this function from an OnInternalIdle or OnIdle function, make sure you pass the wxUPDATE_UI_FROMIDLE flag, since this tells the window to only update the UI elements that need to be updated in idle time. Some windows update their elements only when necessary, for example when a menu is about to be shown. The following is an example of how to call UpdateWindowUI from an idle function. See: wxUpdateUIEvent , DoUpdateWindowUI() (not implemented in wx), OnInternalIdle() (not implemented in wx)","ref":"wxWindow.html#updateWindowUI/2","title":"wxWindow.updateWindowUI/2","type":"function"},{"doc":"Validates the current values of the child controls using their validators. Notice that this also calls validate/1 for all children recursively. Return: Returns false if any of the validations failed. See: transferDataFromWindow/1 , transferDataToWindow/1 , wxValidator (not implemented in wx)","ref":"wxWindow.html#validate/1","title":"wxWindow.validate/1","type":"function"},{"doc":"Moves the pointer to the given position on the window. Note: Apple Human Interface Guidelines forbid moving the mouse cursor programmatically so you should avoid using this function in Mac applications (and probably avoid using it under the other platforms without good reason as well).","ref":"wxWindow.html#warpPointer/3","title":"wxWindow.warpPointer/3","type":"function"},{"doc":"","ref":"wxWindow.html#t:wxWindow/0","title":"wxWindow.wxWindow/0","type":"type"},{"doc":"This event is sent just after the actual window associated with a wxWindow object has been created. Since it is derived from wxCommandEvent , the event propagates up the window hierarchy. See: Overview events , wxWindowDestroyEvent This class is derived (and can use functions) from: wxCommandEvent wxEvent wxWidgets docs: wxWindowCreateEvent Events Use wxEvtHandler:connect/3 with wxWindowCreateEventType to subscribe to events of this type.","ref":"wxWindowCreateEvent.html","title":"wxWindowCreateEvent","type":"module"},{"doc":"","ref":"wxWindowCreateEvent.html#t:wxWindowCreate/0","title":"wxWindowCreateEvent.wxWindowCreate/0","type":"type"},{"doc":"","ref":"wxWindowCreateEvent.html#t:wxWindowCreateEvent/0","title":"wxWindowCreateEvent.wxWindowCreateEvent/0","type":"type"},{"doc":"","ref":"wxWindowCreateEvent.html#t:wxWindowCreateEventType/0","title":"wxWindowCreateEvent.wxWindowCreateEventType/0","type":"type"},{"doc":"A wxWindowDC must be constructed if an application wishes to paint on the whole area of a window (client and decorations). This should normally be constructed as a temporary stack object; don't store a wxWindowDC object. To draw on a window from inside an EVT_PAINT() handler, construct a wxPaintDC object instead. To draw on the client area of a window from outside an EVT_PAINT() handler, construct a wxClientDC object. A wxWindowDC object is initialized to use the same font and colours as the window it is associated with. See: wxDC , wxMemoryDC , wxPaintDC , wxClientDC , wxScreenDC This class is derived (and can use functions) from: wxDC wxWidgets docs: wxWindowDC","ref":"wxWindowDC.html","title":"wxWindowDC","type":"module"},{"doc":"Destroys the object.","ref":"wxWindowDC.html#destroy/1","title":"wxWindowDC.destroy/1","type":"function"},{"doc":"Constructor. Pass a pointer to the window on which you wish to paint.","ref":"wxWindowDC.html#new/1","title":"wxWindowDC.new/1","type":"function"},{"doc":"","ref":"wxWindowDC.html#t:wxWindowDC/0","title":"wxWindowDC.wxWindowDC/0","type":"type"},{"doc":"This event is sent as early as possible during the window destruction process. For the top level windows, as early as possible means that this is done by wxFrame or wxDialog destructor, i.e. after the destructor of the derived class was executed and so any methods specific to the derived class can't be called any more from this event handler. If you need to do this, you must call wxWindow::SendDestroyEvent() (not implemented in wx) from your derived class destructor. For the child windows, this event is generated just before deleting the window from wxWindow:'Destroy'/1 (which is also called when the parent window is deleted) or from the window destructor if operator delete was used directly (which is not recommended for this very reason). It is usually pointless to handle this event in the window itself but it ca be very useful to receive notifications about the window destruction in the parent window or in any other object interested in this window. See: Overview events , wxWindowCreateEvent This class is derived (and can use functions) from: wxCommandEvent wxEvent wxWidgets docs: wxWindowDestroyEvent","ref":"wxWindowDestroyEvent.html","title":"wxWindowDestroyEvent","type":"module"},{"doc":"","ref":"wxWindowDestroyEvent.html#t:wxWindowDestroy/0","title":"wxWindowDestroyEvent.wxWindowDestroy/0","type":"type"},{"doc":"","ref":"wxWindowDestroyEvent.html#t:wxWindowDestroyEvent/0","title":"wxWindowDestroyEvent.wxWindowDestroyEvent/0","type":"type"},{"doc":"","ref":"wxWindowDestroyEvent.html#t:wxWindowDestroyEventType/0","title":"wxWindowDestroyEvent.wxWindowDestroyEventType/0","type":"type"},{"doc":"This is the main class for interacting with the XML-based resource system. The class holds XML resources from one or more .xml files, binary files or zip archive files. Note that this is a singleton class and you'll never allocate/deallocate it. Just use the static get/0 getter. See: Overview xrc , Overview xrcformat wxWidgets docs: wxXmlResource","ref":"wxXmlResource.html","title":"wxXmlResource","type":"module"},{"doc":"","ref":"wxXmlResource.html#attachUnknownControl/3","title":"wxXmlResource.attachUnknownControl/3","type":"function"},{"doc":"Attaches an unknown control to the given panel/window/dialog. Unknown controls are used in conjunction with &lt;object class=&quot;unknown&quot;&gt;.","ref":"wxXmlResource.html#attachUnknownControl/4","title":"wxXmlResource.attachUnknownControl/4","type":"function"},{"doc":"Removes all handlers and deletes them (this means that any handlers added using AddHandler() (not implemented in wx) must be allocated on the heap).","ref":"wxXmlResource.html#clearHandlers/1","title":"wxXmlResource.clearHandlers/1","type":"function"},{"doc":"Compares the XRC version to the argument. Returns -1 if the XRC version is less than the argument, +1 if greater, and 0 if they are equal.","ref":"wxXmlResource.html#compareVersion/5","title":"wxXmlResource.compareVersion/5","type":"function"},{"doc":"Destructor.","ref":"wxXmlResource.html#destroy/1","title":"wxXmlResource.destroy/1","type":"function"},{"doc":"Gets the global resources object or creates one if none exists.","ref":"wxXmlResource.html#get/0","title":"wxXmlResource.get/0","type":"function"},{"doc":"Returns flags, which may be a bitlist of ?wxXmlResourceFlags enumeration values.","ref":"wxXmlResource.html#getFlags/1","title":"wxXmlResource.getFlags/1","type":"function"},{"doc":"Returns version information (a.b.c.d = d + 256*c + 2562*b + 2563*a).","ref":"wxXmlResource.html#getVersion/1","title":"wxXmlResource.getVersion/1","type":"function"},{"doc":"","ref":"wxXmlResource.html#getXRCID/1","title":"wxXmlResource.getXRCID/1","type":"function"},{"doc":"Returns a numeric ID that is equivalent to the string ID used in an XML resource. If an unknown str_id is requested (i.e. other than wxID_XXX or integer), a new record is created which associates the given string with a number. If value_if_not_found is wxID_NONE , the number is obtained via wx_misc:newId/0 . Otherwise value_if_not_found is used. Macro XRCID(name) is provided for convenient use in event tables. Note: IDs returned by XRCID() cannot be used with the EVT_*_RANGE macros, because the order in which they are assigned to symbolic name values is not guaranteed.","ref":"wxXmlResource.html#getXRCID/2","title":"wxXmlResource.getXRCID/2","type":"function"},{"doc":"Initializes handlers for all supported controls/windows. This will make the executable quite big because it forces linking against most of the wxWidgets library.","ref":"wxXmlResource.html#initAllHandlers/1","title":"wxXmlResource.initAllHandlers/1","type":"function"},{"doc":"Loads resources from XML files that match given filemask. Example: Note: If wxUSE_FILESYS is enabled, this method understands wxFileSystem (not implemented in wx) URLs (see wxFileSystem::FindFirst() (not implemented in wx)). Note: If you are sure that the argument is name of single XRC file (rather than an URL or a wildcard), use LoadFile() (not implemented in wx) instead. See: LoadFile() (not implemented in wx), LoadAllFiles() (not implemented in wx)","ref":"wxXmlResource.html#load/2","title":"wxXmlResource.load/2","type":"function"},{"doc":"Loads a bitmap resource from a file.","ref":"wxXmlResource.html#loadBitmap/2","title":"wxXmlResource.loadBitmap/2","type":"function"},{"doc":"Loads a dialog. parent points to parent window (if any).","ref":"wxXmlResource.html#loadDialog/3","title":"wxXmlResource.loadDialog/3","type":"function"},{"doc":"Loads a dialog. parent points to parent window (if any). This form is used to finish creation of an already existing instance (the main reason for this is that you may want to use derived class with a new event table). Example:","ref":"wxXmlResource.html#loadDialog/4","title":"wxXmlResource.loadDialog/4","type":"function"},{"doc":"Loads a frame from the resource. parent points to parent window (if any).","ref":"wxXmlResource.html#loadFrame/3","title":"wxXmlResource.loadFrame/3","type":"function"},{"doc":"Loads the contents of a frame onto an existing wxFrame . This form is used to finish creation of an already existing instance (the main reason for this is that you may want to use derived class with a new event table).","ref":"wxXmlResource.html#loadFrame/4","title":"wxXmlResource.loadFrame/4","type":"function"},{"doc":"Loads an icon resource from a file.","ref":"wxXmlResource.html#loadIcon/2","title":"wxXmlResource.loadIcon/2","type":"function"},{"doc":"Loads menu from resource. Returns NULL on failure.","ref":"wxXmlResource.html#loadMenu/2","title":"wxXmlResource.loadMenu/2","type":"function"},{"doc":"","ref":"wxXmlResource.html#loadMenuBar/2","title":"wxXmlResource.loadMenuBar/2","type":"function"},{"doc":"Loads a menubar from resource. Returns NULL on failure.","ref":"wxXmlResource.html#loadMenuBar/3","title":"wxXmlResource.loadMenuBar/3","type":"function"},{"doc":"Loads a panel. parent points to the parent window.","ref":"wxXmlResource.html#loadPanel/3","title":"wxXmlResource.loadPanel/3","type":"function"},{"doc":"Loads a panel. parent points to the parent window. This form is used to finish creation of an already existing instance.","ref":"wxXmlResource.html#loadPanel/4","title":"wxXmlResource.loadPanel/4","type":"function"},{"doc":"Loads a toolbar.","ref":"wxXmlResource.html#loadToolBar/3","title":"wxXmlResource.loadToolBar/3","type":"function"},{"doc":"","ref":"wxXmlResource.html#new/0","title":"wxXmlResource.new/0","type":"function"},{"doc":"Constructor.","ref":"wxXmlResource.html#new/1","title":"wxXmlResource.new/1","type":"function"},{"doc":"Constructor.","ref":"wxXmlResource.html#new/2","title":"wxXmlResource.new/2","type":"function"},{"doc":"Sets the global resources object and returns a pointer to the previous one (may be NULL).","ref":"wxXmlResource.html#set/1","title":"wxXmlResource.set/1","type":"function"},{"doc":"Sets flags (bitlist of ?wxXmlResourceFlags enumeration values).","ref":"wxXmlResource.html#setFlags/2","title":"wxXmlResource.setFlags/2","type":"function"},{"doc":"This function unloads a resource previously loaded by load/2 . Returns true if the resource was successfully unloaded and false if it hasn't been found in the list of loaded resources.","ref":"wxXmlResource.html#unload/2","title":"wxXmlResource.unload/2","type":"function"},{"doc":"Looks up a control. Get a control with Name in a window created with XML resources. You can use it to set/get values from controls. The object is type casted to Type . Example:","ref":"wxXmlResource.html#xrcctrl/3","title":"wxXmlResource.xrcctrl/3","type":"function"},{"doc":"","ref":"wxXmlResource.html#t:wxXmlResource/0","title":"wxXmlResource.wxXmlResource/0","type":"type"},{"doc":"Miscellaneous functions.","ref":"wx_misc.html","title":"wx_misc","type":"module"},{"doc":"","ref":"wx_misc.html#beginBusyCursor/0","title":"wx_misc.beginBusyCursor/0","type":"function"},{"doc":"Changes the cursor to the given cursor for all windows in the application. Use endBusyCursor/0 to revert the cursor back to its previous state. These two calls can be nested, and a counter ensures that only the outer calls take effect. See: isBusy/0 , wxBusyCursor (not implemented in wx)","ref":"wx_misc.html#beginBusyCursor/1","title":"wx_misc.beginBusyCursor/1","type":"function"},{"doc":"Ring the system bell. Note: This function is categorized as a GUI one and so is not thread-safe.","ref":"wx_misc.html#bell/0","title":"wx_misc.bell/0","type":"function"},{"doc":"Returns the display size in pixels. Note: Use of this function is not recommended in the new code as it only works for the primary display. Use wxDisplay:getGeometry/1 to retrieve the size of the appropriate display instead. Either of output pointers can be NULL if the caller is not interested in the corresponding value. See: wxGetDisplaySize() (not implemented in wx), wxDisplay","ref":"wx_misc.html#displaySize/0","title":"wx_misc.displaySize/0","type":"function"},{"doc":"Changes the cursor back to the original cursor, for all windows in the application. Use with beginBusyCursor/1 . See: isBusy/0 , wxBusyCursor (not implemented in wx)","ref":"wx_misc.html#endBusyCursor/0","title":"wx_misc.endBusyCursor/0","type":"function"},{"doc":"Find a menu item identifier associated with the given frame's menu bar.","ref":"wx_misc.html#findMenuItemId/3","title":"wx_misc.findMenuItemId/3","type":"function"},{"doc":"Find the deepest window at the given mouse position in screen coordinates, returning the window if found, or NULL if not. This function takes child windows at the given position into account even if they are disabled. The hidden children are however skipped by it.","ref":"wx_misc.html#findWindowAtPoint/1","title":"wx_misc.findWindowAtPoint/1","type":"function"},{"doc":"Returns the current id.","ref":"wx_misc.html#getCurrentId/0","title":"wx_misc.getCurrentId/0","type":"function"},{"doc":"Copies the user's email address into the supplied buffer, by concatenating the values returned by wxGetFullHostName() (not implemented in wx) and getUserId/0 . Return: true if successful, false otherwise.","ref":"wx_misc.html#getEmailAddress/0","title":"wx_misc.getEmailAddress/0","type":"function"},{"doc":"Return the (current) user's home directory. See: wxGetUserHome() (not implemented in wx), wxStandardPaths (not implemented in wx)","ref":"wx_misc.html#getHomeDir/0","title":"wx_misc.getHomeDir/0","type":"function"},{"doc":"For normal keys, returns true if the specified key is currently down. For togglable keys (Caps Lock, Num Lock and Scroll Lock), returns true if the key is toggled such that its LED indicator is lit. There is currently no way to test whether togglable keys are up or down. Even though there are virtual key codes defined for mouse buttons, they cannot be used with this function currently. In wxGTK, this function can be only used with modifier keys ( WXK_ALT , WXK_CONTROL and WXK_SHIFT ) when not using X11 backend currently.","ref":"wx_misc.html#getKeyState/1","title":"wx_misc.getKeyState/1","type":"function"},{"doc":"Returns the mouse position in screen coordinates.","ref":"wx_misc.html#getMousePosition/0","title":"wx_misc.getMousePosition/0","type":"function"},{"doc":"Returns the current state of the mouse. Returns a wx_wxMouseState() instance that contains the current position of the mouse pointer in screen coordinates, as well as boolean values indicating the up/down status of the mouse buttons and the modifier keys.","ref":"wx_misc.html#getMouseState/0","title":"wx_misc.getMouseState/0","type":"function"},{"doc":"Returns the string containing the description of the current platform in a user-readable form. For example, this function may return strings like &quot;Windows 10 (build 10240), 64-bit edition&quot; or &quot;Linux 4.1.4 i386&quot;. See: wxGetOsVersion() (not implemented in wx)","ref":"wx_misc.html#getOsDescription/0","title":"wx_misc.getOsDescription/0","type":"function"},{"doc":"This function returns the &quot;user id&quot; also known as &quot;login name&quot; under Unix (i.e. something like &quot;jsmith&quot;). It uniquely identifies the current user (on this system). Under Windows or NT, this function first looks in the environment variables USER and LOGNAME; if neither of these is found, the entry UserId in the wxWidgets section of the WIN.INI file is tried. Return: The login name if successful or an empty string otherwise. See: wxGetUserName() (not implemented in wx)","ref":"wx_misc.html#getUserId/0","title":"wx_misc.getUserId/0","type":"function"},{"doc":"Returns true if between two beginBusyCursor/1 and endBusyCursor/0 calls. See: wxBusyCursor (not implemented in wx)","ref":"wx_misc.html#isBusy/0","title":"wx_misc.isBusy/0","type":"function"},{"doc":"Returns true if the operating system the program is running under is 64 bit. The check is performed at run-time and may differ from the value available at compile-time (at compile-time you can just check if sizeof(void*) == 8 ) since the program could be running in emulation mode or in a mixed 32/64 bit system (bi-architecture operating system). Note: This function is not 100% reliable on some systems given the fact that there isn't always a standard way to do a reliable check on the OS architecture.","ref":"wx_misc.html#isPlatform64Bit/0","title":"wx_misc.isPlatform64Bit/0","type":"function"},{"doc":"Returns true if the current platform is little endian (instead of big endian). The check is performed at run-time.","ref":"wx_misc.html#isPlatformLittleEndian/0","title":"wx_misc.isPlatformLittleEndian/0","type":"function"},{"doc":"","ref":"wx_misc.html#launchDefaultBrowser/1","title":"wx_misc.launchDefaultBrowser/1","type":"function"},{"doc":"Opens the url in user's default browser. If the flags parameter contains wxBROWSER_NEW_WINDOW flag, a new window is opened for the URL (currently this is only supported under Windows). And unless the flags parameter contains wxBROWSER_NOBUSYCURSOR flag, a busy cursor is shown while the browser is being launched (using wxBusyCursor (not implemented in wx)). The parameter url is interpreted as follows: Returns true if the application was successfully launched. Note: For some configurations of the running user, the application which is launched to open the given URL may be URL-dependent (e.g. a browser may be used for local URLs while another one may be used for remote URLs). See: wxLaunchDefaultApplication() (not implemented in wx), wxExecute() (not implemented in wx)","ref":"wx_misc.html#launchDefaultBrowser/2","title":"wx_misc.launchDefaultBrowser/2","type":"function"},{"doc":"Deprecated: Ids generated by it can conflict with the Ids defined by the user code, use wxID_ANY to assign ids which are guaranteed to not conflict with the user-defined ids for the controls and menu items you create instead of using this function. Generates an integer identifier unique to this run of the program.","ref":"wx_misc.html#newId/0","title":"wx_misc.newId/0","type":"function"},{"doc":"Ensures that Ids subsequently generated by newId/0 do not clash with the given id .","ref":"wx_misc.html#registerId/1","title":"wx_misc.registerId/1","type":"function"},{"doc":"Globally sets the cursor; only has an effect on Windows, Mac and GTK+. You should call this function with wxNullCursor to restore the system cursor. See: wxCursor , wxWindow:setCursor/2","ref":"wx_misc.html#setCursor/1","title":"wx_misc.setCursor/1","type":"function"},{"doc":"Don't synthesize KeyUp events holding down a key and producing KeyDown events with autorepeat. On by default and always on in wxMSW.","ref":"wx_misc.html#setDetectableAutoRepeat/1","title":"wx_misc.setDetectableAutoRepeat/1","type":"function"},{"doc":"","ref":"wx_misc.html#shell/0","title":"wx_misc.shell/0","type":"function"},{"doc":"Executes a command in an interactive shell window. If no command is specified, then just the shell is spawned. See: wxExecute() (not implemented in wx), Examples","ref":"wx_misc.html#shell/1","title":"wx_misc.shell/1","type":"function"},{"doc":"","ref":"wx_misc.html#shutdown/0","title":"wx_misc.shutdown/0","type":"function"},{"doc":"This function shuts down or reboots the computer depending on the value of the flags . Note: Note that performing the shutdown requires the corresponding access rights (superuser under Unix, SE_SHUTDOWN privilege under Windows) and that this function is only implemented under Unix and MSW. Return: true on success, false if an error occurred.","ref":"wx_misc.html#shutdown/1","title":"wx_misc.shutdown/1","type":"function"},{"doc":"wx_object - Generic wx object behaviour This is a behaviour module that can be used for &quot;sub classing&quot; wx objects. It works like a regular gen_server module and creates a server per object. NOTE: Currently no form of inheritance is implemented. The user module should export: init(Args) should return {wxObject, State} | {wxObject, State, Timeout} | ignore | {stop, Reason} Asynchronous window event handling: handle_event(#wx{}, State) should return {noreply, State} | {noreply, State, Timeout} | {stop, Reason, State} The user module can export the following callback functions: handle_call(Msg, {From, Tag}, State) should return {reply, Reply, State} | {reply, Reply, State, Timeout} | {noreply, State} | {noreply, State, Timeout} | {stop, Reason, Reply, State} handle_cast(Msg, State) should return {noreply, State} | {noreply, State, Timeout} | {stop, Reason, State} If the above are not exported but called, the wx_object process will crash. The user module can also export: Info is message e.g. {'EXIT', P, R}, {nodedown, N}, ... handle_info(Info, State) should return , ... {noreply, State} | {noreply, State, Timeout} | {stop, Reason, State} If a message is sent to the wx_object process when handle_info is not exported, the message will be dropped and ignored. When stop is returned in one of the functions above with Reason = normal | shutdown | Term, terminate(State) is called. It lets the user module clean up, it is always called when server terminates or when wx_object() in the driver is deleted. If the Parent process terminates the Module:terminate/2 function is called. terminate(Reason, State) Example: - module ( myDialog ) . - export ( [ new / 2 , show / 1 , destroy / 1 ] ) . %% API - export ( [ init / 1 , handle_call / 3 , handle_event / 2 , handle_info / 2 , code_change / 3 , terminate / 2 ] ) . new / 2 , showModal / 1 , destroy / 1 ] ) . %% Callbacks %% Client API new ( Parent , Msg ) -&gt; wx_object : start ( ? MODULE , [ Parent , Id ] , [ ] ) . show ( Dialog ) -&gt; wx_object : call ( Dialog , show_modal ) . destroy ( Dialog ) -&gt; wx_object : call ( Dialog , destroy ) . %% Server Implementation ala gen_server init ( [ Parent , Str ] ) -&gt; Dialog = wxDialog : new ( Parent , 42 , &quot;Testing&quot; , [ ] ) , . . . wxDialog : connect ( Dialog , command_button_clicked ) , { Dialog , MyState } . handle_call ( show , _ From , State ) -&gt; wxDialog : show ( State # state . win ) , { reply , ok , State } ; . . . handle_event ( # wx { } , State ) -&gt; io : format ( &quot;Users clicked button ~n &quot; , [ ] ) , { noreply , State } ; . . . DATA TYPES request_id() = term() server_ref() = wx:wx_object() | atom() | pid()","ref":"wx_object.html","title":"wx_object","type":"behaviour"},{"doc":"Obj = wx:wx_object() | atom() | pid() Request = term() Make a call to a wx_object server. The call waits until it gets a result. Invokes handle_call(Request, From, State) in the server","ref":"wx_object.html#call/2","title":"wx_object.call/2","type":"function"},{"doc":"Obj = wx:wx_object() | atom() | pid() Request = term() Timeout = integer() Make a call to a wx_object server with a timeout. Invokes handle_call(Request, From, State) in server","ref":"wx_object.html#call/3","title":"wx_object.call/3","type":"function"},{"doc":"Obj = wx:wx_object() | atom() | pid() Request = term() Make a cast to a wx_object server. Invokes handle_cast(Request, State) in the server","ref":"wx_object.html#cast/2","title":"wx_object.cast/2","type":"function"},{"doc":"Check if a received message was a reply to a RequestId","ref":"wx_object.html#check_response/2","title":"wx_object.check_response/2","type":"function"},{"doc":"Obj = wx:wx_object() | atom() | pid() Get the pid of the object handle.","ref":"wx_object.html#get_pid/1","title":"wx_object.get_pid/1","type":"function"},{"doc":"Get the pid of the object handle.","ref":"wx_object.html#reply/2","title":"wx_object.reply/2","type":"function"},{"doc":"Obj = wx:wx_object() | atom() | pid() Make an send_request to a generic server. and return a RequestId which can/should be used with wait_response/[1|2]. Invokes handle_call(Request, From, State) in server.","ref":"wx_object.html#send_request/2","title":"wx_object.send_request/2","type":"function"},{"doc":"Obj = wx:wx_object() | atom() | pid() Sets the controlling process of the object handle.","ref":"wx_object.html#set_pid/2","title":"wx_object.set_pid/2","type":"function"},{"doc":"Name = {local, atom()} Mod = atom() Args = term() Flag = trace | log | {logfile, string()} | statistics | debug Options = [{timeout, timeout()} | {debug, [Flag]}] Starts a generic wx_object server and invokes Mod:init(Args) in the new process.","ref":"wx_object.html#start/4","title":"wx_object.start/4","type":"function"},{"doc":"Mod = atom() Args = term() Flag = trace | log | {logfile, string()} | statistics | debug Options = [{timeout, timeout()} | {debug, [Flag]}] Starts a generic wx_object server and invokes Mod:init(Args) in the new process.","ref":"wx_object.html#start_link/3","title":"wx_object.start_link/3","type":"function"},{"doc":"Name = {local, atom()} Mod = atom() Args = term() Flag = trace | log | {logfile, string()} | statistics | debug Options = [{timeout, timeout()} | {debug, [Flag]}] Starts a generic wx_object server and invokes Mod:init(Args) in the new process.","ref":"wx_object.html#start_link/4","title":"wx_object.start_link/4","type":"function"},{"doc":"Obj = wx:wx_object() | atom() | pid() Stops a generic wx_object server with reason 'normal'. Invokes terminate(Reason,State) in the server. The call waits until the process is terminated. If the process does not exist, an exception is raised.","ref":"wx_object.html#stop/1","title":"wx_object.stop/1","type":"function"},{"doc":"Obj = wx:wx_object() | atom() | pid() Reason = term() Timeout = timeout() Stops a generic wx_object server with the given Reason. Invokes terminate(Reason,State) in the server. The call waits until the process is terminated. If the call times out, or if the process does not exist, an exception is raised.","ref":"wx_object.html#stop/3","title":"wx_object.stop/3","type":"function"},{"doc":"Wait infinitely for a reply from a generic server.","ref":"wx_object.html#wait_response/1","title":"wx_object.wait_response/1","type":"function"},{"doc":"Wait 'timeout' for a reply from a generic server.","ref":"wx_object.html#wait_response/2","title":"wx_object.wait_response/2","type":"function"}]