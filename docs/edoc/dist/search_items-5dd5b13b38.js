searchNodes=[{"doc":"EDoc - the Erlang program documentation generator. This module provides the main user interface to EDoc. EDoc User Manual Running EDoc DATA TYPES comment() = erl_comment_scan:comment() edoc_module() = xmerl_scan:xmlElement() The EDoc documentation data for a module, expressed as an XML document in XMerL format. See the file edoc.dtd for details. entry() = #entry{name= function_name() | atom(), args=[atom() | list()], line=integer(), export=boolean(), data= entry_data() } Module Entries (one per function, plus module header and footer). entry_data() = term() env() = #env{} Environment information needed by EDoc for generating references. filename() = file:filename() function_name() = {atom(), integer()} module_meta() = #module{name=[] | atom(), parameters=none | [atom()], functions=ordset( function_name() ), exports=ordset( function_name() ), attributes= ordset({atom(), term()}) , records=[{atom(), [{atom(), term()}]}], encoding= epp:source_encoding() , file= file:filename() } Module information. ordset(T) = ordsets:ordset(T) proplist() = proplists:proplist() syntaxTree() = erl_syntax:syntaxTree() tag() = #tag{name=atom(), line=integer(), origin=comment | code, data=term(), form=undefined | erl_parse:abstract_form() } Generic tag information. #tag.form is only defined if #tag.origin is code , that is the #tag{} represents a code fragment, not a doc comment tag.","ref":"edoc.html","title":"edoc","type":"module"},{"doc":"Equivalent to application(Application, []) .","ref":"edoc.html#application/1","title":"edoc.application/1","type":"function"},{"doc":"App = atom() Options = proplist() Run EDoc on an application in its default app-directory. See application/3 for details. See also: application/1 .","ref":"edoc.html#application/2","title":"edoc.application/2","type":"function"},{"doc":"App = atom() Dir = filename() Options = proplist() Run EDoc on an application located in the specified directory. Tries to automatically set up good defaults. Unless the user specifies otherwise: The doc subdirectory will be used as the target directory, if it exists; otherwise the application directory is used. The source code is assumed to be located in the src subdirectory, if it exists, or otherwise in the application directory itself. The subpackages option is turned on. All found source files will be processed. The include subdirectory is automatically added to the include path. (Only important if preprocessing is turned on.) See run/2 for details, including options. See also: application/2 .","ref":"edoc.html#application/3","title":"edoc.application/3","type":"function"},{"doc":"This function is deprecated: See file/2 for details. Equivalent to file(Name, []) .","ref":"edoc.html#file/1","title":"edoc.file/1","type":"function"},{"doc":"Name = filename() Options = proplist() This function is deprecated: This is part of the old interface to EDoc and is mainly kept for backwards compatibility. The preferred way of generating documentation is through one of the functions application/2 and files/2 . Reads a source code file and outputs formatted documentation to a corresponding file. Options: {dir, filename()} Specifies the output directory for the created file. (By default, the output is written to the directory of the source file.) {source_suffix, string()} Specifies the expected suffix of the input file. The default value is &quot;.erl&quot; . {file_suffix, string()} Specifies the suffix for the created file. The default value is &quot;.html&quot; . See get_doc/2 and layout/2 for further options. For running EDoc from a Makefile or similar, see edoc_run:file/1 . See also: read/2 .","ref":"edoc.html#file/2","title":"edoc.file/2","type":"function"},{"doc":"","ref":"edoc.html#files/1","title":"edoc.files/1","type":"function"},{"doc":"Files = [ filename() ] Options = proplist() Runs EDoc on a given set of source files. See run/2 for details, including options.","ref":"edoc.html#files/2","title":"edoc.files/2","type":"function"},{"doc":"Equivalent to get_doc(File, []) .","ref":"edoc.html#get_doc/1","title":"edoc.get_doc/1","type":"function"},{"doc":"File = filename() Options = proplist() R = {module(), edoc_module() } | {module(), edoc_module() , [ entry() ]} Reads a source code file and extracts EDoc documentation data. Note that without an environment parameter (see get_doc/3 ), hypertext links may not be correct. Options: {def, Macros} Macros = Macro | [Macro] Macro = {Name::atom(), Text::string() | MacroFun} MacroFun = fun((MacroArgument::string(), Line::integer(), edoc_lib:edoc_env()) -&gt; (Text::string())) Specifies a set of user-defined EDoc macros. The text substituted for macro calls is specified as either a string() or a function() . The function is called with the macro argument text, the current line number, and the current environment. The fun is to return a string() . See Macro expansion for details. {hidden, boolean()} If the value is true , documentation of hidden functions will also be included. The default value is false . {private, boolean()} If the value is true , documentation of private functions will also be included. The default value is false . {todo, boolean()} If the value is true , To-Do notes written using @todo or @TODO tags will be included in the documentation. The default value is false . See read_source/2 , read_comments/2 and edoc_lib:get_doc_env/3 for further options. See also: get_doc/3 , layout/2 , read/2 , run/2 , edoc_extract:source/5 .","ref":"edoc.html#get_doc/2","title":"edoc.get_doc/2","type":"function"},{"doc":"File = filename() Env = env() Options = proplist() R = {module(), edoc_module() } | {module(), edoc_module() , [ entry() ]} Like get_doc/2 , but for a given environment parameter. Env is an environment created by edoc_lib:get_doc_env/3 .","ref":"edoc.html#get_doc/3","title":"edoc.get_doc/3","type":"function"},{"doc":"Equivalent to layout(Doc, []) .","ref":"edoc.html#layout/1","title":"edoc.layout/1","type":"function"},{"doc":"Doc = edoc_module() Opts = proplist() Transforms EDoc module documentation data to text. The default layout creates an HTML document. Options: {layout, Module::atom()} Specifies a callback module to be used for formatting. The module must export a function module(Doc, Options) . The default callback module is edoc_layout ; see edoc_layout:module/2 for layout-specific options. See also: file/2 , layout/1 , read/2 , run/2 .","ref":"edoc.html#layout/2","title":"edoc.layout/2","type":"function"},{"doc":"Equivalent to read(File, []) .","ref":"edoc.html#read/1","title":"edoc.read/1","type":"function"},{"doc":"File = filename() Opts = proplist() Reads and processes a source file and returns the resulting EDoc-text as a string. See get_doc/2 and layout/2 for options. See also: file/2 .","ref":"edoc.html#read/2","title":"edoc.read/2","type":"function"},{"doc":"Equivalent to read_comments(File, []) .","ref":"edoc.html#read_comments/1","title":"edoc.read_comments/1","type":"function"},{"doc":"File = filename() Opts = proplist() Extracts comments from an Erlang source code file. See the module erl_comment_scan(3) for details on the representation of comments. Currently, no options are avaliable.","ref":"edoc.html#read_comments/2","title":"edoc.read_comments/2","type":"function"},{"doc":"Equivalent to read_source(File, []) .","ref":"edoc.html#read_source/1","title":"edoc.read_source/1","type":"function"},{"doc":"File = filename() Opts = proplist() Reads an Erlang source file and returns the list of &quot;source code form&quot; syntax trees. Options: {preprocess, boolean()} If the value is true , the source file will be read via the Erlang preprocessor ( epp ). The default value is false . no_preprocess is an alias for {preprocess, false} . Normally, preprocessing is not necessary for EDoc to work, but if a file contains too exotic definitions or uses of macros, it will not be possible to read it without preprocessing. Note: comments in included files will not be available to EDoc, even with this option enabled. {includes, Path::[string()]} Specifies a list of directory names to be searched for include files, if the preprocess option is turned on. Also used with the @headerfile tag. The default value is the empty list. The directory of the source file is always automatically appended to the search path. {macros, [{atom(), term()}]} Specifies a list of pre-defined Erlang preprocessor ( epp ) macro definitions, used if the preprocess option is turned on. The default value is the empty list. {report_missing_types, boolean()} If the value is true , warnings are issued for missing types. The default value is false . no_report_missing_types is an alias for {report_missing_types, false} . See also: erl_syntax(3) , get_doc/2 .","ref":"edoc.html#read_source/2","title":"edoc.read_source/2","type":"function"},{"doc":"Files = [ filename() ] Opts = proplist() Runs EDoc on a given set of source files. Note that the doclet plugin module has its own particular options; see the doclet option below. Also see layout/2 for layout-related options, and get_doc/2 for options related to reading source files. Options: {app_default, string()} Specifies the default base URI for unknown applications. {application, App::atom()} Specifies that the generated documentation describes the application App . This mainly affects generated references. {dir, filename()} Specifies the target directory for the generated documentation. {doc_path, [string()]} Specifies a list of file system paths pointing to directories that contain EDoc-generated documentation. All paths for applications in the code path are automatically added. {doclet, Module::atom()} Specifies a callback module to be used for creating the documentation. The module must export a function run(Cmd, Ctxt) . The default doclet module is edoc_doclet ; see edoc_doclet:run/2 for doclet-specific options. {file_suffix, string()} Specifies the suffix used for output files. The default value is &quot;.html&quot; . Note that this also affects generated references. {new, boolean()} If the value is true , any existing edoc-info file in the target directory will be ignored and overwritten. The default value is false . {source_path, [filename()]} Specifies a list of file system paths used to locate the source code for packages. {source_suffix, string()} Specifies the expected suffix of input files. The default value is &quot;.erl&quot; . {subpackages, boolean()} If the value is true , all subpackages of specified packages will also be included in the documentation. The default value is false . no_subpackages is an alias for {subpackages, false} . Subpackage source files are found by recursively searching for source code files in subdirectories of the known source code root directories. (Also see the source_path option.) Directory names must begin with a lowercase letter and contain only alphanumeric characters and underscore, or they will be ignored. (For example, a subdirectory named test-files will not be searched.) See also: application/2 , files/2 .","ref":"edoc.html#run/2","title":"edoc.run/2","type":"function"},{"doc":"Standard doclet module for EDoc. DATA TYPES command() = doclet_gen() | doclet_toc() Doclet commands. context() = #doclet_context{dir=string(), env= edoc:env() , opts=[term()]} Context for doclets. doclet_gen() = #doclet_gen{sources=[string()], app=no_app | atom(), modules=[module()]} Doclet command. doclet_toc() = #doclet_toc{paths=[string()], indir=string()} Doclet command. See also edoc","ref":"edoc_doclet.html","title":"edoc_doclet","type":"behaviour"},{"doc":"Main doclet entry point. See the file edoc_doclet.hrl for the data structures used for passing parameters. Also see edoc:layout/2 for layout-related options, and edoc:get_doc/2 for options related to reading source files. Options: {file_suffix, string()} Specifies the suffix used for output files. The default value is &quot;.html&quot; . {hidden, boolean()} If the value is true , documentation of hidden modules and functions will also be included. The default value is false . {overview, edoc:filename()} Specifies the name of the overview-file. By default, this doclet looks for a file &quot;overview.edoc&quot; in the target directory. {private, boolean()} If the value is true , documentation of private modules and functions will also be included. The default value is false . {stylesheet, string()} Specifies the URI used for referencing the stylesheet. The default value is &quot;stylesheet.css&quot; . If an empty string is specified, no stylesheet reference will be generated. {stylesheet_file, edoc:filename()} Specifies the name of the stylesheet file. By default, this doclet uses the file &quot;stylesheet.css&quot; in the priv subdirectory of the EDoc installation directory. The named file will be copied to the target directory. {title, string()} Specifies the title of the overview-page.","ref":"edoc_doclet.html#run/2","title":"edoc_doclet.run/2","type":"function"},{"doc":"Doclet generating standalone EEP-48 doc chunk files. Section Using the EDoc API in the EDoc User's Guide shows an example of using this module. See also edoc_layout_chunks , shell_docs(3)","ref":"edoc_doclet_chunks.html","title":"edoc_doclet_chunks","type":"module"},{"doc":"Main doclet entry point. This doclet is tightly coupled with edoc_layout_chunks and should be used together with it. The only option this doclet accepts is dir , which controls where the chunks subdirectory and the EEP-48 chunk files will be placed.","ref":"edoc_doclet_chunks.html#run/2","title":"edoc_doclet_chunks.run/2","type":"function"},{"doc":"EDoc documentation extraction. DATA TYPES context() = module | footer | function | overview | single filename() = file:filename() proplist() = proplists:proplist() See also edoc","ref":"edoc_extract.html","title":"edoc_extract","type":"module"},{"doc":"File = filename() Context = context() Env = edoc:env() Opts = proplist() Tags = [term()] Reason = term() Reads a text file and returns the list of tags in the file. Any lines of text before the first tag are ignored. Env is an environment created by edoc_lib:get_doc_env/3 . Upon error, Reason is an atom returned from the call to file:read_file/1 or the atom 'invalid_unicode'. See text/4 for options.","ref":"edoc_extract.html#file/4","title":"edoc_extract.file/4","type":"function"},{"doc":"File = filename() Env = edoc:env() Opts = proplist() Similar to header/5 , but reads the syntax tree and the comments from the specified file. See also: header/4 , edoc:read_comments/2 , edoc:read_source/2 .","ref":"edoc_extract.html#header/3","title":"edoc_extract.header/3","type":"function"},{"doc":"Forms = erl_syntax:forms() File = filename() Env = edoc:env() Opts = proplist() Extracts EDoc documentation from commented header file syntax trees. Similar to source/5 , but ignores any documentation that occurs before a module declaration or a function definition. (Warning messages are printed if content may be ignored.) Env is assumed to already be set up with a suitable module context. See also: erl_recomment(3) , header/5 .","ref":"edoc_extract.html#header/4","title":"edoc_extract.header/4","type":"function"},{"doc":"Forms = erl_syntax:forms() Comments = [ edoc:comment() ] File = filename() Env = edoc:env() Opts = proplist() Similar to header/4 , but first inserts the given comments in the syntax trees. The syntax trees must contain valid position information. (Cf. edoc:read_comments/2 .) See also: erl_recomment(3) , header/3 , header/4 .","ref":"edoc_extract.html#header/5","title":"edoc_extract.header/5","type":"function"},{"doc":"File = filename() Env = edoc:env() Opts = proplist() R = {module(), edoc:edoc_module() } | {module(), edoc:edoc_module() , [ edoc:entry() ]} Like source/5 , but reads the syntax tree and the comments from the specified file. See also: source/4 , edoc:read_comments/2 , edoc:read_source/2 .","ref":"edoc_extract.html#source/3","title":"edoc_extract.source/3","type":"function"},{"doc":"Forms = erl_syntax:forms() File = filename() Env = edoc:env() Opts = proplist() R = {module(), edoc:edoc_module() } | {module(), edoc:edoc_module() , [ edoc:entry() ]} Extracts EDoc documentation from commented source code syntax trees. The given Forms must be a single syntax tree of type form_list , or a list of syntax trees representing &quot;program forms&quot; (cf. edoc:read_source/2 . Env is an environment created by edoc_lib:get_doc_env/3 . The File argument is used for error reporting and output file name generation only. See edoc:get_doc/2 for descriptions of the def , hidden , private , and todo options. See also: erl_recomment(3) , source/5 , edoc:read_comments/2 , edoc:read_source/2 .","ref":"edoc_extract.html#source/4","title":"edoc_extract.source/4","type":"function"},{"doc":"Forms = erl_syntax:forms() Comments = [ edoc:comment() ] File = filename() Env = edoc:env() Opts = proplist() R = {module(), edoc:edoc_module() } | {module(), edoc:edoc_module() , [ edoc:entry() ]} Like source/4 , but first inserts the given comments in the syntax trees. The syntax trees must contain valid position information. (Cf. edoc:read_comments/2 .) See also: erl_recomment(3) , source/3 , source/4 , edoc:read_comments/2 , edoc:read_source/2 .","ref":"edoc_extract.html#source/5","title":"edoc_extract.source/5","type":"function"},{"doc":"Text = string() Context = context() Env = edoc:env() Opts = proplist() Tags = [term()] Returns the list of tags in the text. Any lines of text before the first tag are ignored. Env is an environment created by edoc_lib:get_doc_env/3 . See source/4 for a description of the def option.","ref":"edoc_extract.html#text/4","title":"edoc_extract.text/4","type":"function"},{"doc":"The standard HTML layout module for EDoc. See the edoc module for details on usage. See also edoc","ref":"edoc_layout.html","title":"edoc_layout","type":"behaviour"},{"doc":"The layout function. Options to the standard layout: {index_columns, integer()} Specifies the number of column pairs used for the function index tables. The default value is 1. {pretty_printer, atom()} Specifies how types and specifications are pretty printed. If the value erl_pp is specified the Erlang pretty printer (the module erl_pp ) will be used. The default is to do no pretty printing which implies that lines can be very long. {stylesheet, string()} Specifies the URI used for referencing the stylesheet. The default value is &quot;stylesheet.css&quot; . If an empty string is specified, no stylesheet reference will be generated. {sort_functions, boolean()} If true , the detailed function descriptions are listed by name, otherwise they are listed in the order of occurrence in the source file. The default value is true . {xml_export, Module::atom()} Specifies an xmerl callback module to be used for exporting the documentation. See xmerl:export_simple/3 for details. See also: edoc:layout/2 .","ref":"edoc_layout.html#module/2","title":"edoc_layout.module/2","type":"function"},{"doc":"","ref":"edoc_layout.html#overview/2","title":"edoc_layout.overview/2","type":"function"},{"doc":"","ref":"edoc_layout.html#type/1","title":"edoc_layout.type/1","type":"function"},{"doc":"Convert EDoc module documentation to an EEP-48 docs_v1 chunk. This layout is only expected to work with edoc_doclet_chunks . Section Using the EDoc API in the EDoc User's Guide shows an example of using this module. This module breaks the convention stated in edoc_doclet to not rely on edoc.hrl in doclets and layouts. It uses #entry{} records directly to recover information that is not otherwise available to layouts. DATA TYPES beam_language() = atom() doc() = \#{ doc_language() =&gt; doc_string() } | none | hidden doc_language() = binary() doc_string() = binary() docs_v1() = #docs_v1{anno= erl_anno:anno() , beam_language= beam_language() , format= mime_type() , module_doc= doc() , metadata= metadata() , docs=[ docs_v1_entry() ]} The Docs v1 chunk according to EEP 48. docs_v1_entry() = {_KindNameArity::{atom(), atom(), arity()}, _Anno:: erl_anno:anno() , _Signature:: signature() , _Doc:: doc() , _Metadata:: metadata() } A tuple equivalent to the #docs_v1_entry{} record, but with the record name field skipped. metadata() = map() mime_type() = binary() signature() = [binary()] See also edoc_doclet_chunks , shell_docs(3)","ref":"edoc_layout_chunks.html","title":"edoc_layout_chunks","type":"module"},{"doc":"Convert EDoc module documentation to an EEP-48 style doc chunk.","ref":"edoc_layout_chunks.html#module/2","title":"edoc_layout_chunks.module/2","type":"function"},{"doc":"Utility functions for EDoc. DATA TYPES proplist() = proplists:proplist() See also edoc","ref":"edoc_lib.html","title":"edoc_lib","type":"module"},{"doc":"App = atom() | no_app Modules = [module()] Options = proplist() Creates an environment data structure used by parts of EDoc for generating references, etc. See edoc:run/2 for a description of the options file_suffix , app_default and doc_path . See also: edoc:get_doc/3 , edoc_extract:source/4 .","ref":"edoc_lib.html#get_doc_env/3","title":"edoc_lib.get_doc_env/3","type":"function"},{"doc":"Infer application containing the given module. It's expected that modules which are not preloaded and don't match the &lt;app&gt;/ebin/&lt;mod&gt;.beam path pattern will NOT have an app name inferred properly. no_app is returned in such cases.","ref":"edoc_lib.html#infer_module_app/1","title":"edoc_lib.infer_module_app/1","type":"function"},{"doc":"","ref":"edoc_lib.html#write_file/4","title":"edoc_lib.write_file/4","type":"function"},{"doc":"Interface for calling EDoc from Erlang startup options. The following is an example of typical usage in a Makefile: docs : erl - noshell - run edoc_run application &quot;&#39;$(APP_NAME)&#39;&quot; \\ &#39;&quot;.&quot;&#39; &#39;[{def,{vsn,&quot;$(VSN)&quot;}}]&#39; (note the single-quotes to avoid shell expansion, and the double-quotes enclosing the strings). New feature in version 0.6.9 : It is no longer necessary to write -s init stop last on the command line in order to make the execution terminate. The termination (signalling success or failure to the operating system) is now built into these functions. DATA TYPES args() = [string()] See also edoc","ref":"edoc_run.html","title":"edoc_run","type":"module"},{"doc":"Calls edoc:application/3 with the corresponding arguments. The strings in the list are parsed as Erlang constant terms. The list can be either [App] , [App, Options] or [App, Dir, Options] . In the first case edoc:application/1 is called instead; in the second case, edoc:application/2 is called. The function call never returns; instead, the emulator is automatically terminated when the call has completed, signalling success or failure to the operating system.","ref":"edoc_run.html#application/1","title":"edoc_run.application/1","type":"function"},{"doc":"This function is deprecated: This is part of the old interface to EDoc and is mainly kept for backwards compatibility. The preferred way of generating documentation is through one of the functions application/1 and files/1 . Calls edoc:file/2 with the corresponding arguments. The strings in the list are parsed as Erlang constant terms. The list can be either [File] or [File, Options] . In the first case, an empty list of options is passed to edoc:file/2 . The following is an example of typical usage in a Makefile: $( DOCDIR ) / %.html:%.erl erl - noshell - run edoc_run file &#39;&quot;$&lt;&quot;&#39; &#39;[{dir,&quot;$(DOCDIR)&quot;}]&#39; \\ - s init stop The function call never returns; instead, the emulator is automatically terminated when the call has completed, signalling success or failure to the operating system.","ref":"edoc_run.html#file/1","title":"edoc_run.file/1","type":"function"},{"doc":"Calls edoc:files/2 with the corresponding arguments. The strings in the list are parsed as Erlang constant terms. The list can be either [Files] or [Files, Options] . In the first case, edoc:files/1 is called instead. The function call never returns; instead, the emulator is automatically terminated when the call has completed, signalling success or failure to the operating system.","ref":"edoc_run.html#files/1","title":"edoc_run.files/1","type":"function"}]